/** 
 * Kendo UI v2016.2.714 (http://www.telerik.com/kendo-ui)                                                                                                                                               
 * Copyright 2016 Telerik AD. All rights reserved.                                                                                                                                                      
 *                                                                                                                                                                                                      
 * Kendo UI commercial licenses may be obtained at                                                                                                                                                      
 * http://www.telerik.com/purchase/license-agreement/kendo-ui-complete                                                                                                                                  
 * If you do not own a commercial license, this file shall be governed by the trial license terms.                                                                                                      
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       

*/
(function (f, define) {
    define('kendo.scheduler.view', ['kendo.core'], f);
}(function () {
    var __meta__ = {
        id: 'scheduler.view',
        name: 'Scheduler View',
        category: 'web',
        description: 'The Scheduler Common View',
        depends: ['core'],
        hidden: true
    };
    (function ($) {
        var kendo = window.kendo, ui = kendo.ui, Widget = ui.Widget, keys = kendo.keys, NS = '.kendoSchedulerView', math = Math;
        function levels(values, key) {
            var result = [];
            function collect(depth, values) {
                values = values[key];
                if (values) {
                    var level = result[depth] = result[depth] || [];
                    for (var idx = 0; idx < values.length; idx++) {
                        level.push(values[idx]);
                        collect(depth + 1, values[idx]);
                    }
                }
            }
            collect(0, values);
            return result;
        }
        function cellspacing() {
            if (kendo.support.cssBorderSpacing) {
                return '';
            }
            return 'cellspacing="0"';
        }
        function table(tableRows, className) {
            if (!tableRows.length) {
                return '';
            }
            return '<table ' + cellspacing() + ' class="' + $.trim('k-scheduler-table ' + (className || '')) + '">' + '<tr>' + tableRows.join('</tr><tr>') + '</tr>' + '</table>';
        }
        function allDayTable(tableRows, className) {
            if (!tableRows.length) {
                return '';
            }
            return '<div style=\'position:relative\'>' + table(tableRows, className) + '</div>';
        }
        function timesHeader(columnLevelCount, allDaySlot, rowCount) {
            var tableRows = [];
            if (rowCount > 0) {
                for (var idx = 0; idx < columnLevelCount; idx++) {
                    tableRows.push('<th>&nbsp;</th>');
                }
            }
            if (allDaySlot) {
                tableRows.push('<th class="k-scheduler-times-all-day">' + allDaySlot.text + '</th>');
            }
            if (rowCount < 1) {
                return $();
            }
            return $('<div class="k-scheduler-times">' + table(tableRows) + '</div>');
        }
        function datesHeader(columnLevels, columnCount, allDaySlot) {
            var dateTableRows = [];
            var columnIndex;
            for (var columnLevelIndex = 0; columnLevelIndex < columnLevels.length; columnLevelIndex++) {
                var level = columnLevels[columnLevelIndex];
                var th = [];
                var colspan = columnCount / level.length;
                for (columnIndex = 0; columnIndex < level.length; columnIndex++) {
                    var column = level[columnIndex];
                    th.push('<th colspan="' + (column.colspan || colspan) + '" class="' + (column.className || '') + '">' + column.text + '</th>');
                }
                dateTableRows.push(th.join(''));
            }
            var allDayTableRows = [];
            if (allDaySlot) {
                var lastLevel = columnLevels[columnLevels.length - 1];
                var td = [];
                var cellContent = allDaySlot.cellContent;
                for (columnIndex = 0; columnIndex < lastLevel.length; columnIndex++) {
                    td.push('<td class="' + (lastLevel[columnIndex].className || '') + '">' + (cellContent ? cellContent(columnIndex) : '&nbsp;') + '</th>');
                }
                allDayTableRows.push(td.join(''));
            }
            return $('<div class="k-scheduler-header k-state-default">' + '<div class="k-scheduler-header-wrap">' + table(dateTableRows) + allDayTable(allDayTableRows, 'k-scheduler-header-all-day') + '</div>' + '</div>');
        }
        function times(rowLevels, rowCount) {
            var rows = new Array(rowCount).join().split(',');
            var rowHeaderRows = [];
            var rowIndex;
            for (var rowLevelIndex = 0; rowLevelIndex < rowLevels.length; rowLevelIndex++) {
                var level = rowLevels[rowLevelIndex];
                var rowspan = rowCount / level.length;
                var className;
                for (rowIndex = 0; rowIndex < level.length; rowIndex++) {
                    className = level[rowIndex].className || '';
                    if (level[rowIndex].allDay) {
                        className = 'k-scheduler-times-all-day';
                    }
                    rows[rowspan * rowIndex] += '<th class="' + className + '" rowspan="' + rowspan + '">' + level[rowIndex].text + '</th>';
                }
            }
            for (rowIndex = 0; rowIndex < rowCount; rowIndex++) {
                rowHeaderRows.push(rows[rowIndex]);
            }
            if (rowCount < 1) {
                return $();
            }
            return $('<div class="k-scheduler-times">' + table(rowHeaderRows) + '</div>');
        }
        function content() {
            return $('<div class="k-scheduler-content">' + '<table ' + cellspacing() + ' class="k-scheduler-table"/>' + '</div>');
        }
        var HINT = '<div class="k-marquee k-scheduler-marquee">' + '<div class="k-marquee-color"></div>' + '<div class="k-marquee-text">' + '<div class="k-label-top"></div>' + '<div class="k-label-bottom"></div>' + '</div>' + '</div>';
        kendo.ui.scheduler = {};
        var ResourceView = kendo.Class.extend({
            init: function (index, isRtl) {
                this._index = index;
                this._timeSlotCollections = [];
                this._daySlotCollections = [];
                this._isRtl = isRtl;
            },
            addTimeSlotCollection: function (startDate, endDate) {
                return this._addCollection(startDate, endDate, this._timeSlotCollections);
            },
            addDaySlotCollection: function (startDate, endDate) {
                return this._addCollection(startDate, endDate, this._daySlotCollections);
            },
            _addCollection: function (startDate, endDate, collections) {
                var collection = new SlotCollection(startDate, endDate, this._index, collections.length);
                collections.push(collection);
                return collection;
            },
            timeSlotCollectionCount: function () {
                return this._timeSlotCollections.length;
            },
            daySlotCollectionCount: function () {
                return this._daySlotCollections.length;
            },
            daySlotByPosition: function (x, y) {
                return this._slotByPosition(x, y, this._daySlotCollections);
            },
            timeSlotByPosition: function (x, y) {
                return this._slotByPosition(x, y, this._timeSlotCollections);
            },
            _slotByPosition: function (x, y, collections) {
                for (var collectionIndex = 0; collectionIndex < collections.length; collectionIndex++) {
                    var collection = collections[collectionIndex];
                    for (var slotIndex = 0; slotIndex < collection.count(); slotIndex++) {
                        var slot = collection.at(slotIndex);
                        var width = slot.offsetWidth;
                        var height = slot.offsetHeight;
                        var horizontalEnd = slot.offsetLeft + width;
                        var verticalEnd = slot.offsetTop + height;
                        var nextSlot = collection.at(slotIndex + 1);
                        if (nextSlot) {
                            if (nextSlot.offsetLeft != slot.offsetLeft) {
                                if (this._isRtl) {
                                    horizontalEnd = slot.offsetLeft + (slot.offsetLeft - nextSlot.offsetLeft);
                                } else {
                                    horizontalEnd = nextSlot.offsetLeft;
                                }
                            } else {
                                verticalEnd = nextSlot.offsetTop;
                            }
                        }
                        if (x >= slot.offsetLeft && x < horizontalEnd && y >= slot.offsetTop && y < verticalEnd) {
                            return slot;
                        }
                    }
                }
            },
            refresh: function () {
                var collectionIndex;
                for (collectionIndex = 0; collectionIndex < this._daySlotCollections.length; collectionIndex++) {
                    this._daySlotCollections[collectionIndex].refresh();
                }
                for (collectionIndex = 0; collectionIndex < this._timeSlotCollections.length; collectionIndex++) {
                    this._timeSlotCollections[collectionIndex].refresh();
                }
            },
            timeSlotRanges: function (startTime, endTime) {
                var collections = this._timeSlotCollections;
                var start = this._startSlot(startTime, collections);
                if (!start.inRange && startTime >= start.slot.end) {
                    start = null;
                }
                var end = start;
                if (startTime < endTime) {
                    end = this._endSlot(endTime, collections);
                }
                if (end && !end.inRange && endTime <= end.slot.start) {
                    end = null;
                }
                if (start === null && end === null) {
                    return [];
                }
                if (start === null) {
                    start = {
                        inRange: true,
                        slot: collections[end.slot.collectionIndex].first()
                    };
                }
                if (end === null) {
                    end = {
                        inRange: true,
                        slot: collections[start.slot.collectionIndex].last()
                    };
                }
                return this._continuousRange(TimeSlotRange, collections, start, end);
            },
            daySlotRanges: function (startTime, endTime, isAllDay) {
                var collections = this._daySlotCollections;
                var start = this._startSlot(startTime, collections, isAllDay);
                if (!start.inRange && startTime >= start.slot.end) {
                    start = null;
                }
                var end = start;
                if (startTime < endTime) {
                    end = this._endSlot(endTime, collections, isAllDay);
                }
                if (end && !end.inRange && endTime <= end.slot.start) {
                    end = null;
                }
                if (start === null && end === null) {
                    return [];
                }
                if (start === null) {
                    do {
                        startTime += kendo.date.MS_PER_DAY;
                        start = this._startSlot(startTime, collections, isAllDay);
                    } while (!start.inRange && startTime >= start.slot.end);
                }
                if (end === null) {
                    do {
                        endTime -= kendo.date.MS_PER_DAY;
                        end = this._endSlot(endTime, collections, isAllDay);
                    } while (!end.inRange && endTime <= end.slot.start);
                }
                return this._continuousRange(DaySlotRange, collections, start, end);
            },
            _continuousRange: function (range, collections, start, end) {
                var startSlot = start.slot;
                var endSlot = end.slot;
                var startIndex = startSlot.collectionIndex;
                var endIndex = endSlot.collectionIndex;
                var ranges = [];
                for (var collectionIndex = startIndex; collectionIndex <= endIndex; collectionIndex++) {
                    var collection = collections[collectionIndex];
                    var first = collection.first();
                    var last = collection.last();
                    var head = false;
                    var tail = false;
                    if (collectionIndex == startIndex) {
                        tail = !start.inRange;
                    }
                    if (collectionIndex == endIndex) {
                        head = !end.inRange;
                    }
                    if (first.start < startSlot.start) {
                        first = startSlot;
                    }
                    if (last.start > endSlot.start) {
                        last = endSlot;
                    }
                    if (startIndex < endIndex) {
                        if (collectionIndex == startIndex) {
                            head = true;
                        } else if (collectionIndex == endIndex) {
                            tail = true;
                        } else {
                            head = tail = true;
                        }
                    }
                    ranges.push(new range({
                        start: first,
                        end: last,
                        collection: collection,
                        head: head,
                        tail: tail
                    }));
                }
                return ranges;
            },
            slotRanges: function (event, isDay) {
                var startTime = event._startTime || kendo.date.toUtcTime(event.start);
                var endTime = event._endTime || kendo.date.toUtcTime(event.end);
                if (isDay === undefined) {
                    isDay = event.isMultiDay();
                }
                if (isDay) {
                    return this.daySlotRanges(startTime, endTime, event.isAllDay);
                }
                return this.timeSlotRanges(startTime, endTime);
            },
            ranges: function (startTime, endTime, isDay, isAllDay) {
                if (typeof startTime != 'number') {
                    startTime = kendo.date.toUtcTime(startTime);
                }
                if (typeof endTime != 'number') {
                    endTime = kendo.date.toUtcTime(endTime);
                }
                if (isDay) {
                    return this.daySlotRanges(startTime, endTime, isAllDay);
                }
                return this.timeSlotRanges(startTime, endTime);
            },
            _startCollection: function (date, collections) {
                for (var collectionIndex = 0; collectionIndex < collections.length; collectionIndex++) {
                    var collection = collections[collectionIndex];
                    if (collection.startInRange(date)) {
                        return collection;
                    }
                }
                return null;
            },
            _endCollection: function (date, collections, isAllDay) {
                for (var collectionIndex = 0; collectionIndex < collections.length; collectionIndex++) {
                    var collection = collections[collectionIndex];
                    if (collection.endInRange(date, isAllDay)) {
                        return collection;
                    }
                }
                return null;
            },
            _getCollections: function (isDay) {
                return isDay ? this._daySlotCollections : this._timeSlotCollections;
            },
            continuousSlot: function (slot, reverse) {
                var pad = reverse ? -1 : 1;
                var collections = this._getCollections(slot.isDaySlot);
                var collection = collections[slot.collectionIndex + pad];
                return collection ? collection[reverse ? 'last' : 'first']() : undefined;
            },
            firstSlot: function () {
                var collections = this._getCollections(this.daySlotCollectionCount());
                return collections[0].first();
            },
            lastSlot: function () {
                var collections = this._getCollections(this.daySlotCollectionCount());
                return collections[collections.length - 1].last();
            },
            upSlot: function (slot, keepCollection) {
                var that = this;
                var moveToDaySlot = function (isDaySlot, collectionIndex, index) {
                    var isFirstCell = index === 0;
                    if (!keepCollection && !isDaySlot && isFirstCell && that.daySlotCollectionCount()) {
                        return that._daySlotCollections[0].at(collectionIndex);
                    }
                };
                if (!this.timeSlotCollectionCount()) {
                    keepCollection = true;
                }
                return this._verticalSlot(slot, -1, moveToDaySlot);
            },
            downSlot: function (slot, keepCollection) {
                var that = this;
                var moveToTimeSlot = function (isDaySlot, collectionIndex, index) {
                    if (!keepCollection && isDaySlot && that.timeSlotCollectionCount()) {
                        return that._timeSlotCollections[index].at(0);
                    }
                };
                if (!this.timeSlotCollectionCount()) {
                    keepCollection = true;
                }
                return this._verticalSlot(slot, 1, moveToTimeSlot);
            },
            leftSlot: function (slot) {
                return this._horizontalSlot(slot, -1);
            },
            rightSlot: function (slot) {
                return this._horizontalSlot(slot, 1);
            },
            _horizontalSlot: function (slot, step) {
                var index = slot.index;
                var isDaySlot = slot.isDaySlot;
                var collectionIndex = slot.collectionIndex;
                var collections = this._getCollections(isDaySlot);
                if (isDaySlot) {
                    index += step;
                } else {
                    collectionIndex += step;
                }
                var collection = collections[collectionIndex];
                return collection ? collection.at(index) : undefined;
            },
            _verticalSlot: function (slot, step, swapCollection) {
                var index = slot.index;
                var isDaySlot = slot.isDaySlot;
                var collectionIndex = slot.collectionIndex;
                var collections = this._getCollections(isDaySlot);
                slot = swapCollection(isDaySlot, collectionIndex, index);
                if (slot) {
                    return slot;
                }
                if (isDaySlot) {
                    collectionIndex += step;
                } else {
                    index += step;
                }
                var collection = collections[collectionIndex];
                return collection ? collection.at(index) : undefined;
            },
            _collection: function (index, multiday) {
                var collections = multiday ? this._daySlotCollections : this._timeSlotCollections;
                return collections[index];
            },
            _startSlot: function (time, collections, isAllDay) {
                var collection = this._startCollection(time, collections);
                var inRange = true;
                if (!collection) {
                    collection = collections[0];
                    inRange = false;
                }
                var slot = collection.slotByStartDate(time, isAllDay);
                if (!slot) {
                    slot = collection.first();
                    inRange = false;
                }
                return {
                    slot: slot,
                    inRange: inRange
                };
            },
            _endSlot: function (time, collections, isAllDay) {
                var collection = this._endCollection(time, collections, isAllDay);
                var inRange = true;
                if (!collection) {
                    collection = collections[collections.length - 1];
                    inRange = false;
                }
                var slot = collection.slotByEndDate(time, isAllDay);
                if (!slot) {
                    slot = collection.last();
                    inRange = false;
                }
                return {
                    slot: slot,
                    inRange: inRange
                };
            },
            getSlotCollection: function (index, isDay) {
                return this[isDay ? 'getDaySlotCollection' : 'getTimeSlotCollection'](index);
            },
            getTimeSlotCollection: function (index) {
                return this._timeSlotCollections[index];
            },
            getDaySlotCollection: function (index) {
                return this._daySlotCollections[index];
            }
        });
        var SlotRange = kendo.Class.extend({
            init: function (options) {
                $.extend(this, options);
            },
            innerHeight: function () {
                var collection = this.collection;
                var startIndex = this.start.index;
                var endIndex = this.end.index;
                var result = 0;
                for (var slotIndex = startIndex; slotIndex <= endIndex; slotIndex++) {
                    result += collection.at(slotIndex).offsetHeight;
                }
                return result;
            },
            events: function () {
                return this.collection.events();
            },
            addEvent: function (event) {
                this.events().push(event);
            },
            startSlot: function () {
                if (this.start.offsetLeft > this.end.offsetLeft) {
                    return this.end;
                }
                return this.start;
            },
            endSlot: function () {
                if (this.start.offsetLeft > this.end.offsetLeft) {
                    return this.start;
                }
                return this.end;
            }
        });
        var TimeSlotRange = SlotRange.extend({
            innerHeight: function () {
                var collection = this.collection;
                var startIndex = this.start.index;
                var endIndex = this.end.index;
                var result = 0;
                for (var slotIndex = startIndex; slotIndex <= endIndex; slotIndex++) {
                    result += collection.at(slotIndex).offsetHeight;
                }
                return result;
            },
            outerRect: function (start, end, snap) {
                return this._rect('offset', start, end, snap);
            },
            _rect: function (property, start, end, snap) {
                var top;
                var bottom;
                var left;
                var right;
                var startSlot = this.start;
                var endSlot = this.end;
                var isRtl = kendo.support.isRtl(startSlot.element);
                if (typeof start != 'number') {
                    start = kendo.date.toUtcTime(start);
                }
                if (typeof end != 'number') {
                    end = kendo.date.toUtcTime(end);
                }
                if (snap) {
                    top = startSlot.offsetTop;
                    bottom = endSlot.offsetTop + endSlot[property + 'Height'];
                    if (isRtl) {
                        left = endSlot.offsetLeft;
                        right = startSlot.offsetLeft + startSlot[property + 'Width'];
                    } else {
                        left = startSlot.offsetLeft;
                        right = endSlot.offsetLeft + endSlot[property + 'Width'];
                    }
                } else {
                    var startOffset = start - startSlot.start;
                    if (startOffset < 0) {
                        startOffset = 0;
                    }
                    var startSlotDuration = startSlot.end - startSlot.start;
                    top = startSlot.offsetTop + startSlot[property + 'Height'] * startOffset / startSlotDuration;
                    var endOffset = endSlot.end - end;
                    if (endOffset < 0) {
                        endOffset = 0;
                    }
                    var endSlotDuration = endSlot.end - endSlot.start;
                    bottom = endSlot.offsetTop + endSlot[property + 'Height'] - endSlot[property + 'Height'] * endOffset / endSlotDuration;
                    if (isRtl) {
                        left = Math.round(endSlot.offsetLeft + endSlot[property + 'Width'] * endOffset / endSlotDuration);
                        right = Math.round(startSlot.offsetLeft + startSlot[property + 'Width'] - startSlot[property + 'Width'] * startOffset / startSlotDuration);
                    } else {
                        left = Math.round(startSlot.offsetLeft + startSlot[property + 'Width'] * startOffset / startSlotDuration);
                        right = Math.round(endSlot.offsetLeft + endSlot[property + 'Width'] - endSlot[property + 'Width'] * endOffset / endSlotDuration);
                    }
                }
                return {
                    top: top,
                    bottom: bottom,
                    left: left === 0 ? left : left + 1,
                    right: right
                };
            },
            innerRect: function (start, end, snap) {
                return this._rect('client', start, end, snap);
            }
        });
        var DaySlotRange = SlotRange.extend({
            innerWidth: function () {
                var collection = this.collection;
                var startIndex = this.start.index;
                var endIndex = this.end.index;
                var result = 0;
                var width = startIndex !== endIndex ? 'offsetWidth' : 'clientWidth';
                for (var slotIndex = startIndex; slotIndex <= endIndex; slotIndex++) {
                    result += collection.at(slotIndex)[width];
                }
                return result;
            }
        });
        var SlotCollection = kendo.Class.extend({
            init: function (startDate, endDate, groupIndex, collectionIndex) {
                this._slots = [];
                this._events = [];
                this._start = kendo.date.toUtcTime(startDate);
                this._end = kendo.date.toUtcTime(endDate);
                this._groupIndex = groupIndex;
                this._collectionIndex = collectionIndex;
            },
            refresh: function () {
                for (var slotIndex = 0; slotIndex < this._slots.length; slotIndex++) {
                    this._slots[slotIndex].refresh();
                }
            },
            startInRange: function (date) {
                return this._start <= date && date < this._end;
            },
            endInRange: function (date, isAllDay) {
                var end = isAllDay ? date < this._end : date <= this._end;
                return this._start <= date && end;
            },
            slotByStartDate: function (date) {
                var time = date;
                if (typeof time != 'number') {
                    time = kendo.date.toUtcTime(date);
                }
                for (var slotIndex = 0; slotIndex < this._slots.length; slotIndex++) {
                    var slot = this._slots[slotIndex];
                    if (slot.startInRange(time)) {
                        return slot;
                    }
                }
                return null;
            },
            slotByEndDate: function (date, allday) {
                var time = date;
                if (typeof time != 'number') {
                    time = kendo.date.toUtcTime(date);
                }
                if (allday) {
                    return this.slotByStartDate(date, false);
                }
                for (var slotIndex = 0; slotIndex < this._slots.length; slotIndex++) {
                    var slot = this._slots[slotIndex];
                    if (slot.endInRange(time)) {
                        return slot;
                    }
                }
                return null;
            },
            count: function () {
                return this._slots.length;
            },
            events: function () {
                return this._events;
            },
            addTimeSlot: function (element, start, end, isHorizontal) {
                var slot = new TimeSlot(element, start, end, this._groupIndex, this._collectionIndex, this._slots.length, isHorizontal);
                this._slots.push(slot);
            },
            addDaySlot: function (element, start, end, eventCount) {
                var slot = new DaySlot(element, start, end, this._groupIndex, this._collectionIndex, this._slots.length, eventCount);
                this._slots.push(slot);
            },
            first: function () {
                return this._slots[0];
            },
            last: function () {
                return this._slots[this._slots.length - 1];
            },
            at: function (index) {
                return this._slots[index];
            }
        });
        var Slot = kendo.Class.extend({
            init: function (element, start, end, groupIndex, collectionIndex, index) {
                this.element = element;
                this.clientWidth = element.clientWidth;
                this.clientHeight = element.clientHeight;
                this.offsetWidth = element.offsetWidth;
                this.offsetHeight = element.offsetHeight;
                this.offsetTop = element.offsetTop;
                this.offsetLeft = element.offsetLeft;
                this.start = start;
                this.end = end;
                this.element = element;
                this.groupIndex = groupIndex;
                this.collectionIndex = collectionIndex;
                this.index = index;
                this.isDaySlot = false;
            },
            refresh: function () {
                var element = this.element;
                this.clientWidth = element.clientWidth;
                this.clientHeight = element.clientHeight;
                this.offsetWidth = element.offsetWidth;
                this.offsetHeight = element.offsetHeight;
                this.offsetTop = element.offsetTop;
                this.offsetLeft = element.offsetLeft;
            },
            startDate: function () {
                return kendo.timezone.toLocalDate(this.start);
            },
            endDate: function () {
                return kendo.timezone.toLocalDate(this.end);
            },
            startInRange: function (date) {
                return this.start <= date && date < this.end;
            },
            endInRange: function (date) {
                return this.start < date && date <= this.end;
            },
            startOffset: function () {
                return this.start;
            },
            endOffset: function () {
                return this.end;
            }
        });
        var TimeSlot = Slot.extend({
            init: function (element, start, end, groupIndex, collectionIndex, index, isHorizontal) {
                Slot.fn.init.apply(this, arguments);
                this.isHorizontal = isHorizontal ? true : false;
            },
            offsetX: function (rtl, offset) {
                if (rtl) {
                    return this.offsetLeft + offset;
                } else {
                    return this.offsetLeft + offset;
                }
            },
            startInRange: function (date) {
                return this.start <= date && date < this.end;
            },
            endInRange: function (date) {
                return this.start < date && date <= this.end;
            },
            startOffset: function (x, y, snap) {
                if (snap) {
                    return this.start;
                }
                var offset = $(this.element).offset();
                var duration = this.end - this.start;
                var difference;
                var time;
                if (this.isHorizontal) {
                    var isRtl = kendo.support.isRtl(this.element);
                    difference = x - offset.left;
                    time = Math.floor(duration * (difference / this.offsetWidth));
                    if (isRtl) {
                        return this.start + duration - time;
                    }
                } else {
                    difference = y - offset.top;
                    time = Math.floor(duration * (difference / this.offsetHeight));
                }
                return this.start + time;
            },
            endOffset: function (x, y, snap) {
                if (snap) {
                    return this.end;
                }
                var offset = $(this.element).offset();
                var duration = this.end - this.start;
                var difference;
                var time;
                if (this.isHorizontal) {
                    var isRtl = kendo.support.isRtl(this.element);
                    difference = x - offset.left;
                    time = Math.floor(duration * (difference / this.offsetWidth));
                    if (isRtl) {
                        return this.start + duration - time;
                    }
                } else {
                    difference = y - offset.top;
                    time = Math.floor(duration * (difference / this.offsetHeight));
                }
                return this.start + time;
            }
        });
        var DaySlot = Slot.extend({
            init: function (element, start, end, groupIndex, collectionIndex, index, eventCount) {
                Slot.fn.init.apply(this, arguments);
                this.eventCount = eventCount;
                this.isDaySlot = true;
                if (this.element.children.length) {
                    this.firstChildHeight = this.element.children[0].offsetHeight + 3;
                    this.firstChildTop = this.element.children[0].offsetTop;
                } else {
                    this.firstChildHeight = 3;
                    this.firstChildTop = 0;
                }
            },
            startDate: function () {
                var date = new Date(this.start);
                return kendo.timezone.apply(date, 'Etc/UTC');
            },
            endDate: function () {
                var date = new Date(this.end);
                return kendo.timezone.apply(date, 'Etc/UTC');
            },
            startInRange: function (date) {
                return this.start <= date && date < this.end;
            },
            endInRange: function (date) {
                return this.start < date && date <= this.end;
            }
        });
        var scrollbarWidth;
        function scrollbar() {
            scrollbarWidth = scrollbarWidth ? scrollbarWidth : kendo.support.scrollbar();
            return scrollbarWidth;
        }
        kendo.ui.SchedulerView = Widget.extend({
            init: function (element, options) {
                Widget.fn.init.call(this, element, options);
                this._normalizeOptions();
                this._scrollbar = scrollbar();
                this._isRtl = kendo.support.isRtl(element);
                this._resizeHint = $();
                this._moveHint = $();
                this._cellId = kendo.guid();
                this._resourcesForGroups();
                this._selectedSlots = [];
            },
            _normalizeOptions: function () {
                var options = this.options;
                if (options.startTime) {
                    options.startTime.setMilliseconds(0);
                }
                if (options.endTime) {
                    options.endTime.setMilliseconds(0);
                }
                if (options.workDayStart) {
                    options.workDayStart.setMilliseconds(0);
                }
                if (options.workDayEnd) {
                    options.workDayEnd.setMilliseconds(0);
                }
            },
            _isMobile: function () {
                var options = this.options;
                return options.mobile === true && kendo.support.mobileOS || options.mobile === 'phone' || options.mobile === 'tablet';
            },
            _isMobilePhoneView: function () {
                var options = this.options;
                return options.mobile === true && kendo.support.mobileOS && !kendo.support.mobileOS.tablet || options.mobile === 'phone';
            },
            _addResourceView: function () {
                var resourceView = new ResourceView(this.groups.length, this._isRtl);
                this.groups.push(resourceView);
                return resourceView;
            },
            dateForTitle: function () {
                return kendo.format(this.options.selectedDateFormat, this.startDate(), this.endDate());
            },
            shortDateForTitle: function () {
                return kendo.format(this.options.selectedShortDateFormat, this.startDate(), this.endDate());
            },
            _changeGroup: function (selection, previous) {
                var method = previous ? 'prevGroupSlot' : 'nextGroupSlot';
                var slot = this[method](selection.start, selection.groupIndex, selection.isAllDay);
                if (slot) {
                    selection.groupIndex += previous ? -1 : 1;
                }
                return slot;
            },
            _changeGroupContinuously: function () {
                return null;
            },
            _changeViewPeriod: function () {
                return false;
            },
            _horizontalSlots: function (selection, ranges, multiple, reverse) {
                var method = reverse ? 'leftSlot' : 'rightSlot';
                var startSlot = ranges[0].start;
                var endSlot = ranges[ranges.length - 1].end;
                var group = this.groups[selection.groupIndex];
                if (!multiple) {
                    var slot = this._normalizeHorizontalSelection(selection, ranges, reverse);
                    if (slot) {
                        startSlot = endSlot = slot;
                    }
                }
                startSlot = group[method](startSlot);
                endSlot = group[method](endSlot);
                if (!multiple && !this._isVerticallyGrouped() && (!startSlot || !endSlot)) {
                    startSlot = endSlot = this._changeGroup(selection, reverse);
                }
                var continuousSlot;
                if (!startSlot || !endSlot) {
                    continuousSlot = this._continuousSlot(selection, ranges, reverse);
                    continuousSlot = this._changeGroupContinuously(selection, continuousSlot, multiple, reverse);
                    if (continuousSlot) {
                        startSlot = endSlot = continuousSlot;
                    }
                }
                return {
                    startSlot: startSlot,
                    endSlot: endSlot
                };
            },
            _verticalSlots: function (selection, ranges, multiple, reverse) {
                var startSlot = ranges[0].start;
                var endSlot = ranges[ranges.length - 1].end;
                var group = this.groups[selection.groupIndex];
                if (!multiple) {
                    var slot = this._normalizeVerticalSelection(selection, ranges, reverse);
                    if (slot) {
                        startSlot = endSlot = slot;
                    }
                }
                var method = reverse ? 'upSlot' : 'downSlot';
                startSlot = group[method](startSlot, multiple);
                endSlot = group[method](endSlot, multiple);
                if (!multiple && this._isVerticallyGrouped() && (!startSlot || !endSlot)) {
                    startSlot = endSlot = this._changeGroup(selection, reverse);
                }
                return {
                    startSlot: startSlot,
                    endSlot: endSlot
                };
            },
            _normalizeHorizontalSelection: function () {
                return null;
            },
            _normalizeVerticalSelection: function (selection, ranges, reverse) {
                var slot;
                if (reverse) {
                    slot = ranges[0].start;
                } else {
                    slot = ranges[ranges.length - 1].end;
                }
                return slot;
            },
            _continuousSlot: function () {
                return null;
            },
            constrainSelection: function (selection) {
                var group = this.groups[0];
                var slot;
                if (!this.inRange(selection)) {
                    slot = group.firstSlot();
                    selection.isAllDay = slot.isDaySlot;
                    selection.start = slot.startDate();
                    selection.end = slot.endDate();
                } else {
                    if (!group.daySlotCollectionCount()) {
                        selection.isAllDay = false;
                    } else if (!group.timeSlotCollectionCount()) {
                        selection.isAllDay = true;
                    }
                }
                if (!this.groups[selection.groupIndex]) {
                    selection.groupIndex = 0;
                }
            },
            move: function (selection, key, shift) {
                var handled = false;
                var group = this.groups[selection.groupIndex];
                if (!group.timeSlotCollectionCount()) {
                    selection.isAllDay = true;
                }
                var ranges = group.ranges(selection.start, selection.end, selection.isAllDay, false);
                var startSlot, endSlot, reverse, slots;
                if (key === keys.DOWN || key === keys.UP) {
                    handled = true;
                    reverse = key === keys.UP;
                    this._updateDirection(selection, ranges, shift, reverse, true);
                    slots = this._verticalSlots(selection, ranges, shift, reverse);
                    if (!slots.startSlot && !shift && this._changeViewPeriod(selection, reverse, true)) {
                        return handled;
                    }
                } else if (key === keys.LEFT || key === keys.RIGHT) {
                    handled = true;
                    reverse = key === keys.LEFT;
                    this._updateDirection(selection, ranges, shift, reverse, false);
                    slots = this._horizontalSlots(selection, ranges, shift, reverse);
                    if (!slots.startSlot && !shift && this._changeViewPeriod(selection, reverse, false)) {
                        return handled;
                    }
                }
                if (handled) {
                    startSlot = slots.startSlot;
                    endSlot = slots.endSlot;
                    if (shift) {
                        var backward = selection.backward;
                        if (backward && startSlot) {
                            selection.start = startSlot.startDate();
                        } else if (!backward && endSlot) {
                            selection.end = endSlot.endDate();
                        }
                    } else if (startSlot && endSlot) {
                        selection.isAllDay = startSlot.isDaySlot;
                        selection.start = startSlot.startDate();
                        selection.end = endSlot.endDate();
                    }
                    selection.events = [];
                }
                return handled;
            },
            moveToEventInGroup: function (group, slot, selectedEvents, prev) {
                var events = group._continuousEvents || [];
                var found, event;
                var pad = prev ? -1 : 1;
                var length = events.length;
                var idx = prev ? length - 1 : 0;
                while (idx < length && idx > -1) {
                    event = events[idx];
                    if (!prev && event.start.startDate() >= slot.startDate() || prev && event.start.startDate() <= slot.startDate()) {
                        if (selectedEvents.length) {
                            event = events[idx + pad];
                        }
                        if (event && $.inArray(event.uid, selectedEvents) === -1) {
                            found = !!event;
                            break;
                        }
                    }
                    idx += pad;
                }
                return event;
            },
            moveToEvent: function (selection, prev) {
                var groupIndex = selection.groupIndex;
                var group = this.groups[groupIndex];
                var slot = group.ranges(selection.start, selection.end, selection.isAllDay, false)[0].start;
                var length = this.groups.length;
                var pad = prev ? -1 : 1;
                var events = selection.events;
                var event;
                while (groupIndex < length && groupIndex > -1) {
                    event = this.moveToEventInGroup(group, slot, events, prev);
                    groupIndex += pad;
                    group = this.groups[groupIndex];
                    if (!group || event) {
                        break;
                    }
                    events = [];
                    if (prev) {
                        slot = group.lastSlot();
                    } else {
                        slot = group.firstSlot(true);
                    }
                }
                if (event) {
                    selection.events = [event.uid];
                    selection.start = event.start.startDate();
                    selection.end = event.end.endDate();
                    selection.isAllDay = event.start.isDaySlot;
                    selection.groupIndex = event.start.groupIndex;
                }
                return !!event;
            },
            current: function (candidate) {
                if (candidate !== undefined) {
                    this._current = candidate;
                    if (this.content.has(candidate)) {
                        this._scrollTo(candidate, this.content[0]);
                    }
                } else {
                    return this._current;
                }
            },
            select: function (selection) {
                this.clearSelection();
                if (!this._selectEvents(selection)) {
                    this._selectSlots(selection);
                }
            },
            _selectSlots: function (selection) {
                var isAllDay = selection.isAllDay;
                var group = this.groups[selection.groupIndex];
                if (!group.timeSlotCollectionCount()) {
                    isAllDay = true;
                }
                this._selectedSlots = [];
                var ranges = group.ranges(selection.start, selection.end, isAllDay, false);
                var element;
                var slot;
                for (var rangeIndex = 0; rangeIndex < ranges.length; rangeIndex++) {
                    var range = ranges[rangeIndex];
                    var collection = range.collection;
                    for (var slotIndex = range.start.index; slotIndex <= range.end.index; slotIndex++) {
                        slot = collection.at(slotIndex);
                        element = slot.element;
                        element.setAttribute('aria-selected', true);
                        addSelectedState(element);
                        this._selectedSlots.push({
                            start: slot.startDate(),
                            end: slot.endDate(),
                            element: element
                        });
                    }
                }
                if (selection.backward) {
                    element = ranges[0].start.element;
                }
                this.current(element);
            },
            _selectEvents: function (selection) {
                var found = false;
                var events = selection.events;
                var groupEvents = this.groups[selection.groupIndex]._continuousEvents || [];
                var idx, length = groupEvents.length;
                if (!events[0] || !groupEvents[0]) {
                    return found;
                }
                var result = $();
                selection.events = [];
                for (idx = 0; idx < length; idx++) {
                    if ($.inArray(groupEvents[idx].uid, events) > -1) {
                        result = result.add(groupEvents[idx].element);
                        selection.events.push(groupEvents[idx].uid);
                    }
                }
                if (result[0]) {
                    result.addClass('k-state-selected').attr('aria-selected', true);
                    this.current(result.last()[0]);
                    this._selectedSlots = [];
                    found = true;
                }
                return found;
            },
            inRange: function (options) {
                var startDate = this.startDate();
                var endDate = kendo.date.addDays(this.endDate(), 1);
                var start = options.start;
                var end = options.end;
                return startDate <= start && start < endDate && startDate < end && end <= endDate;
            },
            _resourceValue: function (resource, item) {
                if (resource.valuePrimitive) {
                    item = kendo.getter(resource.dataValueField)(item);
                }
                return item;
            },
            _resourceBySlot: function (slot) {
                var resources = this.groupedResources;
                var result = {};
                if (resources.length) {
                    var resourceIndex = slot.groupIndex;
                    for (var idx = resources.length - 1; idx >= 0; idx--) {
                        var resource = resources[idx];
                        var value = this._resourceValue(resource, resource.dataSource.view()[resourceIndex % resource.dataSource.total()]);
                        if (resource.multiple) {
                            value = [value];
                        }
                        var setter = kendo.setter(resource.field);
                        setter(result, value);
                        resourceIndex = Math.floor(resourceIndex / resource.dataSource.total());
                    }
                }
                return result;
            },
            _createResizeHint: function (left, top, width, height) {
                return $(HINT).css({
                    left: left,
                    top: top,
                    width: width,
                    height: height
                });
            },
            _removeResizeHint: function () {
                this._resizeHint.remove();
                this._resizeHint = $();
            },
            _removeMoveHint: function () {
                this._moveHint.remove();
                this._moveHint = $();
            },
            _scrollTo: function (element, container) {
                var elementOffset = element.offsetTop, elementOffsetDir = element.offsetHeight, containerScroll = container.scrollTop, containerOffsetDir = container.clientHeight, bottomDistance = elementOffset + elementOffsetDir, result = 0;
                if (containerScroll > elementOffset) {
                    result = elementOffset;
                } else if (bottomDistance > containerScroll + containerOffsetDir) {
                    if (elementOffsetDir <= containerOffsetDir) {
                        result = bottomDistance - containerOffsetDir;
                    } else {
                        result = elementOffset;
                    }
                } else {
                    result = containerScroll;
                }
                container.scrollTop = result;
            },
            _shouldInverseResourceColor: function (resource) {
                var resourceColorIsDark = new Color(resource.color).isDark();
                var currentColor = this.element.css('color');
                var currentColorIsDark = new Color(currentColor).isDark();
                return resourceColorIsDark == currentColorIsDark;
            },
            _eventTmpl: function (template, wrapper) {
                var options = this.options, settings = $.extend({}, kendo.Template, options.templateSettings), paramName = settings.paramName, html = '', type = typeof template, state = {
                        storage: {},
                        count: 0
                    };
                if (type === 'function') {
                    state.storage['tmpl' + state.count] = template;
                    html += '#=this.tmpl' + state.count + '(' + paramName + ')#';
                    state.count++;
                } else if (type === 'string') {
                    html += template;
                }
                var tmpl = kendo.template(kendo.format(wrapper, html), settings);
                if (state.count > 0) {
                    tmpl = $.proxy(tmpl, state.storage);
                }
                return tmpl;
            },
            eventResources: function (event) {
                var resources = [], options = this.options;
                if (!options.resources) {
                    return resources;
                }
                for (var idx = 0; idx < options.resources.length; idx++) {
                    var resource = options.resources[idx];
                    var field = resource.field;
                    var eventResources = kendo.getter(field)(event);
                    if (eventResources == null) {
                        continue;
                    }
                    if (!resource.multiple) {
                        eventResources = [eventResources];
                    }
                    var data = resource.dataSource.view();
                    for (var resourceIndex = 0; resourceIndex < eventResources.length; resourceIndex++) {
                        var eventResource = null;
                        var value = eventResources[resourceIndex];
                        if (!resource.valuePrimitive) {
                            value = kendo.getter(resource.dataValueField)(value);
                        }
                        for (var dataIndex = 0; dataIndex < data.length; dataIndex++) {
                            if (data[dataIndex].get(resource.dataValueField) == value) {
                                eventResource = data[dataIndex];
                                break;
                            }
                        }
                        if (eventResource !== null) {
                            var resourceColor = kendo.getter(resource.dataColorField)(eventResource);
                            resources.push({
                                field: resource.field,
                                title: resource.title,
                                name: resource.name,
                                text: kendo.getter(resource.dataTextField)(eventResource),
                                value: value,
                                color: resourceColor
                            });
                        }
                    }
                }
                return resources;
            },
            createLayout: function (layout) {
                var allDayIndex = -1;
                if (!layout.rows) {
                    layout.rows = [];
                }
                for (var idx = 0; idx < layout.rows.length; idx++) {
                    if (layout.rows[idx].allDay) {
                        allDayIndex = idx;
                        break;
                    }
                }
                var allDaySlot = layout.rows[allDayIndex];
                if (allDayIndex >= 0) {
                    layout.rows.splice(allDayIndex, 1);
                }
                var columnLevels = this.columnLevels = levels(layout, 'columns');
                var rowLevels = this.rowLevels = levels(layout, 'rows');
                this.table = $('<table ' + cellspacing() + ' class="k-scheduler-layout k-scheduler-' + this.name + 'view"/>');
                var rowCount = rowLevels[rowLevels.length - 1].length;
                this.table.append(this._topSection(columnLevels, allDaySlot, rowCount));
                this.table.append(this._bottomSection(columnLevels, rowLevels, rowCount));
                this.element.append(this.table);
                this._scroller();
            },
            refreshLayout: function () {
                var that = this, toolbar = that.element.find('>.k-scheduler-toolbar'), height = that.element.innerHeight(), scrollbar = this._scrollbar, headerHeight = 0, paddingDirection = this._isRtl ? 'left' : 'right';
                for (var idx = 0; idx < toolbar.length; idx++) {
                    height -= toolbar.eq(idx).outerHeight();
                }
                if (that.datesHeader) {
                    headerHeight = that.datesHeader.outerHeight();
                }
                if (that.timesHeader && that.timesHeader.outerHeight() > headerHeight) {
                    headerHeight = that.timesHeader.outerHeight();
                }
                if (that.datesHeader && that.timesHeader) {
                    var datesHeaderRows = that.datesHeader.find('table:first tr');
                    that.timesHeader.find('tr').height(function (index) {
                        $(this).height(datesHeaderRows.eq(index).height());
                    });
                }
                if (headerHeight) {
                    height -= headerHeight;
                }
                if (that.footer) {
                    height -= that.footer.outerHeight();
                }
                var isSchedulerHeightSet = function (el) {
                    var initialHeight, newHeight;
                    if (el[0].style.height) {
                        return true;
                    } else {
                        initialHeight = el.height();
                    }
                    el.height('auto');
                    newHeight = el.height();
                    if (initialHeight != newHeight) {
                        el.height('');
                        return true;
                    }
                    el.height('');
                    return false;
                };
                var contentDiv = that.content[0], scrollbarWidth = !kendo.support.kineticScrollNeeded ? scrollbar : 0;
                if (isSchedulerHeightSet(that.element)) {
                    if (height > scrollbar * 2) {
                        that.content.height(height);
                    } else {
                        that.content.height(scrollbar * 2 + 1);
                    }
                    that.times.height(contentDiv.clientHeight);
                    var timesTable = that.times.find('table');
                    if (timesTable.length) {
                        timesTable.height(that.content.find('table')[0].clientHeight);
                    }
                }
                if (contentDiv.offsetWidth - contentDiv.clientWidth > 0) {
                    that.table.addClass('k-scrollbar-v');
                    that.datesHeader.css('padding-' + paddingDirection, scrollbarWidth - parseInt(that.datesHeader.children().css('border-' + paddingDirection + '-width'), 10));
                } else {
                    that.datesHeader.css('padding-' + paddingDirection, '');
                }
                if (contentDiv.offsetHeight - contentDiv.clientHeight > 0 || contentDiv.clientHeight > that.content.children('.k-scheduler-table').height()) {
                    that.table.addClass('k-scrollbar-h');
                } else {
                    that.table.removeClass('k-scrollbar-h');
                }
            },
            _topSection: function (columnLevels, allDaySlot, rowCount) {
                this.timesHeader = timesHeader(columnLevels.length, allDaySlot, rowCount);
                var columnCount = columnLevels[columnLevels.length - 1].length;
                this.datesHeader = datesHeader(columnLevels, columnCount, allDaySlot);
                return $('<tr>').append(this.timesHeader.add(this.datesHeader).wrap('<td>').parent());
            },
            _bottomSection: function (columnLevels, rowLevels, rowCount) {
                this.times = times(rowLevels, rowCount);
                this.content = content(columnLevels[columnLevels.length - 1], rowLevels[rowLevels.length - 1]);
                return $('<tr>').append(this.times.add(this.content).wrap('<td>').parent());
            },
            _scroller: function () {
                var that = this;
                this.content.bind('scroll' + NS, function () {
                    that.datesHeader.find('>.k-scheduler-header-wrap').scrollLeft(this.scrollLeft);
                    that.times.scrollTop(this.scrollTop);
                });
                var touchScroller = kendo.touchScroller(this.content, {
                    avoidScrolling: function (e) {
                        return $(e.event.target).closest('.k-event.k-event-active').length > 0;
                    }
                });
                if (touchScroller && touchScroller.movable) {
                    this._touchScroller = touchScroller;
                    this.content = touchScroller.scrollElement;
                    touchScroller.movable.bind('change', function (e) {
                        that.datesHeader.find('>.k-scheduler-header-wrap').scrollLeft(-e.sender.x);
                        that.times.scrollTop(-e.sender.y);
                    });
                }
            },
            _resourcesForGroups: function () {
                var result = [];
                var groups = this.options.group;
                var resources = this.options.resources;
                groups = groups && groups.resources ? groups.resources : [];
                if (resources && groups.length) {
                    for (var idx = 0, length = resources.length; idx < length; idx++) {
                        for (var groupIdx = 0, groupLength = groups.length; groupIdx < groupLength; groupIdx++) {
                            if (resources[idx].name === groups[groupIdx]) {
                                result.push(resources[idx]);
                            }
                        }
                    }
                }
                this.groupedResources = result;
            },
            _createColumnsLayout: function (resources, inner, template) {
                return createLayoutConfiguration('columns', resources, inner, template);
            },
            _groupOrientation: function () {
                var groups = this.options.group;
                return groups && groups.resources ? groups.orientation : 'horizontal';
            },
            _isVerticallyGrouped: function () {
                return this.groupedResources.length && this._groupOrientation() === 'vertical';
            },
            _createRowsLayout: function (resources, inner, template) {
                return createLayoutConfiguration('rows', resources, inner, template);
            },
            selectionByElement: function () {
                return null;
            },
            clearSelection: function () {
                this.content.find('.k-state-selected').removeAttr('id').attr('aria-selected', false).removeClass('k-state-selected');
            },
            destroy: function () {
                var that = this;
                Widget.fn.destroy.call(this);
                if (that.table) {
                    kendo.destroy(that.table);
                    that.table.remove();
                }
                that.groups = null;
                that.table = null;
                that.content = null;
                that.times = null;
                that.datesHeader = null;
                that.timesHeader = null;
                that.footer = null;
                that._resizeHint = null;
                that._moveHint = null;
            },
            calendarInfo: function () {
                return kendo.getCulture().calendars.standard;
            },
            prevGroupSlot: function (date, groupIndex, isDay) {
                var collection;
                var group = this.groups[groupIndex];
                var slot = group.ranges(date, date, isDay, false)[0].start;
                if (groupIndex <= 0) {
                    return;
                }
                if (this._isVerticallyGrouped()) {
                    if (!group.timeSlotCollectionCount()) {
                        collection = group._collection(group.daySlotCollectionCount() - 1, true);
                        return collection.at(slot.index);
                    } else {
                        collection = group._collection(isDay ? slot.index : slot.collectionIndex, false);
                        return collection.last();
                    }
                } else {
                    if (!group.timeSlotCollectionCount()) {
                        collection = group._collection(slot.collectionIndex, true);
                        return collection.last();
                    } else {
                        collection = group._collection(isDay ? 0 : group.timeSlotCollectionCount() - 1, isDay);
                        return isDay ? collection.last() : collection.at(slot.index);
                    }
                }
            },
            nextGroupSlot: function (date, groupIndex, isDay) {
                var collection;
                var group = this.groups[groupIndex];
                var slot = group.ranges(date, date, isDay, false)[0].start;
                var daySlotCollectionCount;
                if (groupIndex >= this.groups.length - 1) {
                    return;
                }
                if (this._isVerticallyGrouped()) {
                    if (!group.timeSlotCollectionCount()) {
                        collection = group._collection(0, true);
                        return collection.at(slot.index);
                    } else {
                        daySlotCollectionCount = group.daySlotCollectionCount();
                        collection = group._collection(daySlotCollectionCount ? 0 : slot.collectionIndex, daySlotCollectionCount);
                        return isDay ? collection.first() : collection.at(slot.collectionIndex);
                    }
                } else {
                    if (!group.timeSlotCollectionCount()) {
                        collection = group._collection(slot.collectionIndex, true);
                        return collection.first();
                    } else {
                        collection = group._collection(0, isDay);
                        return isDay ? collection.first() : collection.at(slot.index);
                    }
                }
            },
            _eventOptionsForMove: function () {
                return {};
            },
            _updateEventForResize: function () {
                return;
            },
            _updateEventForSelection: function (event) {
                return event;
            }
        });
        function collidingEvents(elements, start, end) {
            var idx, index, startIndex, overlaps, endIndex;
            for (idx = elements.length - 1; idx >= 0; idx--) {
                index = rangeIndex(elements[idx]);
                startIndex = index.start;
                endIndex = index.end;
                overlaps = startIndex <= start && endIndex >= start;
                if (overlaps || startIndex >= start && endIndex <= end || start <= startIndex && end >= startIndex) {
                    if (startIndex < start) {
                        start = startIndex;
                    }
                    if (endIndex > end) {
                        end = endIndex;
                    }
                }
            }
            return eventsForSlot(elements, start, end);
        }
        function rangeIndex(eventElement) {
            return {
                start: eventElement.start,
                end: eventElement.end
            };
        }
        function eventsForSlot(elements, slotStart, slotEnd) {
            var events = [];
            for (var idx = 0; idx < elements.length; idx++) {
                var event = rangeIndex(elements[idx]);
                if (event.start < slotStart && event.end > slotStart || event.start >= slotStart && event.end <= slotEnd) {
                    events.push(elements[idx]);
                }
            }
            return events;
        }
        function createColumns(eventElements) {
            return _createColumns(eventElements);
        }
        function createRows(eventElements) {
            return _createColumns(eventElements);
        }
        var Color = function (value) {
            var color = this, formats = Color.formats, re, processor, parts, i, channels;
            if (arguments.length === 1) {
                value = color.resolveColor(value);
                for (i = 0; i < formats.length; i++) {
                    re = formats[i].re;
                    processor = formats[i].process;
                    parts = re.exec(value);
                    if (parts) {
                        channels = processor(parts);
                        color.r = channels[0];
                        color.g = channels[1];
                        color.b = channels[2];
                    }
                }
            } else {
                color.r = arguments[0];
                color.g = arguments[1];
                color.b = arguments[2];
            }
            color.r = color.normalizeByte(color.r);
            color.g = color.normalizeByte(color.g);
            color.b = color.normalizeByte(color.b);
        };
        Color.prototype = {
            resolveColor: function (value) {
                value = value || '#000';
                if (value.charAt(0) == '#') {
                    value = value.substr(1, 6);
                }
                value = value.replace(/ /g, '');
                value = value.toLowerCase();
                value = Color.namedColors[value] || value;
                return value;
            },
            normalizeByte: function (value) {
                return value < 0 || isNaN(value) ? 0 : value > 255 ? 255 : value;
            },
            percBrightness: function () {
                var color = this;
                return math.sqrt(0.241 * color.r * color.r + 0.691 * color.g * color.g + 0.068 * color.b * color.b);
            },
            isDark: function () {
                var color = this;
                var brightnessValue = color.percBrightness();
                return brightnessValue < 180;
            }
        };
        Color.formats = [
            {
                re: /^rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/,
                process: function (parts) {
                    return [
                        parseInt(parts[1], 10),
                        parseInt(parts[2], 10),
                        parseInt(parts[3], 10)
                    ];
                }
            },
            {
                re: /^(\w{2})(\w{2})(\w{2})$/,
                process: function (parts) {
                    return [
                        parseInt(parts[1], 16),
                        parseInt(parts[2], 16),
                        parseInt(parts[3], 16)
                    ];
                }
            },
            {
                re: /^(\w{1})(\w{1})(\w{1})$/,
                process: function (parts) {
                    return [
                        parseInt(parts[1] + parts[1], 16),
                        parseInt(parts[2] + parts[2], 16),
                        parseInt(parts[3] + parts[3], 16)
                    ];
                }
            }
        ];
        Color.namedColors = {
            aqua: '00ffff',
            azure: 'f0ffff',
            beige: 'f5f5dc',
            black: '000000',
            blue: '0000ff',
            brown: 'a52a2a',
            coral: 'ff7f50',
            cyan: '00ffff',
            darkblue: '00008b',
            darkcyan: '008b8b',
            darkgray: 'a9a9a9',
            darkgreen: '006400',
            darkorange: 'ff8c00',
            darkred: '8b0000',
            dimgray: '696969',
            fuchsia: 'ff00ff',
            gold: 'ffd700',
            goldenrod: 'daa520',
            gray: '808080',
            green: '008000',
            greenyellow: 'adff2f',
            indigo: '4b0082',
            ivory: 'fffff0',
            khaki: 'f0e68c',
            lightblue: 'add8e6',
            lightgrey: 'd3d3d3',
            lightgreen: '90ee90',
            lightpink: 'ffb6c1',
            lightyellow: 'ffffe0',
            lime: '00ff00',
            limegreen: '32cd32',
            linen: 'faf0e6',
            magenta: 'ff00ff',
            maroon: '800000',
            mediumblue: '0000cd',
            navy: '000080',
            olive: '808000',
            orange: 'ffa500',
            orangered: 'ff4500',
            orchid: 'da70d6',
            pink: 'ffc0cb',
            plum: 'dda0dd',
            purple: '800080',
            red: 'ff0000',
            royalblue: '4169e1',
            salmon: 'fa8072',
            silver: 'c0c0c0',
            skyblue: '87ceeb',
            slateblue: '6a5acd',
            slategray: '708090',
            snow: 'fffafa',
            steelblue: '4682b4',
            tan: 'd2b48c',
            teal: '008080',
            tomato: 'ff6347',
            turquoise: '40e0d0',
            violet: 'ee82ee',
            wheat: 'f5deb3',
            white: 'ffffff',
            whitesmoke: 'f5f5f5',
            yellow: 'ffff00',
            yellowgreen: '9acd32'
        };
        function _createColumns(eventElements) {
            var columns = [];
            for (var idx = 0; idx < eventElements.length; idx++) {
                var event = eventElements[idx];
                var eventRange = rangeIndex(event);
                var column = null;
                for (var j = 0, columnLength = columns.length; j < columnLength; j++) {
                    var endOverlaps = eventRange.start > columns[j].end;
                    if (eventRange.start < columns[j].start || endOverlaps) {
                        column = columns[j];
                        if (column.end < eventRange.end) {
                            column.end = eventRange.end;
                        }
                        break;
                    }
                }
                if (!column) {
                    column = {
                        start: eventRange.start,
                        end: eventRange.end,
                        events: []
                    };
                    columns.push(column);
                }
                column.events.push(event);
            }
            return columns;
        }
        function createLayoutConfiguration(name, resources, inner, template) {
            var resource = resources[0];
            if (resource) {
                var configuration = [];
                var data = resource.dataSource.view();
                for (var dataIndex = 0; dataIndex < data.length; dataIndex++) {
                    var obj = {
                        text: template({
                            text: kendo.htmlEncode(kendo.getter(resource.dataTextField)(data[dataIndex])),
                            color: kendo.getter(resource.dataColorField)(data[dataIndex]),
                            field: resource.field,
                            title: resource.title,
                            name: resource.name,
                            value: kendo.getter(resource.dataValueField)(data[dataIndex])
                        }),
                        className: 'k-slot-cell'
                    };
                    obj[name] = createLayoutConfiguration(name, resources.slice(1), inner, template);
                    configuration.push(obj);
                }
                return configuration;
            }
            return inner;
        }
        function groupEqFilter(value) {
            return function (item) {
                if ($.isArray(item) || item instanceof kendo.data.ObservableArray) {
                    for (var idx = 0; idx < item.length; idx++) {
                        if (item[idx] == value) {
                            return true;
                        }
                    }
                    return false;
                }
                return item == value;
            };
        }
        var selectedStateRegExp = /\s*k-state-selected/;
        function addSelectedState(cell) {
            cell.className = cell.className.replace(selectedStateRegExp, '') + ' k-state-selected';
        }
        $.extend(ui.SchedulerView, {
            createColumns: createColumns,
            createRows: createRows,
            rangeIndex: rangeIndex,
            collidingEvents: collidingEvents,
            groupEqFilter: groupEqFilter
        });
    }(window.kendo.jQuery));
    return window.kendo;
}, typeof define == 'function' && define.amd ? define : function (a1, a2, a3) {
    (a3 || a2)();
}));
/** 
 * Kendo UI v2016.2.714 (http://www.telerik.com/kendo-ui)                                                                                                                                               
 * Copyright 2016 Telerik AD. All rights reserved.                                                                                                                                                      
 *                                                                                                                                                                                                      
 * Kendo UI commercial licenses may be obtained at                                                                                                                                                      
 * http://www.telerik.com/purchase/license-agreement/kendo-ui-complete                                                                                                                                  
 * If you do not own a commercial license, this file shall be governed by the trial license terms.                                                                                                      
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       

*/
(function (f, define) {
    define('kendo.scheduler.dayview', ['kendo.scheduler.view'], f);
}(function () {
    var __meta__ = {
        id: 'scheduler.dayview',
        name: 'Scheduler Day View',
        category: 'web',
        description: 'The Scheduler Day View',
        depends: ['scheduler.view'],
        hidden: true
    };
    (function ($, undefined) {
        var kendo = window.kendo, ui = kendo.ui, setTime = kendo.date.setTime, SchedulerView = ui.SchedulerView, extend = $.extend, proxy = $.proxy, getDate = kendo.date.getDate, MS_PER_MINUTE = kendo.date.MS_PER_MINUTE, MS_PER_DAY = kendo.date.MS_PER_DAY, CURRENT_TIME_MARKER_CLASS = 'k-current-time', CURRENT_TIME_MARKER_ARROW_CLASS = 'k-current-time-arrow', BORDER_SIZE_COEFF = 0.8666, getMilliseconds = kendo.date.getMilliseconds, NS = '.kendoMultiDayView';
        var DAY_VIEW_EVENT_TEMPLATE = kendo.template('<div title="(#=kendo.format("{0:t} - {1:t}", start, end)#): #=title.replace(/"/g,"&\\#34;")#">' + '<div class="k-event-template k-event-time">#:kendo.format("{0:t} - {1:t}", start, end)#</div>' + '<div class="k-event-template">${title}</div>' + '</div>'), DAY_VIEW_ALL_DAY_EVENT_TEMPLATE = kendo.template('<div title="(#=kendo.format("{0:t}", start)#): #=title.replace(/"/g,"&\\#34;")#">' + '<div class="k-event-template">${title}</div>' + '</div>'), DATA_HEADER_TEMPLATE = kendo.template('<span class=\'k-link k-nav-day\'>#=kendo.toString(date, \'ddd M/dd\')#</span>'), ALLDAY_EVENT_WRAPPER_STRING = '<div role="gridcell" aria-selected="false" ' + 'data-#=ns#uid="#=uid#"' + '#if (resources[0]) { #' + 'style="background-color:#=resources[0].color#; border-color: #=resources[0].color#"' + 'class="k-event#=inverseColor ? " k-event-inverse" : ""#" ' + '#} else {#' + 'class="k-event"' + '#}#' + '>' + '<span class="k-event-actions">' + '# if(data.tail || data.middle) {#' + '<span class="k-icon k-i-arrow-w"></span>' + '#}#' + '# if(data.isException()) {#' + '<span class="k-icon k-i-exception"></span>' + '# } else if(data.isRecurring()) {#' + '<span class="k-icon k-i-refresh"></span>' + '# } #' + '</span>' + '{0}' + '<span class="k-event-actions">' + '#if (showDelete) {#' + '<a href="\\#" class="k-link k-event-delete"><span class="k-icon k-si-close"></span></a>' + '#}#' + '# if(data.head || data.middle) {#' + '<span class="k-icon k-i-arrow-e"></span>' + '#}#' + '</span>' + '#if(resizable && !singleDay && !data.tail && !data.middle){#' + '<span class="k-resize-handle k-resize-w"></span>' + '#}#' + '#if(resizable && !singleDay && !data.head && !data.middle){#' + '<span class="k-resize-handle k-resize-e"></span>' + '#}#' + '</div>', EVENT_WRAPPER_STRING = '<div role="gridcell" aria-selected="false" ' + 'data-#=ns#uid="#=uid#" ' + '#if (resources[0]) { #' + 'style="background-color:#=resources[0].color #; border-color: #=resources[0].color#"' + 'class="k-event#=inverseColor ? " k-event-inverse" : ""#"' + '#} else {#' + 'class="k-event"' + '#}#' + '>' + '<span class="k-event-actions">' + '# if(data.isException()) {#' + '<span class="k-icon k-i-exception"></span>' + '# } else if(data.isRecurring()) {#' + '<span class="k-icon k-i-refresh"></span>' + '# } #' + '</span>' + '{0}' + '<span class="k-event-actions">' + '#if (showDelete) {#' + '<a href="\\#" class="k-link k-event-delete"><span class="k-icon k-si-close"></span></a>' + '#}#' + '</span>' + '<span class="k-event-top-actions">' + '# if(data.tail || data.middle) {#' + '<span class="k-icon k-i-arrow-n"></span>' + '# } #' + '</span>' + '<span class="k-event-bottom-actions">' + '# if(data.head || data.middle) {#' + '<span class="k-icon k-i-arrow-s"></span>' + '# } #' + '</span>' + '# if(resizable && !data.tail && !data.middle) {#' + '<span class="k-resize-handle k-resize-n"></span>' + '# } #' + '# if(resizable && !data.head && !data.middle) {#' + '<span class="k-resize-handle k-resize-s"></span>' + '# } #' + '</div>';
        function toInvariantTime(date) {
            var staticDate = new Date(1980, 1, 1, 0, 0, 0);
            setTime(staticDate, getMilliseconds(date));
            return staticDate;
        }
        function isInDateRange(value, min, max) {
            return value >= min && value <= max;
        }
        function isInTimeRange(value, min, max, overlaps) {
            overlaps = overlaps ? value <= max : value < max;
            return value > min && overlaps;
        }
        function addContinuousEvent(group, range, element, isAllDay) {
            var events = group._continuousEvents;
            var lastEvent = events[events.length - 1];
            var startDate = getDate(range.start.startDate()).getTime();
            if (isAllDay && lastEvent && getDate(lastEvent.start.startDate()).getTime() == startDate) {
                var idx = events.length - 1;
                for (; idx > -1; idx--) {
                    if (events[idx].isAllDay || getDate(events[idx].start.startDate()).getTime() < startDate) {
                        break;
                    }
                }
                events.splice(idx + 1, 0, {
                    element: element,
                    isAllDay: true,
                    uid: element.attr(kendo.attr('uid')),
                    start: range.start,
                    end: range.end
                });
            } else {
                events.push({
                    element: element,
                    isAllDay: isAllDay,
                    uid: element.attr(kendo.attr('uid')),
                    start: range.start,
                    end: range.end
                });
            }
        }
        function getWorkDays(options) {
            var workDays = [];
            var dayIndex = options.workWeekStart;
            workDays.push(dayIndex);
            while (options.workWeekEnd != dayIndex) {
                if (dayIndex > 6) {
                    dayIndex -= 7;
                } else {
                    dayIndex++;
                }
                workDays.push(dayIndex);
            }
            return workDays;
        }
        var MultiDayView = SchedulerView.extend({
            init: function (element, options) {
                var that = this;
                SchedulerView.fn.init.call(that, element, options);
                that.title = that.options.title || that.options.name;
                that._workDays = getWorkDays(that.options);
                that._templates();
                that._editable();
                that.calculateDateRange();
                that._groups();
                that._currentTime(true);
            },
            _currentTimeMarkerUpdater: function () {
                this._updateCurrentTimeMarker(new Date());
            },
            _updateCurrentTimeMarker: function (currentTime) {
                var options = this.options;
                if (options.currentTimeMarker.useLocalTimezone === false) {
                    var timezone = options.dataSource.options.schema.timezone;
                    if (options.dataSource && timezone) {
                        var timezoneOffset = kendo.timezone.offset(currentTime, timezone);
                        currentTime = kendo.timezone.convert(currentTime, currentTime.getTimezoneOffset(), timezoneOffset);
                    }
                }
                this.times.find('.' + CURRENT_TIME_MARKER_CLASS).remove();
                this.content.find('.' + CURRENT_TIME_MARKER_CLASS).remove();
                var groupsCount = !options.group || options.group.orientation == 'horizontal' ? 1 : this.groups.length;
                var firstTimesCell = this.times.find('tr:first th:first');
                var lastTimesCell = this.times.find('tr:first th:last');
                for (var groupIndex = 0; groupIndex < groupsCount; groupIndex++) {
                    var currentGroup = this.groups[groupIndex];
                    if (!currentGroup) {
                        return;
                    }
                    var utcCurrentTime = kendo.date.toUtcTime(currentTime);
                    var ranges = currentGroup.timeSlotRanges(utcCurrentTime, utcCurrentTime + 1);
                    if (ranges.length === 0) {
                        return;
                    }
                    var collection = ranges[0].collection;
                    var slotElement = collection.slotByStartDate(currentTime);
                    if (slotElement) {
                        var elementHtml = '<div class=\'' + CURRENT_TIME_MARKER_CLASS + '\'></div>';
                        var timesTableMarker = $(elementHtml).prependTo(this.times);
                        var markerTopPosition = Math.round(ranges[0].innerRect(currentTime, new Date(currentTime.getTime() + 1), false).top);
                        var timesTableMarkerCss = {};
                        if (this._isRtl) {
                            timesTableMarkerCss.right = firstTimesCell.position().left + firstTimesCell.outerHeight() - lastTimesCell.outerHeight();
                            timesTableMarker.addClass(CURRENT_TIME_MARKER_ARROW_CLASS + '-left');
                        } else {
                            timesTableMarkerCss.left = lastTimesCell.position().left;
                            timesTableMarker.addClass(CURRENT_TIME_MARKER_ARROW_CLASS + '-right');
                        }
                        timesTableMarkerCss.top = markerTopPosition - timesTableMarker.outerWidth() * BORDER_SIZE_COEFF / 2;
                        timesTableMarker.css(timesTableMarkerCss);
                        $(elementHtml).prependTo(this.content).css({
                            top: markerTopPosition,
                            height: '1px',
                            right: '1px',
                            width: this.content[0].scrollWidth,
                            left: 0
                        });
                    }
                }
            },
            _currentTime: function (setUpdateTimer) {
                var that = this;
                var markerOptions = that.options.currentTimeMarker;
                if (markerOptions !== false && markerOptions.updateInterval !== undefined) {
                    that._currentTimeMarkerUpdater();
                    if (setUpdateTimer) {
                        that._currentTimeUpdateTimer = setInterval(proxy(this._currentTimeMarkerUpdater, that), markerOptions.updateInterval);
                    }
                }
            },
            _updateResizeHint: function (event, groupIndex, startTime, endTime) {
                var multiday = event.isMultiDay();
                var group = this.groups[groupIndex];
                var ranges = group.ranges(startTime, endTime, multiday, event.isAllDay);
                this._removeResizeHint();
                for (var rangeIndex = 0; rangeIndex < ranges.length; rangeIndex++) {
                    var range = ranges[rangeIndex];
                    var start = range.startSlot();
                    var width = start.offsetWidth;
                    var height = start.clientHeight;
                    var top = start.offsetTop;
                    if (multiday) {
                        width = range.innerWidth();
                    } else {
                        var rect = range.outerRect(startTime, endTime, this.options.snap);
                        top = rect.top;
                        height = rect.bottom - rect.top;
                    }
                    var hint = SchedulerView.fn._createResizeHint.call(this, start.offsetLeft, top, width, height);
                    this._resizeHint = this._resizeHint.add(hint);
                }
                var format = 't';
                var container = this.content;
                if (multiday) {
                    format = 'M/dd';
                    container = this.element.find('.k-scheduler-header-wrap:has(.k-scheduler-header-all-day) > div');
                    if (!container.length) {
                        container = this.content;
                    }
                }
                this._resizeHint.appendTo(container);
                this._resizeHint.find('.k-label-top,.k-label-bottom').text('');
                this._resizeHint.first().addClass('k-first').find('.k-label-top').text(kendo.toString(kendo.timezone.toLocalDate(startTime), format));
                this._resizeHint.last().addClass('k-last').find('.k-label-bottom').text(kendo.toString(kendo.timezone.toLocalDate(endTime), format));
            },
            _updateMoveHint: function (event, groupIndex, distance) {
                var multiday = event.isMultiDay();
                var group = this.groups[groupIndex];
                var start = kendo.date.toUtcTime(event.start) + distance;
                var end = start + event.duration();
                var ranges = group.ranges(start, end, multiday, event.isAllDay);
                start = kendo.timezone.toLocalDate(start);
                end = kendo.timezone.toLocalDate(end);
                this._removeMoveHint();
                if (!multiday && (getMilliseconds(end) === 0 || getMilliseconds(end) < getMilliseconds(this.startTime()))) {
                    if (ranges.length > 1) {
                        ranges.pop();
                    }
                }
                for (var rangeIndex = 0; rangeIndex < ranges.length; rangeIndex++) {
                    var range = ranges[rangeIndex];
                    var startSlot = range.start;
                    var hint = this._createEventElement(event.clone({
                        start: start,
                        end: end
                    }), !multiday);
                    hint.addClass('k-event-drag-hint');
                    var css = {
                        left: startSlot.offsetLeft + 2,
                        top: startSlot.offsetTop
                    };
                    if (this._isRtl) {
                        css.left = startSlot.clientWidth * 0.1 + startSlot.offsetLeft + 2;
                    }
                    if (multiday) {
                        css.width = range.innerWidth() - 4;
                    } else {
                        var rect = range.outerRect(start, end, this.options.snap);
                        css.top = rect.top;
                        css.height = rect.bottom - rect.top;
                        css.width = startSlot.clientWidth * 0.9 - 4;
                    }
                    hint.css(css);
                    this._moveHint = this._moveHint.add(hint);
                }
                var content = this.content;
                if (multiday) {
                    content = this.element.find('.k-scheduler-header-wrap:has(.k-scheduler-header-all-day) > div');
                    if (!content.length) {
                        content = this.content;
                    }
                }
                this._moveHint.appendTo(content);
            },
            _slotByPosition: function (x, y) {
                var slot;
                var offset;
                if (this._isVerticallyGrouped()) {
                    offset = this.content.offset();
                    y += this.content[0].scrollTop;
                    x += this.content[0].scrollLeft;
                } else {
                    offset = this.element.find('.k-scheduler-header-wrap:has(.k-scheduler-header-all-day)').find('>div').offset();
                }
                if (offset) {
                    x -= offset.left;
                    y -= offset.top;
                }
                x = Math.ceil(x);
                y = Math.ceil(y);
                var group;
                var groupIndex;
                for (groupIndex = 0; groupIndex < this.groups.length; groupIndex++) {
                    group = this.groups[groupIndex];
                    slot = group.daySlotByPosition(x, y);
                    if (slot) {
                        return slot;
                    }
                }
                if (offset) {
                    x += offset.left;
                    y += offset.top;
                }
                offset = this.content.offset();
                x -= offset.left;
                y -= offset.top;
                if (!this._isVerticallyGrouped()) {
                    y += this.content[0].scrollTop;
                    x += this.content[0].scrollLeft;
                }
                x = Math.ceil(x);
                y = Math.ceil(y);
                for (groupIndex = 0; groupIndex < this.groups.length; groupIndex++) {
                    group = this.groups[groupIndex];
                    slot = group.timeSlotByPosition(x, y);
                    if (slot) {
                        return slot;
                    }
                }
                return null;
            },
            _groupCount: function () {
                var resources = this.groupedResources;
                if (resources.length) {
                    if (this._groupOrientation() === 'vertical') {
                        return this._rowCountForLevel(resources.length - 1);
                    } else {
                        return this._columnCountForLevel(resources.length) / this._columnOffsetForResource(resources.length);
                    }
                }
                return 1;
            },
            _columnCountInResourceView: function () {
                var resources = this.groupedResources;
                if (!resources.length || this._isVerticallyGrouped()) {
                    return this._columnCountForLevel(0);
                }
                return this._columnOffsetForResource(resources.length);
            },
            _timeSlotGroups: function (groupCount, columnCount) {
                var interval = this._timeSlotInterval();
                var tableRows = this.content.find('tr:not(.k-scheduler-header-all-day)');
                tableRows.attr('role', 'row');
                var rowCount = tableRows.length;
                if (this._isVerticallyGrouped()) {
                    rowCount = Math.floor(rowCount / groupCount);
                }
                for (var groupIndex = 0; groupIndex < groupCount; groupIndex++) {
                    var rowMultiplier = 0;
                    if (this._isVerticallyGrouped()) {
                        rowMultiplier = groupIndex;
                    }
                    var rowIndex = rowMultiplier * rowCount;
                    var time;
                    var cellMultiplier = 0;
                    if (!this._isVerticallyGrouped()) {
                        cellMultiplier = groupIndex;
                    }
                    while (rowIndex < (rowMultiplier + 1) * rowCount) {
                        var cells = tableRows[rowIndex].children;
                        var group = this.groups[groupIndex];
                        if (rowIndex % rowCount === 0) {
                            time = getMilliseconds(new Date(+this.startTime()));
                        }
                        for (var cellIndex = cellMultiplier * columnCount; cellIndex < (cellMultiplier + 1) * columnCount; cellIndex++) {
                            var cell = cells[cellIndex];
                            var collectionIndex = cellIndex % columnCount;
                            var collection = group.getTimeSlotCollection(collectionIndex);
                            var currentDate = this._dates[collectionIndex];
                            var currentTime = Date.UTC(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate());
                            var start = currentTime + time;
                            var end = start + interval;
                            cell.setAttribute('role', 'gridcell');
                            cell.setAttribute('aria-selected', false);
                            collection.addTimeSlot(cell, start, end);
                        }
                        time += interval;
                        rowIndex++;
                    }
                }
            },
            _daySlotGroups: function (groupCount, columnCount) {
                var tableRows;
                if (this._isVerticallyGrouped()) {
                    tableRows = this.element.find('.k-scheduler-header-all-day');
                } else {
                    tableRows = this.element.find('.k-scheduler-header-all-day tr');
                }
                tableRows.attr('role', 'row');
                for (var groupIndex = 0; groupIndex < groupCount; groupIndex++) {
                    var rowMultiplier = 0;
                    if (this._isVerticallyGrouped()) {
                        rowMultiplier = groupIndex;
                    }
                    var group = this.groups[groupIndex];
                    var collection = group.getDaySlotCollection(0);
                    var cells = tableRows[rowMultiplier].children;
                    var cellMultiplier = 0;
                    if (!this._isVerticallyGrouped()) {
                        cellMultiplier = groupIndex;
                    }
                    var cellCount = 0;
                    for (var cellIndex = cellMultiplier * columnCount; cellIndex < (cellMultiplier + 1) * columnCount; cellIndex++) {
                        var cell = cells[cellIndex];
                        if (cellIndex % columnCount === 0) {
                            cellCount = 0;
                        }
                        var start = this._dates[cellCount];
                        var currentTime = Date.UTC(start.getFullYear(), start.getMonth(), start.getDate());
                        cellCount++;
                        cell.setAttribute('role', 'gridcell');
                        cell.setAttribute('aria-selected', false);
                        collection.addDaySlot(cell, currentTime, currentTime + kendo.date.MS_PER_DAY);
                    }
                }
            },
            _groups: function () {
                var groupCount = this._groupCount();
                var columnCount = this._columnCountInResourceView();
                this.groups = [];
                for (var idx = 0; idx < groupCount; idx++) {
                    var view = this._addResourceView(idx);
                    for (var columnIndex = 0; columnIndex < columnCount; columnIndex++) {
                        view.addTimeSlotCollection(this._dates[columnIndex], kendo.date.addDays(this._dates[columnIndex], 1));
                    }
                    if (this.options.allDaySlot) {
                        view.addDaySlotCollection(this._dates[0], kendo.date.addDays(this._dates[this._dates.length - 1], 1));
                    }
                }
                this._timeSlotGroups(groupCount, columnCount);
                if (this.options.allDaySlot) {
                    this._daySlotGroups(groupCount, columnCount);
                }
            },
            options: {
                name: 'MultiDayView',
                selectedDateFormat: '{0:D}',
                selectedShortDateFormat: '{0:d}',
                allDaySlot: true,
                showWorkHours: false,
                title: '',
                startTime: kendo.date.today(),
                endTime: kendo.date.today(),
                minorTickCount: 2,
                majorTick: 60,
                majorTimeHeaderTemplate: '#=kendo.toString(date, \'t\')#',
                minorTimeHeaderTemplate: '&nbsp;',
                groupHeaderTemplate: '#=text#',
                slotTemplate: '&nbsp;',
                allDaySlotTemplate: '&nbsp;',
                eventTemplate: DAY_VIEW_EVENT_TEMPLATE,
                allDayEventTemplate: DAY_VIEW_ALL_DAY_EVENT_TEMPLATE,
                dateHeaderTemplate: DATA_HEADER_TEMPLATE,
                editable: true,
                workDayStart: new Date(1980, 1, 1, 8, 0, 0),
                workDayEnd: new Date(1980, 1, 1, 17, 0, 0),
                workWeekStart: 1,
                workWeekEnd: 5,
                footer: { command: 'workDay' },
                messages: {
                    allDay: 'all day',
                    showFullDay: 'Show full day',
                    showWorkDay: 'Show business hours'
                },
                currentTimeMarker: {
                    updateInterval: 10000,
                    useLocalTimezone: true
                }
            },
            events: [
                'remove',
                'add',
                'edit'
            ],
            _templates: function () {
                var options = this.options, settings = extend({}, kendo.Template, options.templateSettings);
                this.eventTemplate = this._eventTmpl(options.eventTemplate, EVENT_WRAPPER_STRING);
                this.allDayEventTemplate = this._eventTmpl(options.allDayEventTemplate, ALLDAY_EVENT_WRAPPER_STRING);
                this.majorTimeHeaderTemplate = kendo.template(options.majorTimeHeaderTemplate, settings);
                this.minorTimeHeaderTemplate = kendo.template(options.minorTimeHeaderTemplate, settings);
                this.dateHeaderTemplate = kendo.template(options.dateHeaderTemplate, settings);
                this.slotTemplate = kendo.template(options.slotTemplate, settings);
                this.allDaySlotTemplate = kendo.template(options.allDaySlotTemplate, settings);
                this.groupHeaderTemplate = kendo.template(options.groupHeaderTemplate, settings);
            },
            _editable: function () {
                if (this.options.editable) {
                    if (this._isMobile()) {
                        this._touchEditable();
                    } else {
                        this._mouseEditable();
                    }
                }
            },
            _mouseEditable: function () {
                var that = this;
                that.element.on('click' + NS, '.k-event a:has(.k-si-close)', function (e) {
                    that.trigger('remove', { uid: $(this).closest('.k-event').attr(kendo.attr('uid')) });
                    e.preventDefault();
                });
                if (that.options.editable.create !== false) {
                    that.element.on('dblclick' + NS, '.k-scheduler-content td', function (e) {
                        if (!$(this).parent().hasClass('k-scheduler-header-all-day')) {
                            var slot = that._slotByPosition(e.pageX, e.pageY);
                            if (slot) {
                                var resourceInfo = that._resourceBySlot(slot);
                                that.trigger('add', {
                                    eventInfo: extend({
                                        start: slot.startDate(),
                                        end: slot.endDate()
                                    }, resourceInfo)
                                });
                            }
                            e.preventDefault();
                        }
                    }).on('dblclick' + NS, '.k-scheduler-header-all-day td', function (e) {
                        var slot = that._slotByPosition(e.pageX, e.pageY);
                        if (slot) {
                            var resourceInfo = that._resourceBySlot(slot);
                            that.trigger('add', {
                                eventInfo: extend({}, {
                                    isAllDay: true,
                                    start: kendo.date.getDate(slot.startDate()),
                                    end: kendo.date.getDate(slot.startDate())
                                }, resourceInfo)
                            });
                        }
                        e.preventDefault();
                    });
                }
                if (that.options.editable.update !== false) {
                    that.element.on('dblclick' + NS, '.k-event', function (e) {
                        that.trigger('edit', { uid: $(this).closest('.k-event').attr(kendo.attr('uid')) });
                        e.preventDefault();
                    });
                }
            },
            _touchEditable: function () {
                var that = this;
                var threshold = 0;
                if (kendo.support.mobileOS.android) {
                    threshold = 5;
                }
                if (that.options.editable.create !== false) {
                    that._addUserEvents = new kendo.UserEvents(that.element, {
                        threshold: threshold,
                        filter: '.k-scheduler-content td',
                        tap: function (e) {
                            if (!$(e.target).parent().hasClass('k-scheduler-header-all-day')) {
                                var x = e.x.location !== undefined ? e.x.location : e.x;
                                var y = e.y.location !== undefined ? e.y.location : e.y;
                                var slot = that._slotByPosition(x, y);
                                if (slot) {
                                    var resourceInfo = that._resourceBySlot(slot);
                                    that.trigger('add', {
                                        eventInfo: extend({
                                            start: slot.startDate(),
                                            end: slot.endDate()
                                        }, resourceInfo)
                                    });
                                }
                                e.preventDefault();
                            }
                        }
                    });
                    that._allDayUserEvents = new kendo.UserEvents(that.element, {
                        threshold: threshold,
                        filter: '.k-scheduler-header-all-day td',
                        tap: function (e) {
                            var x = e.x.location !== undefined ? e.x.location : e.x;
                            var y = e.y.location !== undefined ? e.y.location : e.y;
                            var slot = that._slotByPosition(x, y);
                            if (slot) {
                                var resourceInfo = that._resourceBySlot(slot);
                                that.trigger('add', {
                                    eventInfo: extend({}, {
                                        isAllDay: true,
                                        start: kendo.date.getDate(slot.startDate()),
                                        end: kendo.date.getDate(slot.startDate())
                                    }, resourceInfo)
                                });
                            }
                            e.preventDefault();
                        }
                    });
                }
                if (that.options.editable.update !== false) {
                    that._editUserEvents = new kendo.UserEvents(that.element, {
                        threshold: threshold,
                        filter: '.k-event',
                        tap: function (e) {
                            var eventElement = $(e.target).closest('.k-event');
                            if (!eventElement.hasClass('k-event-active')) {
                                that.trigger('edit', { uid: eventElement.attr(kendo.attr('uid')) });
                            }
                            e.preventDefault();
                        }
                    });
                }
            },
            _layout: function (dates) {
                var columns = [];
                var rows = [];
                var options = this.options;
                var that = this;
                for (var idx = 0; idx < dates.length; idx++) {
                    var column = {};
                    column.text = that.dateHeaderTemplate({ date: dates[idx] });
                    if (kendo.date.isToday(dates[idx])) {
                        column.className = 'k-today';
                    }
                    columns.push(column);
                }
                var resources = this.groupedResources;
                if (options.allDaySlot) {
                    rows.push({
                        text: options.messages.allDay,
                        allDay: true,
                        cellContent: function (idx) {
                            var groupIndex = idx;
                            idx = resources.length && that._groupOrientation() !== 'vertical' ? idx % dates.length : idx;
                            return that.allDaySlotTemplate({
                                date: dates[idx],
                                resources: function () {
                                    return that._resourceBySlot({ groupIndex: groupIndex });
                                }
                            });
                        }
                    });
                }
                this._forTimeRange(this.startTime(), this.endTime(), function (date, majorTick, middleRow, lastSlotRow) {
                    var template = majorTick ? that.majorTimeHeaderTemplate : that.minorTimeHeaderTemplate;
                    var row = {
                        text: template({ date: date }),
                        className: lastSlotRow ? 'k-slot-cell' : ''
                    };
                    rows.push(row);
                });
                if (resources.length) {
                    if (this._groupOrientation() === 'vertical') {
                        rows = this._createRowsLayout(resources, rows, this.groupHeaderTemplate);
                    } else {
                        columns = this._createColumnsLayout(resources, columns, this.groupHeaderTemplate);
                    }
                }
                return {
                    columns: columns,
                    rows: rows
                };
            },
            _footer: function () {
                var options = this.options;
                if (options.footer !== false) {
                    var html = '<div class="k-header k-scheduler-footer">';
                    var command = options.footer.command;
                    if (command && command === 'workDay') {
                        html += '<ul class="k-reset k-header">';
                        html += '<li class="k-state-default k-scheduler-fullday"><a href="#" class="k-link"><span class="k-icon k-i-clock"></span>';
                        html += (options.showWorkHours ? options.messages.showFullDay : options.messages.showWorkDay) + '</a></li>';
                        html += '</ul>';
                    } else {
                        html += '&nbsp;';
                    }
                    html += '</div>';
                    this.footer = $(html).appendTo(this.element);
                    var that = this;
                    this.footer.on('click' + NS, '.k-scheduler-fullday', function (e) {
                        e.preventDefault();
                        that.trigger('navigate', {
                            view: that.name || options.name,
                            date: that.startDate(),
                            isWorkDay: !options.showWorkHours
                        });
                    });
                }
            },
            _forTimeRange: function (min, max, action, after) {
                min = toInvariantTime(min);
                max = toInvariantTime(max);
                var that = this, msMin = getMilliseconds(min), msMax = getMilliseconds(max), minorTickCount = that.options.minorTickCount, msMajorInterval = that.options.majorTick * MS_PER_MINUTE, msInterval = msMajorInterval / minorTickCount || 1, start = new Date(+min), startDay = start.getDate(), msStart, idx = 0, length, html = '';
                length = MS_PER_DAY / msInterval;
                if (msMin != msMax) {
                    if (msMin > msMax) {
                        msMax += MS_PER_DAY;
                    }
                    length = (msMax - msMin) / msInterval;
                }
                length = Math.round(length);
                for (; idx < length; idx++) {
                    var majorTickDivider = idx % (msMajorInterval / msInterval), isMajorTickRow = majorTickDivider === 0, isMiddleRow = majorTickDivider < minorTickCount - 1, isLastSlotRow = majorTickDivider === minorTickCount - 1;
                    html += action(start, isMajorTickRow, isMiddleRow, isLastSlotRow);
                    setTime(start, msInterval, false);
                }
                if (msMax) {
                    msStart = getMilliseconds(start);
                    if (startDay < start.getDate()) {
                        msStart += MS_PER_DAY;
                    }
                    if (msStart > msMax) {
                        start = new Date(+max);
                    }
                }
                if (after) {
                    html += after(start);
                }
                return html;
            },
            _content: function (dates) {
                var that = this;
                var options = that.options;
                var start = that.startTime();
                var end = this.endTime();
                var groupsCount = 1;
                var rowCount = 1;
                var columnCount = dates.length;
                var html = '';
                var resources = this.groupedResources;
                var slotTemplate = this.slotTemplate;
                var allDaySlotTemplate = this.allDaySlotTemplate;
                var isVerticalGroupped = false;
                var allDayVerticalGroupRow;
                if (resources.length) {
                    isVerticalGroupped = that._groupOrientation() === 'vertical';
                    if (isVerticalGroupped) {
                        rowCount = this._rowCountForLevel(this.rowLevels.length - 2);
                        if (options.allDaySlot) {
                            allDayVerticalGroupRow = function (groupIndex) {
                                var result = '<tr class="k-scheduler-header-all-day">';
                                var resources = function () {
                                    return that._resourceBySlot({ groupIndex: groupIndex });
                                };
                                for (var idx = 0, length = dates.length; idx < length; idx++) {
                                    result += '<td>' + allDaySlotTemplate({
                                        date: dates[idx],
                                        resources: resources
                                    }) + '</td>';
                                }
                                return result + '</tr>';
                            };
                        }
                    } else {
                        groupsCount = this._columnCountForLevel(this.columnLevels.length - 2);
                    }
                }
                html += '<tbody>';
                var appendRow = function (date, majorTick) {
                    var content = '';
                    var idx;
                    var length;
                    var classes = '';
                    var tmplDate;
                    var groupIdx = 0;
                    content = '<tr' + (majorTick ? ' class="k-middle-row"' : '') + '>';
                    var resources = function (groupIndex) {
                        return function () {
                            return that._resourceBySlot({ groupIndex: groupIndex });
                        };
                    };
                    for (; groupIdx < groupsCount; groupIdx++) {
                        for (idx = 0, length = columnCount; idx < length; idx++) {
                            classes = '';
                            if (kendo.date.isToday(dates[idx])) {
                                classes += 'k-today';
                            }
                            if (kendo.date.getMilliseconds(date) < kendo.date.getMilliseconds(that.options.workDayStart) || kendo.date.getMilliseconds(date) >= kendo.date.getMilliseconds(that.options.workDayEnd) || !that._isWorkDay(dates[idx])) {
                                classes += ' k-nonwork-hour';
                            }
                            content += '<td' + (classes !== '' ? ' class="' + classes + '"' : '') + '>';
                            tmplDate = kendo.date.getDate(dates[idx]);
                            kendo.date.setTime(tmplDate, kendo.date.getMilliseconds(date));
                            content += slotTemplate({
                                date: tmplDate,
                                resources: resources(isVerticalGroupped ? rowIdx : groupIdx)
                            });
                            content += '</td>';
                        }
                    }
                    content += '</tr>';
                    return content;
                };
                for (var rowIdx = 0; rowIdx < rowCount; rowIdx++) {
                    html += allDayVerticalGroupRow ? allDayVerticalGroupRow(rowIdx) : '';
                    html += this._forTimeRange(start, end, appendRow);
                }
                html += '</tbody>';
                this.content.find('table').append(html);
            },
            _isWorkDay: function (date) {
                var day = date.getDay();
                var workDays = this._workDays;
                for (var i = 0; i < workDays.length; i++) {
                    if (workDays[i] === day) {
                        return true;
                    }
                }
                return false;
            },
            _render: function (dates) {
                var that = this;
                dates = dates || [];
                this._dates = dates;
                this._startDate = dates[0];
                this._endDate = dates[dates.length - 1 || 0];
                this.createLayout(this._layout(dates));
                this._content(dates);
                this._footer();
                this.refreshLayout();
                var allDayHeader = this.element.find('.k-scheduler-header-all-day td');
                if (allDayHeader.length) {
                    this._allDayHeaderHeight = allDayHeader.first()[0].clientHeight;
                }
                that.datesHeader.on('click' + NS, '.k-nav-day', function (e) {
                    var th = $(e.currentTarget).closest('th');
                    var offset = th.offset();
                    var slot = that._slotByPosition(offset.left, offset.top + th.outerHeight());
                    that.trigger('navigate', {
                        view: 'day',
                        date: slot.startDate()
                    });
                });
            },
            startTime: function () {
                var options = this.options;
                return options.showWorkHours ? options.workDayStart : options.startTime;
            },
            endTime: function () {
                var options = this.options;
                return options.showWorkHours ? options.workDayEnd : options.endTime;
            },
            startDate: function () {
                return this._startDate;
            },
            endDate: function () {
                return this._endDate;
            },
            _end: function (isAllDay) {
                var time = getMilliseconds(this.endTime()) || MS_PER_DAY;
                if (isAllDay) {
                    time = 0;
                }
                return new Date(this._endDate.getTime() + time);
            },
            nextDate: function () {
                return kendo.date.nextDay(this.endDate());
            },
            previousDate: function () {
                return kendo.date.previousDay(this.startDate());
            },
            calculateDateRange: function () {
                this._render([this.options.date]);
            },
            destroy: function () {
                var that = this;
                if (that._currentTimeUpdateTimer) {
                    clearInterval(that._currentTimeUpdateTimer);
                }
                if (that.datesHeader) {
                    that.datesHeader.off(NS);
                }
                if (that.element) {
                    that.element.off(NS);
                }
                if (that.footer) {
                    that.footer.remove();
                }
                SchedulerView.fn.destroy.call(this);
                if (this._isMobile() && that.options.editable) {
                    if (that.options.editable.create !== false) {
                        that._addUserEvents.destroy();
                        that._allDayUserEvents.destroy();
                    }
                    if (that.options.editable.update !== false) {
                        that._editUserEvents.destroy();
                    }
                }
            },
            inRange: function (options) {
                var inRange = SchedulerView.fn.inRange.call(this, options);
                var startTime = getMilliseconds(this.startTime());
                var endTime = getMilliseconds(this.endTime()) || kendo.date.MS_PER_DAY;
                var start = getMilliseconds(options.start);
                var end = getMilliseconds(options.end) || kendo.date.MS_PER_DAY;
                return inRange && startTime <= start && end <= endTime;
            },
            selectionByElement: function (cell) {
                var offset = cell.offset();
                return this._slotByPosition(offset.left, offset.top);
            },
            _timeSlotInterval: function () {
                var options = this.options;
                return options.majorTick / options.minorTickCount * MS_PER_MINUTE;
            },
            _timeSlotIndex: function (date) {
                var options = this.options;
                var eventStartTime = getMilliseconds(date);
                var startTime = getMilliseconds(this.startTime());
                var timeSlotInterval = options.majorTick / options.minorTickCount * MS_PER_MINUTE;
                return (eventStartTime - startTime) / timeSlotInterval;
            },
            _slotIndex: function (date, multiday) {
                if (multiday) {
                    return this._dateSlotIndex(date);
                }
                return this._timeSlotIndex(date);
            },
            _dateSlotIndex: function (date, overlaps) {
                var idx;
                var length;
                var slots = this._dates || [];
                var slotStart;
                var slotEnd;
                var offset = 1;
                for (idx = 0, length = slots.length; idx < length; idx++) {
                    slotStart = kendo.date.getDate(slots[idx]);
                    slotEnd = new Date(kendo.date.getDate(slots[idx]).getTime() + MS_PER_DAY - (overlaps ? 0 : 1));
                    if (isInDateRange(date, slotStart, slotEnd)) {
                        return idx * offset;
                    }
                }
                return -1;
            },
            _positionAllDayEvent: function (element, slotRange) {
                var slotWidth = slotRange.innerWidth();
                var startIndex = slotRange.start.index;
                var endIndex = slotRange.end.index;
                var allDayEvents = SchedulerView.collidingEvents(slotRange.events(), startIndex, endIndex);
                var currentColumnCount = this._headerColumnCount || 0;
                var leftOffset = 2;
                var rightOffset = startIndex !== endIndex ? 5 : 4;
                var eventHeight = this._allDayHeaderHeight;
                var start = slotRange.startSlot();
                element.css({
                    left: start.offsetLeft + leftOffset,
                    width: slotWidth - rightOffset
                });
                slotRange.addEvent({
                    slotIndex: startIndex,
                    start: startIndex,
                    end: endIndex,
                    element: element
                });
                allDayEvents.push({
                    slotIndex: startIndex,
                    start: startIndex,
                    end: endIndex,
                    element: element
                });
                var rows = SchedulerView.createRows(allDayEvents);
                if (rows.length && rows.length > currentColumnCount) {
                    this._headerColumnCount = rows.length;
                }
                var top = slotRange.start.offsetTop;
                for (var idx = 0, length = rows.length; idx < length; idx++) {
                    var rowEvents = rows[idx].events;
                    for (var j = 0, eventLength = rowEvents.length; j < eventLength; j++) {
                        $(rowEvents[j].element).css({ top: top + idx * eventHeight });
                    }
                }
            },
            _arrangeColumns: function (element, top, height, slotRange) {
                var startSlot = slotRange.start;
                element = {
                    element: element,
                    slotIndex: startSlot.index,
                    start: top,
                    end: top + height
                };
                var columns, slotWidth = startSlot.clientWidth, eventRightOffset = slotWidth * 0.1, columnEvents, eventElements = slotRange.events(), slotEvents = SchedulerView.collidingEvents(eventElements, element.start, element.end);
                slotRange.addEvent(element);
                slotEvents.push(element);
                columns = SchedulerView.createColumns(slotEvents);
                var columnWidth = (slotWidth - eventRightOffset) / columns.length;
                for (var idx = 0, length = columns.length; idx < length; idx++) {
                    columnEvents = columns[idx].events;
                    for (var j = 0, eventLength = columnEvents.length; j < eventLength; j++) {
                        columnEvents[j].element[0].style.width = columnWidth - 4 + 'px';
                        columnEvents[j].element[0].style.left = (this._isRtl ? eventRightOffset : 0) + startSlot.offsetLeft + idx * columnWidth + 2 + 'px';
                    }
                }
            },
            _positionEvent: function (event, element, slotRange) {
                var start = event._startTime || event.start;
                var end = event._endTime || event.end;
                var rect = slotRange.innerRect(start, end, false);
                var height = rect.bottom - rect.top - 2;
                if (height < 0) {
                    height = 0;
                }
                element.css({
                    top: rect.top,
                    height: height
                });
                this._arrangeColumns(element, rect.top, element[0].clientHeight, slotRange);
            },
            _createEventElement: function (event, isOneDayEvent, head, tail) {
                var template = isOneDayEvent ? this.eventTemplate : this.allDayEventTemplate;
                var options = this.options;
                var editable = options.editable;
                var isMobile = this._isMobile();
                var showDelete = editable && editable.destroy !== false && !isMobile;
                var resizable = editable && editable.resize !== false;
                var startDate = getDate(this.startDate());
                var endDate = getDate(this.endDate());
                var startTime = getMilliseconds(this.startTime());
                var endTime = getMilliseconds(this.endTime());
                var eventStartTime = event._time('start');
                var eventEndTime = event._time('end');
                var middle;
                if (startTime >= endTime) {
                    endTime = getMilliseconds(new Date(this.endTime().getTime() + MS_PER_DAY - 1));
                }
                if (!isOneDayEvent && !event.isAllDay) {
                    endDate = new Date(endDate.getTime() + MS_PER_DAY);
                }
                var eventStartDate = event.start;
                var eventEndDate = event.end;
                if (event.isAllDay) {
                    eventEndDate = getDate(event.end);
                }
                if (!isInDateRange(getDate(eventStartDate), startDate, endDate) && !isInDateRange(eventEndDate, startDate, endDate) || isOneDayEvent && eventStartTime < startTime && eventEndTime > endTime) {
                    middle = true;
                } else if (getDate(eventStartDate) < startDate || isOneDayEvent && eventStartTime < startTime) {
                    tail = true;
                } else if (eventEndDate > endDate && !isOneDayEvent || isOneDayEvent && eventEndTime > endTime) {
                    head = true;
                }
                var resources = this.eventResources(event);
                if (event._startTime && eventStartTime !== kendo.date.getMilliseconds(event.start)) {
                    eventStartDate = new Date(eventStartTime);
                    eventStartDate = kendo.timezone.apply(eventStartDate, 'Etc/UTC');
                }
                if (event._endTime && eventEndTime !== kendo.date.getMilliseconds(event.end)) {
                    eventEndDate = new Date(eventEndTime);
                    eventEndDate = kendo.timezone.apply(eventEndDate, 'Etc/UTC');
                }
                var data = extend({}, {
                    ns: kendo.ns,
                    resizable: resizable,
                    showDelete: showDelete,
                    middle: middle,
                    head: head,
                    tail: tail,
                    singleDay: this._dates.length == 1,
                    resources: resources,
                    inverseColor: resources && resources[0] ? this._shouldInverseResourceColor(resources[0]) : false
                }, event, {
                    start: eventStartDate,
                    end: eventEndDate
                });
                var element = $(template(data));
                this.angular('compile', function () {
                    return {
                        elements: element,
                        data: [{ dataItem: data }]
                    };
                });
                return element;
            },
            _isInTimeSlot: function (event) {
                var slotStartTime = this.startTime(), slotEndTime = this.endTime(), startTime = event._startTime || event.start, endTime = event._endTime || event.end;
                if (getMilliseconds(slotEndTime) === getMilliseconds(kendo.date.getDate(slotEndTime))) {
                    slotEndTime = kendo.date.getDate(slotEndTime);
                    setTime(slotEndTime, MS_PER_DAY - 1);
                }
                if (event._date('end') > event._date('start')) {
                    endTime = +event._date('end') + (MS_PER_DAY - 1);
                }
                endTime = endTime - event._date('end');
                startTime = startTime - event._date('start');
                slotEndTime = getMilliseconds(slotEndTime);
                slotStartTime = getMilliseconds(slotStartTime);
                if (slotStartTime === startTime && startTime === endTime) {
                    return true;
                }
                var overlaps = startTime !== slotEndTime;
                return isInTimeRange(startTime, slotStartTime, slotEndTime, overlaps) || isInTimeRange(endTime, slotStartTime, slotEndTime, overlaps) || isInTimeRange(slotStartTime, startTime, endTime) || isInTimeRange(slotEndTime, startTime, endTime);
            },
            _isInDateSlot: function (event) {
                var groups = this.groups[0];
                var slotStart = groups.firstSlot().start;
                var slotEnd = groups.lastSlot().end - 1;
                var startTime = kendo.date.toUtcTime(event.start);
                var endTime = kendo.date.toUtcTime(event.end);
                return (isInDateRange(startTime, slotStart, slotEnd) || isInDateRange(endTime, slotStart, slotEnd) || isInDateRange(slotStart, startTime, endTime) || isInDateRange(slotEnd, startTime, endTime)) && (!isInDateRange(endTime, slotStart, slotStart) || isInDateRange(endTime, startTime, startTime) || event.isAllDay);
            },
            _updateAllDayHeaderHeight: function (height) {
                if (this._height !== height) {
                    this._height = height;
                    var allDaySlots = this.element.find('.k-scheduler-header-all-day td');
                    if (allDaySlots.length) {
                        allDaySlots.parent().add(this.element.find('.k-scheduler-times-all-day').parent()).height(height);
                        for (var groupIndex = 0; groupIndex < this.groups.length; groupIndex++) {
                            this.groups[groupIndex].refresh();
                        }
                    }
                }
            },
            _renderEvents: function (events, groupIndex) {
                var allDayEventContainer = this.datesHeader.find('.k-scheduler-header-wrap > div');
                var event;
                var idx;
                var length;
                for (idx = 0, length = events.length; idx < length; idx++) {
                    event = events[idx];
                    if (this._isInDateSlot(event)) {
                        var isMultiDayEvent = event.isAllDay || event.end.getTime() - event.start.getTime() >= MS_PER_DAY;
                        var container = isMultiDayEvent && !this._isVerticallyGrouped() ? allDayEventContainer : this.content;
                        var element;
                        var ranges;
                        var group;
                        if (!isMultiDayEvent) {
                            if (this._isInTimeSlot(event)) {
                                group = this.groups[groupIndex];
                                if (!group._continuousEvents) {
                                    group._continuousEvents = [];
                                }
                                ranges = group.slotRanges(event);
                                var rangeCount = ranges.length;
                                for (var rangeIndex = 0; rangeIndex < rangeCount; rangeIndex++) {
                                    var range = ranges[rangeIndex];
                                    var start = event.start;
                                    var end = event.end;
                                    if (rangeCount > 1) {
                                        if (rangeIndex === 0) {
                                            end = range.end.endDate();
                                        } else if (rangeIndex == rangeCount - 1) {
                                            start = range.start.startDate();
                                        } else {
                                            start = range.start.startDate();
                                            end = range.end.endDate();
                                        }
                                    }
                                    var occurrence = event.clone({
                                        start: start,
                                        end: end,
                                        _startTime: event._startTime,
                                        _endTime: event.endTime
                                    });
                                    if (this._isInTimeSlot(occurrence)) {
                                        var head = range.head;
                                        element = this._createEventElement(event, !isMultiDayEvent, head, range.tail);
                                        element.appendTo(container);
                                        this._positionEvent(occurrence, element, range);
                                        addContinuousEvent(group, range, element, false);
                                    }
                                }
                            }
                        } else if (this.options.allDaySlot) {
                            group = this.groups[groupIndex];
                            if (!group._continuousEvents) {
                                group._continuousEvents = [];
                            }
                            ranges = group.slotRanges(event);
                            if (ranges.length) {
                                element = this._createEventElement(event, !isMultiDayEvent);
                                this._positionAllDayEvent(element, ranges[0]);
                                addContinuousEvent(group, ranges[0], element, true);
                                element.appendTo(container);
                            }
                        }
                    }
                }
            },
            render: function (events) {
                this._headerColumnCount = 0;
                this._groups();
                this.element.find('.k-event').remove();
                events = new kendo.data.Query(events).sort([
                    {
                        field: 'start',
                        dir: 'asc'
                    },
                    {
                        field: 'end',
                        dir: 'desc'
                    }
                ]).toArray();
                var eventsByResource = [];
                this._eventsByResource(events, this.groupedResources, eventsByResource);
                var eventsPerDate = $.map(this._dates, function (date) {
                    return Math.max.apply(null, $.map(eventsByResource, function (events) {
                        return $.grep(events, function (event) {
                            return event.isMultiDay() && isInDateRange(date, getDate(event.start), getDate(event.end));
                        }).length;
                    }));
                });
                var height = Math.max.apply(null, eventsPerDate);
                this._updateAllDayHeaderHeight((height + 1) * this._allDayHeaderHeight);
                for (var groupIndex = 0; groupIndex < eventsByResource.length; groupIndex++) {
                    this._renderEvents(eventsByResource[groupIndex], groupIndex);
                }
                this.refreshLayout();
                this._currentTime(false);
                this.trigger('activate');
            },
            _eventsByResource: function (events, resources, result) {
                var resource = resources[0];
                if (resource) {
                    var view = resource.dataSource.view();
                    for (var itemIdx = 0; itemIdx < view.length; itemIdx++) {
                        var value = this._resourceValue(resource, view[itemIdx]);
                        var eventsFilteredByResource = new kendo.data.Query(events).filter({
                            field: resource.field,
                            operator: SchedulerView.groupEqFilter(value)
                        }).toArray();
                        if (resources.length > 1) {
                            this._eventsByResource(eventsFilteredByResource, resources.slice(1), result);
                        } else {
                            result.push(eventsFilteredByResource);
                        }
                    }
                } else {
                    result.push(events);
                }
            },
            _columnOffsetForResource: function (index) {
                return this._columnCountForLevel(index) / this._columnCountForLevel(index - 1);
            },
            _columnCountForLevel: function (level) {
                var columnLevel = this.columnLevels[level];
                return columnLevel ? columnLevel.length : 0;
            },
            _rowCountForLevel: function (level) {
                var rowLevel = this.rowLevels[level];
                return rowLevel ? rowLevel.length : 0;
            },
            clearSelection: function () {
                this.content.add(this.datesHeader).find('.k-state-selected').removeAttr('id').attr('aria-selected', false).removeClass('k-state-selected');
            },
            _updateDirection: function (selection, ranges, multiple, reverse, vertical) {
                var isDaySlot = selection.isAllDay;
                var startSlot = ranges[0].start;
                var endSlot = ranges[ranges.length - 1].end;
                if (multiple) {
                    if (vertical) {
                        if (!isDaySlot && startSlot.index === endSlot.index && startSlot.collectionIndex === endSlot.collectionIndex) {
                            selection.backward = reverse;
                        }
                    } else {
                        if (isDaySlot && startSlot.index === endSlot.index || !isDaySlot && startSlot.collectionIndex === endSlot.collectionIndex) {
                            selection.backward = reverse;
                        }
                    }
                }
            },
            _changeViewPeriod: function (selection, reverse, vertical) {
                if (!vertical) {
                    var date = reverse ? this.previousDate() : this.nextDate();
                    var start = selection.start;
                    var end = selection.end;
                    selection.start = new Date(date);
                    selection.end = new Date(date);
                    var endMilliseconds = selection.isAllDay ? MS_PER_DAY : getMilliseconds(end);
                    setTime(selection.start, getMilliseconds(start));
                    setTime(selection.end, endMilliseconds);
                    if (!this._isVerticallyGrouped()) {
                        selection.groupIndex = reverse ? this.groups.length - 1 : 0;
                    }
                    selection.events = [];
                    return true;
                }
            }
        });
        extend(true, ui, {
            MultiDayView: MultiDayView,
            DayView: MultiDayView.extend({
                options: {
                    name: 'DayView',
                    title: 'Day'
                },
                name: 'day'
            }),
            WeekView: MultiDayView.extend({
                options: {
                    name: 'WeekView',
                    title: 'Week',
                    selectedDateFormat: '{0:D} - {1:D}',
                    selectedShortDateFormat: '{0:d} - {1:d}'
                },
                name: 'week',
                calculateDateRange: function () {
                    var selectedDate = this.options.date, start = kendo.date.dayOfWeek(selectedDate, this.calendarInfo().firstDay, -1), idx, length, dates = [];
                    for (idx = 0, length = 7; idx < length; idx++) {
                        dates.push(start);
                        start = kendo.date.nextDay(start);
                    }
                    this._render(dates);
                }
            }),
            WorkWeekView: MultiDayView.extend({
                options: {
                    name: 'WorkWeekView',
                    title: 'Work Week',
                    selectedDateFormat: '{0:D} - {1:D}',
                    selectedShortDateFormat: '{0:d} - {1:d}'
                },
                name: 'workWeek',
                nextDate: function () {
                    return kendo.date.dayOfWeek(kendo.date.nextDay(this.startDate()), this.calendarInfo().firstDay, 1);
                },
                previousDate: function () {
                    var weekStart = kendo.date.dayOfWeek(this.startDate(), this.calendarInfo().firstDay, -1);
                    return kendo.date.previousDay(weekStart);
                },
                calculateDateRange: function () {
                    var selectedDate = this.options.date, dayOfWeek = kendo.date.dayOfWeek, weekStart = dayOfWeek(selectedDate, this.calendarInfo().firstDay, -1), start = dayOfWeek(weekStart, this.options.workWeekStart, 1), end = dayOfWeek(start, this.options.workWeekEnd, 1), dates = [];
                    while (start <= end) {
                        dates.push(start);
                        start = kendo.date.nextDay(start);
                    }
                    this._render(dates);
                }
            })
        });
    }(window.kendo.jQuery));
    return window.kendo;
}, typeof define == 'function' && define.amd ? define : function (a1, a2, a3) {
    (a3 || a2)();
}));
/** 
 * Kendo UI v2016.2.714 (http://www.telerik.com/kendo-ui)                                                                                                                                               
 * Copyright 2016 Telerik AD. All rights reserved.                                                                                                                                                      
 *                                                                                                                                                                                                      
 * Kendo UI commercial licenses may be obtained at                                                                                                                                                      
 * http://www.telerik.com/purchase/license-agreement/kendo-ui-complete                                                                                                                                  
 * If you do not own a commercial license, this file shall be governed by the trial license terms.                                                                                                      
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       

*/
(function (f, define) {
    define('kendo.scheduler.agendaview', ['kendo.scheduler.view'], f);
}(function () {
    var __meta__ = {
        id: 'scheduler.agendaview',
        name: 'Scheduler Agenda View',
        category: 'web',
        description: 'The Scheduler Agenda View',
        depends: ['scheduler.view'],
        hidden: true
    };
    (function ($) {
        var kendo = window.kendo, ui = kendo.ui, NS = '.kendoAgendaView';
        var EVENT_WRAPPER_FORMAT = '<div class="k-task" title="#:title.replace(/"/g,"\'")#" data-#=kendo.ns#uid="#=uid#">' + '# if (resources[0]) {#' + '<span class="k-scheduler-mark" style="background-color:#=resources[0].color#"></span>' + '# } #' + '# if (data.isException()) { #' + '<span class="k-icon k-i-exception"></span>' + '# } else if (data.isRecurring()) {#' + '<span class="k-icon k-i-refresh"></span>' + '# } #' + '{0}' + '#if (showDelete) {#' + '<a href="\\#" class="k-link k-event-delete"><span class="k-icon k-si-close"></span></a>' + '#}#' + '</div>';
        ui.AgendaView = ui.SchedulerView.extend({
            init: function (element, options) {
                ui.SchedulerView.fn.init.call(this, element, options);
                options = this.options;
                if (options.editable) {
                    options.editable = $.extend({ 'delete': true }, options.editable, {
                        create: false,
                        update: false
                    });
                }
                this.title = options.title;
                this._eventTemplate = this._eventTmpl(options.eventTemplate, EVENT_WRAPPER_FORMAT);
                this._dateTemplate = kendo.template(options.eventDateTemplate);
                this._groupTemplate = kendo.template(options.eventGroupTemplate);
                this._timeTemplate = kendo.template(options.eventTimeTemplate);
                this.element.on('mouseenter' + NS, '.k-scheduler-agenda .k-scheduler-content tr', '_mouseenter').on('mouseleave' + NS, '.k-scheduler-agenda .k-scheduler-content tr', '_mouseleave').on('click' + NS, '.k-scheduler-agenda .k-scheduler-content .k-link:has(.k-si-close)', '_remove');
                this._renderLayout(options.date);
            },
            name: 'agenda',
            _mouseenter: function (e) {
                $(e.currentTarget).addClass('k-state-hover');
            },
            _mouseleave: function (e) {
                $(e.currentTarget).removeClass('k-state-hover');
            },
            _remove: function (e) {
                e.preventDefault();
                this.trigger('remove', { uid: $(e.currentTarget).closest('.k-task').attr(kendo.attr('uid')) });
            },
            nextDate: function () {
                return kendo.date.nextDay(this.startDate());
            },
            startDate: function () {
                return this._startDate;
            },
            endDate: function () {
                return this._endDate;
            },
            previousDate: function () {
                return kendo.date.previousDay(this.startDate());
            },
            _renderLayout: function (date) {
                this._startDate = date;
                this._endDate = kendo.date.addDays(date, 7);
                this.createLayout(this._layout());
                this.table.addClass('k-scheduler-agenda');
            },
            _layout: function () {
                var columns = [
                    {
                        text: this.options.messages.time,
                        className: 'k-scheduler-timecolumn'
                    },
                    { text: this.options.messages.event }
                ];
                if (!this._isMobilePhoneView()) {
                    columns.splice(0, 0, {
                        text: this.options.messages.date,
                        className: 'k-scheduler-datecolumn'
                    });
                }
                var resources = this.groupedResources;
                if (resources.length) {
                    var groupHeaders = [];
                    for (var idx = 0; idx < resources.length; idx++) {
                        groupHeaders.push({
                            text: '',
                            className: 'k-scheduler-groupcolumn'
                        });
                    }
                    columns = groupHeaders.concat(columns);
                }
                return { columns: columns };
            },
            _tasks: function (events) {
                var tasks = [];
                for (var idx = 0; idx < events.length; idx++) {
                    var event = events[idx];
                    var start = event.start;
                    var end = event.end;
                    var eventDurationInDays = Math.ceil((end - kendo.date.getDate(start)) / kendo.date.MS_PER_DAY);
                    var task = event.clone();
                    task.startDate = kendo.date.getDate(start);
                    if (task.startDate >= this.startDate()) {
                        tasks.push(task);
                    }
                    if (eventDurationInDays > 1) {
                        task.end = kendo.date.nextDay(start);
                        task.head = true;
                        for (var day = 1; day < eventDurationInDays; day++) {
                            start = task.end;
                            task = event.clone();
                            task.start = start;
                            task.startDate = kendo.date.getDate(start);
                            task.end = kendo.date.nextDay(start);
                            if (day == eventDurationInDays - 1) {
                                task.end = new Date(task.start.getFullYear(), task.start.getMonth(), task.start.getDate(), end.getHours(), end.getMinutes(), end.getSeconds(), end.getMilliseconds());
                                task.tail = true;
                            } else {
                                task.isAllDay = true;
                                task.middle = true;
                            }
                            if (kendo.date.getDate(task.end) <= this.endDate() && task.start >= this.startDate() || kendo.date.getDate(task.start).getTime() == this.endDate().getTime()) {
                                tasks.push(task);
                            }
                        }
                    }
                }
                return new kendo.data.Query(tasks).sort([
                    {
                        field: 'start',
                        dir: 'asc'
                    },
                    {
                        field: 'end',
                        dir: 'asc'
                    }
                ]).groupBy({ field: 'startDate' }).toArray();
            },
            _renderTaskGroups: function (tasksGroups, groups) {
                var tableRows = [];
                var editable = this.options.editable;
                var showDelete = editable && editable.destroy !== false && !this._isMobile();
                var isPhoneView = this._isMobilePhoneView();
                for (var taskGroupIndex = 0; taskGroupIndex < tasksGroups.length; taskGroupIndex++) {
                    var date = tasksGroups[taskGroupIndex].value;
                    var tasks = tasksGroups[taskGroupIndex].items;
                    var today = kendo.date.isToday(date);
                    for (var taskIndex = 0; taskIndex < tasks.length; taskIndex++) {
                        var task = tasks[taskIndex];
                        var tableRow = [];
                        var headerCells = !isPhoneView ? tableRow : [];
                        if (taskGroupIndex === 0 && taskIndex === 0 && groups.length) {
                            for (var idx = 0; idx < groups.length; idx++) {
                                headerCells.push(kendo.format('<td class="k-scheduler-groupcolumn{2}" rowspan="{0}">{1}</td>', groups[idx].rowSpan, this._groupTemplate({ value: groups[idx].text }), groups[idx].className));
                            }
                        }
                        if (taskIndex === 0) {
                            if (isPhoneView) {
                                headerCells.push(kendo.format('<td class="k-scheduler-datecolumn" colspan="2">{0}</td>', this._dateTemplate({ date: date })));
                                tableRows.push('<tr role="row" aria-selected="false"' + (today ? ' class="k-today">' : '>') + headerCells.join('') + '</tr>');
                            } else {
                                tableRow.push(kendo.format('<td class="k-scheduler-datecolumn{3}{2}" rowspan="{0}">{1}</td>', tasks.length, this._dateTemplate({ date: date }), taskGroupIndex == tasksGroups.length - 1 && !groups.length ? ' k-last' : '', !groups.length ? ' k-first' : ''));
                            }
                        }
                        if (task.head) {
                            task.format = '{0:t}';
                        } else if (task.tail) {
                            task.format = '{1:t}';
                        } else {
                            task.format = '{0:t}-{1:t}';
                        }
                        task.resources = this.eventResources(task);
                        tableRow.push(kendo.format('<td class="k-scheduler-timecolumn"><div>{0}{1}{2}</div></td><td>{3}</td>', task.tail || task.middle ? '<span class="k-icon k-i-arrow-w"></span>' : '', this._timeTemplate(task.clone({
                            start: task._startTime || task.start,
                            end: task.endTime || task.end
                        })), task.head || task.middle ? '<span class="k-icon k-i-arrow-e"></span>' : '', this._eventTemplate(task.clone({ showDelete: showDelete }))));
                        tableRows.push('<tr role="row" aria-selected="false"' + (today ? ' class="k-today">' : '>') + tableRow.join('') + '</tr>');
                    }
                }
                return tableRows.join('');
            },
            render: function (events) {
                var table = this.content.find('table').empty();
                var groups = [];
                if (events.length > 0) {
                    var resources = this.groupedResources;
                    if (resources.length) {
                        groups = this._createGroupConfiguration(events, resources, null);
                        this._renderGroups(groups, table, []);
                    } else {
                        groups = this._tasks(events);
                        table.append(this._renderTaskGroups(groups, []));
                    }
                }
                var items = this._eventsList = flattenTaskGroups(groups);
                this._angularItems(table, items);
                this.refreshLayout();
                this.trigger('activate');
            },
            _angularItems: function (table, items) {
                this.angular('compile', function () {
                    var data = [], elements = items.map(function (item) {
                            data.push({ dataItem: item });
                            return table.find('.k-task[' + kendo.attr('uid') + '=' + item.uid + ']');
                        });
                    return {
                        elements: elements,
                        data: data
                    };
                });
            },
            _renderGroups: function (groups, table, parentGroups) {
                for (var idx = 0, length = groups.length; idx < length; idx++) {
                    var parents = parentGroups.splice(0);
                    parents.push(groups[idx]);
                    if (groups[idx].groups) {
                        this._renderGroups(groups[idx].groups, table, parents);
                    } else {
                        table.append(this._renderTaskGroups(groups[idx].items, parents));
                    }
                }
            },
            _createGroupConfiguration: function (events, resources, parent) {
                var resource = resources[0];
                var configuration = [];
                var data = resource.dataSource.view();
                var isPhoneView = this._isMobilePhoneView();
                for (var dataIndex = 0; dataIndex < data.length; dataIndex++) {
                    var value = resourceValue(resource, data[dataIndex]);
                    var tmp = new kendo.data.Query(events).filter({
                        field: resource.field,
                        operator: ui.SchedulerView.groupEqFilter(value)
                    }).toArray();
                    if (tmp.length) {
                        var tasks = this._tasks(tmp);
                        var className = parent ? '' : ' k-first';
                        if (dataIndex === data.length - 1 && (!parent || parent.className.indexOf('k-last') > -1)) {
                            className += ' k-last';
                        }
                        var obj = {
                            text: kendo.getter(resource.dataTextField)(data[dataIndex]),
                            value: value,
                            rowSpan: 0,
                            className: className
                        };
                        if (resources.length > 1) {
                            obj.groups = this._createGroupConfiguration(tmp, resources.slice(1), obj);
                            if (parent) {
                                parent.rowSpan += obj.rowSpan;
                            }
                        } else {
                            obj.items = tasks;
                            var span = rowSpan(obj.items);
                            if (isPhoneView) {
                                span += obj.items.length;
                            }
                            obj.rowSpan = span;
                            if (parent) {
                                parent.rowSpan += span;
                            }
                        }
                        configuration.push(obj);
                    }
                }
                return configuration;
            },
            selectionByElement: function (cell) {
                var index, event;
                cell = $(cell);
                if (cell.hasClass('k-scheduler-datecolumn') || !this._eventsList.length) {
                    return;
                }
                if (cell.is('.k-task')) {
                    cell = cell.closest('td');
                }
                if (this._isMobile()) {
                    var parent = cell.parent();
                    index = parent.parent().children().filter(function () {
                        return $(this).children(':not(.k-scheduler-datecolumn)').length;
                    }).index(parent);
                } else {
                    index = cell.parent().index();
                }
                event = this._eventsList[index];
                return {
                    index: index,
                    start: event.start,
                    end: event.end,
                    isAllDay: event.isAllDay,
                    uid: event.uid
                };
            },
            select: function (selection) {
                this.clearSelection();
                var row = this.table.find('.k-task').eq(selection.index).closest('tr').addClass('k-state-selected').attr('aria-selected', true)[0];
                this.current(row);
            },
            move: function (selection, key) {
                var handled = false;
                var index = selection.index;
                if (key == kendo.keys.UP) {
                    index--;
                    handled = true;
                } else if (key == kendo.keys.DOWN) {
                    index++;
                    handled = true;
                }
                if (handled) {
                    var event = this._eventsList[index];
                    if (event) {
                        selection.start = event.start;
                        selection.end = event.end;
                        selection.isAllDay = event.isAllDay;
                        selection.events = [event.uid];
                        selection.index = index;
                    }
                }
                return handled;
            },
            moveToEvent: function () {
                return false;
            },
            constrainSelection: function (selection) {
                var event = this._eventsList[0];
                if (event) {
                    selection.start = event.start;
                    selection.end = event.end;
                    selection.isAllDay = event.isAllDay;
                    selection.events = [event.uid];
                    selection.index = 0;
                }
            },
            isInRange: function () {
                return true;
            },
            destroy: function () {
                if (this.element) {
                    this.element.off(NS);
                }
                ui.SchedulerView.fn.destroy.call(this);
            },
            options: {
                title: 'Agenda',
                name: 'agenda',
                editable: true,
                selectedDateFormat: '{0:D}-{1:D}',
                selectedShortDateFormat: '{0:d} - {1:d}',
                eventTemplate: '#:title#',
                eventTimeTemplate: '#if(data.isAllDay) {#' + '#=this.options.messages.allDay#' + '#} else { #' + '#=kendo.format(format, start, end)#' + '# } #',
                eventDateTemplate: '<strong class="k-scheduler-agendaday">' + '#=kendo.toString(date, "dd")#' + '</strong>' + '<em class="k-scheduler-agendaweek">' + '#=kendo.toString(date,"dddd")#' + '</em>' + '<span class="k-scheduler-agendadate">' + '#=kendo.toString(date, "y")#' + '</span>',
                eventGroupTemplate: '<strong class="k-scheduler-adgendagroup">' + '#=value#' + '</strong>',
                messages: {
                    event: 'Event',
                    date: 'Date',
                    time: 'Time',
                    allDay: 'all day'
                }
            }
        });
        function rowSpan(tasks) {
            var result = 0;
            for (var idx = 0, length = tasks.length; idx < length; idx++) {
                result += tasks[idx].items.length;
            }
            return result;
        }
        function resourceValue(resource, item) {
            if (resource.valuePrimitive) {
                item = kendo.getter(resource.dataValueField)(item);
            }
            return item;
        }
        function flattenTaskGroups(groups) {
            var idx = 0, length = groups.length, item, result = [];
            for (; idx < length; idx++) {
                item = groups[idx];
                if (item.groups) {
                    item = flattenGroup(item.groups);
                    result = result.concat(item);
                } else {
                    result = result.concat(flattenGroup(item.items));
                }
            }
            return result;
        }
        function flattenGroup(groups) {
            var items = [].concat(groups), item = items.shift(), result = [], push = [].push;
            while (item) {
                if (item.groups) {
                    push.apply(items, item.groups);
                } else if (item.items) {
                    push.apply(items, item.items);
                } else {
                    push.call(result, item);
                }
                item = items.shift();
            }
            return result;
        }
    }(window.kendo.jQuery));
    return window.kendo;
}, typeof define == 'function' && define.amd ? define : function (a1, a2, a3) {
    (a3 || a2)();
}));
/** 
 * Kendo UI v2016.2.714 (http://www.telerik.com/kendo-ui)                                                                                                                                               
 * Copyright 2016 Telerik AD. All rights reserved.                                                                                                                                                      
 *                                                                                                                                                                                                      
 * Kendo UI commercial licenses may be obtained at                                                                                                                                                      
 * http://www.telerik.com/purchase/license-agreement/kendo-ui-complete                                                                                                                                  
 * If you do not own a commercial license, this file shall be governed by the trial license terms.                                                                                                      
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       

*/
(function (f, define) {
    define('kendo.scheduler.timelineview', ['kendo.scheduler.view'], f);
}(function () {
    var __meta__ = {
        id: 'scheduler.timelineview',
        name: 'Scheduler Timeline View',
        category: 'web',
        description: 'The Scheduler Timeline View',
        depends: ['scheduler.view'],
        hidden: true
    };
    (function ($, undefined) {
        var kendo = window.kendo, ui = kendo.ui, setTime = kendo.date.setTime, SchedulerView = ui.SchedulerView, extend = $.extend, proxy = $.proxy, getDate = kendo.date.getDate, getMilliseconds = kendo.date.getMilliseconds, MS_PER_DAY = kendo.date.MS_PER_DAY, MS_PER_MINUTE = kendo.date.MS_PER_MINUTE, CURRENT_TIME_MARKER_CLASS = 'k-current-time', CURRENT_TIME_MARKER_ARROW_CLASS = 'k-current-time-arrow', SCHEDULER_HEADER_WRAP_CLASS = 'k-scheduler-header-wrap', BORDER_SIZE_COEFF = 0.8666, NS = '.kendoTimelineView';
        var EVENT_TEMPLATE = kendo.template('<div>' + '<div class="k-event-template k-event-time">#:kendo.format("{0:t} - {1:t}", start, end)#</div>' + '<div class="k-event-template">${title}</div></div>'), DATA_HEADER_TEMPLATE = kendo.template('<span class=\'k-link k-nav-day\'>#=kendo.format(\'{0:m}\', date)#</span>'), EVENT_WRAPPER_STRING = '<div role="gridcell" aria-selected="false" ' + 'data-#=ns#uid="#=uid#"' + '#if (resources[0]) { #' + 'style="background-color:#=resources[0].color#; border-color: #=resources[0].color#"' + 'class="k-event#=inverseColor ? " k-event-inverse" : ""#" ' + '#} else {#' + 'class="k-event"' + '#}#' + '>' + '<span class="k-event-actions">' + '# if(data.tail) {#' + '<span class="k-icon k-i-arrow-w"></span>' + '#}#' + '# if(data.isException()) {#' + '<span class="k-icon k-i-exception"></span>' + '# } else if(data.isRecurring()) {#' + '<span class="k-icon k-i-refresh"></span>' + '# } #' + '</span>' + '{0}' + '<span class="k-event-actions">' + '#if (showDelete) {#' + '<a href="\\#" class="k-link k-event-delete"><span class="k-icon k-si-close"></span></a>' + '#}#' + '# if(data.head) {#' + '<span class="k-icon k-i-arrow-e"></span>' + '#}#' + '</span>' + '#if(resizable && !data.tail){#' + '<span class="k-resize-handle k-resize-w"></span>' + '#}#' + '#if(resizable && !data.head){#' + '<span class="k-resize-handle k-resize-e"></span>' + '#}#' + '</div>';
        function toInvariantTime(date) {
            var staticDate = new Date(1980, 1, 1, 0, 0, 0);
            setTime(staticDate, getMilliseconds(date));
            return staticDate;
        }
        function getWorkDays(options) {
            var workDays = [];
            var dayIndex = options.workWeekStart;
            workDays.push(dayIndex);
            while (options.workWeekEnd != dayIndex) {
                if (dayIndex > 6) {
                    dayIndex -= 7;
                } else {
                    dayIndex++;
                }
                workDays.push(dayIndex);
            }
            return workDays;
        }
        function setColspan(columnLevel) {
            var count = 0;
            if (columnLevel.columns) {
                for (var i = 0; i < columnLevel.columns.length; i++) {
                    count += setColspan(columnLevel.columns[i]);
                }
                columnLevel.colspan = count;
                return count;
            } else {
                columnLevel.colspan = 1;
                return 1;
            }
        }
        function collidingEvents(elements, left, right) {
            var idx, startPosition, overlaps, endPosition;
            for (idx = elements.length - 1; idx >= 0; idx--) {
                startPosition = elements[idx].rectLeft;
                endPosition = elements[idx].rectRight;
                overlaps = startPosition <= left && endPosition >= left;
                if (overlaps || startPosition >= left && endPosition <= right || left <= startPosition && right >= startPosition) {
                    if (startPosition < left) {
                        left = startPosition;
                    }
                    if (endPosition > right) {
                        right = endPosition;
                    }
                }
            }
            return eventsForSlot(elements, left, right);
        }
        function eventsForSlot(elements, left, right) {
            var events = [];
            for (var idx = 0; idx < elements.length; idx++) {
                var event = {
                    rectLeft: elements[idx].rectLeft,
                    rectRight: elements[idx].rectRight
                };
                if (event.rectLeft < left && event.rectRight > left || event.rectLeft >= left && event.rectRight <= right) {
                    events.push(elements[idx]);
                }
            }
            return events;
        }
        var TimelineView = SchedulerView.extend({
            init: function (element, options) {
                var that = this;
                SchedulerView.fn.init.call(that, element, options);
                that.title = that.options.title || that.options.name;
                that._workDays = getWorkDays(that.options);
                that._templates();
                that._editable();
                that.calculateDateRange();
                that._groups();
                that._currentTime(true);
            },
            name: 'timeline',
            _currentTimeMarkerUpdater: function () {
                this._updateCurrentTimeMarker(new Date());
            },
            _updateCurrentTimeMarker: function (currentTime) {
                var options = this.options;
                this.datesHeader.find('.' + CURRENT_TIME_MARKER_CLASS).remove();
                this.content.find('.' + CURRENT_TIME_MARKER_CLASS).remove();
                if (!this._isInDateSlot({
                        start: currentTime,
                        end: currentTime
                    })) {
                    return;
                }
                if (options.currentTimeMarker.useLocalTimezone === false) {
                    var timezone = options.dataSource.options.schema.timezone;
                    if (options.dataSource && timezone) {
                        var timezoneOffset = kendo.timezone.offset(currentTime, timezone);
                        currentTime = kendo.timezone.convert(currentTime, currentTime.getTimezoneOffset(), timezoneOffset);
                    }
                }
                var groupsCount = !options.group || options.group.orientation == 'vertical' ? 1 : this.groups.length;
                for (var groupIndex = 0; groupIndex < groupsCount; groupIndex++) {
                    var currentGroup = this.groups[groupIndex];
                    if (!currentGroup) {
                        return;
                    }
                    var utcCurrentTime = kendo.date.toUtcTime(currentTime);
                    var ranges = currentGroup.timeSlotRanges(utcCurrentTime, utcCurrentTime + 1);
                    if (ranges.length === 0) {
                        return;
                    }
                    var collection = ranges[0].collection;
                    var slotElement = collection.slotByStartDate(currentTime);
                    if (slotElement) {
                        var elementHtml = '<div class=\'' + CURRENT_TIME_MARKER_CLASS + '\'></div>';
                        var headerWrap = this.datesHeader.find('.' + SCHEDULER_HEADER_WRAP_CLASS);
                        var left = Math.round(ranges[0].innerRect(currentTime, new Date(currentTime.getTime() + 1), false).left);
                        var timesTableMarker = $(elementHtml).prependTo(headerWrap).addClass(CURRENT_TIME_MARKER_ARROW_CLASS + '-down');
                        timesTableMarker.css({
                            left: this._adjustLeftPosition(left - timesTableMarker.outerWidth() * BORDER_SIZE_COEFF / 2),
                            top: headerWrap.find('tr:last').prev().position().top
                        });
                        $(elementHtml).prependTo(this.content).css({
                            left: this._adjustLeftPosition(left),
                            width: '1px',
                            height: this.content[0].scrollHeight - 1,
                            top: 0
                        });
                    }
                }
            },
            _adjustLeftPosition: function (left) {
                if (this._isRtl) {
                    left -= this.content[0].scrollWidth - this.content[0].offsetWidth;
                }
                return left;
            },
            _currentTime: function (setUpdateTimer) {
                var that = this;
                var markerOptions = that.options.currentTimeMarker;
                if (markerOptions !== false && markerOptions.updateInterval !== undefined) {
                    that._currentTimeMarkerUpdater();
                    if (setUpdateTimer) {
                        that._currentTimeUpdateTimer = setInterval(proxy(this._currentTimeMarkerUpdater, that), markerOptions.updateInterval);
                    }
                }
            },
            _editable: function () {
                if (this.options.editable) {
                    if (this._isMobile()) {
                        this._touchEditable();
                    } else {
                        this._mouseEditable();
                    }
                }
            },
            _mouseEditable: function () {
                var that = this;
                that.element.on('click' + NS, '.k-event a:has(.k-si-close)', function (e) {
                    that.trigger('remove', { uid: $(this).closest('.k-event').attr(kendo.attr('uid')) });
                    e.preventDefault();
                });
                if (that.options.editable.create !== false) {
                    that.element.on('dblclick' + NS, '.k-scheduler-content td', function (e) {
                        var slot = that._slotByPosition(e.pageX, e.pageY);
                        if (slot) {
                            var resourceInfo = that._resourceBySlot(slot);
                            that.trigger('add', {
                                eventInfo: extend({
                                    start: slot.startDate(),
                                    end: slot.endDate()
                                }, resourceInfo)
                            });
                        }
                        e.preventDefault();
                    });
                }
                if (that.options.editable.update !== false) {
                    that.element.on('dblclick' + NS, '.k-event', function (e) {
                        that.trigger('edit', { uid: $(this).closest('.k-event').attr(kendo.attr('uid')) });
                        e.preventDefault();
                    });
                }
            },
            _touchEditable: function () {
                var that = this;
                var threshold = 0;
                if (kendo.support.mobileOS.android) {
                    threshold = 5;
                }
                if (that.options.editable.create !== false) {
                    that._addUserEvents = new kendo.UserEvents(that.element, {
                        threshold: threshold,
                        filter: '.k-scheduler-content td',
                        tap: function (e) {
                            var x = e.x.location !== undefined ? e.x.location : e.x;
                            var y = e.y.location !== undefined ? e.y.location : e.y;
                            var slot = that._slotByPosition(x, y);
                            if (slot) {
                                var resourceInfo = that._resourceBySlot(slot);
                                that.trigger('add', {
                                    eventInfo: extend({
                                        start: slot.startDate(),
                                        end: slot.endDate()
                                    }, resourceInfo)
                                });
                            }
                            e.preventDefault();
                        }
                    });
                }
                if (that.options.editable.update !== false) {
                    that._editUserEvents = new kendo.UserEvents(that.element, {
                        threshold: threshold,
                        filter: '.k-event',
                        tap: function (e) {
                            var eventElement = $(e.target).closest('.k-event');
                            if (!eventElement.hasClass('k-event-active')) {
                                that.trigger('edit', { uid: eventElement.attr(kendo.attr('uid')) });
                            }
                            e.preventDefault();
                        }
                    });
                }
            },
            _slotByPosition: function (x, y) {
                var slot;
                var content = this.content;
                var offset = content.offset();
                var group;
                var groupIndex;
                x -= offset.left;
                y -= offset.top;
                if (this._isRtl) {
                    var browser = kendo.support.browser;
                    if (browser.mozilla) {
                        x += content[0].scrollWidth - content[0].offsetWidth;
                        x += content[0].scrollLeft;
                    } else if (browser.msie) {
                        x -= content.scrollLeft();
                        x += content[0].scrollWidth - content[0].offsetWidth;
                    } else if (browser.webkit) {
                        x += content[0].scrollLeft;
                    }
                } else {
                    x += content[0].scrollLeft;
                }
                y += content[0].scrollTop;
                x = Math.ceil(x);
                y = Math.ceil(y);
                for (groupIndex = 0; groupIndex < this.groups.length; groupIndex++) {
                    group = this.groups[groupIndex];
                    slot = group.timeSlotByPosition(x, y);
                    if (slot) {
                        return slot;
                    }
                }
                return null;
            },
            options: {
                name: 'TimelineView',
                title: 'Timeline',
                selectedDateFormat: '{0:D}',
                selectedShortDateFormat: '{0:d}',
                date: kendo.date.today(),
                startTime: kendo.date.today(),
                endTime: kendo.date.today(),
                showWorkHours: false,
                minorTickCount: 2,
                editable: true,
                workDayStart: new Date(1980, 1, 1, 8, 0, 0),
                workDayEnd: new Date(1980, 1, 1, 17, 0, 0),
                workWeekStart: 1,
                workWeekEnd: 5,
                majorTick: 60,
                eventHeight: 25,
                eventMinWidth: 0,
                columnWidth: 100,
                groupHeaderTemplate: '#=text#',
                majorTimeHeaderTemplate: '#=kendo.toString(date, \'t\')#',
                slotTemplate: '&nbsp;',
                eventTemplate: EVENT_TEMPLATE,
                dateHeaderTemplate: DATA_HEADER_TEMPLATE,
                footer: { command: 'workDay' },
                currentTimeMarker: {
                    updateInterval: 10000,
                    useLocalTimezone: true
                },
                messages: {
                    defaultRowText: 'All events',
                    showFullDay: 'Show full day',
                    showWorkDay: 'Show business hours'
                }
            },
            events: [
                'remove',
                'add',
                'edit'
            ],
            _templates: function () {
                var options = this.options, settings = extend({}, kendo.Template, options.templateSettings);
                this.eventTemplate = this._eventTmpl(options.eventTemplate, EVENT_WRAPPER_STRING);
                this.majorTimeHeaderTemplate = kendo.template(options.majorTimeHeaderTemplate, settings);
                this.dateHeaderTemplate = kendo.template(options.dateHeaderTemplate, settings);
                this.slotTemplate = kendo.template(options.slotTemplate, settings);
                this.groupHeaderTemplate = kendo.template(options.groupHeaderTemplate, settings);
            },
            _render: function (dates) {
                var that = this;
                dates = dates || [];
                that._dates = dates;
                that._startDate = dates[0];
                that._endDate = dates[dates.length - 1 || 0];
                that._calculateSlotRanges();
                that.createLayout(that._layout(dates));
                that._content(dates);
                that._footer();
                that._setContentWidth();
                that.refreshLayout();
                that.datesHeader.on('click' + NS, '.k-nav-day', function (e) {
                    var th = $(e.currentTarget).closest('th');
                    var slot = that._slotByPosition(th.offset().left, that.content.offset().top);
                    that.trigger('navigate', {
                        view: 'timeline',
                        date: slot.startDate()
                    });
                });
                that.timesHeader.find('table tr:last').hide();
                that.datesHeader.find('table tr:last').hide();
            },
            _setContentWidth: function () {
                var content = this.content;
                var contentWidth = content.width();
                var contentTable = this.content.find('table');
                var columnCount = contentTable.find('tr:first').children().length;
                var minWidth = 100;
                var calculatedWidth = columnCount * this.options.columnWidth;
                if (contentWidth < calculatedWidth) {
                    minWidth = Math.ceil(calculatedWidth / contentWidth * 100);
                }
                contentTable.add(this.datesHeader.find('table')).css('width', minWidth + '%');
            },
            _calculateSlotRanges: function () {
                var dates = this._dates;
                var slotStartTime = this.startTime();
                var slotEndTime = this.endTime();
                if (getMilliseconds(slotEndTime) === getMilliseconds(kendo.date.getDate(slotEndTime))) {
                    slotEndTime = kendo.date.getDate(slotEndTime);
                    setTime(slotEndTime, MS_PER_DAY - 1);
                }
                slotEndTime = getMilliseconds(slotEndTime);
                slotStartTime = getMilliseconds(slotStartTime);
                var slotRanges = [];
                for (var i = 0; i < dates.length; i++) {
                    var rangeStart = getDate(dates[i]);
                    setTime(rangeStart, slotStartTime);
                    var rangeEnd = getDate(dates[i]);
                    setTime(rangeEnd, slotEndTime);
                    slotRanges.push({
                        start: kendo.date.toUtcTime(rangeStart),
                        end: kendo.date.toUtcTime(rangeEnd)
                    });
                }
                this._slotRanges = slotRanges;
            },
            _forTimeRange: function (min, max, action, after) {
                min = toInvariantTime(min);
                max = toInvariantTime(max);
                var that = this, msMin = getMilliseconds(min), msMax = getMilliseconds(max), minorTickCount = that.options.minorTickCount, msMajorInterval = that.options.majorTick * MS_PER_MINUTE, msInterval = msMajorInterval / minorTickCount || 1, start = new Date(+min), startDay = start.getDate(), msStart, idx = 0, length, html = '';
                length = MS_PER_DAY / msInterval;
                if (msMin != msMax) {
                    if (msMin > msMax) {
                        msMax += MS_PER_DAY;
                    }
                    length = (msMax - msMin) / msInterval;
                }
                length = Math.round(length);
                for (; idx < length; idx++) {
                    var majorTickDivider = idx % (msMajorInterval / msInterval);
                    var isMajorTickColumn = majorTickDivider === 0;
                    var isMiddleColumn = majorTickDivider < minorTickCount - 1;
                    var isLastSlotColumn = majorTickDivider === minorTickCount - 1;
                    var minorTickColumns = minorTickCount;
                    if (length % minorTickCount !== 0) {
                        var isLastMajorSlot = length - (idx + 1) < minorTickCount;
                        if (isMajorTickColumn && isLastMajorSlot) {
                            minorTickColumns = length % minorTickCount;
                        }
                    }
                    html += action(start, isMajorTickColumn, isMiddleColumn, isLastSlotColumn, minorTickColumns);
                    setTime(start, msInterval, false);
                }
                if (msMax) {
                    msStart = getMilliseconds(start);
                    if (startDay < start.getDate()) {
                        msStart += MS_PER_DAY;
                    }
                    if (msStart > msMax) {
                        start = new Date(+max);
                    }
                }
                if (after) {
                    html += after(start);
                }
                return html;
            },
            _layout: function (dates) {
                var timeColumns = [];
                var columns = [];
                var that = this;
                var rows = [{ text: that.options.messages.defaultRowText }];
                var minorTickSlots = [];
                for (var minorTickIndex = 0; minorTickIndex < that.options.minorTickCount; minorTickIndex++) {
                    minorTickSlots.push({
                        text: '',
                        className: ''
                    });
                }
                this._forTimeRange(that.startTime(), that.endTime(), function (date, majorTick, middleColumn, lastSlotColumn, minorSlotsCount) {
                    var template = that.majorTimeHeaderTemplate;
                    if (majorTick) {
                        var timeColumn = {
                            text: template({ date: date }),
                            className: lastSlotColumn ? 'k-slot-cell' : '',
                            columns: minorTickSlots.slice(0, minorSlotsCount)
                        };
                        setColspan(timeColumn);
                        timeColumns.push(timeColumn);
                    }
                });
                for (var idx = 0; idx < dates.length; idx++) {
                    columns.push({
                        text: that.dateHeaderTemplate({ date: dates[idx] }),
                        className: 'k-slot-cell',
                        columns: timeColumns.slice(0)
                    });
                }
                var resources = this.groupedResources;
                if (resources.length) {
                    if (this._groupOrientation() === 'vertical') {
                        rows = that._createRowsLayout(resources, null, this.groupHeaderTemplate);
                    } else {
                        columns = that._createColumnsLayout(resources, columns, this.groupHeaderTemplate);
                    }
                }
                return {
                    columns: columns,
                    rows: rows
                };
            },
            _footer: function () {
                var options = this.options;
                if (options.footer !== false) {
                    var html = '<div class="k-header k-scheduler-footer">';
                    var command = options.footer.command;
                    if (command && command === 'workDay') {
                        html += '<ul class="k-reset k-header">';
                        html += '<li class="k-state-default k-scheduler-fullday"><a href="#" class="k-link"><span class="k-icon k-i-clock"></span>';
                        html += (options.showWorkHours ? options.messages.showFullDay : options.messages.showWorkDay) + '</a></li>';
                        html += '</ul>';
                    } else {
                        html += '&nbsp;';
                    }
                    html += '</div>';
                    this.footer = $(html).appendTo(this.element);
                    var that = this;
                    this.footer.on('click' + NS, '.k-scheduler-fullday', function (e) {
                        e.preventDefault();
                        that.trigger('navigate', {
                            view: that.name || options.name,
                            date: that.startDate(),
                            isWorkDay: !options.showWorkHours
                        });
                    });
                }
            },
            _columnCountForLevel: function (level) {
                var columnLevel = this.columnLevels[level];
                return columnLevel ? columnLevel.length : 0;
            },
            _rowCountForLevel: function (level) {
                var rowLevel = this.rowLevels[level];
                return rowLevel ? rowLevel.length : 0;
            },
            _isWorkDay: function (date) {
                var day = date.getDay();
                var workDays = this._workDays;
                for (var i = 0; i < workDays.length; i++) {
                    if (workDays[i] === day) {
                        return true;
                    }
                }
                return false;
            },
            _content: function (dates) {
                var that = this;
                var options = that.options;
                var start = that.startTime();
                var end = this.endTime();
                var groupsCount = 1;
                var rowCount = 1;
                var columnCount = dates.length;
                var html = '';
                var resources = this.groupedResources;
                var slotTemplate = this.slotTemplate;
                var isVerticalGrouped = false;
                if (resources.length) {
                    isVerticalGrouped = that._groupOrientation() === 'vertical';
                    if (isVerticalGrouped) {
                        rowCount = that._groupCount();
                    } else {
                        groupsCount = that._groupCount();
                    }
                }
                html += '<tbody>';
                var appendRow = function (date) {
                    var content = '';
                    var classes = '';
                    var tmplDate;
                    var resources = function (groupIndex) {
                        return function () {
                            return that._resourceBySlot({ groupIndex: groupIndex });
                        };
                    };
                    if (kendo.date.isToday(dates[idx])) {
                        classes += 'k-today';
                    }
                    if (kendo.date.getMilliseconds(date) < kendo.date.getMilliseconds(options.workDayStart) || kendo.date.getMilliseconds(date) >= kendo.date.getMilliseconds(options.workDayEnd) || !that._isWorkDay(dates[idx])) {
                        classes += ' k-nonwork-hour';
                    }
                    content += '<td' + (classes !== '' ? ' class="' + classes + '"' : '') + '>';
                    tmplDate = kendo.date.getDate(dates[idx]);
                    kendo.date.setTime(tmplDate, kendo.date.getMilliseconds(date));
                    content += slotTemplate({
                        date: tmplDate,
                        resources: resources(isVerticalGrouped ? rowIdx : groupIdx)
                    });
                    content += '</td>';
                    return content;
                };
                for (var rowIdx = 0; rowIdx < rowCount; rowIdx++) {
                    html += '<tr>';
                    for (var groupIdx = 0; groupIdx < groupsCount; groupIdx++) {
                        for (var idx = 0, length = columnCount; idx < length; idx++) {
                            html += this._forTimeRange(start, end, appendRow);
                        }
                    }
                    html += '</tr>';
                }
                html += '</tbody>';
                this.content.find('table').append(html);
            },
            _groups: function () {
                var groupCount = this._groupCount();
                var dates = this._dates;
                var columnCount = dates.length;
                this.groups = [];
                for (var idx = 0; idx < groupCount; idx++) {
                    var view = this._addResourceView(idx);
                    var start = dates[0];
                    var end = dates[dates.length - 1 || 0];
                    view.addTimeSlotCollection(start, kendo.date.addDays(end, 1));
                }
                this._timeSlotGroups(groupCount, columnCount);
            },
            _isVerticallyGrouped: function () {
                return this.groupedResources.length && this._groupOrientation() === 'vertical';
            },
            _isHorizontallyGrouped: function () {
                return this.groupedResources.length && this._groupOrientation() === 'horizontal';
            },
            _timeSlotGroups: function (groupCount, datesCount) {
                var interval = this._timeSlotInterval();
                var isVerticallyGrouped = this._isVerticallyGrouped();
                var tableRows = this.content.find('tr');
                var rowCount = tableRows.length;
                tableRows.attr('role', 'row');
                if (isVerticallyGrouped) {
                    rowCount = Math.floor(rowCount / groupCount);
                }
                for (var groupIndex = 0; groupIndex < groupCount; groupIndex++) {
                    var rowMultiplier = 0;
                    var group = this.groups[groupIndex];
                    var time;
                    if (isVerticallyGrouped) {
                        rowMultiplier = groupIndex;
                    }
                    var rowIndex = rowMultiplier * rowCount;
                    var cellMultiplier = 0;
                    if (!isVerticallyGrouped) {
                        cellMultiplier = groupIndex;
                    }
                    var cells = tableRows[rowIndex].children;
                    var cellsPerGroup = cells.length / (!isVerticallyGrouped ? groupCount : 1);
                    var cellsPerDay = cellsPerGroup / datesCount;
                    for (var dateIndex = 0; dateIndex < datesCount; dateIndex++) {
                        var cellOffset = dateIndex * cellsPerDay + cellsPerGroup * cellMultiplier;
                        time = getMilliseconds(new Date(+this.startTime()));
                        for (var cellIndex = 0; cellIndex < cellsPerDay; cellIndex++) {
                            var cell = cells[cellIndex + cellOffset];
                            var collection = group.getTimeSlotCollection(0);
                            var currentDate = this._dates[dateIndex];
                            var currentTime = Date.UTC(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate());
                            var start = currentTime + time;
                            var end = start + interval;
                            cell.setAttribute('role', 'gridcell');
                            cell.setAttribute('aria-selected', false);
                            collection.addTimeSlot(cell, start, end, true);
                            time += interval;
                        }
                    }
                }
            },
            startDate: function () {
                return this._startDate;
            },
            endDate: function () {
                return this._endDate;
            },
            startTime: function () {
                var options = this.options;
                return options.showWorkHours ? options.workDayStart : options.startTime;
            },
            endTime: function () {
                var options = this.options;
                return options.showWorkHours ? options.workDayEnd : options.endTime;
            },
            _timeSlotInterval: function () {
                var options = this.options;
                return options.majorTick / options.minorTickCount * MS_PER_MINUTE;
            },
            nextDate: function () {
                return kendo.date.nextDay(this.endDate());
            },
            previousDate: function () {
                return kendo.date.previousDay(this.startDate());
            },
            calculateDateRange: function () {
                this._render([this.options.date]);
            },
            render: function (events) {
                this._headerColumnCount = 0;
                this._groups();
                this.element.find('.k-event').remove();
                events = new kendo.data.Query(events).sort([
                    {
                        field: 'start',
                        dir: 'asc'
                    },
                    {
                        field: 'end',
                        dir: 'desc'
                    }
                ]).toArray();
                var eventsByResource = [];
                this._eventsByResource(events, this.groupedResources, eventsByResource);
                var eventGroups = [];
                var maxRowCount = 0;
                for (var groupIndex = 0; groupIndex < eventsByResource.length; groupIndex++) {
                    var eventGroup = {
                        groupIndex: groupIndex,
                        maxRowCount: 0,
                        events: {}
                    };
                    eventGroups.push(eventGroup);
                    this._renderEvents(eventsByResource[groupIndex], groupIndex, eventGroup);
                    if (maxRowCount < eventGroup.maxRowCount) {
                        maxRowCount = eventGroup.maxRowCount;
                    }
                }
                this._setRowsHeight(eventGroups, eventsByResource.length, maxRowCount);
                this._positionEvents(eventGroups, eventsByResource.length);
                this._currentTime(false);
                this.trigger('activate');
            },
            _positionEvents: function (eventGroups, groupsCount) {
                for (var groupIndex = 0; groupIndex < groupsCount; groupIndex++) {
                    var eventsForGroup = eventGroups[groupIndex].events;
                    for (var eventUid in eventsForGroup) {
                        var eventObject = eventsForGroup[eventUid];
                        this._positionEvent(eventObject);
                    }
                }
            },
            _setRowsHeight: function (eventGroups, groupsCount, maxRowCount) {
                var eventHeight = this.options.eventHeight + 2;
                var eventBottomOffset = this._getBottomRowOffset();
                groupsCount = this._isVerticallyGrouped() ? groupsCount : 1;
                for (var groupIndex = 0; groupIndex < groupsCount; groupIndex++) {
                    var rowsCount = this._isVerticallyGrouped() ? eventGroups[groupIndex].maxRowCount : maxRowCount;
                    rowsCount = rowsCount ? rowsCount : 1;
                    var rowHeight = (eventHeight + 2) * rowsCount + eventBottomOffset;
                    var timesRow = $(this.times.find('tr')[groupIndex]);
                    var row = $(this.content.find('tr')[groupIndex]);
                    timesRow.height(rowHeight);
                    row.height(rowHeight);
                }
                this._setContentWidth();
                this.refreshLayout();
                this._refreshSlots();
            },
            _getBottomRowOffset: function () {
                var eventBottomOffset = this.options.eventHeight * 0.5;
                var isMobile = this._isMobile();
                var minOffset;
                var maxOffset;
                if (isMobile) {
                    minOffset = 30;
                    maxOffset = 60;
                } else {
                    minOffset = 15;
                    maxOffset = 30;
                }
                if (eventBottomOffset > maxOffset) {
                    eventBottomOffset = maxOffset;
                } else if (eventBottomOffset < minOffset) {
                    eventBottomOffset = minOffset;
                }
                return eventBottomOffset;
            },
            _positionEvent: function (eventObject) {
                var eventHeight = this.options.eventHeight + 2;
                var rect = eventObject.slotRange.innerRect(eventObject.start, eventObject.end, false);
                var left = this._adjustLeftPosition(rect.left);
                var width = rect.right - rect.left - 2;
                if (width < 0) {
                    width = 0;
                }
                if (width < this.options.eventMinWidth) {
                    var slotsCollection = eventObject.slotRange.collection;
                    var lastSlot = slotsCollection._slots[slotsCollection._slots.length - 1];
                    var offsetRight = lastSlot.offsetLeft + lastSlot.offsetWidth;
                    width = this.options.eventMinWidth;
                    if (offsetRight < left + width) {
                        width = offsetRight - rect.left - 2;
                    }
                }
                eventObject.element.css({
                    top: eventObject.slotRange.start.offsetTop + eventObject.rowIndex * (eventHeight + 2) + 'px',
                    left: left,
                    width: width
                });
            },
            _refreshSlots: function () {
                for (var groupIndex = 0; groupIndex < this.groups.length; groupIndex++) {
                    this.groups[groupIndex].refresh();
                }
            },
            _eventsByResource: function (events, resources, result) {
                var resource = resources[0];
                if (resource) {
                    var view = resource.dataSource.view();
                    for (var itemIdx = 0; itemIdx < view.length; itemIdx++) {
                        var value = this._resourceValue(resource, view[itemIdx]);
                        var eventsFilteredByResource = new kendo.data.Query(events).filter({
                            field: resource.field,
                            operator: SchedulerView.groupEqFilter(value)
                        }).toArray();
                        if (resources.length > 1) {
                            this._eventsByResource(eventsFilteredByResource, resources.slice(1), result);
                        } else {
                            result.push(eventsFilteredByResource);
                        }
                    }
                } else {
                    result.push(events);
                }
            },
            _isInDateSlot: function (event) {
                var startTime = event.start;
                var endTime = event.end;
                var rangeStart = getDate(this._startDate);
                var rangeEnd = kendo.date.addDays(getDate(this._endDate), 1);
                if (startTime < rangeEnd && rangeStart <= endTime) {
                    return true;
                }
                return false;
            },
            _isInTimeSlot: function (event) {
                var startTime = event._startTime || kendo.date.toUtcTime(event.start);
                var endTime = event._endTime || kendo.date.toUtcTime(event.end);
                var slotRanges = this._slotRanges;
                if (startTime === endTime) {
                    endTime = endTime + 1;
                }
                for (var slotIndex = 0; slotIndex < slotRanges.length; slotIndex++) {
                    if (startTime < slotRanges[slotIndex].end && slotRanges[slotIndex].start < endTime) {
                        return true;
                    }
                }
                return false;
            },
            _adjustEvent: function (event) {
                var start = event.start;
                var end = event.end;
                var eventStartTime = event._time('start');
                var eventEndTime = event._time('end');
                var startTime = getMilliseconds(this.startTime());
                var endTime = getMilliseconds(this.endTime());
                var adjustedStartDate = null;
                var adjustedEndDate = null;
                var occurrence;
                var head = false;
                var tail = false;
                if (event.isAllDay) {
                    adjustedStartDate = getDate(start);
                    if (startTime > eventStartTime) {
                        setTime(adjustedStartDate, startTime);
                        tail = true;
                    }
                    adjustedEndDate = getDate(end);
                    if (endTime === getMilliseconds(getDate(this.endTime()))) {
                        adjustedEndDate = kendo.date.addDays(adjustedEndDate, 1);
                    } else {
                        setTime(adjustedEndDate, endTime);
                        head = true;
                    }
                } else {
                    endTime = endTime === 0 ? MS_PER_DAY : endTime;
                    if (startTime > eventStartTime) {
                        adjustedStartDate = getDate(start);
                        setTime(adjustedStartDate, startTime);
                        tail = true;
                    } else if (endTime < eventStartTime) {
                        adjustedStartDate = getDate(start);
                        adjustedStartDate = kendo.date.addDays(adjustedStartDate, 1);
                        setTime(adjustedStartDate, startTime);
                        tail = true;
                    }
                    if (endTime < eventEndTime) {
                        adjustedEndDate = getDate(end);
                        setTime(adjustedEndDate, endTime);
                        head = true;
                    } else if (startTime > eventEndTime) {
                        adjustedEndDate = getDate(end);
                        adjustedEndDate = kendo.date.addDays(adjustedEndDate, -1);
                        setTime(adjustedEndDate, endTime);
                        head = true;
                    }
                }
                occurrence = event.clone({
                    start: adjustedStartDate ? adjustedStartDate : start,
                    end: adjustedEndDate ? adjustedEndDate : end,
                    _startTime: adjustedStartDate ? kendo.date.toUtcTime(adjustedStartDate) : event._startTime,
                    _endTime: adjustedEndDate ? kendo.date.toUtcTime(adjustedEndDate) : event._endTime,
                    isAllDay: false
                });
                return {
                    occurrence: occurrence,
                    head: head,
                    tail: tail
                };
            },
            _renderEvents: function (events, groupIndex, eventGroup) {
                var event;
                var idx;
                var length;
                for (idx = 0, length = events.length; idx < length; idx++) {
                    event = events[idx];
                    if (this._isInDateSlot(event)) {
                        var isMultiDayEvent = event.isAllDay || event.end.getTime() - event.start.getTime() >= MS_PER_DAY;
                        var container = this.content;
                        if (isMultiDayEvent || this._isInTimeSlot(event)) {
                            var adjustedEvent = this._adjustEvent(event);
                            var group = this.groups[groupIndex];
                            if (!group._continuousEvents) {
                                group._continuousEvents = [];
                            }
                            var ranges = group.slotRanges(adjustedEvent.occurrence, false);
                            var range = ranges[0];
                            var element;
                            if (this._isInTimeSlot(adjustedEvent.occurrence)) {
                                element = this._createEventElement(adjustedEvent.occurrence, event, range.head || adjustedEvent.head, range.tail || adjustedEvent.tail);
                                element.appendTo(container).css({
                                    top: 0,
                                    height: this.options.eventHeight
                                });
                                var eventObject = {
                                    start: adjustedEvent.occurrence._startTime || adjustedEvent.occurrence.start,
                                    end: adjustedEvent.occurrence._endTime || adjustedEvent.occurrence.end,
                                    element: element,
                                    uid: event.uid,
                                    slotRange: range,
                                    rowIndex: 0,
                                    offsetTop: 0
                                };
                                eventGroup.events[event.uid] = eventObject;
                                this.addContinuousEvent(group, range, element, event.isAllDay);
                                this._arrangeRows(eventObject, range, eventGroup);
                            }
                        }
                    }
                }
            },
            addContinuousEvent: function (group, range, element, isAllDay) {
                var events = group._continuousEvents;
                events.push({
                    element: element,
                    isAllDay: isAllDay,
                    uid: element.attr(kendo.attr('uid')),
                    start: range.start,
                    end: range.end
                });
            },
            _createEventElement: function (occurrence, event, head, tail) {
                var template = this.eventTemplate;
                var editable = this.options.editable;
                var isMobile = this._isMobile();
                var showDelete = editable && editable.destroy !== false && !isMobile;
                var resizable = editable && editable.resize !== false;
                var eventStartTime = event._time('start');
                var eventEndTime = event._time('end');
                var eventStartDate = event.start;
                var eventEndDate = event.end;
                var resources = this.eventResources(event);
                if (event._startTime && eventStartTime !== kendo.date.getMilliseconds(event.start)) {
                    eventStartDate = new Date(eventStartTime);
                    eventStartDate = kendo.timezone.apply(eventStartDate, 'Etc/UTC');
                }
                if (event._endTime && eventEndTime !== kendo.date.getMilliseconds(event.end)) {
                    eventEndDate = new Date(eventEndTime);
                    eventEndDate = kendo.timezone.apply(eventEndDate, 'Etc/UTC');
                }
                var data = extend({}, {
                    ns: kendo.ns,
                    resizable: resizable,
                    showDelete: showDelete,
                    head: head,
                    tail: tail,
                    singleDay: this._dates.length == 1,
                    resources: resources,
                    inverseColor: resources && resources[0] ? this._shouldInverseResourceColor(resources[0]) : false
                }, event, {
                    start: eventStartDate,
                    end: eventEndDate
                });
                var element = $(template(data));
                this.angular('compile', function () {
                    return {
                        elements: element,
                        data: [{ dataItem: data }]
                    };
                });
                return element;
            },
            _arrangeRows: function (eventObject, slotRange, eventGroup) {
                var startIndex = slotRange.start.index;
                var endIndex = slotRange.end.index;
                var rect = eventObject.slotRange.innerRect(eventObject.start, eventObject.end, false);
                var rectRight = rect.right + this.options.eventMinWidth;
                var events = collidingEvents(slotRange.events(), rect.left, rectRight);
                slotRange.addEvent({
                    slotIndex: startIndex,
                    start: startIndex,
                    end: endIndex,
                    rectLeft: rect.left,
                    rectRight: rectRight,
                    element: eventObject.element,
                    uid: eventObject.uid
                });
                events.push({
                    start: startIndex,
                    end: endIndex,
                    uid: eventObject.uid
                });
                var rows = SchedulerView.createRows(events);
                if (eventGroup.maxRowCount < rows.length) {
                    eventGroup.maxRowCount = rows.length;
                }
                for (var idx = 0, length = rows.length; idx < length; idx++) {
                    var rowEvents = rows[idx].events;
                    for (var j = 0, eventLength = rowEvents.length; j < eventLength; j++) {
                        eventGroup.events[rowEvents[j].uid].rowIndex = idx;
                    }
                }
            },
            _groupCount: function () {
                var resources = this.groupedResources;
                if (resources.length) {
                    if (this._groupOrientation() === 'vertical') {
                        return this._rowCountForLevel(resources.length - 1);
                    } else {
                        return this._columnCountForLevel(resources.length - 1);
                    }
                }
                return 1;
            },
            _updateEventForSelection: function (event) {
                var adjustedEvent = this._adjustEvent(event.clone());
                return adjustedEvent.occurrence;
            },
            _eventOptionsForMove: function (event) {
                if (event.isAllDay) {
                    return { isAllDay: false };
                }
                return {};
            },
            _updateEventForResize: function (event) {
                if (event.isAllDay) {
                    event.set('isAllDay', false);
                }
            },
            _updateMoveHint: function (event, groupIndex, distance) {
                var group = this.groups[groupIndex];
                var clonedEvent = event.clone({
                    start: event.start,
                    end: event.end
                });
                var eventDuraton = clonedEvent.duration();
                clonedEvent.start = new Date(clonedEvent.start.getTime() + distance);
                clonedEvent.end = new Date(+clonedEvent.start + eventDuraton);
                var adjustedEvent = this._adjustEvent(clonedEvent);
                var ranges = group.slotRanges(adjustedEvent.occurrence, false);
                this._removeMoveHint();
                for (var rangeIndex = 0; rangeIndex < ranges.length; rangeIndex++) {
                    var range = ranges[rangeIndex];
                    var startSlot = range.start;
                    var hint = this._createEventElement(adjustedEvent.occurrence, adjustedEvent.occurrence, false, false);
                    hint.addClass('k-event-drag-hint');
                    var rect = range.innerRect(adjustedEvent.occurrence.start, adjustedEvent.occurrence.end, this.options.snap);
                    var width = rect.right - rect.left - 2;
                    if (width < 0) {
                        width = 0;
                    }
                    var left = this._adjustLeftPosition(rect.left);
                    var css = {
                        left: left,
                        top: startSlot.offsetTop,
                        height: startSlot.offsetHeight - 2,
                        width: width
                    };
                    hint.css(css);
                    this._moveHint = this._moveHint.add(hint);
                }
                var content = this.content;
                this._moveHint.appendTo(content);
            },
            _updateResizeHint: function (event, groupIndex, startTime, endTime) {
                var group = this.groups[groupIndex];
                var ranges = group.ranges(startTime, endTime, false, false);
                this._removeResizeHint();
                for (var rangeIndex = 0; rangeIndex < ranges.length; rangeIndex++) {
                    var range = ranges[rangeIndex];
                    var start = range.startSlot();
                    var startRect = range.innerRect(startTime, endTime, false);
                    startRect.top = start.offsetTop;
                    var width = startRect.right - startRect.left;
                    var height = start.offsetHeight;
                    var left = this._adjustLeftPosition(startRect.left);
                    var hint = SchedulerView.fn._createResizeHint.call(this, left, startRect.top, width, height);
                    this._resizeHint = this._resizeHint.add(hint);
                }
                var format = 't';
                var container = this.content;
                this._resizeHint.appendTo(container);
                this._resizeHint.find('.k-label-top,.k-label-bottom').text('');
                this._resizeHint.first().addClass('k-first').find('.k-label-top').text(kendo.toString(kendo.timezone.toLocalDate(startTime), format));
                this._resizeHint.last().addClass('k-last').find('.k-label-bottom').text(kendo.toString(kendo.timezone.toLocalDate(endTime), format));
            },
            selectionByElement: function (cell) {
                var offset = cell.offset();
                return this._slotByPosition(offset.left, offset.top);
            },
            _updateDirection: function (selection, ranges, multiple, reverse, vertical) {
                var startSlot = ranges[0].start;
                var endSlot = ranges[ranges.length - 1].end;
                if (multiple && !vertical) {
                    if (startSlot.index === endSlot.index && startSlot.collectionIndex === endSlot.collectionIndex) {
                        selection.backward = reverse;
                    }
                }
            },
            _changeGroup: function (selection, previous) {
                var method = previous ? 'prevGroupSlot' : 'nextGroupSlot';
                var slot = this[method](selection.start, selection.groupIndex, false);
                if (slot) {
                    selection.groupIndex += previous ? -1 : 1;
                }
                return slot;
            },
            prevGroupSlot: function (date, groupIndex, isDay) {
                var group = this.groups[groupIndex];
                var slot = group.ranges(date, date, isDay, false)[0].start;
                if (groupIndex <= 0) {
                    return;
                }
                if (this._isVerticallyGrouped()) {
                    return slot;
                } else {
                    var collection = group._collection(0, isDay);
                    return collection.last();
                }
            },
            nextGroupSlot: function (date, groupIndex, isDay) {
                var group = this.groups[groupIndex];
                var slot = group.ranges(date, date, isDay, false)[0].start;
                if (groupIndex >= this.groups.length - 1) {
                    return;
                }
                if (this._isVerticallyGrouped()) {
                    return slot;
                } else {
                    var collection = group._collection(0, isDay);
                    return collection.first();
                }
            },
            _verticalSlots: function (selection, ranges, multiple, reverse) {
                var method = reverse ? 'leftSlot' : 'rightSlot';
                var startSlot = ranges[0].start;
                var endSlot = ranges[ranges.length - 1].end;
                var group = this.groups[selection.groupIndex];
                startSlot = group[method](startSlot);
                endSlot = group[method](endSlot);
                if (!multiple && this._isVerticallyGrouped() && (!startSlot || !endSlot)) {
                    startSlot = endSlot = this._changeGroup(selection, reverse);
                }
                return {
                    startSlot: startSlot,
                    endSlot: endSlot
                };
            },
            _horizontalSlots: function (selection, ranges, multiple, reverse) {
                var method = reverse ? 'upSlot' : 'downSlot';
                var startSlot = ranges[0].start;
                var endSlot = ranges[ranges.length - 1].end;
                var group = this.groups[selection.groupIndex];
                startSlot = group[method](startSlot);
                endSlot = group[method](endSlot);
                if (!multiple && this._isHorizontallyGrouped() && (!startSlot || !endSlot)) {
                    startSlot = endSlot = this._changeGroup(selection, reverse);
                }
                return {
                    startSlot: startSlot,
                    endSlot: endSlot
                };
            },
            _changeViewPeriod: function (selection, reverse) {
                var date = reverse ? this.previousDate() : this.nextDate();
                var start = selection.start;
                var end = selection.end;
                selection.start = new Date(date);
                selection.end = new Date(date);
                if (this._isHorizontallyGrouped()) {
                    selection.groupIndex = reverse ? this.groups.length - 1 : 0;
                }
                var duration = end - start;
                if (reverse) {
                    end = getMilliseconds(this.endTime());
                    end = end === 0 ? MS_PER_DAY : end;
                    setTime(selection.start, end - duration);
                    setTime(selection.end, end);
                } else {
                    start = getMilliseconds(this.startTime());
                    setTime(selection.start, start);
                    setTime(selection.end, start + duration);
                }
                selection.events = [];
                return true;
            },
            move: function (selection, key, shift) {
                var handled = false;
                var group = this.groups[selection.groupIndex];
                var keys = kendo.keys;
                var ranges = group.ranges(selection.start, selection.end, false, false);
                var startSlot, endSlot, reverse, slots;
                if (key === keys.DOWN || key === keys.UP) {
                    handled = true;
                    reverse = key === keys.UP;
                    this._updateDirection(selection, ranges, shift, reverse, true);
                    slots = this._verticalSlots(selection, ranges, shift, reverse);
                } else if (key === keys.LEFT || key === keys.RIGHT) {
                    handled = true;
                    reverse = key === keys.LEFT;
                    this._updateDirection(selection, ranges, shift, reverse, false);
                    slots = this._horizontalSlots(selection, ranges, shift, reverse);
                    if ((!slots.startSlot || !slots.endSlot) && !shift && this._changeViewPeriod(selection, reverse, false)) {
                        return handled;
                    }
                }
                if (handled) {
                    startSlot = slots.startSlot;
                    endSlot = slots.endSlot;
                    if (shift) {
                        var backward = selection.backward;
                        if (backward && startSlot) {
                            selection.start = startSlot.startDate();
                        } else if (!backward && endSlot) {
                            selection.end = endSlot.endDate();
                        }
                    } else if (startSlot && endSlot) {
                        selection.start = startSlot.startDate();
                        selection.end = endSlot.endDate();
                    }
                    selection.events = [];
                }
                return handled;
            },
            destroy: function () {
                var that = this;
                if (that.element) {
                    that.element.off(NS);
                }
                if (that.footer) {
                    that.footer.remove();
                }
                if (that._currentTimeUpdateTimer) {
                    clearInterval(that._currentTimeUpdateTimer);
                }
                SchedulerView.fn.destroy.call(this);
                if (this._isMobile() && that.options.editable) {
                    if (that.options.editable.create !== false) {
                        that._addUserEvents.destroy();
                    }
                    if (that.options.editable.update !== false) {
                        that._editUserEvents.destroy();
                    }
                }
            }
        });
        extend(true, ui, {
            TimelineView: TimelineView,
            TimelineWeekView: TimelineView.extend({
                options: {
                    name: 'TimelineWeekView',
                    title: 'Timeline Week',
                    selectedDateFormat: '{0:D} - {1:D}',
                    selectedShortDateFormat: '{0:d} - {1:d}',
                    majorTick: 120
                },
                name: 'timelineWeek',
                calculateDateRange: function () {
                    var selectedDate = this.options.date, start = kendo.date.dayOfWeek(selectedDate, this.calendarInfo().firstDay, -1), idx, length, dates = [];
                    for (idx = 0, length = 7; idx < length; idx++) {
                        dates.push(start);
                        start = kendo.date.nextDay(start);
                    }
                    this._render(dates);
                }
            }),
            TimelineWorkWeekView: TimelineView.extend({
                options: {
                    name: 'TimelineWorkWeekView',
                    title: 'Timeline Work Week',
                    selectedDateFormat: '{0:D} - {1:D}',
                    selectedShortDateFormat: '{0:d} - {1:d}',
                    majorTick: 120
                },
                name: 'timelineWorkWeek',
                nextDate: function () {
                    return kendo.date.dayOfWeek(kendo.date.nextDay(this.endDate()), this.options.workWeekStart, 1);
                },
                previousDate: function () {
                    return kendo.date.previousDay(this.startDate());
                },
                calculateDateRange: function () {
                    var selectedDate = this.options.date, start = kendo.date.dayOfWeek(selectedDate, this.options.workWeekStart, -1), end = kendo.date.dayOfWeek(start, this.options.workWeekEnd, 1), dates = [];
                    while (start <= end) {
                        dates.push(start);
                        start = kendo.date.nextDay(start);
                    }
                    this._render(dates);
                }
            }),
            TimelineMonthView: TimelineView.extend({
                options: {
                    name: 'TimelineMonthView',
                    title: 'Timeline Month',
                    selectedDateFormat: '{0:D} - {1:D}',
                    selectedShortDateFormat: '{0:d} - {1:d}',
                    workDayStart: new Date(1980, 1, 1, 0, 0, 0),
                    workDayEnd: new Date(1980, 1, 1, 23, 59, 59),
                    footer: false,
                    majorTick: 1440,
                    minorTickCount: 1
                },
                name: 'timelineMonth',
                calculateDateRange: function () {
                    var selectedDate = this.options.date, start = kendo.date.firstDayOfMonth(selectedDate), end = kendo.date.lastDayOfMonth(selectedDate), idx, length, dates = [];
                    for (idx = 0, length = end.getDate(); idx < length; idx++) {
                        dates.push(start);
                        start = kendo.date.nextDay(start);
                    }
                    this._render(dates);
                }
            })
        });
    }(window.kendo.jQuery));
    return window.kendo;
}, typeof define == 'function' && define.amd ? define : function (a1, a2, a3) {
    (a3 || a2)();
}));
/** 
 * Kendo UI v2016.3.1118 (http://www.telerik.com/kendo-ui)                                                                                                                                              
 * Copyright 2016 Telerik AD. All rights reserved.                                                                                                                                                      
 *                                                                                                                                                                                                      
 * Kendo UI commercial licenses may be obtained at                                                                                                                                                      
 * http://www.telerik.com/purchase/license-agreement/kendo-ui-complete                                                                                                                                  
 * If you do not own a commercial license, this file shall be governed by the trial license terms.                                                                                                      
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       

*/
(function (f, define) {
    define('kendo.color', ['kendo.core'], f);
}(function () {
    var __meta__ = {
        id: 'color',
        name: 'Color utils',
        category: 'framework',
        advanced: true,
        description: 'Color utilities used across components',
        depends: ['core']
    };
    (function ($, parseFloat, parseInt) {
        var Color = function (value) {
            var color = this, formats = Color.formats, re, processor, parts, i, channels;
            if (arguments.length === 1) {
                value = color.resolveColor(value);
                for (i = 0; i < formats.length; i++) {
                    re = formats[i].re;
                    processor = formats[i].process;
                    parts = re.exec(value);
                    if (parts) {
                        channels = processor(parts);
                        color.r = channels[0];
                        color.g = channels[1];
                        color.b = channels[2];
                    }
                }
            } else {
                color.r = arguments[0];
                color.g = arguments[1];
                color.b = arguments[2];
            }
            color.r = color.normalizeByte(color.r);
            color.g = color.normalizeByte(color.g);
            color.b = color.normalizeByte(color.b);
        };
        Color.prototype = {
            toHex: function () {
                var color = this, pad = color.padDigit, r = color.r.toString(16), g = color.g.toString(16), b = color.b.toString(16);
                return '#' + pad(r) + pad(g) + pad(b);
            },
            resolveColor: function (value) {
                value = value || 'black';
                if (value.charAt(0) == '#') {
                    value = value.substr(1, 6);
                }
                value = value.replace(/ /g, '');
                value = value.toLowerCase();
                value = Color.namedColors[value] || value;
                return value;
            },
            normalizeByte: function (value) {
                return value < 0 || isNaN(value) ? 0 : value > 255 ? 255 : value;
            },
            padDigit: function (value) {
                return value.length === 1 ? '0' + value : value;
            },
            brightness: function (value) {
                var color = this, round = Math.round;
                color.r = round(color.normalizeByte(color.r * value));
                color.g = round(color.normalizeByte(color.g * value));
                color.b = round(color.normalizeByte(color.b * value));
                return color;
            },
            percBrightness: function () {
                var color = this;
                return Math.sqrt(0.241 * color.r * color.r + 0.691 * color.g * color.g + 0.068 * color.b * color.b);
            }
        };
        Color.formats = [
            {
                re: /^rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/,
                process: function (parts) {
                    return [
                        parseInt(parts[1], 10),
                        parseInt(parts[2], 10),
                        parseInt(parts[3], 10)
                    ];
                }
            },
            {
                re: /^(\w{2})(\w{2})(\w{2})$/,
                process: function (parts) {
                    return [
                        parseInt(parts[1], 16),
                        parseInt(parts[2], 16),
                        parseInt(parts[3], 16)
                    ];
                }
            },
            {
                re: /^(\w{1})(\w{1})(\w{1})$/,
                process: function (parts) {
                    return [
                        parseInt(parts[1] + parts[1], 16),
                        parseInt(parts[2] + parts[2], 16),
                        parseInt(parts[3] + parts[3], 16)
                    ];
                }
            }
        ];
        Color.namedColors = {
            aliceblue: 'f0f8ff',
            antiquewhite: 'faebd7',
            aqua: '00ffff',
            aquamarine: '7fffd4',
            azure: 'f0ffff',
            beige: 'f5f5dc',
            bisque: 'ffe4c4',
            black: '000000',
            blanchedalmond: 'ffebcd',
            blue: '0000ff',
            blueviolet: '8a2be2',
            brown: 'a52a2a',
            burlywood: 'deb887',
            cadetblue: '5f9ea0',
            chartreuse: '7fff00',
            chocolate: 'd2691e',
            coral: 'ff7f50',
            cornflowerblue: '6495ed',
            cornsilk: 'fff8dc',
            crimson: 'dc143c',
            cyan: '00ffff',
            darkblue: '00008b',
            darkcyan: '008b8b',
            darkgoldenrod: 'b8860b',
            darkgray: 'a9a9a9',
            darkgrey: 'a9a9a9',
            darkgreen: '006400',
            darkkhaki: 'bdb76b',
            darkmagenta: '8b008b',
            darkolivegreen: '556b2f',
            darkorange: 'ff8c00',
            darkorchid: '9932cc',
            darkred: '8b0000',
            darksalmon: 'e9967a',
            darkseagreen: '8fbc8f',
            darkslateblue: '483d8b',
            darkslategray: '2f4f4f',
            darkslategrey: '2f4f4f',
            darkturquoise: '00ced1',
            darkviolet: '9400d3',
            deeppink: 'ff1493',
            deepskyblue: '00bfff',
            dimgray: '696969',
            dimgrey: '696969',
            dodgerblue: '1e90ff',
            firebrick: 'b22222',
            floralwhite: 'fffaf0',
            forestgreen: '228b22',
            fuchsia: 'ff00ff',
            gainsboro: 'dcdcdc',
            ghostwhite: 'f8f8ff',
            gold: 'ffd700',
            goldenrod: 'daa520',
            gray: '808080',
            grey: '808080',
            green: '008000',
            greenyellow: 'adff2f',
            honeydew: 'f0fff0',
            hotpink: 'ff69b4',
            indianred: 'cd5c5c',
            indigo: '4b0082',
            ivory: 'fffff0',
            khaki: 'f0e68c',
            lavender: 'e6e6fa',
            lavenderblush: 'fff0f5',
            lawngreen: '7cfc00',
            lemonchiffon: 'fffacd',
            lightblue: 'add8e6',
            lightcoral: 'f08080',
            lightcyan: 'e0ffff',
            lightgoldenrodyellow: 'fafad2',
            lightgray: 'd3d3d3',
            lightgrey: 'd3d3d3',
            lightgreen: '90ee90',
            lightpink: 'ffb6c1',
            lightsalmon: 'ffa07a',
            lightseagreen: '20b2aa',
            lightskyblue: '87cefa',
            lightslategray: '778899',
            lightslategrey: '778899',
            lightsteelblue: 'b0c4de',
            lightyellow: 'ffffe0',
            lime: '00ff00',
            limegreen: '32cd32',
            linen: 'faf0e6',
            magenta: 'ff00ff',
            maroon: '800000',
            mediumaquamarine: '66cdaa',
            mediumblue: '0000cd',
            mediumorchid: 'ba55d3',
            mediumpurple: '9370d8',
            mediumseagreen: '3cb371',
            mediumslateblue: '7b68ee',
            mediumspringgreen: '00fa9a',
            mediumturquoise: '48d1cc',
            mediumvioletred: 'c71585',
            midnightblue: '191970',
            mintcream: 'f5fffa',
            mistyrose: 'ffe4e1',
            moccasin: 'ffe4b5',
            navajowhite: 'ffdead',
            navy: '000080',
            oldlace: 'fdf5e6',
            olive: '808000',
            olivedrab: '6b8e23',
            orange: 'ffa500',
            orangered: 'ff4500',
            orchid: 'da70d6',
            palegoldenrod: 'eee8aa',
            palegreen: '98fb98',
            paleturquoise: 'afeeee',
            palevioletred: 'd87093',
            papayawhip: 'ffefd5',
            peachpuff: 'ffdab9',
            peru: 'cd853f',
            pink: 'ffc0cb',
            plum: 'dda0dd',
            powderblue: 'b0e0e6',
            purple: '800080',
            red: 'ff0000',
            rosybrown: 'bc8f8f',
            royalblue: '4169e1',
            saddlebrown: '8b4513',
            salmon: 'fa8072',
            sandybrown: 'f4a460',
            seagreen: '2e8b57',
            seashell: 'fff5ee',
            sienna: 'a0522d',
            silver: 'c0c0c0',
            skyblue: '87ceeb',
            slateblue: '6a5acd',
            slategray: '708090',
            slategrey: '708090',
            snow: 'fffafa',
            springgreen: '00ff7f',
            steelblue: '4682b4',
            tan: 'd2b48c',
            teal: '008080',
            thistle: 'd8bfd8',
            tomato: 'ff6347',
            turquoise: '40e0d0',
            violet: 'ee82ee',
            wheat: 'f5deb3',
            white: 'ffffff',
            whitesmoke: 'f5f5f5',
            yellow: 'ffff00',
            yellowgreen: '9acd32'
        };
        var namedColorRegexp = ['transparent'];
        for (var i in Color.namedColors) {
            if (Color.namedColors.hasOwnProperty(i)) {
                namedColorRegexp.push(i);
            }
        }
        namedColorRegexp = new RegExp('^(' + namedColorRegexp.join('|') + ')(\\W|$)', 'i');
        function parseColor(color, nothrow) {
            var m, ret;
            if (color == null || color == 'none') {
                return null;
            }
            if (color instanceof _Color) {
                return color;
            }
            color = color.toLowerCase();
            if (m = namedColorRegexp.exec(color)) {
                if (m[1] == 'transparent') {
                    color = new _RGB(1, 1, 1, 0);
                } else {
                    color = parseColor(Color.namedColors[m[1]], nothrow);
                }
                color.match = [m[1]];
                return color;
            }
            if (m = /^#?([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})\b/i.exec(color)) {
                ret = new _Bytes(parseInt(m[1], 16), parseInt(m[2], 16), parseInt(m[3], 16), 1);
            } else if (m = /^#?([0-9a-f])([0-9a-f])([0-9a-f])\b/i.exec(color)) {
                ret = new _Bytes(parseInt(m[1] + m[1], 16), parseInt(m[2] + m[2], 16), parseInt(m[3] + m[3], 16), 1);
            } else if (m = /^rgb\(\s*([0-9]+)\s*,\s*([0-9]+)\s*,\s*([0-9]+)\s*\)/.exec(color)) {
                ret = new _Bytes(parseInt(m[1], 10), parseInt(m[2], 10), parseInt(m[3], 10), 1);
            } else if (m = /^rgba\(\s*([0-9]+)\s*,\s*([0-9]+)\s*,\s*([0-9]+)\s*,\s*([0-9.]+)\s*\)/.exec(color)) {
                ret = new _Bytes(parseInt(m[1], 10), parseInt(m[2], 10), parseInt(m[3], 10), parseFloat(m[4]));
            } else if (m = /^rgb\(\s*([0-9]*\.?[0-9]+)%\s*,\s*([0-9]*\.?[0-9]+)%\s*,\s*([0-9]*\.?[0-9]+)%\s*\)/.exec(color)) {
                ret = new _RGB(parseFloat(m[1]) / 100, parseFloat(m[2]) / 100, parseFloat(m[3]) / 100, 1);
            } else if (m = /^rgba\(\s*([0-9]*\.?[0-9]+)%\s*,\s*([0-9]*\.?[0-9]+)%\s*,\s*([0-9]*\.?[0-9]+)%\s*,\s*([0-9.]+)\s*\)/.exec(color)) {
                ret = new _RGB(parseFloat(m[1]) / 100, parseFloat(m[2]) / 100, parseFloat(m[3]) / 100, parseFloat(m[4]));
            }
            if (ret) {
                ret.match = m;
            } else if (!nothrow) {
                throw new Error('Cannot parse color: ' + color);
            }
            return ret;
        }
        function hex(n, width, pad) {
            if (!pad) {
                pad = '0';
            }
            n = n.toString(16);
            while (width > n.length) {
                n = '0' + n;
            }
            return n;
        }
        function hue2rgb(p, q, t) {
            if (t < 0) {
                t += 1;
            }
            if (t > 1) {
                t -= 1;
            }
            if (t < 1 / 6) {
                return p + (q - p) * 6 * t;
            }
            if (t < 1 / 2) {
                return q;
            }
            if (t < 2 / 3) {
                return p + (q - p) * (2 / 3 - t) * 6;
            }
            return p;
        }
        var _Color = kendo.Class.extend({
            toHSV: function () {
                return this;
            },
            toRGB: function () {
                return this;
            },
            toHex: function () {
                return this.toBytes().toHex();
            },
            toBytes: function () {
                return this;
            },
            toCss: function () {
                return '#' + this.toHex();
            },
            toCssRgba: function () {
                var rgb = this.toBytes();
                return 'rgba(' + rgb.r + ', ' + rgb.g + ', ' + rgb.b + ', ' + parseFloat((+this.a).toFixed(3)) + ')';
            },
            toDisplay: function () {
                if (kendo.support.browser.msie && kendo.support.browser.version < 9) {
                    return this.toCss();
                }
                return this.toCssRgba();
            },
            equals: function (c) {
                return c === this || c !== null && this.toCssRgba() == parseColor(c).toCssRgba();
            },
            diff: function (c2) {
                if (c2 == null) {
                    return NaN;
                }
                var c1 = this.toBytes();
                c2 = c2.toBytes();
                return Math.sqrt(Math.pow((c1.r - c2.r) * 0.3, 2) + Math.pow((c1.g - c2.g) * 0.59, 2) + Math.pow((c1.b - c2.b) * 0.11, 2));
            },
            clone: function () {
                var c = this.toBytes();
                if (c === this) {
                    c = new _Bytes(c.r, c.g, c.b, c.a);
                }
                return c;
            }
        });
        var _RGB = _Color.extend({
            init: function (r, g, b, a) {
                this.r = r;
                this.g = g;
                this.b = b;
                this.a = a;
            },
            toHSV: function () {
                var min, max, delta, h, s, v;
                var r = this.r, g = this.g, b = this.b;
                min = Math.min(r, g, b);
                max = Math.max(r, g, b);
                v = max;
                delta = max - min;
                if (delta === 0) {
                    return new _HSV(0, 0, v, this.a);
                }
                if (max !== 0) {
                    s = delta / max;
                    if (r == max) {
                        h = (g - b) / delta;
                    } else if (g == max) {
                        h = 2 + (b - r) / delta;
                    } else {
                        h = 4 + (r - g) / delta;
                    }
                    h *= 60;
                    if (h < 0) {
                        h += 360;
                    }
                } else {
                    s = 0;
                    h = -1;
                }
                return new _HSV(h, s, v, this.a);
            },
            toHSL: function () {
                var r = this.r, g = this.g, b = this.b;
                var max = Math.max(r, g, b), min = Math.min(r, g, b);
                var h, s, l = (max + min) / 2;
                if (max == min) {
                    h = s = 0;
                } else {
                    var d = max - min;
                    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
                    switch (max) {
                    case r:
                        h = (g - b) / d + (g < b ? 6 : 0);
                        break;
                    case g:
                        h = (b - r) / d + 2;
                        break;
                    case b:
                        h = (r - g) / d + 4;
                        break;
                    }
                    h *= 60;
                    s *= 100;
                    l *= 100;
                }
                return new _HSL(h, s, l, this.a);
            },
            toBytes: function () {
                return new _Bytes(this.r * 255, this.g * 255, this.b * 255, this.a);
            }
        });
        var _Bytes = _RGB.extend({
            init: function (r, g, b, a) {
                this.r = Math.round(r);
                this.g = Math.round(g);
                this.b = Math.round(b);
                this.a = a;
            },
            toRGB: function () {
                return new _RGB(this.r / 255, this.g / 255, this.b / 255, this.a);
            },
            toHSV: function () {
                return this.toRGB().toHSV();
            },
            toHSL: function () {
                return this.toRGB().toHSL();
            },
            toHex: function () {
                return hex(this.r, 2) + hex(this.g, 2) + hex(this.b, 2);
            },
            toBytes: function () {
                return this;
            }
        });
        var _HSV = _Color.extend({
            init: function (h, s, v, a) {
                this.h = h;
                this.s = s;
                this.v = v;
                this.a = a;
            },
            toRGB: function () {
                var h = this.h, s = this.s, v = this.v;
                var i, r, g, b, f, p, q, t;
                if (s === 0) {
                    r = g = b = v;
                } else {
                    h /= 60;
                    i = Math.floor(h);
                    f = h - i;
                    p = v * (1 - s);
                    q = v * (1 - s * f);
                    t = v * (1 - s * (1 - f));
                    switch (i) {
                    case 0:
                        r = v;
                        g = t;
                        b = p;
                        break;
                    case 1:
                        r = q;
                        g = v;
                        b = p;
                        break;
                    case 2:
                        r = p;
                        g = v;
                        b = t;
                        break;
                    case 3:
                        r = p;
                        g = q;
                        b = v;
                        break;
                    case 4:
                        r = t;
                        g = p;
                        b = v;
                        break;
                    default:
                        r = v;
                        g = p;
                        b = q;
                        break;
                    }
                }
                return new _RGB(r, g, b, this.a);
            },
            toHSL: function () {
                return this.toRGB().toHSL();
            },
            toBytes: function () {
                return this.toRGB().toBytes();
            }
        });
        var _HSL = _Color.extend({
            init: function (h, s, l, a) {
                this.h = h;
                this.s = s;
                this.l = l;
                this.a = a;
            },
            toRGB: function () {
                var h = this.h, s = this.s, l = this.l;
                var r, g, b;
                if (s === 0) {
                    r = g = b = l;
                } else {
                    h /= 360;
                    s /= 100;
                    l /= 100;
                    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
                    var p = 2 * l - q;
                    r = hue2rgb(p, q, h + 1 / 3);
                    g = hue2rgb(p, q, h);
                    b = hue2rgb(p, q, h - 1 / 3);
                }
                return new _RGB(r, g, b, this.a);
            },
            toHSV: function () {
                return this.toRGB().toHSV();
            },
            toBytes: function () {
                return this.toRGB().toBytes();
            }
        });
        Color.fromBytes = function (r, g, b, a) {
            return new _Bytes(r, g, b, a != null ? a : 1);
        };
        Color.fromRGB = function (r, g, b, a) {
            return new _RGB(r, g, b, a != null ? a : 1);
        };
        Color.fromHSV = function (h, s, v, a) {
            return new _HSV(h, s, v, a != null ? a : 1);
        };
        Color.fromHSL = function (h, s, l, a) {
            return new _HSL(h, s, l, a != null ? a : 1);
        };
        kendo.Color = Color;
        kendo.parseColor = parseColor;
    }(window.kendo.jQuery, parseFloat, parseInt));
}, typeof define == 'function' && define.amd ? define : function (a1, a2, a3) {
    (a3 || a2)();
}));
/** 
 * Kendo UI v2016.3.1118 (http://www.telerik.com/kendo-ui)                                                                                                                                              
 * Copyright 2016 Telerik AD. All rights reserved.                                                                                                                                                      
 *                                                                                                                                                                                                      
 * Kendo UI commercial licenses may be obtained at                                                                                                                                                      
 * http://www.telerik.com/purchase/license-agreement/kendo-ui-complete                                                                                                                                  
 * If you do not own a commercial license, this file shall be governed by the trial license terms.                                                                                                      
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       

*/
(function (f, define) {
    define('util/main', ['kendo.core'], f);
}(function () {
    (function () {
        var math = Math, kendo = window.kendo, deepExtend = kendo.deepExtend;
        var DEG_TO_RAD = math.PI / 180, MAX_NUM = Number.MAX_VALUE, MIN_NUM = -Number.MAX_VALUE, UNDEFINED = 'undefined';
        function defined(value) {
            return typeof value !== UNDEFINED;
        }
        function round(value, precision) {
            var power = pow(precision);
            return math.round(value * power) / power;
        }
        function pow(p) {
            if (p) {
                return math.pow(10, p);
            } else {
                return 1;
            }
        }
        function limitValue(value, min, max) {
            return math.max(math.min(value, max), min);
        }
        function rad(degrees) {
            return degrees * DEG_TO_RAD;
        }
        function deg(radians) {
            return radians / DEG_TO_RAD;
        }
        function isNumber(val) {
            return typeof val === 'number' && !isNaN(val);
        }
        function valueOrDefault(value, defaultValue) {
            return defined(value) ? value : defaultValue;
        }
        function sqr(value) {
            return value * value;
        }
        function objectKey(object) {
            var parts = [];
            for (var key in object) {
                parts.push(key + object[key]);
            }
            return parts.sort().join('');
        }
        function hashKey(str) {
            var hash = 2166136261;
            for (var i = 0; i < str.length; ++i) {
                hash += (hash << 1) + (hash << 4) + (hash << 7) + (hash << 8) + (hash << 24);
                hash ^= str.charCodeAt(i);
            }
            return hash >>> 0;
        }
        function hashObject(object) {
            return hashKey(objectKey(object));
        }
        var now = Date.now;
        if (!now) {
            now = function () {
                return new Date().getTime();
            };
        }
        function arrayLimits(arr) {
            var length = arr.length, i, min = MAX_NUM, max = MIN_NUM;
            for (i = 0; i < length; i++) {
                max = math.max(max, arr[i]);
                min = math.min(min, arr[i]);
            }
            return {
                min: min,
                max: max
            };
        }
        function arrayMin(arr) {
            return arrayLimits(arr).min;
        }
        function arrayMax(arr) {
            return arrayLimits(arr).max;
        }
        function sparseArrayMin(arr) {
            return sparseArrayLimits(arr).min;
        }
        function sparseArrayMax(arr) {
            return sparseArrayLimits(arr).max;
        }
        function sparseArrayLimits(arr) {
            var min = MAX_NUM, max = MIN_NUM;
            for (var i = 0, length = arr.length; i < length; i++) {
                var n = arr[i];
                if (n !== null && isFinite(n)) {
                    min = math.min(min, n);
                    max = math.max(max, n);
                }
            }
            return {
                min: min === MAX_NUM ? undefined : min,
                max: max === MIN_NUM ? undefined : max
            };
        }
        function last(array) {
            if (array) {
                return array[array.length - 1];
            }
        }
        function append(first, second) {
            first.push.apply(first, second);
            return first;
        }
        function renderTemplate(text) {
            return kendo.template(text, {
                useWithBlock: false,
                paramName: 'd'
            });
        }
        function renderAttr(name, value) {
            return defined(value) && value !== null ? ' ' + name + '=\'' + value + '\' ' : '';
        }
        function renderAllAttr(attrs) {
            var output = '';
            for (var i = 0; i < attrs.length; i++) {
                output += renderAttr(attrs[i][0], attrs[i][1]);
            }
            return output;
        }
        function renderStyle(attrs) {
            var output = '';
            for (var i = 0; i < attrs.length; i++) {
                var value = attrs[i][1];
                if (defined(value)) {
                    output += attrs[i][0] + ':' + value + ';';
                }
            }
            if (output !== '') {
                return output;
            }
        }
        function renderSize(size) {
            if (typeof size !== 'string') {
                size += 'px';
            }
            return size;
        }
        function renderPos(pos) {
            var result = [];
            if (pos) {
                var parts = kendo.toHyphens(pos).split('-');
                for (var i = 0; i < parts.length; i++) {
                    result.push('k-pos-' + parts[i]);
                }
            }
            return result.join(' ');
        }
        function isTransparent(color) {
            return color === '' || color === null || color === 'none' || color === 'transparent' || !defined(color);
        }
        function arabicToRoman(n) {
            var literals = {
                1: 'i',
                10: 'x',
                100: 'c',
                2: 'ii',
                20: 'xx',
                200: 'cc',
                3: 'iii',
                30: 'xxx',
                300: 'ccc',
                4: 'iv',
                40: 'xl',
                400: 'cd',
                5: 'v',
                50: 'l',
                500: 'd',
                6: 'vi',
                60: 'lx',
                600: 'dc',
                7: 'vii',
                70: 'lxx',
                700: 'dcc',
                8: 'viii',
                80: 'lxxx',
                800: 'dccc',
                9: 'ix',
                90: 'xc',
                900: 'cm',
                1000: 'm'
            };
            var values = [
                1000,
                900,
                800,
                700,
                600,
                500,
                400,
                300,
                200,
                100,
                90,
                80,
                70,
                60,
                50,
                40,
                30,
                20,
                10,
                9,
                8,
                7,
                6,
                5,
                4,
                3,
                2,
                1
            ];
            var roman = '';
            while (n > 0) {
                if (n < values[0]) {
                    values.shift();
                } else {
                    roman += literals[values[0]];
                    n -= values[0];
                }
            }
            return roman;
        }
        function romanToArabic(r) {
            r = r.toLowerCase();
            var digits = {
                i: 1,
                v: 5,
                x: 10,
                l: 50,
                c: 100,
                d: 500,
                m: 1000
            };
            var value = 0, prev = 0;
            for (var i = 0; i < r.length; ++i) {
                var v = digits[r.charAt(i)];
                if (!v) {
                    return null;
                }
                value += v;
                if (v > prev) {
                    value -= 2 * prev;
                }
                prev = v;
            }
            return value;
        }
        function memoize(f) {
            var cache = Object.create(null);
            return function () {
                var id = '';
                for (var i = arguments.length; --i >= 0;) {
                    id += ':' + arguments[i];
                }
                return id in cache ? cache[id] : cache[id] = f.apply(this, arguments);
            };
        }
        function ucs2decode(string) {
            var output = [], counter = 0, length = string.length, value, extra;
            while (counter < length) {
                value = string.charCodeAt(counter++);
                if (value >= 55296 && value <= 56319 && counter < length) {
                    extra = string.charCodeAt(counter++);
                    if ((extra & 64512) == 56320) {
                        output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
                    } else {
                        output.push(value);
                        counter--;
                    }
                } else {
                    output.push(value);
                }
            }
            return output;
        }
        function ucs2encode(array) {
            return array.map(function (value) {
                var output = '';
                if (value > 65535) {
                    value -= 65536;
                    output += String.fromCharCode(value >>> 10 & 1023 | 55296);
                    value = 56320 | value & 1023;
                }
                output += String.fromCharCode(value);
                return output;
            }).join('');
        }
        function mergeSort(a, cmp) {
            if (a.length < 2) {
                return a.slice();
            }
            function merge(a, b) {
                var r = [], ai = 0, bi = 0, i = 0;
                while (ai < a.length && bi < b.length) {
                    if (cmp(a[ai], b[bi]) <= 0) {
                        r[i++] = a[ai++];
                    } else {
                        r[i++] = b[bi++];
                    }
                }
                if (ai < a.length) {
                    r.push.apply(r, a.slice(ai));
                }
                if (bi < b.length) {
                    r.push.apply(r, b.slice(bi));
                }
                return r;
            }
            return function sort(a) {
                if (a.length <= 1) {
                    return a;
                }
                var m = Math.floor(a.length / 2);
                var left = a.slice(0, m);
                var right = a.slice(m);
                left = sort(left);
                right = sort(right);
                return merge(left, right);
            }(a);
        }
        deepExtend(kendo, {
            util: {
                MAX_NUM: MAX_NUM,
                MIN_NUM: MIN_NUM,
                append: append,
                arrayLimits: arrayLimits,
                arrayMin: arrayMin,
                arrayMax: arrayMax,
                defined: defined,
                deg: deg,
                hashKey: hashKey,
                hashObject: hashObject,
                isNumber: isNumber,
                isTransparent: isTransparent,
                last: last,
                limitValue: limitValue,
                now: now,
                objectKey: objectKey,
                round: round,
                rad: rad,
                renderAttr: renderAttr,
                renderAllAttr: renderAllAttr,
                renderPos: renderPos,
                renderSize: renderSize,
                renderStyle: renderStyle,
                renderTemplate: renderTemplate,
                sparseArrayLimits: sparseArrayLimits,
                sparseArrayMin: sparseArrayMin,
                sparseArrayMax: sparseArrayMax,
                sqr: sqr,
                valueOrDefault: valueOrDefault,
                romanToArabic: romanToArabic,
                arabicToRoman: arabicToRoman,
                memoize: memoize,
                ucs2encode: ucs2encode,
                ucs2decode: ucs2decode,
                mergeSort: mergeSort
            }
        });
        kendo.drawing.util = kendo.util;
        kendo.dataviz.util = kendo.util;
    }());
    return window.kendo;
}, typeof define == 'function' && define.amd ? define : function (a1, a2, a3) {
    (a3 || a2)();
}));
(function (f, define) {
    define('util/text-metrics', [
        'kendo.core',
        'util/main'
    ], f);
}(function () {
    (function ($) {
        var doc = document, kendo = window.kendo, Class = kendo.Class, util = kendo.util, defined = util.defined;
        var LRUCache = Class.extend({
            init: function (size) {
                this._size = size;
                this._length = 0;
                this._map = {};
            },
            put: function (key, value) {
                var lru = this, map = lru._map, entry = {
                        key: key,
                        value: value
                    };
                map[key] = entry;
                if (!lru._head) {
                    lru._head = lru._tail = entry;
                } else {
                    lru._tail.newer = entry;
                    entry.older = lru._tail;
                    lru._tail = entry;
                }
                if (lru._length >= lru._size) {
                    map[lru._head.key] = null;
                    lru._head = lru._head.newer;
                    lru._head.older = null;
                } else {
                    lru._length++;
                }
            },
            get: function (key) {
                var lru = this, entry = lru._map[key];
                if (entry) {
                    if (entry === lru._head && entry !== lru._tail) {
                        lru._head = entry.newer;
                        lru._head.older = null;
                    }
                    if (entry !== lru._tail) {
                        if (entry.older) {
                            entry.older.newer = entry.newer;
                            entry.newer.older = entry.older;
                        }
                        entry.older = lru._tail;
                        entry.newer = null;
                        lru._tail.newer = entry;
                        lru._tail = entry;
                    }
                    return entry.value;
                }
            }
        });
        var defaultMeasureBox = $('<div style=\'position: absolute !important; top: -4000px !important; width: auto !important; height: auto !important;' + 'padding: 0 !important; margin: 0 !important; border: 0 !important;' + 'line-height: normal !important; visibility: hidden !important; white-space: nowrap!important;\' />')[0];
        function zeroSize() {
            return {
                width: 0,
                height: 0,
                baseline: 0
            };
        }
        var TextMetrics = Class.extend({
            init: function (options) {
                this._cache = new LRUCache(1000);
                this._initOptions(options);
            },
            options: { baselineMarkerSize: 1 },
            measure: function (text, style, box) {
                if (!text) {
                    return zeroSize();
                }
                var styleKey = util.objectKey(style), cacheKey = util.hashKey(text + styleKey), cachedResult = this._cache.get(cacheKey);
                if (cachedResult) {
                    return cachedResult;
                }
                var size = zeroSize();
                var measureBox = box ? box : defaultMeasureBox;
                var baselineMarker = this._baselineMarker().cloneNode(false);
                for (var key in style) {
                    var value = style[key];
                    if (defined(value)) {
                        measureBox.style[key] = value;
                    }
                }
                $(measureBox).text(text);
                measureBox.appendChild(baselineMarker);
                doc.body.appendChild(measureBox);
                if ((text + '').length) {
                    size.width = measureBox.offsetWidth - this.options.baselineMarkerSize;
                    size.height = measureBox.offsetHeight;
                    size.baseline = baselineMarker.offsetTop + this.options.baselineMarkerSize;
                }
                if (size.width > 0 && size.height > 0) {
                    this._cache.put(cacheKey, size);
                }
                measureBox.parentNode.removeChild(measureBox);
                return size;
            },
            _baselineMarker: function () {
                return $('<div class=\'k-baseline-marker\' ' + 'style=\'display: inline-block; vertical-align: baseline;' + 'width: ' + this.options.baselineMarkerSize + 'px; height: ' + this.options.baselineMarkerSize + 'px;' + 'overflow: hidden;\' />')[0];
            }
        });
        TextMetrics.current = new TextMetrics();
        function measureText(text, style, measureBox) {
            return TextMetrics.current.measure(text, style, measureBox);
        }
        function loadFonts(fonts, callback) {
            var promises = [];
            if (fonts.length > 0 && document.fonts) {
                try {
                    promises = fonts.map(function (font) {
                        return document.fonts.load(font);
                    });
                } catch (e) {
                    kendo.logToConsole(e);
                }
                Promise.all(promises).then(callback, callback);
            } else {
                callback();
            }
        }
        kendo.util.TextMetrics = TextMetrics;
        kendo.util.LRUCache = LRUCache;
        kendo.util.loadFonts = loadFonts;
        kendo.util.measureText = measureText;
    }(window.kendo.jQuery));
}, typeof define == 'function' && define.amd ? define : function (a1, a2, a3) {
    (a3 || a2)();
}));
(function (f, define) {
    define('util/base64', ['util/main'], f);
}(function () {
    (function () {
        var kendo = window.kendo, deepExtend = kendo.deepExtend, fromCharCode = String.fromCharCode;
        var KEY_STR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
        function encodeBase64(input) {
            var output = '';
            var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
            var i = 0;
            input = encodeUTF8(input);
            while (i < input.length) {
                chr1 = input.charCodeAt(i++);
                chr2 = input.charCodeAt(i++);
                chr3 = input.charCodeAt(i++);
                enc1 = chr1 >> 2;
                enc2 = (chr1 & 3) << 4 | chr2 >> 4;
                enc3 = (chr2 & 15) << 2 | chr3 >> 6;
                enc4 = chr3 & 63;
                if (isNaN(chr2)) {
                    enc3 = enc4 = 64;
                } else if (isNaN(chr3)) {
                    enc4 = 64;
                }
                output = output + KEY_STR.charAt(enc1) + KEY_STR.charAt(enc2) + KEY_STR.charAt(enc3) + KEY_STR.charAt(enc4);
            }
            return output;
        }
        function encodeUTF8(input) {
            var output = '';
            for (var i = 0; i < input.length; i++) {
                var c = input.charCodeAt(i);
                if (c < 128) {
                    output += fromCharCode(c);
                } else if (c < 2048) {
                    output += fromCharCode(192 | c >>> 6);
                    output += fromCharCode(128 | c & 63);
                } else if (c < 65536) {
                    output += fromCharCode(224 | c >>> 12);
                    output += fromCharCode(128 | c >>> 6 & 63);
                    output += fromCharCode(128 | c & 63);
                }
            }
            return output;
        }
        deepExtend(kendo.util, {
            encodeBase64: encodeBase64,
            encodeUTF8: encodeUTF8
        });
    }());
    return window.kendo;
}, typeof define == 'function' && define.amd ? define : function (a1, a2, a3) {
    (a3 || a2)();
}));
(function (f, define) {
    define('mixins/observers', ['kendo.core'], f);
}(function () {
    (function ($) {
        var math = Math, kendo = window.kendo, deepExtend = kendo.deepExtend, inArray = $.inArray;
        var ObserversMixin = {
            observers: function () {
                this._observers = this._observers || [];
                return this._observers;
            },
            addObserver: function (element) {
                if (!this._observers) {
                    this._observers = [element];
                } else {
                    this._observers.push(element);
                }
                return this;
            },
            removeObserver: function (element) {
                var observers = this.observers();
                var index = inArray(element, observers);
                if (index != -1) {
                    observers.splice(index, 1);
                }
                return this;
            },
            trigger: function (methodName, event) {
                var observers = this._observers;
                var observer;
                var idx;
                if (observers && !this._suspended) {
                    for (idx = 0; idx < observers.length; idx++) {
                        observer = observers[idx];
                        if (observer[methodName]) {
                            observer[methodName](event);
                        }
                    }
                }
                return this;
            },
            optionsChange: function (e) {
                e = e || {};
                e.element = this;
                this.trigger('optionsChange', e);
            },
            geometryChange: function () {
                this.trigger('geometryChange', { element: this });
            },
            suspend: function () {
                this._suspended = (this._suspended || 0) + 1;
                return this;
            },
            resume: function () {
                this._suspended = math.max((this._suspended || 0) - 1, 0);
                return this;
            },
            _observerField: function (field, value) {
                if (this[field]) {
                    this[field].removeObserver(this);
                }
                this[field] = value;
                value.addObserver(this);
            }
        };
        deepExtend(kendo, { mixins: { ObserversMixin: ObserversMixin } });
    }(window.kendo.jQuery));
    return window.kendo;
}, typeof define == 'function' && define.amd ? define : function (a1, a2, a3) {
    (a3 || a2)();
}));
(function (f, define) {
    define('drawing/geometry', [
        'util/main',
        'mixins/observers'
    ], f);
}(function () {
    (function () {
        var math = Math, pow = math.pow, kendo = window.kendo, Class = kendo.Class, deepExtend = kendo.deepExtend, ObserversMixin = kendo.mixins.ObserversMixin, util = kendo.util, defined = util.defined, rad = util.rad, deg = util.deg, round = util.round;
        var PI_DIV_2 = math.PI / 2, MIN_NUM = util.MIN_NUM, MAX_NUM = util.MAX_NUM, PRECISION = 10;
        var Point = Class.extend({
            init: function (x, y) {
                this.x = x || 0;
                this.y = y || 0;
            },
            equals: function (other) {
                return other && other.x === this.x && other.y === this.y;
            },
            clone: function () {
                return new Point(this.x, this.y);
            },
            rotate: function (angle, origin) {
                return this.transform(transform().rotate(angle, origin));
            },
            translate: function (x, y) {
                this.x += x;
                this.y += y;
                this.geometryChange();
                return this;
            },
            translateWith: function (point) {
                return this.translate(point.x, point.y);
            },
            move: function (x, y) {
                this.x = this.y = 0;
                return this.translate(x, y);
            },
            scale: function (scaleX, scaleY) {
                if (!defined(scaleY)) {
                    scaleY = scaleX;
                }
                this.x *= scaleX;
                this.y *= scaleY;
                this.geometryChange();
                return this;
            },
            scaleCopy: function (scaleX, scaleY) {
                return this.clone().scale(scaleX, scaleY);
            },
            transform: function (transformation) {
                var mx = toMatrix(transformation), x = this.x, y = this.y;
                this.x = mx.a * x + mx.c * y + mx.e;
                this.y = mx.b * x + mx.d * y + mx.f;
                this.geometryChange();
                return this;
            },
            transformCopy: function (transformation) {
                var point = this.clone();
                if (transformation) {
                    point.transform(transformation);
                }
                return point;
            },
            distanceTo: function (point) {
                var dx = this.x - point.x;
                var dy = this.y - point.y;
                return math.sqrt(dx * dx + dy * dy);
            },
            round: function (digits) {
                this.x = round(this.x, digits);
                this.y = round(this.y, digits);
                this.geometryChange();
                return this;
            },
            toArray: function (digits) {
                var doRound = defined(digits);
                var x = doRound ? round(this.x, digits) : this.x;
                var y = doRound ? round(this.y, digits) : this.y;
                return [
                    x,
                    y
                ];
            }
        });
        defineAccessors(Point.fn, [
            'x',
            'y'
        ]);
        deepExtend(Point.fn, ObserversMixin);
        Point.fn.toString = function (digits, separator) {
            var x = this.x, y = this.y;
            if (defined(digits)) {
                x = round(x, digits);
                y = round(y, digits);
            }
            separator = separator || ' ';
            return x + separator + y;
        };
        Point.create = function (arg0, arg1) {
            if (defined(arg0)) {
                if (arg0 instanceof Point) {
                    return arg0;
                } else if (arguments.length === 1 && arg0.length === 2) {
                    return new Point(arg0[0], arg0[1]);
                } else {
                    return new Point(arg0, arg1);
                }
            }
        };
        Point.min = function () {
            var minX = util.MAX_NUM;
            var minY = util.MAX_NUM;
            for (var i = 0; i < arguments.length; i++) {
                var pt = arguments[i];
                minX = math.min(pt.x, minX);
                minY = math.min(pt.y, minY);
            }
            return new Point(minX, minY);
        };
        Point.max = function () {
            var maxX = util.MIN_NUM;
            var maxY = util.MIN_NUM;
            for (var i = 0; i < arguments.length; i++) {
                var pt = arguments[i];
                maxX = math.max(pt.x, maxX);
                maxY = math.max(pt.y, maxY);
            }
            return new Point(maxX, maxY);
        };
        Point.minPoint = function () {
            return new Point(MIN_NUM, MIN_NUM);
        };
        Point.maxPoint = function () {
            return new Point(MAX_NUM, MAX_NUM);
        };
        Point.ZERO = new Point(0, 0);
        var Size = Class.extend({
            init: function (width, height) {
                this.width = width || 0;
                this.height = height || 0;
            },
            equals: function (other) {
                return other && other.width === this.width && other.height === this.height;
            },
            clone: function () {
                return new Size(this.width, this.height);
            },
            toArray: function (digits) {
                var doRound = defined(digits);
                var width = doRound ? round(this.width, digits) : this.width;
                var height = doRound ? round(this.height, digits) : this.height;
                return [
                    width,
                    height
                ];
            }
        });
        defineAccessors(Size.fn, [
            'width',
            'height'
        ]);
        deepExtend(Size.fn, ObserversMixin);
        Size.create = function (arg0, arg1) {
            if (defined(arg0)) {
                if (arg0 instanceof Size) {
                    return arg0;
                } else if (arguments.length === 1 && arg0.length === 2) {
                    return new Size(arg0[0], arg0[1]);
                } else {
                    return new Size(arg0, arg1);
                }
            }
        };
        Size.ZERO = new Size(0, 0);
        var Rect = Class.extend({
            init: function (origin, size) {
                this.setOrigin(origin || new Point());
                this.setSize(size || new Size());
            },
            clone: function () {
                return new Rect(this.origin.clone(), this.size.clone());
            },
            equals: function (other) {
                return other && other.origin.equals(this.origin) && other.size.equals(this.size);
            },
            setOrigin: function (value) {
                this._observerField('origin', Point.create(value));
                this.geometryChange();
                return this;
            },
            getOrigin: function () {
                return this.origin;
            },
            setSize: function (value) {
                this._observerField('size', Size.create(value));
                this.geometryChange();
                return this;
            },
            getSize: function () {
                return this.size;
            },
            width: function () {
                return this.size.width;
            },
            height: function () {
                return this.size.height;
            },
            topLeft: function () {
                return this.origin.clone();
            },
            bottomRight: function () {
                return this.origin.clone().translate(this.width(), this.height());
            },
            topRight: function () {
                return this.origin.clone().translate(this.width(), 0);
            },
            bottomLeft: function () {
                return this.origin.clone().translate(0, this.height());
            },
            center: function () {
                return this.origin.clone().translate(this.width() / 2, this.height() / 2);
            },
            bbox: function (matrix) {
                var tl = this.topLeft().transformCopy(matrix);
                var tr = this.topRight().transformCopy(matrix);
                var br = this.bottomRight().transformCopy(matrix);
                var bl = this.bottomLeft().transformCopy(matrix);
                return Rect.fromPoints(tl, tr, br, bl);
            },
            transformCopy: function (m) {
                return Rect.fromPoints(this.topLeft().transform(m), this.bottomRight().transform(m));
            },
            expand: function (x, y) {
                if (!defined(y)) {
                    y = x;
                }
                this.size.width += 2 * x;
                this.size.height += 2 * y;
                this.origin.translate(-x, -y);
                return this;
            },
            expandCopy: function (x, y) {
                return this.clone().expand(x, y);
            },
            containsPoint: function (point) {
                var origin = this.origin;
                var bottomRight = this.bottomRight();
                return !(point.x < origin.x || point.y < origin.y || bottomRight.x < point.x || bottomRight.y < point.y);
            },
            _isOnPath: function (point, width) {
                var rectOuter = this.expandCopy(width, width);
                var rectInner = this.expandCopy(-width, -width);
                return rectOuter.containsPoint(point) && !rectInner.containsPoint(point);
            }
        });
        deepExtend(Rect.fn, ObserversMixin);
        Rect.fromPoints = function () {
            var topLeft = Point.min.apply(this, arguments);
            var bottomRight = Point.max.apply(this, arguments);
            var size = new Size(bottomRight.x - topLeft.x, bottomRight.y - topLeft.y);
            return new Rect(topLeft, size);
        };
        Rect.union = function (a, b) {
            return Rect.fromPoints(Point.min(a.topLeft(), b.topLeft()), Point.max(a.bottomRight(), b.bottomRight()));
        };
        Rect.intersect = function (a, b) {
            a = {
                left: a.topLeft().x,
                top: a.topLeft().y,
                right: a.bottomRight().x,
                bottom: a.bottomRight().y
            };
            b = {
                left: b.topLeft().x,
                top: b.topLeft().y,
                right: b.bottomRight().x,
                bottom: b.bottomRight().y
            };
            if (a.left <= b.right && b.left <= a.right && a.top <= b.bottom && b.top <= a.bottom) {
                return Rect.fromPoints(new Point(math.max(a.left, b.left), math.max(a.top, b.top)), new Point(math.min(a.right, b.right), math.min(a.bottom, b.bottom)));
            }
        };
        var Circle = Class.extend({
            init: function (center, radius) {
                this.setCenter(center || new Point());
                this.setRadius(radius || 0);
            },
            setCenter: function (value) {
                this._observerField('center', Point.create(value));
                this.geometryChange();
                return this;
            },
            getCenter: function () {
                return this.center;
            },
            equals: function (other) {
                return other && other.center.equals(this.center) && other.radius === this.radius;
            },
            clone: function () {
                return new Circle(this.center.clone(), this.radius);
            },
            pointAt: function (angle) {
                return this._pointAt(rad(angle));
            },
            bbox: function (matrix) {
                var minPoint = Point.maxPoint();
                var maxPoint = Point.minPoint();
                var extremeAngles = ellipseExtremeAngles(this.center, this.radius, this.radius, matrix);
                for (var i = 0; i < 4; i++) {
                    var currentPointX = this._pointAt(extremeAngles.x + i * PI_DIV_2).transformCopy(matrix);
                    var currentPointY = this._pointAt(extremeAngles.y + i * PI_DIV_2).transformCopy(matrix);
                    var currentPoint = new Point(currentPointX.x, currentPointY.y);
                    minPoint = Point.min(minPoint, currentPoint);
                    maxPoint = Point.max(maxPoint, currentPoint);
                }
                return Rect.fromPoints(minPoint, maxPoint);
            },
            _pointAt: function (angle) {
                var c = this.center;
                var r = this.radius;
                return new Point(c.x - r * math.cos(angle), c.y - r * math.sin(angle));
            },
            containsPoint: function (point) {
                var center = this.center;
                var inCircle = math.pow(point.x - center.x, 2) + math.pow(point.y - center.y, 2) <= math.pow(this.radius, 2);
                return inCircle;
            },
            _isOnPath: function (point, width) {
                var center = this.center;
                var radius = this.radius;
                var pointDistance = center.distanceTo(point);
                return radius - width <= pointDistance && pointDistance <= radius + width;
            }
        });
        defineAccessors(Circle.fn, ['radius']);
        deepExtend(Circle.fn, ObserversMixin);
        var Arc = Class.extend({
            init: function (center, options) {
                this.setCenter(center || new Point());
                options = options || {};
                this.radiusX = options.radiusX;
                this.radiusY = options.radiusY || options.radiusX;
                this.startAngle = options.startAngle;
                this.endAngle = options.endAngle;
                this.anticlockwise = options.anticlockwise || false;
            },
            clone: function () {
                return new Arc(this.center, {
                    radiusX: this.radiusX,
                    radiusY: this.radiusY,
                    startAngle: this.startAngle,
                    endAngle: this.endAngle,
                    anticlockwise: this.anticlockwise
                });
            },
            setCenter: function (value) {
                this._observerField('center', Point.create(value));
                this.geometryChange();
                return this;
            },
            getCenter: function () {
                return this.center;
            },
            MAX_INTERVAL: 45,
            pointAt: function (angle) {
                var center = this.center;
                var radian = rad(angle);
                return new Point(center.x + this.radiusX * math.cos(radian), center.y + this.radiusY * math.sin(radian));
            },
            curvePoints: function () {
                var startAngle = this.startAngle;
                var dir = this.anticlockwise ? -1 : 1;
                var curvePoints = [this.pointAt(startAngle)];
                var currentAngle = startAngle;
                var interval = this._arcInterval();
                var intervalAngle = interval.endAngle - interval.startAngle;
                var subIntervalsCount = math.ceil(intervalAngle / this.MAX_INTERVAL);
                var subIntervalAngle = intervalAngle / subIntervalsCount;
                for (var i = 1; i <= subIntervalsCount; i++) {
                    var nextAngle = currentAngle + dir * subIntervalAngle;
                    var points = this._intervalCurvePoints(currentAngle, nextAngle);
                    curvePoints.push(points.cp1, points.cp2, points.p2);
                    currentAngle = nextAngle;
                }
                return curvePoints;
            },
            bbox: function (matrix) {
                var arc = this;
                var interval = arc._arcInterval();
                var startAngle = interval.startAngle;
                var endAngle = interval.endAngle;
                var extremeAngles = ellipseExtremeAngles(this.center, this.radiusX, this.radiusY, matrix);
                var extremeX = deg(extremeAngles.x);
                var extremeY = deg(extremeAngles.y);
                var currentPoint = arc.pointAt(startAngle).transformCopy(matrix);
                var endPoint = arc.pointAt(endAngle).transformCopy(matrix);
                var minPoint = Point.min(currentPoint, endPoint);
                var maxPoint = Point.max(currentPoint, endPoint);
                var currentAngleX = bboxStartAngle(extremeX, startAngle);
                var currentAngleY = bboxStartAngle(extremeY, startAngle);
                while (currentAngleX < endAngle || currentAngleY < endAngle) {
                    var currentPointX;
                    if (currentAngleX < endAngle) {
                        currentPointX = arc.pointAt(currentAngleX).transformCopy(matrix);
                        currentAngleX += 90;
                    }
                    var currentPointY;
                    if (currentAngleY < endAngle) {
                        currentPointY = arc.pointAt(currentAngleY).transformCopy(matrix);
                        currentAngleY += 90;
                    }
                    currentPoint = new Point(currentPointX.x, currentPointY.y);
                    minPoint = Point.min(minPoint, currentPoint);
                    maxPoint = Point.max(maxPoint, currentPoint);
                }
                return Rect.fromPoints(minPoint, maxPoint);
            },
            _arcInterval: function () {
                var startAngle = this.startAngle;
                var endAngle = this.endAngle;
                var anticlockwise = this.anticlockwise;
                if (anticlockwise) {
                    var oldStart = startAngle;
                    startAngle = endAngle;
                    endAngle = oldStart;
                }
                if (startAngle > endAngle || anticlockwise && startAngle === endAngle) {
                    endAngle += 360;
                }
                return {
                    startAngle: startAngle,
                    endAngle: endAngle
                };
            },
            _intervalCurvePoints: function (startAngle, endAngle) {
                var arc = this;
                var p1 = arc.pointAt(startAngle);
                var p2 = arc.pointAt(endAngle);
                var p1Derivative = arc._derivativeAt(startAngle);
                var p2Derivative = arc._derivativeAt(endAngle);
                var t = (rad(endAngle) - rad(startAngle)) / 3;
                var cp1 = new Point(p1.x + t * p1Derivative.x, p1.y + t * p1Derivative.y);
                var cp2 = new Point(p2.x - t * p2Derivative.x, p2.y - t * p2Derivative.y);
                return {
                    p1: p1,
                    cp1: cp1,
                    cp2: cp2,
                    p2: p2
                };
            },
            _derivativeAt: function (angle) {
                var arc = this;
                var radian = rad(angle);
                return new Point(-arc.radiusX * math.sin(radian), arc.radiusY * math.cos(radian));
            },
            containsPoint: function (point) {
                var interval = this._arcInterval();
                var intervalAngle = interval.endAngle - interval.startAngle;
                var center = this.center;
                var distance = center.distanceTo(point);
                var angleRad = math.atan2(point.y - center.y, point.x - center.x);
                var pointRadius = this.radiusX * this.radiusY / math.sqrt(math.pow(this.radiusX, 2) * math.pow(math.sin(angleRad), 2) + math.pow(this.radiusY, 2) * math.pow(math.cos(angleRad), 2));
                var startPoint = this.pointAt(this.startAngle).round(PRECISION);
                var endPoint = this.pointAt(this.endAngle).round(PRECISION);
                var intersection = lineIntersection(center, point.round(PRECISION), startPoint, endPoint);
                var containsPoint;
                if (intervalAngle < 180) {
                    containsPoint = intersection && closeOrLess(center.distanceTo(intersection), distance) && closeOrLess(distance, pointRadius);
                } else {
                    var angle = calculateAngle(center.x, center.y, this.radiusX, this.radiusY, point.x, point.y);
                    if (angle != 360) {
                        angle = (360 + angle) % 360;
                    }
                    var inAngleRange = interval.startAngle <= angle && angle <= interval.endAngle;
                    containsPoint = inAngleRange && closeOrLess(distance, pointRadius) || !inAngleRange && (!intersection || intersection.equals(point));
                }
                return containsPoint;
            },
            _isOnPath: function (point, width) {
                var interval = this._arcInterval();
                var center = this.center;
                var angle = calculateAngle(center.x, center.y, this.radiusX, this.radiusY, point.x, point.y);
                if (angle != 360) {
                    angle = (360 + angle) % 360;
                }
                var inAngleRange = interval.startAngle <= angle && angle <= interval.endAngle;
                return inAngleRange && this.pointAt(angle).distanceTo(point) <= width;
            }
        });
        defineAccessors(Arc.fn, [
            'radiusX',
            'radiusY',
            'startAngle',
            'endAngle',
            'anticlockwise'
        ]);
        deepExtend(Arc.fn, ObserversMixin);
        Arc.fromPoints = function (start, end, rx, ry, largeArc, swipe) {
            var arcParameters = normalizeArcParameters(start.x, start.y, end.x, end.y, rx, ry, largeArc, swipe);
            return new Arc(arcParameters.center, {
                startAngle: arcParameters.startAngle,
                endAngle: arcParameters.endAngle,
                radiusX: rx,
                radiusY: ry,
                anticlockwise: swipe === 0
            });
        };
        var Matrix = Class.extend({
            init: function (a, b, c, d, e, f) {
                this.a = a || 0;
                this.b = b || 0;
                this.c = c || 0;
                this.d = d || 0;
                this.e = e || 0;
                this.f = f || 0;
            },
            multiplyCopy: function (m) {
                return new Matrix(this.a * m.a + this.c * m.b, this.b * m.a + this.d * m.b, this.a * m.c + this.c * m.d, this.b * m.c + this.d * m.d, this.a * m.e + this.c * m.f + this.e, this.b * m.e + this.d * m.f + this.f);
            },
            invert: function () {
                var a = this.a, b = this.b;
                var d = this.c, e = this.d;
                var g = this.e, h = this.f;
                var det = a * e - b * d;
                if (det === 0) {
                    return null;
                }
                return new Matrix(e / det, -b / det, -d / det, a / det, (d * h - e * g) / det, (b * g - a * h) / det);
            },
            clone: function () {
                return new Matrix(this.a, this.b, this.c, this.d, this.e, this.f);
            },
            equals: function (other) {
                if (!other) {
                    return false;
                }
                return this.a === other.a && this.b === other.b && this.c === other.c && this.d === other.d && this.e === other.e && this.f === other.f;
            },
            round: function (precision) {
                this.a = round(this.a, precision);
                this.b = round(this.b, precision);
                this.c = round(this.c, precision);
                this.d = round(this.d, precision);
                this.e = round(this.e, precision);
                this.f = round(this.f, precision);
                return this;
            },
            toArray: function (precision) {
                var arr = [
                    this.a,
                    this.b,
                    this.c,
                    this.d,
                    this.e,
                    this.f
                ];
                if (defined(precision)) {
                    for (var i = 0; i < arr.length; i++) {
                        arr[i] = round(arr[i], precision);
                    }
                }
                return arr;
            }
        });
        Matrix.fn.toString = function (precision, separator) {
            return this.toArray(precision).join(separator || ',');
        };
        Matrix.translate = function (x, y) {
            return new Matrix(1, 0, 0, 1, x, y);
        };
        Matrix.unit = function () {
            return new Matrix(1, 0, 0, 1, 0, 0);
        };
        Matrix.rotate = function (angle, x, y) {
            var m = new Matrix();
            m.a = math.cos(rad(angle));
            m.b = math.sin(rad(angle));
            m.c = -m.b;
            m.d = m.a;
            m.e = x - x * m.a + y * m.b || 0;
            m.f = y - y * m.a - x * m.b || 0;
            return m;
        };
        Matrix.scale = function (scaleX, scaleY) {
            return new Matrix(scaleX, 0, 0, scaleY, 0, 0);
        };
        Matrix.IDENTITY = Matrix.unit();
        var Transformation = Class.extend({
            init: function (matrix) {
                this._matrix = matrix || Matrix.unit();
            },
            clone: function () {
                return new Transformation(this._matrix.clone());
            },
            equals: function (other) {
                return other && other._matrix.equals(this._matrix);
            },
            _optionsChange: function () {
                this.optionsChange({
                    field: 'transform',
                    value: this
                });
            },
            translate: function (x, y) {
                this._matrix = this._matrix.multiplyCopy(Matrix.translate(x, y));
                this._optionsChange();
                return this;
            },
            scale: function (scaleX, scaleY, origin) {
                if (!defined(scaleY)) {
                    scaleY = scaleX;
                }
                if (origin) {
                    origin = Point.create(origin);
                    this._matrix = this._matrix.multiplyCopy(Matrix.translate(origin.x, origin.y));
                }
                this._matrix = this._matrix.multiplyCopy(Matrix.scale(scaleX, scaleY));
                if (origin) {
                    this._matrix = this._matrix.multiplyCopy(Matrix.translate(-origin.x, -origin.y));
                }
                this._optionsChange();
                return this;
            },
            rotate: function (angle, origin) {
                origin = Point.create(origin) || Point.ZERO;
                this._matrix = this._matrix.multiplyCopy(Matrix.rotate(angle, origin.x, origin.y));
                this._optionsChange();
                return this;
            },
            multiply: function (transformation) {
                var matrix = toMatrix(transformation);
                this._matrix = this._matrix.multiplyCopy(matrix);
                this._optionsChange();
                return this;
            },
            matrix: function (matrix) {
                if (matrix) {
                    this._matrix = matrix;
                    this._optionsChange();
                    return this;
                } else {
                    return this._matrix;
                }
            }
        });
        deepExtend(Transformation.fn, ObserversMixin);
        function transform(matrix) {
            if (matrix === null) {
                return null;
            }
            if (matrix instanceof Transformation) {
                return matrix;
            }
            return new Transformation(matrix);
        }
        function toMatrix(value) {
            if (value && kendo.isFunction(value.matrix)) {
                return value.matrix();
            }
            return value;
        }
        function ellipseExtremeAngles(center, rx, ry, matrix) {
            var extremeX = 0, extremeY = 0;
            if (matrix) {
                extremeX = math.atan2(matrix.c * ry, matrix.a * rx);
                if (matrix.b !== 0) {
                    extremeY = math.atan2(matrix.d * ry, matrix.b * rx);
                }
            }
            return {
                x: extremeX,
                y: extremeY
            };
        }
        function bboxStartAngle(angle, start) {
            while (angle < start) {
                angle += 90;
            }
            return angle;
        }
        function defineAccessors(fn, fields) {
            for (var i = 0; i < fields.length; i++) {
                var name = fields[i];
                var capitalized = name.charAt(0).toUpperCase() + name.substring(1, name.length);
                fn['set' + capitalized] = setAccessor(name);
                fn['get' + capitalized] = getAccessor(name);
            }
        }
        function setAccessor(field) {
            return function (value) {
                if (this[field] !== value) {
                    this[field] = value;
                    this.geometryChange();
                }
                return this;
            };
        }
        function getAccessor(field) {
            return function () {
                return this[field];
            };
        }
        function elipseAngle(start, end, swipe) {
            if (start > end) {
                end += 360;
            }
            var alpha = math.abs(end - start);
            if (!swipe) {
                alpha = 360 - alpha;
            }
            return alpha;
        }
        function calculateAngle(cx, cy, rx, ry, x, y) {
            var cos = round((x - cx) / rx, 3);
            var sin = round((y - cy) / ry, 3);
            return round(deg(math.atan2(sin, cos)));
        }
        function normalizeArcParameters(x1, y1, x2, y2, rx, ry, largeArc, swipe) {
            var cx, cy;
            var cx1, cy1;
            var a, b, c, sqrt;
            if (y1 !== y2) {
                var x21 = x2 - x1;
                var y21 = y2 - y1;
                var rx2 = pow(rx, 2), ry2 = pow(ry, 2);
                var k = (ry2 * x21 * (x1 + x2) + rx2 * y21 * (y1 + y2)) / (2 * rx2 * y21);
                var yk2 = k - y2;
                var l = -(x21 * ry2) / (rx2 * y21);
                a = 1 / rx2 + pow(l, 2) / ry2;
                b = 2 * (l * yk2 / ry2 - x2 / rx2);
                c = pow(x2, 2) / rx2 + pow(yk2, 2) / ry2 - 1;
                sqrt = math.sqrt(pow(b, 2) - 4 * a * c);
                cx = (-b - sqrt) / (2 * a);
                cy = k + l * cx;
                cx1 = (-b + sqrt) / (2 * a);
                cy1 = k + l * cx1;
            } else if (x1 !== x2) {
                b = -2 * y2;
                c = pow((x2 - x1) * ry / (2 * rx), 2) + pow(y2, 2) - pow(ry, 2);
                sqrt = math.sqrt(pow(b, 2) - 4 * c);
                cx = cx1 = (x1 + x2) / 2;
                cy = (-b - sqrt) / 2;
                cy1 = (-b + sqrt) / 2;
            } else {
                return false;
            }
            var start = calculateAngle(cx, cy, rx, ry, x1, y1);
            var end = calculateAngle(cx, cy, rx, ry, x2, y2);
            var alpha = elipseAngle(start, end, swipe);
            if (largeArc && alpha <= 180 || !largeArc && alpha > 180) {
                cx = cx1;
                cy = cy1;
                start = calculateAngle(cx, cy, rx, ry, x1, y1);
                end = calculateAngle(cx, cy, rx, ry, x2, y2);
            }
            return {
                center: new Point(cx, cy),
                startAngle: start,
                endAngle: end
            };
        }
        var ComplexNumber = function (real, img) {
            this.real = real || 0;
            this.img = img || 0;
        };
        ComplexNumber.fn = ComplexNumber.prototype = {
            add: function (cNumber) {
                return new ComplexNumber(round(this.real + cNumber.real, PRECISION), round(this.img + cNumber.img, PRECISION));
            },
            addConstant: function (value) {
                return new ComplexNumber(this.real + value, this.img);
            },
            negate: function () {
                return new ComplexNumber(-this.real, -this.img);
            },
            multiply: function (cNumber) {
                return new ComplexNumber(this.real * cNumber.real - this.img * cNumber.img, this.real * cNumber.img + this.img * cNumber.real);
            },
            multiplyConstant: function (value) {
                return new ComplexNumber(this.real * value, this.img * value);
            },
            nthRoot: function (n) {
                var rad = math.atan2(this.img, this.real), r = math.sqrt(math.pow(this.img, 2) + math.pow(this.real, 2)), nthR = math.pow(r, 1 / n);
                return new ComplexNumber(nthR * math.cos(rad / n), nthR * math.sin(rad / n));
            },
            equals: function (cNumber) {
                return this.real === cNumber.real && this.img === cNumber.img;
            },
            isReal: function () {
                return this.img === 0;
            }
        };
        function solveCubic(a, b, c, d) {
            if (a === 0) {
                return solveQuadratic(b, c, d);
            }
            var p = (3 * a * c - math.pow(b, 2)) / (3 * math.pow(a, 2)), q = (2 * math.pow(b, 3) - 9 * a * b * c + 27 * math.pow(a, 2) * d) / (27 * math.pow(a, 3)), Q = math.pow(p / 3, 3) + math.pow(q / 2, 2), i = new ComplexNumber(0, 1), b3a = -b / (3 * a), x1, x2, y1, y2, y3, result = [], z1, z2;
            if (Q < 0) {
                x1 = new ComplexNumber(-q / 2, math.sqrt(-Q)).nthRoot(3);
                x2 = new ComplexNumber(-q / 2, -math.sqrt(-Q)).nthRoot(3);
            } else {
                x1 = -q / 2 + math.sqrt(Q);
                x1 = new ComplexNumber(numberSign(x1) * math.pow(math.abs(x1), 1 / 3));
                x2 = -q / 2 - math.sqrt(Q);
                x2 = new ComplexNumber(numberSign(x2) * math.pow(math.abs(x2), 1 / 3));
            }
            y1 = x1.add(x2);
            z1 = x1.add(x2).multiplyConstant(-1 / 2);
            z2 = x1.add(x2.negate()).multiplyConstant(math.sqrt(3) / 2);
            y2 = z1.add(i.multiply(z2));
            y3 = z1.add(i.negate().multiply(z2));
            if (y1.isReal()) {
                result.push(round(y1.real + b3a, PRECISION));
            }
            if (y2.isReal()) {
                result.push(round(y2.real + b3a, PRECISION));
            }
            if (y3.isReal()) {
                result.push(round(y3.real + b3a, PRECISION));
            }
            return result;
        }
        function toCubicPolynomial(points, field) {
            return [
                -points[0][field] + 3 * points[1][field] - 3 * points[2][field] + points[3][field],
                3 * (points[0][field] - 2 * points[1][field] + points[2][field]),
                3 * (-points[0][field] + points[1][field]),
                points[0][field]
            ];
        }
        function calculateCurveAt(t, field, points) {
            var t1 = 1 - t;
            return math.pow(t1, 3) * points[0][field] + 3 * math.pow(t1, 2) * t * points[1][field] + 3 * math.pow(t, 2) * t1 * points[2][field] + math.pow(t, 3) * points[3][field];
        }
        function curveIntersectionsCount(points, point, bbox) {
            var polynomial = toCubicPolynomial(points, 'x');
            var roots = solveCubic(polynomial[0], polynomial[1], polynomial[2], polynomial[3] - point.x);
            var count = 0;
            var rayIntersection;
            var intersectsRay;
            for (var i = 0; i < roots.length; i++) {
                rayIntersection = calculateCurveAt(roots[i], 'y', points);
                intersectsRay = close(rayIntersection, point.y) || rayIntersection > point.y;
                if (intersectsRay && ((roots[i] === 0 || roots[i] === 1) && bbox.bottomRight().x > point.x || 0 < roots[i] && roots[i] < 1)) {
                    count++;
                }
            }
            return count;
        }
        function lineIntersectionsCount(a, b, point) {
            var intersects;
            if (a.x != b.x) {
                var minX = math.min(a.x, b.x), maxX = math.max(a.x, b.x), minY = math.min(a.y, b.y), maxY = math.max(a.y, b.y), inRange = minX <= point.x && point.x < maxX;
                if (minY == maxY) {
                    intersects = point.y <= minY && inRange;
                } else {
                    intersects = inRange && (maxY - minY) * ((a.x - b.x) * (a.y - b.y) > 0 ? point.x - minX : maxX - point.x) / (maxX - minX) + minY - point.y >= 0;
                }
            }
            return intersects ? 1 : 0;
        }
        function lineIntersection(p0, p1, p2, p3) {
            var s1x = p1.x - p0.x;
            var s2x = p3.x - p2.x;
            var s1y = p1.y - p0.y;
            var s2y = p3.y - p2.y;
            var nx = p0.x - p2.x;
            var ny = p0.y - p2.y;
            var d = s1x * s2y - s2x * s1y;
            var s = (s1x * ny - s1y * nx) / d;
            var t = (s2x * ny - s2y * nx) / d;
            if (s >= 0 && s <= 1 && t >= 0 && t <= 1) {
                return new Point(p0.x + t * s1x, p0.y + t * s1y);
            }
        }
        function close(a, b, tolerance) {
            return round(math.abs(a - b), tolerance || PRECISION) === 0;
        }
        function closeOrLess(a, b, tolerance) {
            return a < b || close(a, b, tolerance);
        }
        function numberSign(x) {
            return x < 0 ? -1 : 1;
        }
        function isOutOfEndPoint(endPoint, controlPoint, point) {
            var angle = util.deg(math.atan2(controlPoint.y - endPoint.y, controlPoint.x - endPoint.x));
            var rotatedPoint = point.transformCopy(transform().rotate(-angle, endPoint));
            return rotatedPoint.x < endPoint.x;
        }
        function hasRootsInRange(points, point, field, rootField, range) {
            var polynomial = toCubicPolynomial(points, rootField);
            var roots = solveCubic(polynomial[0], polynomial[1], polynomial[2], polynomial[3] - point[rootField]);
            var intersection;
            for (var idx = 0; idx < roots.length; idx++) {
                if (0 <= roots[idx] && roots[idx] <= 1) {
                    intersection = calculateCurveAt(roots[idx], field, points);
                    if (math.abs(intersection - point[field]) <= range) {
                        return true;
                    }
                }
            }
        }
        function solveQuadratic(a, b, c) {
            var squareRoot = math.sqrt(math.pow(b, 2) - 4 * a * c);
            return [
                (-b + squareRoot) / (2 * a),
                (-b - squareRoot) / (2 * a)
            ];
        }
        deepExtend(kendo, {
            geometry: {
                Arc: Arc,
                Circle: Circle,
                curveIntersectionsCount: curveIntersectionsCount,
                lineIntersectionsCount: lineIntersectionsCount,
                Matrix: Matrix,
                Point: Point,
                Rect: Rect,
                Size: Size,
                Transformation: Transformation,
                transform: transform,
                toMatrix: toMatrix,
                isOutOfEndPoint: isOutOfEndPoint,
                hasRootsInRange: hasRootsInRange
            }
        });
        kendo.dataviz.geometry = kendo.geometry;
    }());
    return window.kendo;
}, typeof define == 'function' && define.amd ? define : function (a1, a2, a3) {
    (a3 || a2)();
}));
(function (f, define) {
    define('drawing/core', [
        'drawing/geometry',
        'kendo.popup'
    ], f);
}(function () {
    (function ($) {
        var noop = $.noop, toString = Object.prototype.toString, kendo = window.kendo, outerWidth = kendo._outerWidth, outerHeight = kendo._outerHeight, Class = kendo.Class, Widget = kendo.ui.Widget, deepExtend = kendo.deepExtend, util = kendo.util, defined = util.defined, limitValue = util.limitValue, g = kendo.geometry, proxy = $.proxy, NS = '.kendo', TOOLTIP_TEMPLATE = '<div class="k-tooltip">' + '<div class="k-tooltip-content"></div>' + '</div>', TOOLTIP_CLOSE_TEMPLATE = '<div class="k-tooltip-button"><a href="\\#" class="k-icon k-i-close">close</a></div>';
        var Surface = Widget.extend({
            init: function (element, options) {
                this.options = deepExtend({}, this.options, options);
                Widget.fn.init.call(this, element, this.options);
                this._click = this._handler('click');
                this._mouseenter = this._handler('mouseenter');
                this._mouseleave = this._handler('mouseleave');
                this._mousemove = this._handler('mousemove');
                this._visual = new kendo.drawing.Group();
                if (this.options.width) {
                    this.element.css('width', this.options.width);
                }
                if (this.options.height) {
                    this.element.css('height', this.options.height);
                }
                this._enableTracking();
            },
            options: {
                name: 'Surface',
                tooltip: {}
            },
            events: [
                'click',
                'mouseenter',
                'mouseleave',
                'mousemove',
                'resize',
                'tooltipOpen',
                'tooltipClose'
            ],
            draw: function (element) {
                this._visual.children.push(element);
            },
            clear: function () {
                this._visual.children = [];
                this.hideTooltip();
            },
            destroy: function () {
                this._visual = null;
                if (this._tooltip) {
                    this._tooltip.destroy();
                    delete this._tooltip;
                }
                Widget.fn.destroy.call(this);
            },
            exportVisual: function () {
                return this._visual;
            },
            getSize: function () {
                return {
                    width: this.element.width(),
                    height: this.element.height()
                };
            },
            setSize: function (size) {
                this.element.css({
                    width: size.width,
                    height: size.height
                });
                this._size = size;
                this._resize();
            },
            eventTarget: function (e) {
                var domNode = $(e.touch ? e.touch.initialTouch : e.target);
                var node;
                while (!node && domNode.length > 0) {
                    node = domNode[0]._kendoNode;
                    if (domNode.is(this.element) || domNode.length === 0) {
                        break;
                    }
                    domNode = domNode.parent();
                }
                if (node) {
                    return node.srcElement;
                }
            },
            showTooltip: function (shape, options) {
                if (this._tooltip) {
                    this._tooltip.show(shape, options);
                }
            },
            hideTooltip: function () {
                if (this._tooltip) {
                    this._tooltip.hide();
                }
            },
            suspendTracking: function () {
                this._suspendedTracking = true;
                this.hideTooltip();
            },
            resumeTracking: function () {
                this._suspendedTracking = false;
            },
            _resize: noop,
            _handler: function (event) {
                var surface = this;
                return function (e) {
                    var node = surface.eventTarget(e);
                    if (node && !surface._suspendedTracking) {
                        surface.trigger(event, {
                            element: node,
                            originalEvent: e,
                            type: event
                        });
                    }
                };
            },
            _enableTracking: function () {
                if (kendo.ui.Popup) {
                    this._tooltip = new SurfaceTooltip(this, this.options.tooltip || {});
                }
            },
            _elementOffset: function () {
                var element = this.element;
                var offset = element.offset();
                var paddingLeft = parseInt(element.css('paddingLeft'), 10);
                var paddingTop = parseInt(element.css('paddingTop'), 10);
                return {
                    left: offset.left + paddingLeft,
                    top: offset.top + paddingTop
                };
            },
            _surfacePoint: function (event) {
                var offset = this._elementOffset();
                var coord = eventCoordinates(event);
                var x = coord.x - offset.left;
                var y = coord.y - offset.top;
                return new g.Point(x, y);
            }
        });
        kendo.ui.plugin(Surface);
        Surface.create = function (element, options) {
            return SurfaceFactory.current.create(element, options);
        };
        var BaseNode = Class.extend({
            init: function (srcElement) {
                this.childNodes = [];
                this.parent = null;
                if (srcElement) {
                    this.srcElement = srcElement;
                    this.observe();
                }
            },
            destroy: function () {
                if (this.srcElement) {
                    this.srcElement.removeObserver(this);
                }
                var children = this.childNodes;
                for (var i = 0; i < children.length; i++) {
                    this.childNodes[i].destroy();
                }
                this.parent = null;
            },
            load: noop,
            observe: function () {
                if (this.srcElement) {
                    this.srcElement.addObserver(this);
                }
            },
            append: function (node) {
                this.childNodes.push(node);
                node.parent = this;
            },
            insertAt: function (node, pos) {
                this.childNodes.splice(pos, 0, node);
                node.parent = this;
            },
            remove: function (index, count) {
                var end = index + count;
                for (var i = index; i < end; i++) {
                    this.childNodes[i].removeSelf();
                }
                this.childNodes.splice(index, count);
            },
            removeSelf: function () {
                this.clear();
                this.destroy();
            },
            clear: function () {
                this.remove(0, this.childNodes.length);
            },
            invalidate: function () {
                if (this.parent) {
                    this.parent.invalidate();
                }
            },
            geometryChange: function () {
                this.invalidate();
            },
            optionsChange: function () {
                this.invalidate();
            },
            childrenChange: function (e) {
                if (e.action === 'add') {
                    this.load(e.items, e.index);
                } else if (e.action === 'remove') {
                    this.remove(e.index, e.items.length);
                }
                this.invalidate();
            }
        });
        var OptionsStore = Class.extend({
            init: function (options, prefix) {
                var field, member;
                this.prefix = prefix || '';
                for (field in options) {
                    member = options[field];
                    member = this._wrap(member, field);
                    this[field] = member;
                }
            },
            get: function (field) {
                return kendo.getter(field, true)(this);
            },
            set: function (field, value) {
                var current = kendo.getter(field, true)(this);
                if (current !== value) {
                    var composite = this._set(field, this._wrap(value, field));
                    if (!composite) {
                        this.optionsChange({
                            field: this.prefix + field,
                            value: value
                        });
                    }
                }
            },
            _set: function (field, value) {
                var composite = field.indexOf('.') >= 0;
                if (composite) {
                    var parts = field.split('.'), path = '', obj;
                    while (parts.length > 1) {
                        path += parts.shift();
                        obj = kendo.getter(path, true)(this);
                        if (!obj) {
                            obj = new OptionsStore({}, path + '.');
                            obj.addObserver(this);
                            this[path] = obj;
                        }
                        if (obj instanceof OptionsStore) {
                            obj.set(parts.join('.'), value);
                            return composite;
                        }
                        path += '.';
                    }
                }
                this._clear(field);
                kendo.setter(field)(this, value);
                return composite;
            },
            _clear: function (field) {
                var current = kendo.getter(field, true)(this);
                if (current && current.removeObserver) {
                    current.removeObserver(this);
                }
            },
            _wrap: function (object, field) {
                var type = toString.call(object);
                if (object !== null && defined(object) && type === '[object Object]') {
                    if (!(object instanceof OptionsStore) && !(object instanceof Class)) {
                        object = new OptionsStore(object, this.prefix + field + '.');
                    }
                    object.addObserver(this);
                }
                return object;
            }
        });
        deepExtend(OptionsStore.fn, kendo.mixins.ObserversMixin);
        var SurfaceFactory = function () {
            this._items = [];
        };
        SurfaceFactory.prototype = {
            register: function (name, type, order) {
                var items = this._items, first = items[0], entry = {
                        name: name,
                        type: type,
                        order: order
                    };
                if (!first || order < first.order) {
                    items.unshift(entry);
                } else {
                    items.push(entry);
                }
            },
            create: function (element, options) {
                var items = this._items, match = items[0];
                if (options && options.type) {
                    var preferred = options.type.toLowerCase();
                    for (var i = 0; i < items.length; i++) {
                        if (items[i].name === preferred) {
                            match = items[i];
                            break;
                        }
                    }
                }
                if (match) {
                    return new match.type(element, options);
                }
                kendo.logToConsole('Warning: Unable to create Kendo UI Drawing Surface. Possible causes:\n' + '- The browser does not support SVG, VML and Canvas. User agent: ' + navigator.userAgent + '\n' + '- The Kendo UI scripts are not fully loaded');
            }
        };
        SurfaceFactory.current = new SurfaceFactory();
        var SurfaceTooltip = Class.extend({
            init: function (surface, options) {
                this.element = $(TOOLTIP_TEMPLATE);
                this.content = this.element.children('.k-tooltip-content');
                options = options || {};
                this.options = deepExtend({}, this.options, this._tooltipOptions(options));
                this.popup = new kendo.ui.Popup(this.element, {
                    appendTo: options.appendTo,
                    animation: options.animation,
                    copyAnchorStyles: false,
                    collision: 'fit fit'
                });
                this._openPopupHandler = $.proxy(this._openPopup, this);
                this.surface = surface;
                this._bindEvents();
            },
            options: {
                position: 'top',
                showOn: 'mouseenter',
                offset: 7,
                autoHide: true,
                hideDelay: 0,
                showAfter: 100
            },
            _bindEvents: function () {
                this._showHandler = proxy(this._showEvent, this);
                this._surfaceLeaveHandler = proxy(this._surfaceLeave, this);
                this._mouseleaveHandler = proxy(this._mouseleave, this);
                this._mousemoveHandler = proxy(this._mousemove, this);
                this.surface.bind('click', this._showHandler);
                this.surface.bind('mouseenter', this._showHandler);
                this.surface.bind('mouseleave', this._mouseleaveHandler);
                this.surface.bind('mousemove', this._mousemoveHandler);
                this.surface.element.on('mouseleave' + NS, this._surfaceLeaveHandler);
                this.element.on('click' + NS, '.k-tooltip-button', proxy(this._hideClick, this));
            },
            destroy: function () {
                var popup = this.popup;
                this.surface.unbind('click', this._showHandler);
                this.surface.unbind('mouseenter', this._showHandler);
                this.surface.unbind('mouseleave', this._mouseleaveHandler);
                this.surface.unbind('mousemove', this._mousemoveHandler);
                this.surface.element.off('mouseleave' + NS, this._surfaceLeaveHandler);
                this.element.off('click' + NS);
                if (popup) {
                    popup.destroy();
                    delete this.popup;
                }
                clearTimeout(this._timeout);
                delete this.popup;
                delete this.element;
                delete this.content;
                delete this.surface;
            },
            _tooltipOptions: function (options) {
                options = options || {};
                return {
                    position: options.position,
                    showOn: options.showOn,
                    offset: options.offset,
                    autoHide: options.autoHide,
                    width: options.width,
                    height: options.height,
                    content: options.content,
                    shared: options.shared,
                    hideDelay: options.hideDelay,
                    showAfter: options.showAfter
                };
            },
            _tooltipShape: function (shape) {
                while (shape && !shape.options.tooltip) {
                    shape = shape.parent;
                }
                return shape;
            },
            _updateContent: function (target, shape, options) {
                var content = options.content;
                if (kendo.isFunction(content)) {
                    content = content({
                        element: shape,
                        target: target
                    });
                }
                if (content) {
                    this.content.html(content);
                    return true;
                }
            },
            _position: function (shape, options, elementSize, event) {
                var position = options.position;
                var tooltipOffset = options.offset || 0;
                var surface = this.surface;
                var offset = surface._elementOffset();
                var size = surface.getSize();
                var surfaceOffset = surface._offset;
                var bbox = shape.bbox();
                var width = elementSize.width;
                var height = elementSize.height;
                var left = 0, top = 0;
                bbox.origin.translate(offset.left, offset.top);
                if (surfaceOffset) {
                    bbox.origin.translate(-surfaceOffset.x, -surfaceOffset.y);
                }
                if (position == 'cursor' && event) {
                    var coord = eventCoordinates(event);
                    left = coord.x - width / 2;
                    top = coord.y - height - tooltipOffset;
                } else if (position == 'left') {
                    left = bbox.origin.x - width - tooltipOffset;
                    top = bbox.center().y - height / 2;
                } else if (position == 'right') {
                    left = bbox.bottomRight().x + tooltipOffset;
                    top = bbox.center().y - height / 2;
                } else if (position == 'bottom') {
                    left = bbox.center().x - width / 2;
                    top = bbox.bottomRight().y + tooltipOffset;
                } else {
                    left = bbox.center().x - width / 2;
                    top = bbox.origin.y - height - tooltipOffset;
                }
                return {
                    left: limitValue(left, offset.left, offset.left + size.width),
                    top: limitValue(top, offset.top, offset.top + size.height)
                };
            },
            show: function (shape, options) {
                this._show(shape, shape, deepExtend({}, this.options, this._tooltipOptions(shape.options.tooltip), options));
            },
            hide: function () {
                var current = this._current;
                delete this._current;
                clearTimeout(this._showTimeout);
                if (this.popup.visible() && current && !this.surface.trigger('tooltipClose', {
                        element: current.shape,
                        target: current.target,
                        popup: this.popup
                    })) {
                    this.popup.close();
                }
            },
            _hideClick: function (e) {
                e.preventDefault();
                this.hide();
            },
            _show: function (target, shape, options, event, delay) {
                var current = this._current;
                clearTimeout(this._timeout);
                if (current && (current.shape === shape && options.shared || current.target === target)) {
                    return;
                }
                clearTimeout(this._showTimeout);
                if (!this.surface.trigger('tooltipOpen', {
                        element: shape,
                        target: target,
                        popup: this.popup
                    }) && this._updateContent(target, shape, options)) {
                    this._autoHide(options);
                    var elementSize = this._measure(options);
                    var popup = this.popup;
                    if (popup.visible()) {
                        popup.close(true);
                    }
                    this._current = {
                        options: options,
                        elementSize: elementSize,
                        shape: shape,
                        target: target,
                        position: this._position(options.shared ? shape : target, options, elementSize, event)
                    };
                    if (delay) {
                        this._showTimeout = setTimeout(this._openPopupHandler, options.showAfter || 0);
                    } else {
                        this._openPopup();
                    }
                }
            },
            _openPopup: function () {
                var current = this._current;
                var position = current.position;
                this.popup.open(position.left, position.top);
            },
            _autoHide: function (options) {
                if (options.autoHide && this._closeButton) {
                    this.element.removeClass('k-tooltip-closable');
                    this._closeButton.remove();
                    delete this._closeButton;
                }
                if (!options.autoHide && !this._closeButton) {
                    this.element.addClass('k-tooltip-closable');
                    this._closeButton = $(TOOLTIP_CLOSE_TEMPLATE).prependTo(this.element);
                }
            },
            _showEvent: function (e) {
                var shape = this._tooltipShape(e.element);
                if (shape) {
                    var options = deepExtend({}, this.options, this._tooltipOptions(shape.options.tooltip));
                    if (options && options.showOn == e.type) {
                        this._show(e.element, shape, options, e.originalEvent, true);
                    }
                }
            },
            _measure: function (options) {
                var width, height;
                this.element.css({
                    width: 'auto',
                    height: 'auto'
                });
                var visible = this.popup.visible();
                if (!visible) {
                    this.popup.wrapper.show();
                }
                this.element.css({
                    width: defined(options.width) ? options.width : 'auto',
                    height: defined(options.height) ? options.height : 'auto'
                });
                width = outerWidth(this.element);
                height = outerHeight(this.element);
                if (!visible) {
                    this.popup.wrapper.hide();
                }
                return {
                    width: width,
                    height: height
                };
            },
            _mouseleave: function (e) {
                if (!this._popupRelatedTarget(e.originalEvent)) {
                    var tooltip = this;
                    var current = tooltip._current;
                    if (current && current.options.autoHide) {
                        tooltip._timeout = setTimeout(function () {
                            clearTimeout(tooltip._showTimeout);
                            tooltip.hide();
                        }, current.options.hideDelay || 0);
                    }
                }
            },
            _mousemove: function (e) {
                var current = this._current;
                if (current && e.element) {
                    var options = current.options;
                    if (options.position == 'cursor') {
                        var position = this._position(e.element, options, current.elementSize, e.originalEvent);
                        current.position = position;
                        this.popup.wrapper.css({
                            left: position.left,
                            top: position.top
                        });
                    }
                }
            },
            _surfaceLeave: function (e) {
                if (!this._popupRelatedTarget(e)) {
                    clearTimeout(this._showTimeout);
                    this.hide();
                }
            },
            _popupRelatedTarget: function (e) {
                return e.relatedTarget && $(e.relatedTarget).closest(this.popup.wrapper).length;
            }
        });
        function eventCoordinates(event) {
            var x, y;
            if (event.touch) {
                x = event.x.location;
                y = event.y.location;
            } else {
                x = event.pageX || event.clientX || 0;
                y = event.pageY || event.clientY || 0;
            }
            return {
                x: x,
                y: y
            };
        }
        deepExtend(kendo, {
            drawing: {
                DASH_ARRAYS: {
                    dot: [
                        1.5,
                        3.5
                    ],
                    dash: [
                        4,
                        3.5
                    ],
                    longdash: [
                        8,
                        3.5
                    ],
                    dashdot: [
                        3.5,
                        3.5,
                        1.5,
                        3.5
                    ],
                    longdashdot: [
                        8,
                        3.5,
                        1.5,
                        3.5
                    ],
                    longdashdotdot: [
                        8,
                        3.5,
                        1.5,
                        3.5,
                        1.5,
                        3.5
                    ]
                },
                Color: kendo.Color,
                BaseNode: BaseNode,
                OptionsStore: OptionsStore,
                Surface: Surface,
                SurfaceFactory: SurfaceFactory,
                SurfaceTooltip: SurfaceTooltip
            }
        });
        kendo.dataviz.drawing = kendo.drawing;
    }(window.kendo.jQuery));
}, typeof define == 'function' && define.amd ? define : function (a1, a2, a3) {
    (a3 || a2)();
}));
(function (f, define) {
    define('drawing/mixins', ['drawing/core'], f);
}(function () {
    (function () {
        var kendo = window.kendo, deepExtend = kendo.deepExtend, defined = kendo.util.defined, g = kendo.geometry;
        var GRADIENT = 'gradient';
        var IDENTITY_MATRIX_HASH = g.Matrix.IDENTITY.toString();
        var Paintable = {
            extend: function (proto) {
                proto.fill = this.fill;
                proto.stroke = this.stroke;
            },
            fill: function (color, opacity) {
                var options = this.options;
                if (defined(color)) {
                    if (color && color.nodeType != GRADIENT) {
                        var newFill = { color: color };
                        if (defined(opacity)) {
                            newFill.opacity = opacity;
                        }
                        options.set('fill', newFill);
                    } else {
                        options.set('fill', color);
                    }
                    return this;
                } else {
                    return options.get('fill');
                }
            },
            stroke: function (color, width, opacity) {
                if (defined(color)) {
                    this.options.set('stroke.color', color);
                    if (defined(width)) {
                        this.options.set('stroke.width', width);
                    }
                    if (defined(opacity)) {
                        this.options.set('stroke.opacity', opacity);
                    }
                    return this;
                } else {
                    return this.options.get('stroke');
                }
            }
        };
        var Traversable = {
            extend: function (proto, childrenField) {
                proto.traverse = function (callback) {
                    var children = this[childrenField];
                    for (var i = 0; i < children.length; i++) {
                        var child = children[i];
                        if (child.traverse) {
                            child.traverse(callback);
                        } else {
                            callback(child);
                        }
                    }
                    return this;
                };
            }
        };
        var Measurable = {
            extend: function (proto) {
                proto.bbox = this.bbox;
                proto.geometryChange = this.geometryChange;
            },
            bbox: function (transformation) {
                var combinedMatrix = g.toMatrix(this.currentTransform(transformation));
                var matrixHash = combinedMatrix ? combinedMatrix.toString() : IDENTITY_MATRIX_HASH;
                var bbox;
                if (this._bboxCache && this._matrixHash == matrixHash) {
                    bbox = this._bboxCache.clone();
                } else {
                    bbox = this._bbox(combinedMatrix);
                    this._bboxCache = bbox ? bbox.clone() : null;
                    this._matrixHash = matrixHash;
                }
                var strokeWidth = this.options.get('stroke.width');
                if (strokeWidth && bbox) {
                    bbox.expand(strokeWidth / 2);
                }
                return bbox;
            },
            geometryChange: function () {
                delete this._bboxCache;
                this.trigger('geometryChange', { element: this });
            }
        };
        deepExtend(kendo.drawing, {
            mixins: {
                Paintable: Paintable,
                Traversable: Traversable,
                Measurable: Measurable
            }
        });
    }());
}, typeof define == 'function' && define.amd ? define : function (a1, a2, a3) {
    (a3 || a2)();
}));
(function (f, define) {
    define('drawing/shapes', [
        'drawing/core',
        'drawing/mixins',
        'util/text-metrics',
        'mixins/observers'
    ], f);
}(function () {
    (function ($) {
        var kendo = window.kendo, Class = kendo.Class, deepExtend = kendo.deepExtend, g = kendo.geometry, Point = g.Point, Size = g.Size, Matrix = g.Matrix, toMatrix = g.toMatrix, drawing = kendo.drawing, OptionsStore = drawing.OptionsStore, math = Math, pow = math.pow, util = kendo.util, append = util.append, arrayLimits = util.arrayLimits, defined = util.defined, last = util.last, valueOrDefault = util.valueOrDefault, ObserversMixin = kendo.mixins.ObserversMixin, inArray = $.inArray, push = [].push, pop = [].pop, splice = [].splice, shift = [].shift, slice = [].slice, unshift = [].unshift, defId = 1, START = 'start', END = 'end', HORIZONTAL = 'horizontal';
        var Element = Class.extend({
            nodeType: 'Element',
            init: function (options) {
                this._initOptions(options);
            },
            _initOptions: function (options) {
                options = options || {};
                var transform = options.transform;
                var clip = options.clip;
                if (transform) {
                    options.transform = g.transform(transform);
                }
                if (clip && !clip.id) {
                    clip.id = generateDefinitionId();
                }
                this.options = new OptionsStore(options);
                this.options.addObserver(this);
            },
            transform: function (transform) {
                if (defined(transform)) {
                    this.options.set('transform', g.transform(transform));
                } else {
                    return this.options.get('transform');
                }
            },
            parentTransform: function () {
                var element = this, transformation, parentMatrix;
                while (element.parent) {
                    element = element.parent;
                    transformation = element.transform();
                    if (transformation) {
                        parentMatrix = transformation.matrix().multiplyCopy(parentMatrix || Matrix.unit());
                    }
                }
                if (parentMatrix) {
                    return g.transform(parentMatrix);
                }
            },
            currentTransform: function (parentTransform) {
                var elementTransform = this.transform(), elementMatrix = toMatrix(elementTransform), parentMatrix, combinedMatrix;
                if (!defined(parentTransform)) {
                    parentTransform = this.parentTransform();
                }
                parentMatrix = toMatrix(parentTransform);
                if (elementMatrix && parentMatrix) {
                    combinedMatrix = parentMatrix.multiplyCopy(elementMatrix);
                } else {
                    combinedMatrix = elementMatrix || parentMatrix;
                }
                if (combinedMatrix) {
                    return g.transform(combinedMatrix);
                }
            },
            visible: function (visible) {
                if (defined(visible)) {
                    this.options.set('visible', visible);
                    return this;
                } else {
                    return this.options.get('visible') !== false;
                }
            },
            clip: function (clip) {
                var options = this.options;
                if (defined(clip)) {
                    if (clip && !clip.id) {
                        clip.id = generateDefinitionId();
                    }
                    options.set('clip', clip);
                    return this;
                } else {
                    return options.get('clip');
                }
            },
            opacity: function (value) {
                if (defined(value)) {
                    this.options.set('opacity', value);
                    return this;
                } else {
                    return valueOrDefault(this.options.get('opacity'), 1);
                }
            },
            clippedBBox: function (transformation) {
                var box = this._clippedBBox(transformation);
                if (box) {
                    var clip = this.clip();
                    return clip ? g.Rect.intersect(box, clip.bbox(transformation)) : box;
                }
            },
            containsPoint: function (point, parentTransform) {
                if (this.visible()) {
                    var transform = this.currentTransform(parentTransform);
                    if (transform) {
                        point = point.transformCopy(transform.matrix().invert());
                    }
                    return this._hasFill() && this._containsPoint(point) || this._isOnPath && this._hasStroke() && this._isOnPath(point);
                }
                return false;
            },
            _hasFill: function () {
                var fill = this.options.fill;
                return fill && !util.isTransparent(fill.color);
            },
            _hasStroke: function () {
                var stroke = this.options.stroke;
                return stroke && stroke.width > 0 && !util.isTransparent(stroke.color);
            },
            _clippedBBox: function (transformation) {
                return this.bbox(transformation);
            }
        });
        deepExtend(Element.fn, ObserversMixin);
        var ElementsArray = Class.extend({
            init: function (array) {
                array = array || [];
                this.length = 0;
                this._splice(0, array.length, array);
            },
            elements: function (elements) {
                if (elements) {
                    this._splice(0, this.length, elements);
                    this._change();
                    return this;
                } else {
                    return this.slice(0);
                }
            },
            push: function () {
                var elements = arguments;
                var result = push.apply(this, elements);
                this._add(elements);
                return result;
            },
            slice: slice,
            pop: function () {
                var length = this.length;
                var result = pop.apply(this);
                if (length) {
                    this._remove([result]);
                }
                return result;
            },
            splice: function (index, howMany) {
                var elements = slice.call(arguments, 2);
                var result = this._splice(index, howMany, elements);
                this._change();
                return result;
            },
            shift: function () {
                var length = this.length;
                var result = shift.apply(this);
                if (length) {
                    this._remove([result]);
                }
                return result;
            },
            unshift: function () {
                var elements = arguments;
                var result = unshift.apply(this, elements);
                this._add(elements);
                return result;
            },
            indexOf: function (element) {
                var that = this;
                var idx;
                var length;
                for (idx = 0, length = that.length; idx < length; idx++) {
                    if (that[idx] === element) {
                        return idx;
                    }
                }
                return -1;
            },
            _splice: function (index, howMany, elements) {
                var result = splice.apply(this, [
                    index,
                    howMany
                ].concat(elements));
                this._clearObserver(result);
                this._setObserver(elements);
                return result;
            },
            _add: function (elements) {
                this._setObserver(elements);
                this._change();
            },
            _remove: function (elements) {
                this._clearObserver(elements);
                this._change();
            },
            _setObserver: function (elements) {
                for (var idx = 0; idx < elements.length; idx++) {
                    elements[idx].addObserver(this);
                }
            },
            _clearObserver: function (elements) {
                for (var idx = 0; idx < elements.length; idx++) {
                    elements[idx].removeObserver(this);
                }
            },
            _change: function () {
            }
        });
        deepExtend(ElementsArray.fn, ObserversMixin);
        var Group = Element.extend({
            nodeType: 'Group',
            init: function (options) {
                Element.fn.init.call(this, options);
                this.children = [];
            },
            childrenChange: function (action, items, index) {
                this.trigger('childrenChange', {
                    action: action,
                    items: items,
                    index: index
                });
            },
            append: function () {
                append(this.children, arguments);
                this._reparent(arguments, this);
                this.childrenChange('add', arguments);
                return this;
            },
            insert: function (index, element) {
                this.children.splice(index, 0, element);
                element.parent = this;
                this.childrenChange('add', [element], index);
                return this;
            },
            insertAt: function (element, index) {
                return this.insert(index, element);
            },
            remove: function (element) {
                var index = inArray(element, this.children);
                if (index >= 0) {
                    this.children.splice(index, 1);
                    element.parent = null;
                    this.childrenChange('remove', [element], index);
                }
                return this;
            },
            removeAt: function (index) {
                if (0 <= index && index < this.children.length) {
                    var element = this.children[index];
                    this.children.splice(index, 1);
                    element.parent = null;
                    this.childrenChange('remove', [element], index);
                }
                return this;
            },
            clear: function () {
                var items = this.children;
                this.children = [];
                this._reparent(items, null);
                this.childrenChange('remove', items, 0);
                return this;
            },
            bbox: function (transformation) {
                return elementsBoundingBox(this.children, true, this.currentTransform(transformation));
            },
            rawBBox: function () {
                return elementsBoundingBox(this.children, false);
            },
            _clippedBBox: function (transformation) {
                return elementsClippedBoundingBox(this.children, this.currentTransform(transformation));
            },
            currentTransform: function (transformation) {
                return Element.fn.currentTransform.call(this, transformation) || null;
            },
            containsPoint: function (point, parentTransform) {
                if (this.visible()) {
                    var children = this.children;
                    var transform = this.currentTransform(parentTransform);
                    for (var idx = 0; idx < children.length; idx++) {
                        if (children[idx].containsPoint(point, transform)) {
                            return true;
                        }
                    }
                }
                return false;
            },
            _reparent: function (elements, newParent) {
                for (var i = 0; i < elements.length; i++) {
                    var child = elements[i];
                    var parent = child.parent;
                    if (parent && parent != this && parent.remove) {
                        parent.remove(child);
                    }
                    child.parent = newParent;
                }
            }
        });
        drawing.mixins.Traversable.extend(Group.fn, 'children');
        var Text = Element.extend({
            nodeType: 'Text',
            init: function (content, position, options) {
                Element.fn.init.call(this, options);
                this.content(content);
                this.position(position || new g.Point());
                if (!this.options.font) {
                    this.options.font = '12px sans-serif';
                }
                if (!defined(this.options.fill)) {
                    this.fill('#000');
                }
            },
            content: function (value) {
                if (defined(value)) {
                    this.options.set('content', value);
                    return this;
                } else {
                    return this.options.get('content');
                }
            },
            measure: function () {
                var metrics = util.measureText(this.content(), { font: this.options.get('font') });
                return metrics;
            },
            rect: function () {
                var size = this.measure();
                var pos = this.position().clone();
                return new g.Rect(pos, [
                    size.width,
                    size.height
                ]);
            },
            bbox: function (transformation) {
                var combinedMatrix = toMatrix(this.currentTransform(transformation));
                return this.rect().bbox(combinedMatrix);
            },
            rawBBox: function () {
                return this.rect().bbox();
            },
            _containsPoint: function (point) {
                return this.rect().containsPoint(point);
            }
        });
        drawing.mixins.Paintable.extend(Text.fn);
        definePointAccessors(Text.fn, ['position']);
        var Circle = Element.extend({
            nodeType: 'Circle',
            init: function (geometry, options) {
                Element.fn.init.call(this, options);
                this.geometry(geometry || new g.Circle());
                if (!defined(this.options.stroke)) {
                    this.stroke('#000');
                }
            },
            _bbox: function (matrix) {
                return this._geometry.bbox(matrix);
            },
            rawBBox: function () {
                return this._geometry.bbox();
            },
            _containsPoint: function (point) {
                return this.geometry().containsPoint(point);
            },
            _isOnPath: function (point) {
                return this.geometry()._isOnPath(point, this.options.stroke.width / 2);
            }
        });
        drawing.mixins.Paintable.extend(Circle.fn);
        drawing.mixins.Measurable.extend(Circle.fn);
        defineGeometryAccessors(Circle.fn, ['geometry']);
        var Arc = Element.extend({
            nodeType: 'Arc',
            init: function (geometry, options) {
                Element.fn.init.call(this, options);
                this.geometry(geometry || new g.Arc());
                if (!defined(this.options.stroke)) {
                    this.stroke('#000');
                }
            },
            _bbox: function (matrix) {
                return this._geometry.bbox(matrix);
            },
            rawBBox: function () {
                return this.geometry().bbox();
            },
            toPath: function () {
                var path = new Path();
                var curvePoints = this.geometry().curvePoints();
                if (curvePoints.length > 0) {
                    path.moveTo(curvePoints[0].x, curvePoints[0].y);
                    for (var i = 1; i < curvePoints.length; i += 3) {
                        path.curveTo(curvePoints[i], curvePoints[i + 1], curvePoints[i + 2]);
                    }
                }
                return path;
            },
            _containsPoint: function (point) {
                return this.geometry().containsPoint(point);
            },
            _isOnPath: function (point) {
                return this.geometry()._isOnPath(point, this.options.stroke.width / 2);
            }
        });
        drawing.mixins.Paintable.extend(Arc.fn);
        drawing.mixins.Measurable.extend(Arc.fn);
        defineGeometryAccessors(Arc.fn, ['geometry']);
        var GeometryElementsArray = ElementsArray.extend({
            _change: function () {
                this.geometryChange();
            }
        });
        var Segment = Class.extend({
            init: function (anchor, controlIn, controlOut) {
                this.anchor(anchor || new Point());
                this.controlIn(controlIn);
                this.controlOut(controlOut);
            },
            bboxTo: function (toSegment, matrix) {
                var rect;
                var segmentAnchor = this.anchor().transformCopy(matrix);
                var toSegmentAnchor = toSegment.anchor().transformCopy(matrix);
                if (this.controlOut() && toSegment.controlIn()) {
                    rect = this._curveBoundingBox(segmentAnchor, this.controlOut().transformCopy(matrix), toSegment.controlIn().transformCopy(matrix), toSegmentAnchor);
                } else {
                    rect = this._lineBoundingBox(segmentAnchor, toSegmentAnchor);
                }
                return rect;
            },
            _lineBoundingBox: function (p1, p2) {
                return g.Rect.fromPoints(p1, p2);
            },
            _curveBoundingBox: function (p1, cp1, cp2, p2) {
                var points = [
                        p1,
                        cp1,
                        cp2,
                        p2
                    ], extremesX = this._curveExtremesFor(points, 'x'), extremesY = this._curveExtremesFor(points, 'y'), xLimits = arrayLimits([
                        extremesX.min,
                        extremesX.max,
                        p1.x,
                        p2.x
                    ]), yLimits = arrayLimits([
                        extremesY.min,
                        extremesY.max,
                        p1.y,
                        p2.y
                    ]);
                return g.Rect.fromPoints(new Point(xLimits.min, yLimits.min), new Point(xLimits.max, yLimits.max));
            },
            _curveExtremesFor: function (points, field) {
                var extremes = this._curveExtremes(points[0][field], points[1][field], points[2][field], points[3][field]);
                return {
                    min: this._calculateCurveAt(extremes.min, field, points),
                    max: this._calculateCurveAt(extremes.max, field, points)
                };
            },
            _calculateCurveAt: function (t, field, points) {
                var t1 = 1 - t;
                return pow(t1, 3) * points[0][field] + 3 * pow(t1, 2) * t * points[1][field] + 3 * pow(t, 2) * t1 * points[2][field] + pow(t, 3) * points[3][field];
            },
            _curveExtremes: function (x1, x2, x3, x4) {
                var a = x1 - 3 * x2 + 3 * x3 - x4;
                var b = -2 * (x1 - 2 * x2 + x3);
                var c = x1 - x2;
                var sqrt = math.sqrt(b * b - 4 * a * c);
                var t1 = 0;
                var t2 = 1;
                if (a === 0) {
                    if (b !== 0) {
                        t1 = t2 = -c / b;
                    }
                } else if (!isNaN(sqrt)) {
                    t1 = (-b + sqrt) / (2 * a);
                    t2 = (-b - sqrt) / (2 * a);
                }
                var min = math.max(math.min(t1, t2), 0);
                if (min < 0 || min > 1) {
                    min = 0;
                }
                var max = math.min(math.max(t1, t2), 1);
                if (max > 1 || max < 0) {
                    max = 1;
                }
                return {
                    min: min,
                    max: max
                };
            },
            _intersectionsTo: function (segment, point) {
                var intersectionsCount;
                if (this.controlOut() && segment.controlIn()) {
                    intersectionsCount = g.curveIntersectionsCount([
                        this.anchor(),
                        this.controlOut(),
                        segment.controlIn(),
                        segment.anchor()
                    ], point, this.bboxTo(segment));
                } else {
                    intersectionsCount = g.lineIntersectionsCount(this.anchor(), segment.anchor(), point);
                }
                return intersectionsCount;
            },
            _isOnCurveTo: function (segment, point, width, endSegment) {
                var bbox = this.bboxTo(segment).expand(width, width);
                if (bbox.containsPoint(point)) {
                    var p1 = this.anchor();
                    var p2 = this.controlOut();
                    var p3 = segment.controlIn();
                    var p4 = segment.anchor();
                    if (endSegment == 'start' && p1.distanceTo(point) <= width) {
                        return !g.isOutOfEndPoint(p1, p2, point);
                    } else if (endSegment == 'end' && p4.distanceTo(point) <= width) {
                        return !g.isOutOfEndPoint(p4, p3, point);
                    }
                    var hasRootsInRange = g.hasRootsInRange;
                    var points = [
                        p1,
                        p2,
                        p3,
                        p4
                    ];
                    if (hasRootsInRange(points, point, 'x', 'y', width) || hasRootsInRange(points, point, 'y', 'x', width)) {
                        return true;
                    }
                    var rotation = g.transform().rotate(45, point);
                    var rotatedPoints = [
                        p1.transformCopy(rotation),
                        p2.transformCopy(rotation),
                        p3.transformCopy(rotation),
                        p4.transformCopy(rotation)
                    ];
                    return hasRootsInRange(rotatedPoints, point, 'x', 'y', width) || hasRootsInRange(rotatedPoints, point, 'y', 'x', width);
                }
            },
            _isOnLineTo: function (segment, point, width) {
                var p1 = this.anchor();
                var p2 = segment.anchor();
                var angle = util.deg(math.atan2(p2.y - p1.y, p2.x - p1.x));
                var rect = new g.Rect([
                    p1.x,
                    p1.y - width / 2
                ], [
                    p1.distanceTo(p2),
                    width
                ]);
                return rect.containsPoint(point.transformCopy(g.transform().rotate(-angle, p1)));
            },
            _isOnPathTo: function (segment, point, width, endSegment) {
                var isOnPath;
                if (this.controlOut() && segment.controlIn()) {
                    isOnPath = this._isOnCurveTo(segment, point, width / 2, endSegment);
                } else {
                    isOnPath = this._isOnLineTo(segment, point, width);
                }
                return isOnPath;
            }
        });
        definePointAccessors(Segment.fn, [
            'anchor',
            'controlIn',
            'controlOut'
        ]);
        deepExtend(Segment.fn, ObserversMixin);
        var Path = Element.extend({
            nodeType: 'Path',
            init: function (options) {
                Element.fn.init.call(this, options);
                this.segments = new GeometryElementsArray();
                this.segments.addObserver(this);
                if (!defined(this.options.stroke)) {
                    this.stroke('#000');
                    if (!defined(this.options.stroke.lineJoin)) {
                        this.options.set('stroke.lineJoin', 'miter');
                    }
                }
            },
            moveTo: function (x, y) {
                this.suspend();
                this.segments.elements([]);
                this.resume();
                this.lineTo(x, y);
                return this;
            },
            lineTo: function (x, y) {
                var point = defined(y) ? new Point(x, y) : x, segment = new Segment(point);
                this.segments.push(segment);
                return this;
            },
            curveTo: function (controlOut, controlIn, point) {
                if (this.segments.length > 0) {
                    var lastSegment = last(this.segments);
                    var segment = new Segment(point, controlIn);
                    this.suspend();
                    lastSegment.controlOut(controlOut);
                    this.resume();
                    this.segments.push(segment);
                }
                return this;
            },
            arc: function (startAngle, endAngle, radiusX, radiusY, anticlockwise) {
                if (this.segments.length > 0) {
                    var lastSegment = last(this.segments);
                    var anchor = lastSegment.anchor();
                    var start = util.rad(startAngle);
                    var center = new Point(anchor.x - radiusX * math.cos(start), anchor.y - radiusY * math.sin(start));
                    var arc = new g.Arc(center, {
                        startAngle: startAngle,
                        endAngle: endAngle,
                        radiusX: radiusX,
                        radiusY: radiusY,
                        anticlockwise: anticlockwise
                    });
                    this._addArcSegments(arc);
                }
                return this;
            },
            arcTo: function (end, rx, ry, largeArc, swipe) {
                if (this.segments.length > 0) {
                    var lastSegment = last(this.segments);
                    var anchor = lastSegment.anchor();
                    var arc = g.Arc.fromPoints(anchor, end, rx, ry, largeArc, swipe);
                    this._addArcSegments(arc);
                }
                return this;
            },
            _addArcSegments: function (arc) {
                this.suspend();
                var curvePoints = arc.curvePoints();
                for (var i = 1; i < curvePoints.length; i += 3) {
                    this.curveTo(curvePoints[i], curvePoints[i + 1], curvePoints[i + 2]);
                }
                this.resume();
                this.geometryChange();
            },
            close: function () {
                this.options.closed = true;
                this.geometryChange();
                return this;
            },
            rawBBox: function () {
                return this._bbox();
            },
            _containsPoint: function (point) {
                var segments = this.segments;
                var length = segments.length;
                var intersectionsCount = 0;
                var previous, current;
                for (var idx = 1; idx < length; idx++) {
                    previous = segments[idx - 1];
                    current = segments[idx];
                    intersectionsCount += previous._intersectionsTo(current, point);
                }
                if (this.options.closed || !segments[0].anchor().equals(segments[length - 1].anchor())) {
                    intersectionsCount += g.lineIntersectionsCount(segments[0].anchor(), segments[length - 1].anchor(), point);
                }
                return intersectionsCount % 2 !== 0;
            },
            _isOnPath: function (point, width) {
                var segments = this.segments;
                var length = segments.length;
                width = width || this.options.stroke.width;
                if (length > 1) {
                    if (segments[0]._isOnPathTo(segments[1], point, width, 'start')) {
                        return true;
                    }
                    for (var idx = 2; idx <= length - 2; idx++) {
                        if (segments[idx - 1]._isOnPathTo(segments[idx], point, width)) {
                            return true;
                        }
                    }
                    if (segments[length - 2]._isOnPathTo(segments[length - 1], point, width, 'end')) {
                        return true;
                    }
                }
                return false;
            },
            _bbox: function (matrix) {
                var segments = this.segments;
                var length = segments.length;
                var boundingBox;
                if (length === 1) {
                    var anchor = segments[0].anchor().transformCopy(matrix);
                    boundingBox = new g.Rect(anchor, Size.ZERO);
                } else if (length > 0) {
                    for (var i = 1; i < length; i++) {
                        var segmentBox = segments[i - 1].bboxTo(segments[i], matrix);
                        if (boundingBox) {
                            boundingBox = g.Rect.union(boundingBox, segmentBox);
                        } else {
                            boundingBox = segmentBox;
                        }
                    }
                }
                return boundingBox;
            }
        });
        drawing.mixins.Paintable.extend(Path.fn);
        drawing.mixins.Measurable.extend(Path.fn);
        Path.fromRect = function (rect, options) {
            return new Path(options).moveTo(rect.topLeft()).lineTo(rect.topRight()).lineTo(rect.bottomRight()).lineTo(rect.bottomLeft()).close();
        };
        Path.fromPoints = function (points, options) {
            if (points) {
                var path = new Path(options);
                for (var i = 0; i < points.length; i++) {
                    var pt = Point.create(points[i]);
                    if (pt) {
                        if (i === 0) {
                            path.moveTo(pt);
                        } else {
                            path.lineTo(pt);
                        }
                    }
                }
                return path;
            }
        };
        Path.fromArc = function (arc, options) {
            var path = new Path(options);
            var startAngle = arc.startAngle;
            var start = arc.pointAt(startAngle);
            path.moveTo(start.x, start.y);
            path.arc(startAngle, arc.endAngle, arc.radiusX, arc.radiusY, arc.anticlockwise);
            return path;
        };
        var MultiPath = Element.extend({
            nodeType: 'MultiPath',
            init: function (options) {
                Element.fn.init.call(this, options);
                this.paths = new GeometryElementsArray();
                this.paths.addObserver(this);
                if (!defined(this.options.stroke)) {
                    this.stroke('#000');
                }
            },
            moveTo: function (x, y) {
                var path = new Path();
                path.moveTo(x, y);
                this.paths.push(path);
                return this;
            },
            lineTo: function (x, y) {
                if (this.paths.length > 0) {
                    last(this.paths).lineTo(x, y);
                }
                return this;
            },
            curveTo: function (controlOut, controlIn, point) {
                if (this.paths.length > 0) {
                    last(this.paths).curveTo(controlOut, controlIn, point);
                }
                return this;
            },
            arc: function (startAngle, endAngle, radiusX, radiusY, anticlockwise) {
                if (this.paths.length > 0) {
                    last(this.paths).arc(startAngle, endAngle, radiusX, radiusY, anticlockwise);
                }
                return this;
            },
            arcTo: function (end, rx, ry, largeArc, swipe) {
                if (this.paths.length > 0) {
                    last(this.paths).arcTo(end, rx, ry, largeArc, swipe);
                }
                return this;
            },
            close: function () {
                if (this.paths.length > 0) {
                    last(this.paths).close();
                }
                return this;
            },
            _bbox: function (matrix) {
                return elementsBoundingBox(this.paths, true, matrix);
            },
            rawBBox: function () {
                return elementsBoundingBox(this.paths, false);
            },
            _containsPoint: function (point) {
                var paths = this.paths;
                for (var idx = 0; idx < paths.length; idx++) {
                    if (paths[idx]._containsPoint(point)) {
                        return true;
                    }
                }
                return false;
            },
            _isOnPath: function (point) {
                var paths = this.paths;
                var width = this.options.stroke.width;
                for (var idx = 0; idx < paths.length; idx++) {
                    if (paths[idx]._isOnPath(point, width)) {
                        return true;
                    }
                }
                return false;
            },
            _clippedBBox: function (transformation) {
                return elementsClippedBoundingBox(this.paths, this.currentTransform(transformation));
            }
        });
        drawing.mixins.Paintable.extend(MultiPath.fn);
        drawing.mixins.Measurable.extend(MultiPath.fn);
        var Image = Element.extend({
            nodeType: 'Image',
            init: function (src, rect, options) {
                Element.fn.init.call(this, options);
                this.src(src);
                this.rect(rect || new g.Rect());
            },
            src: function (value) {
                if (defined(value)) {
                    this.options.set('src', value);
                    return this;
                } else {
                    return this.options.get('src');
                }
            },
            bbox: function (transformation) {
                var combinedMatrix = toMatrix(this.currentTransform(transformation));
                return this._rect.bbox(combinedMatrix);
            },
            rawBBox: function () {
                return this._rect.bbox();
            },
            _containsPoint: function (point) {
                return this._rect.containsPoint(point);
            },
            _hasFill: function () {
                return this.src();
            }
        });
        defineGeometryAccessors(Image.fn, ['rect']);
        var GradientStop = Class.extend({
            init: function (offset, color, opacity) {
                this.options = new OptionsStore({
                    offset: offset,
                    color: color,
                    opacity: defined(opacity) ? opacity : 1
                });
                this.options.addObserver(this);
            }
        });
        defineOptionsAccessors(GradientStop.fn, [
            'offset',
            'color',
            'opacity'
        ]);
        deepExtend(GradientStop.fn, ObserversMixin);
        GradientStop.create = function (arg) {
            if (defined(arg)) {
                var stop;
                if (arg instanceof GradientStop) {
                    stop = arg;
                } else if (arg.length > 1) {
                    stop = new GradientStop(arg[0], arg[1], arg[2]);
                } else {
                    stop = new GradientStop(arg.offset, arg.color, arg.opacity);
                }
                return stop;
            }
        };
        var StopsArray = ElementsArray.extend({
            _change: function () {
                this.optionsChange({ field: 'stops' });
            }
        });
        var Gradient = Class.extend({
            nodeType: 'gradient',
            init: function (options) {
                this.stops = new StopsArray(this._createStops(options.stops));
                this.stops.addObserver(this);
                this._userSpace = options.userSpace;
                this.id = generateDefinitionId();
            },
            userSpace: function (value) {
                if (defined(value)) {
                    this._userSpace = value;
                    this.optionsChange();
                    return this;
                } else {
                    return this._userSpace;
                }
            },
            _createStops: function (stops) {
                var result = [];
                var idx;
                stops = stops || [];
                for (idx = 0; idx < stops.length; idx++) {
                    result.push(GradientStop.create(stops[idx]));
                }
                return result;
            },
            addStop: function (offset, color, opacity) {
                this.stops.push(new GradientStop(offset, color, opacity));
            },
            removeStop: function (stop) {
                var index = this.stops.indexOf(stop);
                if (index >= 0) {
                    this.stops.splice(index, 1);
                }
            }
        });
        deepExtend(Gradient.fn, ObserversMixin, {
            optionsChange: function (e) {
                this.trigger('optionsChange', {
                    field: 'gradient' + (e ? '.' + e.field : ''),
                    value: this
                });
            },
            geometryChange: function () {
                this.optionsChange();
            }
        });
        var LinearGradient = Gradient.extend({
            init: function (options) {
                options = options || {};
                Gradient.fn.init.call(this, options);
                this.start(options.start || new Point());
                this.end(options.end || new Point(1, 0));
            }
        });
        definePointAccessors(LinearGradient.fn, [
            'start',
            'end'
        ]);
        var RadialGradient = Gradient.extend({
            init: function (options) {
                options = options || {};
                Gradient.fn.init.call(this, options);
                this.center(options.center || new Point());
                this._radius = defined(options.radius) ? options.radius : 1;
                this._fallbackFill = options.fallbackFill;
            },
            radius: function (value) {
                if (defined(value)) {
                    this._radius = value;
                    this.geometryChange();
                    return this;
                } else {
                    return this._radius;
                }
            },
            fallbackFill: function (value) {
                if (defined(value)) {
                    this._fallbackFill = value;
                    this.optionsChange();
                    return this;
                } else {
                    return this._fallbackFill;
                }
            }
        });
        definePointAccessors(RadialGradient.fn, ['center']);
        var Rect = Element.extend({
            nodeType: 'Rect',
            init: function (geometry, options) {
                Element.fn.init.call(this, options);
                this.geometry(geometry || new g.Rect());
                if (!defined(this.options.stroke)) {
                    this.stroke('#000');
                }
            },
            _bbox: function (matrix) {
                return this._geometry.bbox(matrix);
            },
            rawBBox: function () {
                return this._geometry.bbox();
            },
            _containsPoint: function (point) {
                return this._geometry.containsPoint(point);
            },
            _isOnPath: function (point) {
                return this.geometry()._isOnPath(point, this.options.stroke.width / 2);
            }
        });
        drawing.mixins.Paintable.extend(Rect.fn);
        drawing.mixins.Measurable.extend(Rect.fn);
        defineGeometryAccessors(Rect.fn, ['geometry']);
        var Layout = Group.extend({
            init: function (rect, options) {
                Group.fn.init.call(this, kendo.deepExtend({}, this._defaults, options));
                this._rect = rect;
                this._fieldMap = {};
            },
            _defaults: {
                alignContent: START,
                justifyContent: START,
                alignItems: START,
                spacing: 0,
                orientation: HORIZONTAL,
                lineSpacing: 0,
                wrap: true
            },
            rect: function (value) {
                if (value) {
                    this._rect = value;
                    return this;
                } else {
                    return this._rect;
                }
            },
            _initMap: function () {
                var options = this.options;
                var fieldMap = this._fieldMap;
                if (options.orientation == HORIZONTAL) {
                    fieldMap.sizeField = 'width';
                    fieldMap.groupsSizeField = 'height';
                    fieldMap.groupAxis = 'x';
                    fieldMap.groupsAxis = 'y';
                } else {
                    fieldMap.sizeField = 'height';
                    fieldMap.groupsSizeField = 'width';
                    fieldMap.groupAxis = 'y';
                    fieldMap.groupsAxis = 'x';
                }
            },
            reflow: function () {
                if (!this._rect || this.children.length === 0) {
                    return;
                }
                this._initMap();
                if (this.options.transform) {
                    this.transform(null);
                }
                var options = this.options;
                var fieldMap = this._fieldMap;
                var rect = this._rect;
                var groupOptions = this._initGroups();
                var groups = groupOptions.groups;
                var groupsSize = groupOptions.groupsSize;
                var sizeField = fieldMap.sizeField;
                var groupsSizeField = fieldMap.groupsSizeField;
                var groupAxis = fieldMap.groupAxis;
                var groupsAxis = fieldMap.groupsAxis;
                var groupStart = alignStart(groupsSize, rect, options.alignContent, groupsAxis, groupsSizeField);
                var groupOrigin = new Point();
                var elementOrigin = new Point();
                var size = new g.Size();
                var elementStart, bbox, element, group, groupBox;
                for (var groupIdx = 0; groupIdx < groups.length; groupIdx++) {
                    group = groups[groupIdx];
                    groupOrigin[groupAxis] = elementStart = alignStart(group.size, rect, options.justifyContent, groupAxis, sizeField);
                    groupOrigin[groupsAxis] = groupStart;
                    size[sizeField] = group.size;
                    size[groupsSizeField] = group.lineSize;
                    groupBox = new g.Rect(groupOrigin, size);
                    for (var idx = 0; idx < group.bboxes.length; idx++) {
                        element = group.elements[idx];
                        bbox = group.bboxes[idx];
                        elementOrigin[groupAxis] = elementStart;
                        elementOrigin[groupsAxis] = alignStart(bbox.size[groupsSizeField], groupBox, options.alignItems, groupsAxis, groupsSizeField);
                        translateToPoint(elementOrigin, bbox, element);
                        elementStart += bbox.size[sizeField] + options.spacing;
                    }
                    groupStart += group.lineSize + options.lineSpacing;
                }
                if (!options.wrap && group.size > rect.size[sizeField]) {
                    var scale = rect.size[sizeField] / groupBox.size[sizeField];
                    var scaledStart = groupBox.topLeft().scale(scale, scale);
                    var scaledSize = groupBox.size[groupsSizeField] * scale;
                    var newStart = alignStart(scaledSize, rect, options.alignContent, groupsAxis, groupsSizeField);
                    var transform = g.transform();
                    if (groupAxis === 'x') {
                        transform.translate(rect.origin.x - scaledStart.x, newStart - scaledStart.y);
                    } else {
                        transform.translate(newStart - scaledStart.x, rect.origin.y - scaledStart.y);
                    }
                    transform.scale(scale, scale);
                    this.transform(transform);
                }
            },
            _initGroups: function () {
                var options = this.options;
                var children = this.children;
                var lineSpacing = options.lineSpacing;
                var sizeField = this._fieldMap.sizeField;
                var groupsSize = -lineSpacing;
                var groups = [];
                var group = this._newGroup();
                var addGroup = function () {
                    groups.push(group);
                    groupsSize += group.lineSize + lineSpacing;
                };
                var bbox, element;
                for (var idx = 0; idx < children.length; idx++) {
                    element = children[idx];
                    bbox = children[idx].clippedBBox();
                    if (element.visible() && bbox) {
                        if (options.wrap && group.size + bbox.size[sizeField] + options.spacing > this._rect.size[sizeField]) {
                            if (group.bboxes.length === 0) {
                                this._addToGroup(group, bbox, element);
                                addGroup();
                                group = this._newGroup();
                            } else {
                                addGroup();
                                group = this._newGroup();
                                this._addToGroup(group, bbox, element);
                            }
                        } else {
                            this._addToGroup(group, bbox, element);
                        }
                    }
                }
                if (group.bboxes.length) {
                    addGroup();
                }
                return {
                    groups: groups,
                    groupsSize: groupsSize
                };
            },
            _addToGroup: function (group, bbox, element) {
                group.size += bbox.size[this._fieldMap.sizeField] + this.options.spacing;
                group.lineSize = Math.max(bbox.size[this._fieldMap.groupsSizeField], group.lineSize);
                group.bboxes.push(bbox);
                group.elements.push(element);
            },
            _newGroup: function () {
                return {
                    lineSize: 0,
                    size: -this.options.spacing,
                    bboxes: [],
                    elements: []
                };
            }
        });
        function elementsBoundingBox(elements, applyTransform, transformation) {
            var boundingBox;
            for (var i = 0; i < elements.length; i++) {
                var element = elements[i];
                if (element.visible()) {
                    var elementBoundingBox = applyTransform ? element.bbox(transformation) : element.rawBBox();
                    if (elementBoundingBox) {
                        if (boundingBox) {
                            boundingBox = g.Rect.union(boundingBox, elementBoundingBox);
                        } else {
                            boundingBox = elementBoundingBox;
                        }
                    }
                }
            }
            return boundingBox;
        }
        function elementsClippedBoundingBox(elements, transformation) {
            var boundingBox;
            for (var i = 0; i < elements.length; i++) {
                var element = elements[i];
                if (element.visible()) {
                    var elementBoundingBox = element.clippedBBox(transformation);
                    if (elementBoundingBox) {
                        if (boundingBox) {
                            boundingBox = g.Rect.union(boundingBox, elementBoundingBox);
                        } else {
                            boundingBox = elementBoundingBox;
                        }
                    }
                }
            }
            return boundingBox;
        }
        function defineGeometryAccessors(fn, names) {
            for (var i = 0; i < names.length; i++) {
                fn[names[i]] = geometryAccessor(names[i]);
            }
        }
        function geometryAccessor(name) {
            var fieldName = '_' + name;
            return function (value) {
                if (defined(value)) {
                    this._observerField(fieldName, value);
                    this.geometryChange();
                    return this;
                } else {
                    return this[fieldName];
                }
            };
        }
        function definePointAccessors(fn, names) {
            for (var i = 0; i < names.length; i++) {
                fn[names[i]] = pointAccessor(names[i]);
            }
        }
        function pointAccessor(name) {
            var fieldName = '_' + name;
            return function (value) {
                if (defined(value)) {
                    this._observerField(fieldName, Point.create(value));
                    this.geometryChange();
                    return this;
                } else {
                    return this[fieldName];
                }
            };
        }
        function defineOptionsAccessors(fn, names) {
            for (var i = 0; i < names.length; i++) {
                fn[names[i]] = optionsAccessor(names[i]);
            }
        }
        function optionsAccessor(name) {
            return function (value) {
                if (defined(value)) {
                    this.options.set(name, value);
                    return this;
                } else {
                    return this.options.get(name);
                }
            };
        }
        function generateDefinitionId() {
            return 'kdef' + defId++;
        }
        function align(elements, rect, alignment) {
            alignElements(elements, rect, alignment, 'x', 'width');
        }
        function vAlign(elements, rect, alignment) {
            alignElements(elements, rect, alignment, 'y', 'height');
        }
        function stack(elements) {
            stackElements(getStackElements(elements), 'x', 'y', 'width');
        }
        function vStack(elements) {
            stackElements(getStackElements(elements), 'y', 'x', 'height');
        }
        function wrap(elements, rect) {
            return wrapElements(elements, rect, 'x', 'y', 'width');
        }
        function vWrap(elements, rect) {
            return wrapElements(elements, rect, 'y', 'x', 'height');
        }
        function wrapElements(elements, rect, axis, otherAxis, sizeField) {
            var result = [];
            var stacks = getStacks(elements, rect, sizeField);
            var origin = rect.origin.clone();
            var startElement;
            var elementIdx;
            var stack;
            var idx;
            for (idx = 0; idx < stacks.length; idx++) {
                stack = stacks[idx];
                startElement = stack[0];
                origin[otherAxis] = startElement.bbox.origin[otherAxis];
                translateToPoint(origin, startElement.bbox, startElement.element);
                startElement.bbox.origin[axis] = origin[axis];
                stackElements(stack, axis, otherAxis, sizeField);
                result.push([]);
                for (elementIdx = 0; elementIdx < stack.length; elementIdx++) {
                    result[idx].push(stack[elementIdx].element);
                }
            }
            return result;
        }
        function fit(element, rect) {
            var bbox = element.clippedBBox();
            var elementSize = bbox.size;
            var rectSize = rect.size;
            if (rectSize.width < elementSize.width || rectSize.height < elementSize.height) {
                var scale = math.min(rectSize.width / elementSize.width, rectSize.height / elementSize.height);
                var transform = element.transform() || g.transform();
                transform.scale(scale, scale);
                element.transform(transform);
            }
        }
        function getStacks(elements, rect, sizeField) {
            var maxSize = rect.size[sizeField];
            var stackSize = 0;
            var stacks = [];
            var stack = [];
            var element;
            var size;
            var bbox;
            var addElementToStack = function () {
                stack.push({
                    element: element,
                    bbox: bbox
                });
            };
            for (var idx = 0; idx < elements.length; idx++) {
                element = elements[idx];
                bbox = element.clippedBBox();
                if (bbox) {
                    size = bbox.size[sizeField];
                    if (stackSize + size > maxSize) {
                        if (stack.length) {
                            stacks.push(stack);
                            stack = [];
                            addElementToStack();
                            stackSize = size;
                        } else {
                            addElementToStack();
                            stacks.push(stack);
                            stack = [];
                            stackSize = 0;
                        }
                    } else {
                        addElementToStack();
                        stackSize += size;
                    }
                }
            }
            if (stack.length) {
                stacks.push(stack);
            }
            return stacks;
        }
        function getStackElements(elements) {
            var stackElements = [];
            var element;
            var bbox;
            for (var idx = 0; idx < elements.length; idx++) {
                element = elements[idx];
                bbox = element.clippedBBox();
                if (bbox) {
                    stackElements.push({
                        element: element,
                        bbox: bbox
                    });
                }
            }
            return stackElements;
        }
        function stackElements(elements, stackAxis, otherAxis, sizeField) {
            if (elements.length > 1) {
                var previousBBox = elements[0].bbox;
                var origin = new Point();
                var element;
                var bbox;
                for (var idx = 1; idx < elements.length; idx++) {
                    element = elements[idx].element;
                    bbox = elements[idx].bbox;
                    origin[stackAxis] = previousBBox.origin[stackAxis] + previousBBox.size[sizeField];
                    origin[otherAxis] = bbox.origin[otherAxis];
                    translateToPoint(origin, bbox, element);
                    bbox.origin[stackAxis] = origin[stackAxis];
                    previousBBox = bbox;
                }
            }
        }
        function alignElements(elements, rect, alignment, axis, sizeField) {
            var bbox, point;
            alignment = alignment || 'start';
            for (var idx = 0; idx < elements.length; idx++) {
                bbox = elements[idx].clippedBBox();
                if (bbox) {
                    point = bbox.origin.clone();
                    point[axis] = alignStart(bbox.size[sizeField], rect, alignment, axis, sizeField);
                    translateToPoint(point, bbox, elements[idx]);
                }
            }
        }
        function alignStart(size, rect, align, axis, sizeField) {
            var start;
            if (align == START) {
                start = rect.origin[axis];
            } else if (align == END) {
                start = rect.origin[axis] + rect.size[sizeField] - size;
            } else {
                start = rect.origin[axis] + (rect.size[sizeField] - size) / 2;
            }
            return start;
        }
        function translate(x, y, element) {
            var transofrm = element.transform() || g.transform();
            var matrix = transofrm.matrix();
            matrix.e += x;
            matrix.f += y;
            transofrm.matrix(matrix);
            element.transform(transofrm);
        }
        function translateToPoint(point, bbox, element) {
            translate(point.x - bbox.origin.x, point.y - bbox.origin.y, element);
        }
        deepExtend(drawing, {
            align: align,
            Arc: Arc,
            Circle: Circle,
            Element: Element,
            ElementsArray: ElementsArray,
            fit: fit,
            Gradient: Gradient,
            GradientStop: GradientStop,
            Group: Group,
            Image: Image,
            Layout: Layout,
            LinearGradient: LinearGradient,
            MultiPath: MultiPath,
            Path: Path,
            RadialGradient: RadialGradient,
            Rect: Rect,
            Segment: Segment,
            stack: stack,
            Text: Text,
            vAlign: vAlign,
            vStack: vStack,
            vWrap: vWrap,
            wrap: wrap
        });
    }(window.kendo.jQuery));
}, typeof define == 'function' && define.amd ? define : function (a1, a2, a3) {
    (a3 || a2)();
}));
(function (f, define) {
    define('drawing/parser', ['drawing/shapes'], f);
}(function () {
    (function ($) {
        var kendo = window.kendo, drawing = kendo.drawing, geometry = kendo.geometry, Class = kendo.Class, Point = geometry.Point, deepExtend = kendo.deepExtend, trim = $.trim, util = kendo.util, last = util.last;
        var SEGMENT_REGEX = /([a-df-z]{1})([^a-df-z]*)(z)?/gi, SPLIT_REGEX = /[,\s]?([+\-]?(?:\d*\.\d+|\d+)(?:[eE][+\-]?\d+)?)/g, MOVE = 'm', CLOSE = 'z';
        var PathParser = Class.extend({
            parse: function (str, options) {
                var multiPath = new drawing.MultiPath(options);
                var position = new Point();
                var previousCommand;
                str.replace(SEGMENT_REGEX, function (match, element, params, closePath) {
                    var command = element.toLowerCase();
                    var isRelative = command === element;
                    var parameters = parseParameters(trim(params));
                    if (command === MOVE) {
                        if (isRelative) {
                            position.x += parameters[0];
                            position.y += parameters[1];
                        } else {
                            position.x = parameters[0];
                            position.y = parameters[1];
                        }
                        multiPath.moveTo(position.x, position.y);
                        if (parameters.length > 2) {
                            command = 'l';
                            parameters.splice(0, 2);
                        }
                    }
                    if (ShapeMap[command]) {
                        ShapeMap[command](multiPath, {
                            parameters: parameters,
                            position: position,
                            isRelative: isRelative,
                            previousCommand: previousCommand
                        });
                        if (closePath && closePath.toLowerCase() === CLOSE) {
                            multiPath.close();
                        }
                    } else if (command !== MOVE) {
                        throw new Error('Error while parsing SVG path. Unsupported command: ' + command);
                    }
                    previousCommand = command;
                });
                return multiPath;
            }
        });
        var ShapeMap = {
            l: function (path, options) {
                var parameters = options.parameters;
                var position = options.position;
                for (var i = 0; i < parameters.length; i += 2) {
                    var point = new Point(parameters[i], parameters[i + 1]);
                    if (options.isRelative) {
                        point.translateWith(position);
                    }
                    path.lineTo(point.x, point.y);
                    position.x = point.x;
                    position.y = point.y;
                }
            },
            c: function (path, options) {
                var parameters = options.parameters;
                var position = options.position;
                var controlOut, controlIn, point;
                for (var i = 0; i < parameters.length; i += 6) {
                    controlOut = new Point(parameters[i], parameters[i + 1]);
                    controlIn = new Point(parameters[i + 2], parameters[i + 3]);
                    point = new Point(parameters[i + 4], parameters[i + 5]);
                    if (options.isRelative) {
                        controlIn.translateWith(position);
                        controlOut.translateWith(position);
                        point.translateWith(position);
                    }
                    path.curveTo(controlOut, controlIn, point);
                    position.x = point.x;
                    position.y = point.y;
                }
            },
            v: function (path, options) {
                var value = options.isRelative ? 0 : options.position.x;
                toLineParamaters(options.parameters, true, value);
                this.l(path, options);
            },
            h: function (path, options) {
                var value = options.isRelative ? 0 : options.position.y;
                toLineParamaters(options.parameters, false, value);
                this.l(path, options);
            },
            a: function (path, options) {
                var parameters = options.parameters;
                var position = options.position;
                for (var i = 0; i < parameters.length; i += 7) {
                    var radiusX = parameters[i];
                    var radiusY = parameters[i + 1];
                    var largeArc = parameters[i + 3];
                    var swipe = parameters[i + 4];
                    var endPoint = new Point(parameters[i + 5], parameters[i + 6]);
                    if (options.isRelative) {
                        endPoint.translateWith(position);
                    }
                    path.arcTo(endPoint, radiusX, radiusY, largeArc, swipe);
                    position.x = endPoint.x;
                    position.y = endPoint.y;
                }
            },
            s: function (path, options) {
                var parameters = options.parameters;
                var position = options.position;
                var previousCommand = options.previousCommand;
                var controlOut, endPoint, controlIn, lastControlIn;
                if (previousCommand == 's' || previousCommand == 'c') {
                    lastControlIn = last(last(path.paths).segments).controlIn();
                }
                for (var i = 0; i < parameters.length; i += 4) {
                    controlIn = new Point(parameters[i], parameters[i + 1]);
                    endPoint = new Point(parameters[i + 2], parameters[i + 3]);
                    if (options.isRelative) {
                        controlIn.translateWith(position);
                        endPoint.translateWith(position);
                    }
                    if (lastControlIn) {
                        controlOut = reflectionPoint(lastControlIn, position);
                    } else {
                        controlOut = position.clone();
                    }
                    lastControlIn = controlIn;
                    path.curveTo(controlOut, controlIn, endPoint);
                    position.x = endPoint.x;
                    position.y = endPoint.y;
                }
            },
            q: function (path, options) {
                var parameters = options.parameters;
                var position = options.position;
                var cubicControlPoints, endPoint, controlPoint;
                for (var i = 0; i < parameters.length; i += 4) {
                    controlPoint = new Point(parameters[i], parameters[i + 1]);
                    endPoint = new Point(parameters[i + 2], parameters[i + 3]);
                    if (options.isRelative) {
                        controlPoint.translateWith(position);
                        endPoint.translateWith(position);
                    }
                    cubicControlPoints = quadraticToCubicControlPoints(position, controlPoint, endPoint);
                    path.curveTo(cubicControlPoints.controlOut, cubicControlPoints.controlIn, endPoint);
                    position.x = endPoint.x;
                    position.y = endPoint.y;
                }
            },
            t: function (path, options) {
                var parameters = options.parameters;
                var position = options.position;
                var previousCommand = options.previousCommand;
                var cubicControlPoints, controlPoint, endPoint;
                if (previousCommand == 'q' || previousCommand == 't') {
                    var lastSegment = last(last(path.paths).segments);
                    controlPoint = lastSegment.controlIn().clone().translateWith(position.scaleCopy(-1 / 3)).scale(3 / 2);
                }
                for (var i = 0; i < parameters.length; i += 2) {
                    endPoint = new Point(parameters[i], parameters[i + 1]);
                    if (options.isRelative) {
                        endPoint.translateWith(position);
                    }
                    if (controlPoint) {
                        controlPoint = reflectionPoint(controlPoint, position);
                    } else {
                        controlPoint = position.clone();
                    }
                    cubicControlPoints = quadraticToCubicControlPoints(position, controlPoint, endPoint);
                    path.curveTo(cubicControlPoints.controlOut, cubicControlPoints.controlIn, endPoint);
                    position.x = endPoint.x;
                    position.y = endPoint.y;
                }
            }
        };
        function parseParameters(str) {
            var parameters = [];
            str.replace(SPLIT_REGEX, function (match, number) {
                parameters.push(parseFloat(number));
            });
            return parameters;
        }
        function toLineParamaters(parameters, isVertical, value) {
            var insertPosition = isVertical ? 0 : 1;
            for (var i = 0; i < parameters.length; i += 2) {
                parameters.splice(i + insertPosition, 0, value);
            }
        }
        function reflectionPoint(point, center) {
            if (point && center) {
                return center.scaleCopy(2).translate(-point.x, -point.y);
            }
        }
        function quadraticToCubicControlPoints(position, controlPoint, endPoint) {
            var third = 1 / 3;
            controlPoint = controlPoint.clone().scale(2 / 3);
            return {
                controlOut: controlPoint.clone().translateWith(position.scaleCopy(third)),
                controlIn: controlPoint.translateWith(endPoint.scaleCopy(third))
            };
        }
        PathParser.current = new PathParser();
        drawing.Path.parse = function (str, options) {
            return PathParser.current.parse(str, options);
        };
        deepExtend(drawing, { PathParser: PathParser });
    }(window.kendo.jQuery));
}, typeof define == 'function' && define.amd ? define : function (a1, a2, a3) {
    (a3 || a2)();
}));
(function (f, define) {
    define('drawing/search', ['drawing/shapes'], f);
}(function () {
    (function ($) {
        var kendo = window.kendo, drawing = kendo.drawing, geometry = kendo.geometry, Class = kendo.Class, Rect = geometry.Rect, deepExtend = kendo.deepExtend, isArray = $.isArray, inArray = $.inArray, math = Math, LEVEL_STEP = 10000, MAX_LEVEL = 75;
        var QuadRoot = Class.extend({
            init: function () {
                this.shapes = [];
            },
            _add: function (shape, bbox) {
                this.shapes.push({
                    bbox: bbox,
                    shape: shape
                });
                shape._quadNode = this;
            },
            pointShapes: function (point) {
                var shapes = this.shapes;
                var length = shapes.length;
                var result = [];
                for (var idx = 0; idx < length; idx++) {
                    if (shapes[idx].bbox.containsPoint(point)) {
                        result.push(shapes[idx].shape);
                    }
                }
                return result;
            },
            insert: function (shape, bbox) {
                this._add(shape, bbox);
            },
            remove: function (shape) {
                var shapes = this.shapes;
                var length = shapes.length;
                for (var idx = 0; idx < length; idx++) {
                    if (shapes[idx].shape === shape) {
                        shapes.splice(idx, 1);
                        break;
                    }
                }
            }
        });
        var QuadNode = QuadRoot.extend({
            init: function (rect) {
                QuadRoot.fn.init.call(this);
                this.children = [];
                this.rect = rect;
            },
            inBounds: function (rect) {
                var nodeRect = this.rect;
                var nodeBottomRight = nodeRect.bottomRight();
                var bottomRight = rect.bottomRight();
                var inBounds = nodeRect.origin.x <= rect.origin.x && nodeRect.origin.y <= rect.origin.y && bottomRight.x <= nodeBottomRight.x && bottomRight.y <= nodeBottomRight.y;
                return inBounds;
            },
            pointShapes: function (point) {
                var children = this.children;
                var length = children.length;
                var result = QuadRoot.fn.pointShapes.call(this, point);
                for (var idx = 0; idx < length; idx++) {
                    result = result.concat(children[idx].pointShapes(point));
                }
                return result;
            },
            insert: function (shape, bbox) {
                var inserted = false;
                var children = this.children;
                if (this.inBounds(bbox)) {
                    if (this.shapes.length < 4) {
                        this._add(shape, bbox);
                    } else {
                        if (!children.length) {
                            this._initChildren();
                        }
                        for (var idx = 0; idx < children.length; idx++) {
                            if (children[idx].insert(shape, bbox)) {
                                inserted = true;
                                break;
                            }
                        }
                        if (!inserted) {
                            this._add(shape, bbox);
                        }
                    }
                    inserted = true;
                }
                return inserted;
            },
            _initChildren: function () {
                var rect = this.rect, children = this.children, center = rect.center(), halfWidth = rect.width() / 2, halfHeight = rect.height() / 2;
                children.push(new QuadNode(new Rect([
                    rect.origin.x,
                    rect.origin.y
                ], [
                    halfWidth,
                    halfHeight
                ])), new QuadNode(new Rect([
                    center.x,
                    rect.origin.y
                ], [
                    halfWidth,
                    halfHeight
                ])), new QuadNode(new Rect([
                    rect.origin.x,
                    center.y
                ], [
                    halfWidth,
                    halfHeight
                ])), new QuadNode(new Rect([
                    center.x,
                    center.y
                ], [
                    halfWidth,
                    halfHeight
                ])));
            }
        });
        var ShapesQuadTree = Class.extend({
            ROOT_SIZE: 1000,
            init: function () {
                this.initRoots();
            },
            initRoots: function () {
                this.rootMap = {};
                this.root = new QuadRoot();
                this.rootElements = [];
            },
            clear: function () {
                var that = this;
                var rootElements = that.rootElements;
                for (var idx = 0; idx < rootElements.length; idx++) {
                    this.remove(rootElements[idx]);
                }
                this.initRoots();
            },
            pointShape: function (point) {
                var size = this.ROOT_SIZE;
                var result = this.root.pointShapes(point);
                var sectorRoot = (this.rootMap[math.floor(point.x / size)] || {})[math.floor(point.y / size)];
                if (sectorRoot) {
                    result = result.concat(sectorRoot.pointShapes(point));
                }
                this.assignZindex(result);
                result.sort(zIndexComparer);
                for (var idx = 0; idx < result.length; idx++) {
                    if (result[idx].containsPoint(point)) {
                        return result[idx];
                    }
                }
            },
            assignZindex: function (elements) {
                var element, levelWeight, zIndex, parents;
                for (var idx = 0; idx < elements.length; idx++) {
                    element = elements[idx];
                    zIndex = 0;
                    levelWeight = math.pow(LEVEL_STEP, MAX_LEVEL);
                    parents = [];
                    while (element) {
                        parents.push(element);
                        element = element.parent;
                    }
                    while (parents.length) {
                        element = parents.pop();
                        zIndex += (inArray(element, element.parent ? element.parent.children : this.rootElements) + 1) * levelWeight;
                        levelWeight /= LEVEL_STEP;
                    }
                    elements[idx]._zIndex = zIndex;
                }
            },
            optionsChange: function (e) {
                if (e.field == 'transform' || e.field == 'stroke.width') {
                    this.bboxChange(e.element);
                }
            },
            geometryChange: function (e) {
                this.bboxChange(e.element);
            },
            bboxChange: function (element) {
                if (element.nodeType === 'Group') {
                    for (var idx = 0; idx < element.children.length; idx++) {
                        this.bboxChange(element.children[idx]);
                    }
                } else {
                    if (element._quadNode) {
                        element._quadNode.remove(element);
                    }
                    this._insertShape(element);
                }
            },
            add: function (elements) {
                var elementsArray = isArray(elements) ? elements.slice(0) : [elements];
                this.rootElements.push.apply(this.rootElements, elementsArray);
                this._insert(elementsArray);
            },
            childrenChange: function (e) {
                if (e.action == 'remove') {
                    for (var idx = 0; idx < e.items.length; idx++) {
                        this.remove(e.items[idx]);
                    }
                } else {
                    this._insert(Array.prototype.slice.call(e.items, 0));
                }
            },
            _insert: function (elements) {
                var element;
                while (elements.length > 0) {
                    element = elements.pop();
                    element.addObserver(this);
                    if (element.nodeType == 'Group') {
                        elements.push.apply(elements, element.children);
                    } else {
                        this._insertShape(element);
                    }
                }
            },
            _insertShape: function (shape) {
                var bbox = shape.bbox();
                if (bbox) {
                    var rootSize = this.ROOT_SIZE;
                    var sectors = this.getSectors(bbox);
                    var x = sectors[0][0];
                    var y = sectors[1][0];
                    if (this.inRoot(sectors)) {
                        this.root.insert(shape, bbox);
                    } else {
                        if (!this.rootMap[x]) {
                            this.rootMap[x] = {};
                        }
                        if (!this.rootMap[x][y]) {
                            this.rootMap[x][y] = new QuadNode(new Rect([
                                x * rootSize,
                                y * rootSize
                            ], [
                                rootSize,
                                rootSize
                            ]));
                        }
                        this.rootMap[x][y].insert(shape, bbox);
                    }
                }
            },
            remove: function (element) {
                element.removeObserver(this);
                if (element.nodeType == 'Group') {
                    var children = element.children;
                    for (var idx = 0; idx < children.length; idx++) {
                        this.remove(children[idx]);
                    }
                } else if (element._quadNode) {
                    element._quadNode.remove(element);
                    delete element._quadNode;
                }
            },
            inRoot: function (sectors) {
                return sectors[0].length > 1 || sectors[1].length > 1;
            },
            getSectors: function (rect) {
                var rootSize = this.ROOT_SIZE;
                var bottomRight = rect.bottomRight();
                var bottomX = math.floor(bottomRight.x / rootSize);
                var bottomY = math.floor(bottomRight.y / rootSize);
                var sectors = [
                    [],
                    []
                ];
                for (var x = math.floor(rect.origin.x / rootSize); x <= bottomX; x++) {
                    sectors[0].push(x);
                }
                for (var y = math.floor(rect.origin.y / rootSize); y <= bottomY; y++) {
                    sectors[1].push(y);
                }
                return sectors;
            }
        });
        function zIndexComparer(x1, x2) {
            if (x1._zIndex < x2._zIndex) {
                return 1;
            }
            if (x1._zIndex > x2._zIndex) {
                return -1;
            }
            return 0;
        }
        deepExtend(drawing, {
            ShapesQuadTree: ShapesQuadTree,
            QuadNode: QuadNode
        });
    }(window.kendo.jQuery));
}, typeof define == 'function' && define.amd ? define : function (a1, a2, a3) {
    (a3 || a2)();
}));
(function (f, define) {
    define('drawing/svg', [
        'drawing/shapes',
        'util/main'
    ], f);
}(function () {
    (function ($) {
        var doc = document, kendo = window.kendo, deepExtend = kendo.deepExtend, g = kendo.geometry, d = kendo.drawing, BaseNode = d.BaseNode, util = kendo.util, defined = util.defined, isTransparent = util.isTransparent, renderAttr = util.renderAttr, renderAllAttr = util.renderAllAttr, renderTemplate = util.renderTemplate, inArray = $.inArray;
        var BUTT = 'butt', DASH_ARRAYS = d.DASH_ARRAYS, GRADIENT = 'gradient', NONE = 'none', NS = '.kendo', SOLID = 'solid', SPACE = ' ', SVG_NS = 'http://www.w3.org/2000/svg', TRANSFORM = 'transform', UNDEFINED = 'undefined';
        var Surface = d.Surface.extend({
            init: function (element, options) {
                d.Surface.fn.init.call(this, element, options);
                this._root = new RootNode(this.options);
                renderSVG(this.element[0], this._template(this));
                this._rootElement = this.element[0].firstElementChild;
                alignToScreen(this._rootElement);
                this._root.attachTo(this._rootElement);
                this.element.on('click' + NS, this._click);
                this.element.on('mouseover' + NS, this._mouseenter);
                this.element.on('mouseout' + NS, this._mouseleave);
                this.element.on('mousemove' + NS, this._mousemove);
                this.resize();
            },
            type: 'svg',
            destroy: function () {
                if (this._root) {
                    this._root.destroy();
                    this._root = null;
                    this._rootElement = null;
                    this.element.off(NS);
                }
                d.Surface.fn.destroy.call(this);
            },
            translate: function (offset) {
                var viewBox = kendo.format('{0} {1} {2} {3}', Math.round(offset.x), Math.round(offset.y), this._size.width, this._size.height);
                this._offset = offset;
                this._rootElement.setAttribute('viewBox', viewBox);
            },
            draw: function (element) {
                d.Surface.fn.draw.call(this, element);
                this._root.load([element]);
            },
            clear: function () {
                d.Surface.fn.clear.call(this);
                this._root.clear();
            },
            svg: function () {
                return '<?xml version=\'1.0\' ?>' + this._template(this);
            },
            exportVisual: function () {
                var visual = this._visual;
                var offset = this._offset;
                if (offset) {
                    var wrap = new d.Group();
                    wrap.children.push(visual);
                    wrap.transform(g.transform().translate(-offset.x, -offset.y));
                    visual = wrap;
                }
                return visual;
            },
            _resize: function () {
                if (this._offset) {
                    this.translate(this._offset);
                }
            },
            _template: renderTemplate('<svg style=\'width: 100%; height: 100%; overflow: hidden;\' ' + 'xmlns=\'' + SVG_NS + '\' ' + 'xmlns:xlink=\'http://www.w3.org/1999/xlink\' ' + 'version=\'1.1\'>#= d._root.render() #</svg>')
        });
        var Node = BaseNode.extend({
            init: function (srcElement) {
                BaseNode.fn.init.call(this, srcElement);
                this.definitions = {};
            },
            destroy: function () {
                if (this.element) {
                    this.element._kendoNode = null;
                    this.element = null;
                }
                this.clearDefinitions();
                BaseNode.fn.destroy.call(this);
            },
            load: function (elements, pos) {
                var node = this, element = node.element, childNode, srcElement, children, i;
                for (i = 0; i < elements.length; i++) {
                    srcElement = elements[i];
                    children = srcElement.children;
                    childNode = new nodeMap[srcElement.nodeType](srcElement);
                    if (defined(pos)) {
                        node.insertAt(childNode, pos);
                    } else {
                        node.append(childNode);
                    }
                    childNode.createDefinitions();
                    if (children && children.length > 0) {
                        childNode.load(children);
                    }
                    if (element) {
                        childNode.attachTo(element, pos);
                    }
                }
            },
            root: function () {
                var root = this;
                while (root.parent) {
                    root = root.parent;
                }
                return root;
            },
            attachTo: function (domElement, pos) {
                var container = doc.createElement('div');
                renderSVG(container, '<svg xmlns=\'' + SVG_NS + '\' version=\'1.1\'>' + this.render() + '</svg>');
                var element = container.firstChild.firstChild;
                if (element) {
                    if (defined(pos)) {
                        domElement.insertBefore(element, domElement.childNodes[pos] || null);
                    } else {
                        domElement.appendChild(element);
                    }
                    this.setElement(element);
                }
            },
            setElement: function (element) {
                var nodes = this.childNodes, childElement, i;
                if (this.element) {
                    this.element._kendoNode = null;
                }
                this.element = element;
                this.element._kendoNode = this;
                for (i = 0; i < nodes.length; i++) {
                    childElement = element.childNodes[i];
                    nodes[i].setElement(childElement);
                }
            },
            clear: function () {
                this.clearDefinitions();
                if (this.element) {
                    this.element.innerHTML = '';
                }
                var children = this.childNodes;
                for (var i = 0; i < children.length; i++) {
                    children[i].destroy();
                }
                this.childNodes = [];
            },
            removeSelf: function () {
                if (this.element) {
                    var parentNode = this.element.parentNode;
                    if (parentNode) {
                        parentNode.removeChild(this.element);
                    }
                    this.element = null;
                }
                BaseNode.fn.removeSelf.call(this);
            },
            template: renderTemplate('#= d.renderChildren() #'),
            render: function () {
                return this.template(this);
            },
            renderChildren: function () {
                var nodes = this.childNodes, output = '', i;
                for (i = 0; i < nodes.length; i++) {
                    output += nodes[i].render();
                }
                return output;
            },
            optionsChange: function (e) {
                var field = e.field;
                var value = e.value;
                if (field === 'visible') {
                    this.css('display', value ? '' : NONE);
                } else if (DefinitionMap[field] && isDefinition(field, value)) {
                    this.updateDefinition(field, value);
                } else if (field === 'opacity') {
                    this.attr('opacity', value);
                }
                BaseNode.fn.optionsChange.call(this, e);
            },
            attr: function (name, value) {
                if (this.element) {
                    this.element.setAttribute(name, value);
                }
            },
            allAttr: function (attrs) {
                for (var i = 0; i < attrs.length; i++) {
                    this.attr(attrs[i][0], attrs[i][1]);
                }
            },
            css: function (name, value) {
                if (this.element) {
                    this.element.style[name] = value;
                }
            },
            allCss: function (styles) {
                for (var i = 0; i < styles.length; i++) {
                    this.css(styles[i][0], styles[i][1]);
                }
            },
            removeAttr: function (name) {
                if (this.element) {
                    this.element.removeAttribute(name);
                }
            },
            mapTransform: function (transform) {
                var attrs = [];
                if (transform) {
                    attrs.push([
                        TRANSFORM,
                        'matrix(' + transform.matrix().toString(6) + ')'
                    ]);
                }
                return attrs;
            },
            renderTransform: function () {
                return renderAllAttr(this.mapTransform(this.srcElement.transform()));
            },
            transformChange: function (value) {
                if (value) {
                    this.allAttr(this.mapTransform(value));
                } else {
                    this.removeAttr(TRANSFORM);
                }
            },
            mapStyle: function () {
                var options = this.srcElement.options;
                var style = [[
                        'cursor',
                        options.cursor
                    ]];
                if (options.visible === false) {
                    style.push([
                        'display',
                        NONE
                    ]);
                }
                return style;
            },
            renderStyle: function () {
                return renderAttr('style', util.renderStyle(this.mapStyle(true)));
            },
            renderOpacity: function () {
                return renderAttr('opacity', this.srcElement.options.opacity);
            },
            createDefinitions: function () {
                var srcElement = this.srcElement;
                var definitions = this.definitions;
                var definition, field, options, hasDefinitions;
                if (srcElement) {
                    options = srcElement.options;
                    for (field in DefinitionMap) {
                        definition = options.get(field);
                        if (definition && isDefinition(field, definition)) {
                            definitions[field] = definition;
                            hasDefinitions = true;
                        }
                    }
                    if (hasDefinitions) {
                        this.definitionChange({
                            action: 'add',
                            definitions: definitions
                        });
                    }
                }
            },
            definitionChange: function (e) {
                if (this.parent) {
                    this.parent.definitionChange(e);
                }
            },
            updateDefinition: function (type, value) {
                var definitions = this.definitions;
                var current = definitions[type];
                var attr = DefinitionMap[type];
                var definition = {};
                if (current) {
                    definition[type] = current;
                    this.definitionChange({
                        action: 'remove',
                        definitions: definition
                    });
                    delete definitions[type];
                }
                if (!value) {
                    if (current) {
                        this.removeAttr(attr);
                    }
                } else {
                    definition[type] = value;
                    this.definitionChange({
                        action: 'add',
                        definitions: definition
                    });
                    definitions[type] = value;
                    this.attr(attr, refUrl(value.id));
                }
            },
            clearDefinitions: function () {
                var definitions = this.definitions;
                var field;
                for (field in definitions) {
                    this.definitionChange({
                        action: 'remove',
                        definitions: definitions
                    });
                    this.definitions = {};
                    break;
                }
            },
            renderDefinitions: function () {
                return renderAllAttr(this.mapDefinitions());
            },
            mapDefinitions: function () {
                var definitions = this.definitions;
                var attrs = [];
                var field;
                for (field in definitions) {
                    attrs.push([
                        DefinitionMap[field],
                        refUrl(definitions[field].id)
                    ]);
                }
                return attrs;
            }
        });
        var RootNode = Node.extend({
            init: function (options) {
                Node.fn.init.call(this);
                this.options = options;
                this.defs = new DefinitionNode();
            },
            attachTo: function (domElement) {
                this.element = domElement;
                this.defs.attachTo(domElement.firstElementChild);
            },
            clear: function () {
                BaseNode.fn.clear.call(this);
            },
            template: renderTemplate('#=d.defs.render()##= d.renderChildren() #'),
            definitionChange: function (e) {
                this.defs.definitionChange(e);
            }
        });
        var DefinitionNode = Node.extend({
            init: function () {
                Node.fn.init.call(this);
                this.definitionMap = {};
            },
            attachTo: function (domElement) {
                this.element = domElement;
            },
            template: renderTemplate('<defs>#= d.renderChildren()#</defs>'),
            definitionChange: function (e) {
                var definitions = e.definitions;
                var action = e.action;
                if (action == 'add') {
                    this.addDefinitions(definitions);
                } else if (action == 'remove') {
                    this.removeDefinitions(definitions);
                }
            },
            createDefinition: function (type, item) {
                var nodeType;
                if (type == 'clip') {
                    nodeType = ClipNode;
                } else if (type == 'fill') {
                    if (item instanceof d.LinearGradient) {
                        nodeType = LinearGradientNode;
                    } else if (item instanceof d.RadialGradient) {
                        nodeType = RadialGradientNode;
                    }
                }
                return new nodeType(item);
            },
            addDefinitions: function (definitions) {
                for (var field in definitions) {
                    this.addDefinition(field, definitions[field]);
                }
            },
            addDefinition: function (type, srcElement) {
                var definitionMap = this.definitionMap;
                var id = srcElement.id;
                var element = this.element;
                var node, mapItem;
                mapItem = definitionMap[id];
                if (!mapItem) {
                    node = this.createDefinition(type, srcElement);
                    definitionMap[id] = {
                        element: node,
                        count: 1
                    };
                    this.append(node);
                    if (element) {
                        node.attachTo(this.element);
                    }
                } else {
                    mapItem.count++;
                }
            },
            removeDefinitions: function (definitions) {
                for (var field in definitions) {
                    this.removeDefinition(definitions[field]);
                }
            },
            removeDefinition: function (srcElement) {
                var definitionMap = this.definitionMap;
                var id = srcElement.id;
                var mapItem;
                mapItem = definitionMap[id];
                if (mapItem) {
                    mapItem.count--;
                    if (mapItem.count === 0) {
                        this.remove(inArray(mapItem.element, this.childNodes), 1);
                        delete definitionMap[id];
                    }
                }
            }
        });
        var ClipNode = Node.extend({
            init: function (srcElement) {
                Node.fn.init.call(this);
                this.srcElement = srcElement;
                this.id = srcElement.id;
                this.load([srcElement]);
            },
            template: renderTemplate('<clipPath id=\'#=d.id#\'>#= d.renderChildren()#</clipPath>')
        });
        var GroupNode = Node.extend({
            template: renderTemplate('<g#= d.renderTransform() + d.renderStyle() + d.renderOpacity() + d.renderDefinitions()#>#= d.renderChildren() #</g>'),
            optionsChange: function (e) {
                if (e.field == TRANSFORM) {
                    this.transformChange(e.value);
                }
                Node.fn.optionsChange.call(this, e);
            }
        });
        var PathNode = Node.extend({
            geometryChange: function () {
                this.attr('d', this.renderData());
                this.invalidate();
            },
            optionsChange: function (e) {
                switch (e.field) {
                case 'fill':
                    if (e.value) {
                        this.allAttr(this.mapFill(e.value));
                    } else {
                        this.removeAttr('fill');
                    }
                    break;
                case 'fill.color':
                    this.allAttr(this.mapFill({ color: e.value }));
                    break;
                case 'stroke':
                    if (e.value) {
                        this.allAttr(this.mapStroke(e.value));
                    } else {
                        this.removeAttr('stroke');
                    }
                    break;
                case TRANSFORM:
                    this.transformChange(e.value);
                    break;
                default:
                    var name = this.attributeMap[e.field];
                    if (name) {
                        this.attr(name, e.value);
                    }
                    break;
                }
                Node.fn.optionsChange.call(this, e);
            },
            attributeMap: {
                'fill.opacity': 'fill-opacity',
                'stroke.color': 'stroke',
                'stroke.width': 'stroke-width',
                'stroke.opacity': 'stroke-opacity'
            },
            content: function () {
                if (this.element) {
                    this.element.textContent = this.srcElement.content();
                }
            },
            renderData: function () {
                return this.printPath(this.srcElement);
            },
            printPath: function (path) {
                var segments = path.segments, length = segments.length;
                if (length > 0) {
                    var parts = [], output, segmentType, currentType, i;
                    for (i = 1; i < length; i++) {
                        segmentType = this.segmentType(segments[i - 1], segments[i]);
                        if (segmentType !== currentType) {
                            currentType = segmentType;
                            parts.push(segmentType);
                        }
                        if (segmentType === 'L') {
                            parts.push(this.printPoints(segments[i].anchor()));
                        } else {
                            parts.push(this.printPoints(segments[i - 1].controlOut(), segments[i].controlIn(), segments[i].anchor()));
                        }
                    }
                    output = 'M' + this.printPoints(segments[0].anchor()) + SPACE + parts.join(SPACE);
                    if (path.options.closed) {
                        output += 'Z';
                    }
                    return output;
                }
            },
            printPoints: function () {
                var points = arguments, length = points.length, i, result = [];
                for (i = 0; i < length; i++) {
                    result.push(points[i].toString(3));
                }
                return result.join(SPACE);
            },
            segmentType: function (segmentStart, segmentEnd) {
                return segmentStart.controlOut() && segmentEnd.controlIn() ? 'C' : 'L';
            },
            mapStroke: function (stroke) {
                var attrs = [];
                if (stroke && !isTransparent(stroke.color)) {
                    attrs.push([
                        'stroke',
                        stroke.color
                    ]);
                    attrs.push([
                        'stroke-width',
                        stroke.width
                    ]);
                    attrs.push([
                        'stroke-linecap',
                        this.renderLinecap(stroke)
                    ]);
                    attrs.push([
                        'stroke-linejoin',
                        stroke.lineJoin
                    ]);
                    if (defined(stroke.opacity)) {
                        attrs.push([
                            'stroke-opacity',
                            stroke.opacity
                        ]);
                    }
                    if (defined(stroke.dashType)) {
                        attrs.push([
                            'stroke-dasharray',
                            this.renderDashType(stroke)
                        ]);
                    }
                } else {
                    attrs.push([
                        'stroke',
                        NONE
                    ]);
                }
                return attrs;
            },
            renderStroke: function () {
                return renderAllAttr(this.mapStroke(this.srcElement.options.stroke));
            },
            renderDashType: function (stroke) {
                var width = stroke.width || 1, dashType = stroke.dashType;
                if (dashType && dashType != SOLID) {
                    var dashArray = DASH_ARRAYS[dashType.toLowerCase()], result = [], i;
                    for (i = 0; i < dashArray.length; i++) {
                        result.push(dashArray[i] * width);
                    }
                    return result.join(' ');
                }
            },
            renderLinecap: function (stroke) {
                var dashType = stroke.dashType, lineCap = stroke.lineCap;
                return dashType && dashType != SOLID ? BUTT : lineCap;
            },
            mapFill: function (fill) {
                var attrs = [];
                if (!(fill && fill.nodeType == GRADIENT)) {
                    if (fill && !isTransparent(fill.color)) {
                        attrs.push([
                            'fill',
                            fill.color
                        ]);
                        if (defined(fill.opacity)) {
                            attrs.push([
                                'fill-opacity',
                                fill.opacity
                            ]);
                        }
                    } else {
                        attrs.push([
                            'fill',
                            NONE
                        ]);
                    }
                }
                return attrs;
            },
            renderFill: function () {
                return renderAllAttr(this.mapFill(this.srcElement.options.fill));
            },
            template: renderTemplate('<path #= d.renderStyle() # #= d.renderOpacity() # ' + '#= kendo.util.renderAttr(\'d\', d.renderData()) # ' + '#= d.renderStroke() # ' + '#= d.renderFill() # ' + '#= d.renderDefinitions() # ' + '#= d.renderTransform() #></path>')
        });
        var ArcNode = PathNode.extend({
            renderData: function () {
                return this.printPath(this.srcElement.toPath());
            }
        });
        var MultiPathNode = PathNode.extend({
            renderData: function () {
                var paths = this.srcElement.paths;
                if (paths.length > 0) {
                    var result = [], i;
                    for (i = 0; i < paths.length; i++) {
                        result.push(this.printPath(paths[i]));
                    }
                    return result.join(' ');
                }
            }
        });
        var CircleNode = PathNode.extend({
            geometryChange: function () {
                var center = this.center();
                this.attr('cx', center.x);
                this.attr('cy', center.y);
                this.attr('r', this.radius());
                this.invalidate();
            },
            center: function () {
                return this.srcElement.geometry().center;
            },
            radius: function () {
                return this.srcElement.geometry().radius;
            },
            template: renderTemplate('<circle #= d.renderStyle() # #= d.renderOpacity() # ' + 'cx=\'#= d.center().x #\' cy=\'#= d.center().y #\' ' + 'r=\'#= d.radius() #\' ' + '#= d.renderStroke() # ' + '#= d.renderFill() # ' + '#= d.renderDefinitions() # ' + '#= d.renderTransform() # ></circle>')
        });
        var TextNode = PathNode.extend({
            geometryChange: function () {
                var pos = this.pos();
                this.attr('x', pos.x);
                this.attr('y', pos.y);
                this.invalidate();
            },
            optionsChange: function (e) {
                if (e.field === 'font') {
                    this.attr('style', util.renderStyle(this.mapStyle()));
                    this.geometryChange();
                } else if (e.field === 'content') {
                    PathNode.fn.content.call(this, this.srcElement.content());
                }
                PathNode.fn.optionsChange.call(this, e);
            },
            mapStyle: function (encode) {
                var style = PathNode.fn.mapStyle.call(this, encode);
                var font = this.srcElement.options.font;
                if (encode) {
                    font = kendo.htmlEncode(font);
                }
                style.push([
                    'font',
                    font
                ]);
                return style;
            },
            pos: function () {
                var pos = this.srcElement.position();
                var size = this.srcElement.measure();
                return pos.clone().setY(pos.y + size.baseline);
            },
            renderContent: function () {
                var content = this.srcElement.content();
                content = decodeEntities(content);
                content = kendo.htmlEncode(content);
                return content;
            },
            template: renderTemplate('<text #= d.renderStyle() # #= d.renderOpacity() # ' + 'x=\'#= this.pos().x #\' y=\'#= this.pos().y #\' ' + '#= d.renderStroke() # ' + '#= d.renderTransform() # ' + '#= d.renderDefinitions() # ' + '#= d.renderFill() #>#= d.renderContent() #</text>')
        });
        var ImageNode = PathNode.extend({
            geometryChange: function () {
                this.allAttr(this.mapPosition());
                this.invalidate();
            },
            optionsChange: function (e) {
                if (e.field === 'src') {
                    this.allAttr(this.mapSource());
                }
                PathNode.fn.optionsChange.call(this, e);
            },
            mapPosition: function () {
                var rect = this.srcElement.rect();
                var tl = rect.topLeft();
                return [
                    [
                        'x',
                        tl.x
                    ],
                    [
                        'y',
                        tl.y
                    ],
                    [
                        'width',
                        rect.width() + 'px'
                    ],
                    [
                        'height',
                        rect.height() + 'px'
                    ]
                ];
            },
            renderPosition: function () {
                return renderAllAttr(this.mapPosition());
            },
            mapSource: function (encode) {
                var src = this.srcElement.src();
                if (encode) {
                    src = kendo.htmlEncode(src);
                }
                return [[
                        'xlink:href',
                        src
                    ]];
            },
            renderSource: function () {
                return renderAllAttr(this.mapSource(true));
            },
            template: renderTemplate('<image preserveAspectRatio=\'none\' #= d.renderStyle() # #= d.renderTransform()# #= d.renderOpacity() # ' + '#= d.renderPosition() # #= d.renderSource() # #= d.renderDefinitions()#>' + '</image>')
        });
        var GradientStopNode = Node.extend({
            template: renderTemplate('<stop #=d.renderOffset()# #=d.renderStyle()# />'),
            renderOffset: function () {
                return renderAttr('offset', this.srcElement.offset());
            },
            mapStyle: function () {
                var srcElement = this.srcElement;
                return [
                    [
                        'stop-color',
                        srcElement.color()
                    ],
                    [
                        'stop-opacity',
                        srcElement.opacity()
                    ]
                ];
            },
            optionsChange: function (e) {
                if (e.field == 'offset') {
                    this.attr(e.field, e.value);
                } else if (e.field == 'color' || e.field == 'opacity') {
                    this.css('stop-' + e.field, e.value);
                }
            }
        });
        var GradientNode = Node.extend({
            init: function (srcElement) {
                Node.fn.init.call(this, srcElement);
                this.id = srcElement.id;
                this.loadStops();
            },
            loadStops: function () {
                var srcElement = this.srcElement;
                var stops = srcElement.stops;
                var element = this.element;
                var stopNode;
                var idx;
                for (idx = 0; idx < stops.length; idx++) {
                    stopNode = new GradientStopNode(stops[idx]);
                    this.append(stopNode);
                    if (element) {
                        stopNode.attachTo(element);
                    }
                }
            },
            optionsChange: function (e) {
                if (e.field == 'gradient.stops') {
                    BaseNode.fn.clear.call(this);
                    this.loadStops();
                } else if (e.field == GRADIENT) {
                    this.allAttr(this.mapCoordinates());
                }
            },
            renderCoordinates: function () {
                return renderAllAttr(this.mapCoordinates());
            },
            mapSpace: function () {
                return [
                    'gradientUnits',
                    this.srcElement.userSpace() ? 'userSpaceOnUse' : 'objectBoundingBox'
                ];
            }
        });
        var LinearGradientNode = GradientNode.extend({
            template: renderTemplate('<linearGradient id=\'#=d.id#\' #=d.renderCoordinates()#>' + '#= d.renderChildren()#' + '</linearGradient>'),
            mapCoordinates: function () {
                var srcElement = this.srcElement;
                var start = srcElement.start();
                var end = srcElement.end();
                var attrs = [
                    [
                        'x1',
                        start.x
                    ],
                    [
                        'y1',
                        start.y
                    ],
                    [
                        'x2',
                        end.x
                    ],
                    [
                        'y2',
                        end.y
                    ],
                    this.mapSpace()
                ];
                return attrs;
            }
        });
        var RadialGradientNode = GradientNode.extend({
            template: renderTemplate('<radialGradient id=\'#=d.id#\' #=d.renderCoordinates()#>' + '#= d.renderChildren()#' + '</radialGradient>'),
            mapCoordinates: function () {
                var srcElement = this.srcElement;
                var center = srcElement.center();
                var radius = srcElement.radius();
                var attrs = [
                    [
                        'cx',
                        center.x
                    ],
                    [
                        'cy',
                        center.y
                    ],
                    [
                        'r',
                        radius
                    ],
                    this.mapSpace()
                ];
                return attrs;
            }
        });
        var RectNode = PathNode.extend({
            geometryChange: function () {
                var geometry = this.srcElement.geometry();
                this.attr('x', geometry.origin.x);
                this.attr('y', geometry.origin.y);
                this.attr('width', geometry.size.width);
                this.attr('height', geometry.size.height);
                this.invalidate();
            },
            size: function () {
                return this.srcElement.geometry().size;
            },
            origin: function () {
                return this.srcElement.geometry().origin;
            },
            template: renderTemplate('<rect #= d.renderStyle() # #= d.renderOpacity() # ' + 'x=\'#= d.origin().x #\' y=\'#= d.origin().y #\' ' + 'width=\'#= d.size().width #\' height=\'#= d.size().height #\'' + '#= d.renderStroke() # ' + '#= d.renderFill() # ' + '#= d.renderDefinitions() # ' + '#= d.renderTransform() # />')
        });
        var nodeMap = {
            Group: GroupNode,
            Text: TextNode,
            Path: PathNode,
            MultiPath: MultiPathNode,
            Circle: CircleNode,
            Arc: ArcNode,
            Image: ImageNode,
            Rect: RectNode
        };
        var renderSVG = function (container, svg) {
            container.innerHTML = svg;
        };
        (function () {
            var testFragment = '<svg xmlns=\'' + SVG_NS + '\'></svg>', testContainer = doc.createElement('div'), hasParser = typeof DOMParser != UNDEFINED;
            testContainer.innerHTML = testFragment;
            if (hasParser && testContainer.firstChild.namespaceURI != SVG_NS) {
                renderSVG = function (container, svg) {
                    var parser = new DOMParser(), chartDoc = parser.parseFromString(svg, 'text/xml'), importedDoc = doc.adoptNode(chartDoc.documentElement);
                    container.innerHTML = '';
                    container.appendChild(importedDoc);
                };
            }
        }());
        function alignToScreen(element) {
            var ctm;
            try {
                ctm = element.getScreenCTM ? element.getScreenCTM() : null;
            } catch (e) {
            }
            if (ctm) {
                var left = -ctm.e % 1, top = -ctm.f % 1, style = element.style;
                if (left !== 0 || top !== 0) {
                    style.left = left + 'px';
                    style.top = top + 'px';
                }
            }
        }
        function baseUrl() {
            var base = document.getElementsByTagName('base')[0], url = '', href = document.location.href, hashIndex = href.indexOf('#');
            if (base && !kendo.support.browser.msie) {
                if (hashIndex !== -1) {
                    href = href.substring(0, hashIndex);
                }
                url = href;
            }
            return url;
        }
        function refUrl(id) {
            return 'url(' + baseUrl() + '#' + id + ')';
        }
        function exportGroup(group) {
            var root = new RootNode();
            var bbox = group.clippedBBox();
            if (bbox) {
                var origin = bbox.getOrigin();
                var exportRoot = new d.Group();
                exportRoot.transform(g.transform().translate(-origin.x, -origin.y));
                exportRoot.children.push(group);
                group = exportRoot;
            }
            root.load([group]);
            var svg = '<?xml version=\'1.0\' ?>' + '<svg xmlns=\'' + SVG_NS + '\' ' + 'xmlns:xlink=\'http://www.w3.org/1999/xlink\' ' + 'version=\'1.1\'>' + root.render() + '</svg>';
            root.destroy();
            return svg;
        }
        function exportSVG(group, options) {
            var svg = exportGroup(group);
            if (!options || !options.raw) {
                svg = 'data:image/svg+xml;base64,' + util.encodeBase64(svg);
            }
            return $.Deferred().resolve(svg).promise();
        }
        function isDefinition(type, value) {
            return type == 'clip' || type == 'fill' && (!value || value.nodeType == GRADIENT);
        }
        function decodeEntities(text) {
            if (!text || !text.indexOf || text.indexOf('&') < 0) {
                return text;
            } else {
                var element = decodeEntities._element;
                element.innerHTML = text;
                return element.textContent || element.innerText;
            }
        }
        decodeEntities._element = document.createElement('span');
        var DefinitionMap = {
            clip: 'clip-path',
            fill: 'fill'
        };
        kendo.support.svg = function () {
            return doc.implementation.hasFeature('http://www.w3.org/TR/SVG11/feature#BasicStructure', '1.1');
        }();
        if (kendo.support.svg) {
            d.SurfaceFactory.current.register('svg', Surface, 10);
        }
        deepExtend(d, {
            exportSVG: exportSVG,
            svg: {
                ArcNode: ArcNode,
                CircleNode: CircleNode,
                ClipNode: ClipNode,
                DefinitionNode: DefinitionNode,
                GradientStopNode: GradientStopNode,
                GroupNode: GroupNode,
                ImageNode: ImageNode,
                LinearGradientNode: LinearGradientNode,
                MultiPathNode: MultiPathNode,
                Node: Node,
                PathNode: PathNode,
                RadialGradientNode: RadialGradientNode,
                RectNode: RectNode,
                RootNode: RootNode,
                Surface: Surface,
                TextNode: TextNode,
                _exportGroup: exportGroup
            }
        });
    }(window.kendo.jQuery));
}, typeof define == 'function' && define.amd ? define : function (a1, a2, a3) {
    (a3 || a2)();
}));
(function (f, define) {
    define('drawing/canvas', [
        'drawing/search',
        'kendo.color'
    ], f);
}(function () {
    (function ($) {
        var doc = document, kendo = window.kendo, deepExtend = kendo.deepExtend, util = kendo.util, defined = util.defined, isTransparent = util.isTransparent, renderTemplate = util.renderTemplate, valueOrDefault = util.valueOrDefault, g = kendo.geometry, d = kendo.drawing, BaseNode = d.BaseNode, proxy = $.proxy;
        var BUTT = 'butt', DASH_ARRAYS = d.DASH_ARRAYS, FRAME_DELAY = 1000 / 60, SOLID = 'solid', NS = '.kendo';
        var Surface = d.Surface.extend({
            init: function (element, options) {
                d.Surface.fn.init.call(this, element, options);
                this.element[0].innerHTML = this._template(this);
                var canvas = this.element[0].firstElementChild;
                canvas.width = $(element).width();
                canvas.height = $(element).height();
                this._rootElement = canvas;
                this._root = new RootNode(canvas);
            },
            destroy: function () {
                d.Surface.fn.destroy.call(this);
                if (this._root) {
                    this._root.destroy();
                    this._root = null;
                }
                if (this._searchTree) {
                    this._searchTree.clear();
                    delete this._searchTree;
                }
                this.element.off(NS);
            },
            type: 'canvas',
            draw: function (element) {
                d.Surface.fn.draw.call(this, element);
                this._root.load([element], undefined, this.options.cors);
                if (this._searchTree) {
                    this._searchTree.add([element]);
                }
            },
            clear: function () {
                d.Surface.fn.clear.call(this);
                this._root.clear();
                if (this._searchTree) {
                    this._searchTree.clear();
                }
            },
            eventTarget: function (e) {
                if (this._searchTree) {
                    var point = this._surfacePoint(e);
                    var shape = this._searchTree.pointShape(point);
                    return shape;
                }
            },
            image: function () {
                var root = this._root;
                var rootElement = this._rootElement;
                var loadingStates = [];
                root.traverse(function (childNode) {
                    if (childNode.loading) {
                        loadingStates.push(childNode.loading);
                    }
                });
                var defer = $.Deferred();
                $.when.apply($, loadingStates).done(function () {
                    root._invalidate();
                    try {
                        var data = rootElement.toDataURL();
                        defer.resolve(data);
                    } catch (e) {
                        defer.reject(e);
                    }
                }).fail(function (e) {
                    defer.reject(e);
                });
                return defer.promise();
            },
            suspendTracking: function () {
                d.Surface.fn.suspendTracking.call(this);
                if (this._searchTree) {
                    this._searchTree.clear();
                    delete this._searchTree;
                }
            },
            resumeTracking: function () {
                d.Surface.fn.resumeTracking.call(this);
                if (!this._searchTree) {
                    this._searchTree = new d.ShapesQuadTree();
                    var childNodes = this._root.childNodes;
                    var rootElements = [];
                    for (var idx = 0; idx < childNodes.length; idx++) {
                        rootElements.push(childNodes[idx].srcElement);
                    }
                    this._searchTree.add(rootElements);
                }
            },
            _resize: function () {
                this._rootElement.width = this._size.width;
                this._rootElement.height = this._size.height;
                this._root.invalidate();
            },
            _template: renderTemplate('<canvas style=\'width: 100%; height: 100%;\'></canvas>'),
            _enableTracking: function () {
                this._searchTree = new d.ShapesQuadTree();
                this._mouseTrackHandler = proxy(this._trackMouse, this);
                this.element.on('click' + NS, this._mouseTrackHandler);
                this.element.on('mousemove' + NS, this._mouseTrackHandler);
                d.Surface.fn._enableTracking.call(this);
            },
            _trackMouse: function (e) {
                if (this._suspendedTracking) {
                    return;
                }
                var shape = this.eventTarget(e);
                if (e.type != 'click') {
                    var currentShape = this._currentShape;
                    if (currentShape && currentShape !== shape) {
                        this.trigger('mouseleave', {
                            element: currentShape,
                            originalEvent: e,
                            type: 'mouseleave'
                        });
                    }
                    if (shape && currentShape !== shape) {
                        this.trigger('mouseenter', {
                            element: shape,
                            originalEvent: e,
                            type: 'mouseenter'
                        });
                    }
                    this.trigger('mousemove', {
                        element: shape,
                        originalEvent: e,
                        type: 'mousemove'
                    });
                    this._currentShape = shape;
                } else if (shape) {
                    this.trigger('click', {
                        element: shape,
                        originalEvent: e,
                        type: 'click'
                    });
                }
            }
        });
        var Node = BaseNode.extend({
            init: function (srcElement) {
                BaseNode.fn.init.call(this, srcElement);
                if (srcElement) {
                    this.initClip();
                }
            },
            initClip: function () {
                var clip = this.srcElement.clip();
                if (clip) {
                    this.clip = clip;
                    clip.addObserver(this);
                }
            },
            clear: function () {
                if (this.srcElement) {
                    this.srcElement.removeObserver(this);
                }
                this.clearClip();
                BaseNode.fn.clear.call(this);
            },
            clearClip: function () {
                if (this.clip) {
                    this.clip.removeObserver(this);
                    delete this.clip;
                }
            },
            setClip: function (ctx) {
                if (this.clip) {
                    ctx.beginPath();
                    PathNode.fn.renderPoints(ctx, this.clip);
                    ctx.clip();
                }
            },
            optionsChange: function (e) {
                if (e.field == 'clip') {
                    this.clearClip();
                    this.initClip();
                }
                BaseNode.fn.optionsChange.call(this, e);
            },
            setTransform: function (ctx) {
                if (this.srcElement) {
                    var transform = this.srcElement.transform();
                    if (transform) {
                        ctx.transform.apply(ctx, transform.matrix().toArray(6));
                    }
                }
            },
            loadElements: function (elements, pos, cors) {
                var node = this, childNode, srcElement, children, i;
                for (i = 0; i < elements.length; i++) {
                    srcElement = elements[i];
                    children = srcElement.children;
                    childNode = new nodeMap[srcElement.nodeType](srcElement, cors);
                    if (children && children.length > 0) {
                        childNode.load(children, pos, cors);
                    }
                    if (defined(pos)) {
                        node.insertAt(childNode, pos);
                    } else {
                        node.append(childNode);
                    }
                }
            },
            load: function (elements, pos, cors) {
                this.loadElements(elements, pos, cors);
                this.invalidate();
            },
            setOpacity: function (ctx) {
                if (this.srcElement) {
                    var opacity = this.srcElement.opacity();
                    if (defined(opacity)) {
                        this.globalAlpha(ctx, opacity);
                    }
                }
            },
            globalAlpha: function (ctx, value) {
                if (value && ctx.globalAlpha) {
                    value *= ctx.globalAlpha;
                }
                ctx.globalAlpha = value;
            },
            visible: function () {
                var src = this.srcElement;
                return !src || src && src.options.visible !== false;
            }
        });
        var GroupNode = Node.extend({
            renderTo: function (ctx) {
                if (!this.visible()) {
                    return;
                }
                ctx.save();
                this.setTransform(ctx);
                this.setClip(ctx);
                this.setOpacity(ctx);
                var childNodes = this.childNodes;
                for (var i = 0; i < childNodes.length; i++) {
                    var child = childNodes[i];
                    if (child.visible()) {
                        child.renderTo(ctx);
                    }
                }
                ctx.restore();
            }
        });
        d.mixins.Traversable.extend(GroupNode.fn, 'childNodes');
        var RootNode = GroupNode.extend({
            init: function (canvas) {
                GroupNode.fn.init.call(this);
                this.canvas = canvas;
                this.ctx = canvas.getContext('2d');
                var invalidateHandler = proxy(this._invalidate, this);
                this.invalidate = kendo.throttle(function () {
                    kendo.animationFrame(invalidateHandler);
                }, FRAME_DELAY);
            },
            destroy: function () {
                GroupNode.fn.destroy.call(this);
                this.canvas = null;
                this.ctx = null;
            },
            load: function (elements, pos, cors) {
                this.loadElements(elements, pos, cors);
                this._invalidate();
            },
            _invalidate: function () {
                if (!this.ctx) {
                    return;
                }
                this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
                this.renderTo(this.ctx);
            }
        });
        d.mixins.Traversable.extend(RootNode.fn, 'childNodes');
        var PathNode = Node.extend({
            renderTo: function (ctx) {
                ctx.save();
                this.setTransform(ctx);
                this.setClip(ctx);
                this.setOpacity(ctx);
                ctx.beginPath();
                this.renderPoints(ctx, this.srcElement);
                this.setLineDash(ctx);
                this.setLineCap(ctx);
                this.setLineJoin(ctx);
                this.setFill(ctx);
                this.setStroke(ctx);
                ctx.restore();
            },
            setFill: function (ctx) {
                var fill = this.srcElement.options.fill;
                var hasFill = false;
                if (fill) {
                    if (fill.nodeType == 'gradient') {
                        this.setGradientFill(ctx, fill);
                        hasFill = true;
                    } else if (!isTransparent(fill.color)) {
                        ctx.fillStyle = fill.color;
                        ctx.save();
                        this.globalAlpha(ctx, fill.opacity);
                        ctx.fill();
                        ctx.restore();
                        hasFill = true;
                    }
                }
                return hasFill;
            },
            setGradientFill: function (ctx, fill) {
                var bbox = this.srcElement.rawBBox();
                var gradient;
                if (fill instanceof d.LinearGradient) {
                    var start = fill.start();
                    var end = fill.end();
                    gradient = ctx.createLinearGradient(start.x, start.y, end.x, end.y);
                } else if (fill instanceof d.RadialGradient) {
                    var center = fill.center();
                    gradient = ctx.createRadialGradient(center.x, center.y, 0, center.x, center.y, fill.radius());
                }
                addGradientStops(gradient, fill.stops);
                ctx.save();
                if (!fill.userSpace()) {
                    ctx.transform(bbox.width(), 0, 0, bbox.height(), bbox.origin.x, bbox.origin.y);
                }
                ctx.fillStyle = gradient;
                ctx.fill();
                ctx.restore();
            },
            setStroke: function (ctx) {
                var stroke = this.srcElement.options.stroke;
                if (stroke && !isTransparent(stroke.color) && stroke.width > 0) {
                    ctx.strokeStyle = stroke.color;
                    ctx.lineWidth = valueOrDefault(stroke.width, 1);
                    ctx.save();
                    this.globalAlpha(ctx, stroke.opacity);
                    ctx.stroke();
                    ctx.restore();
                    return true;
                }
            },
            dashType: function () {
                var stroke = this.srcElement.options.stroke;
                if (stroke && stroke.dashType) {
                    return stroke.dashType.toLowerCase();
                }
            },
            setLineDash: function (ctx) {
                var dashType = this.dashType();
                if (dashType && dashType != SOLID) {
                    var dashArray = DASH_ARRAYS[dashType];
                    if (ctx.setLineDash) {
                        ctx.setLineDash(dashArray);
                    } else {
                        ctx.mozDash = dashArray;
                        ctx.webkitLineDash = dashArray;
                    }
                }
            },
            setLineCap: function (ctx) {
                var dashType = this.dashType();
                var stroke = this.srcElement.options.stroke;
                if (dashType && dashType !== SOLID) {
                    ctx.lineCap = BUTT;
                } else if (stroke && stroke.lineCap) {
                    ctx.lineCap = stroke.lineCap;
                }
            },
            setLineJoin: function (ctx) {
                var stroke = this.srcElement.options.stroke;
                if (stroke && stroke.lineJoin) {
                    ctx.lineJoin = stroke.lineJoin;
                }
            },
            renderPoints: function (ctx, path) {
                var segments = path.segments;
                if (segments.length === 0) {
                    return;
                }
                var seg = segments[0];
                var anchor = seg.anchor();
                ctx.moveTo(anchor.x, anchor.y);
                for (var i = 1; i < segments.length; i++) {
                    seg = segments[i];
                    anchor = seg.anchor();
                    var prevSeg = segments[i - 1];
                    var prevOut = prevSeg.controlOut();
                    var controlIn = seg.controlIn();
                    if (prevOut && controlIn) {
                        ctx.bezierCurveTo(prevOut.x, prevOut.y, controlIn.x, controlIn.y, anchor.x, anchor.y);
                    } else {
                        ctx.lineTo(anchor.x, anchor.y);
                    }
                }
                if (path.options.closed) {
                    ctx.closePath();
                }
            }
        });
        var MultiPathNode = PathNode.extend({
            renderPoints: function (ctx) {
                var paths = this.srcElement.paths;
                for (var i = 0; i < paths.length; i++) {
                    PathNode.fn.renderPoints(ctx, paths[i]);
                }
            }
        });
        var CircleNode = PathNode.extend({
            renderPoints: function (ctx) {
                var geometry = this.srcElement.geometry();
                var c = geometry.center;
                var r = geometry.radius;
                ctx.arc(c.x, c.y, r, 0, Math.PI * 2);
            }
        });
        var ArcNode = PathNode.extend({
            renderPoints: function (ctx) {
                var path = this.srcElement.toPath();
                PathNode.fn.renderPoints.call(this, ctx, path);
            }
        });
        var TextNode = PathNode.extend({
            renderTo: function (ctx) {
                var text = this.srcElement;
                var pos = text.position();
                var size = text.measure();
                ctx.save();
                this.setTransform(ctx);
                this.setClip(ctx);
                this.setOpacity(ctx);
                ctx.beginPath();
                ctx.font = text.options.font;
                if (this.setFill(ctx)) {
                    ctx.fillText(text.content(), pos.x, pos.y + size.baseline);
                }
                if (this.setStroke(ctx)) {
                    this.setLineDash(ctx);
                    ctx.strokeText(text.content(), pos.x, pos.y + size.baseline);
                }
                ctx.restore();
            }
        });
        var ImageNode = PathNode.extend({
            init: function (srcElement, cors) {
                PathNode.fn.init.call(this, srcElement);
                this.onLoad = proxy(this.onLoad, this);
                this.onError = proxy(this.onError, this);
                this.loading = $.Deferred();
                var img = this.img = new Image();
                if (cors && !/^data:/i.test(srcElement.src())) {
                    img.crossOrigin = cors;
                }
                img.src = srcElement.src();
                if (img.complete) {
                    this.onLoad();
                } else {
                    img.onload = this.onLoad;
                    img.onerror = this.onError;
                }
            },
            renderTo: function (ctx) {
                if (this.loading.state() === 'resolved') {
                    ctx.save();
                    this.setTransform(ctx);
                    this.setClip(ctx);
                    this.drawImage(ctx);
                    ctx.restore();
                }
            },
            optionsChange: function (e) {
                if (e.field === 'src') {
                    this.loading = $.Deferred();
                    this.img.src = this.srcElement.src();
                } else {
                    PathNode.fn.optionsChange.call(this, e);
                }
            },
            onLoad: function () {
                this.loading.resolve();
                this.invalidate();
            },
            onError: function () {
                this.loading.reject(new Error('Unable to load image \'' + this.img.src + '\'. Check for connectivity and verify CORS headers.'));
            },
            drawImage: function (ctx) {
                var rect = this.srcElement.rect();
                var tl = rect.topLeft();
                ctx.drawImage(this.img, tl.x, tl.y, rect.width(), rect.height());
            }
        });
        var RectNode = PathNode.extend({
            renderPoints: function (ctx) {
                var geometry = this.srcElement.geometry();
                var origin = geometry.origin;
                var size = geometry.size;
                ctx.rect(origin.x, origin.y, size.width, size.height);
            }
        });
        function exportImage(group, options) {
            var defaults = {
                width: '800px',
                height: '600px',
                cors: 'Anonymous'
            };
            var bbox = group.clippedBBox();
            if (bbox) {
                var origin = bbox.getOrigin();
                var exportRoot = new d.Group();
                exportRoot.transform(g.transform().translate(-origin.x, -origin.y));
                exportRoot.children.push(group);
                group = exportRoot;
                var size = bbox.getSize();
                defaults.width = size.width + 'px';
                defaults.height = size.height + 'px';
            }
            options = deepExtend(defaults, options);
            var container = $('<div />').css({
                display: 'none',
                width: options.width,
                height: options.height
            }).appendTo(document.body);
            var surface = new Surface(container, options);
            surface.suspendTracking();
            surface.draw(group);
            var promise = surface.image();
            promise.always(function () {
                surface.destroy();
                container.remove();
            });
            return promise;
        }
        var nodeMap = {
            Group: GroupNode,
            Text: TextNode,
            Path: PathNode,
            MultiPath: MultiPathNode,
            Circle: CircleNode,
            Arc: ArcNode,
            Image: ImageNode,
            Rect: RectNode
        };
        function addGradientStops(gradient, stops) {
            var color, stop, idx;
            for (idx = 0; idx < stops.length; idx++) {
                stop = stops[idx];
                color = kendo.parseColor(stop.color());
                color.a *= stop.opacity();
                gradient.addColorStop(stop.offset(), color.toCssRgba());
            }
        }
        kendo.support.canvas = function () {
            return !!doc.createElement('canvas').getContext;
        }();
        if (kendo.support.canvas) {
            d.SurfaceFactory.current.register('canvas', Surface, 20);
        }
        deepExtend(kendo.drawing, {
            exportImage: exportImage,
            canvas: {
                ArcNode: ArcNode,
                CircleNode: CircleNode,
                GroupNode: GroupNode,
                ImageNode: ImageNode,
                MultiPathNode: MultiPathNode,
                Node: Node,
                PathNode: PathNode,
                RectNode: RectNode,
                RootNode: RootNode,
                Surface: Surface,
                TextNode: TextNode
            }
        });
    }(window.kendo.jQuery));
}, typeof define == 'function' && define.amd ? define : function (a1, a2, a3) {
    (a3 || a2)();
}));
(function (f, define) {
    define('drawing/vml', [
        'drawing/shapes',
        'kendo.color'
    ], f);
}(function () {
    (function ($) {
        var doc = document, math = Math, atan2 = math.atan2, ceil = math.ceil, sqrt = math.sqrt, kendo = window.kendo, deepExtend = kendo.deepExtend, noop = $.noop, d = kendo.drawing, BaseNode = d.BaseNode, g = kendo.geometry, toMatrix = g.toMatrix, Color = kendo.Color, util = kendo.util, isTransparent = util.isTransparent, defined = util.defined, deg = util.deg, round = util.round, valueOrDefault = util.valueOrDefault;
        var NONE = 'none', NS = '.kendo', COORDINATE_MULTIPLE = 100, COORDINATE_SIZE = COORDINATE_MULTIPLE * COORDINATE_MULTIPLE, GRADIENT = 'gradient', TRANSFORM_PRECISION = 4;
        var Surface = d.Surface.extend({
            init: function (element, options) {
                d.Surface.fn.init.call(this, element, options);
                enableVML();
                this.element.empty();
                this._root = new RootNode();
                this._root.attachTo(this.element[0]);
                this.element.on('click' + NS, this._click);
                this.element.on('mouseover' + NS, this._mouseenter);
                this.element.on('mouseout' + NS, this._mouseleave);
                this.element.on('mousemove' + NS, this._mousemove);
            },
            type: 'vml',
            destroy: function () {
                if (this._root) {
                    this._root.destroy();
                    this._root = null;
                    this.element.off(NS);
                }
                d.Surface.fn.destroy.call(this);
            },
            draw: function (element) {
                d.Surface.fn.draw.call(this, element);
                this._root.load([element], undefined, null);
            },
            clear: function () {
                d.Surface.fn.clear.call(this);
                this._root.clear();
            }
        });
        var Node = BaseNode.extend({
            init: function (srcElement) {
                BaseNode.fn.init.call(this, srcElement);
                this.createElement();
                this.attachReference();
            },
            observe: noop,
            destroy: function () {
                if (this.element) {
                    this.element._kendoNode = null;
                    this.element = null;
                }
                BaseNode.fn.destroy.call(this);
            },
            clear: function () {
                if (this.element) {
                    this.element.innerHTML = '';
                }
                var children = this.childNodes;
                for (var i = 0; i < children.length; i++) {
                    children[i].destroy();
                }
                this.childNodes = [];
            },
            removeSelf: function () {
                if (this.element) {
                    this.element.parentNode.removeChild(this.element);
                    this.element = null;
                }
                BaseNode.fn.removeSelf.call(this);
            },
            createElement: function () {
                this.element = doc.createElement('div');
            },
            attachReference: function () {
                this.element._kendoNode = this;
            },
            load: function (elements, pos, transform, opacity) {
                opacity = valueOrDefault(opacity, 1);
                if (this.srcElement) {
                    opacity *= valueOrDefault(this.srcElement.options.opacity, 1);
                }
                for (var i = 0; i < elements.length; i++) {
                    var srcElement = elements[i];
                    var children = srcElement.children;
                    var combinedTransform = srcElement.currentTransform(transform);
                    var currentOpacity = opacity * valueOrDefault(srcElement.options.opacity, 1);
                    var childNode = new nodeMap[srcElement.nodeType](srcElement, combinedTransform, currentOpacity);
                    if (children && children.length > 0) {
                        childNode.load(children, pos, combinedTransform, opacity);
                    }
                    if (defined(pos)) {
                        this.insertAt(childNode, pos);
                    } else {
                        this.append(childNode);
                    }
                    childNode.attachTo(this.element, pos);
                }
            },
            attachTo: function (domElement, pos) {
                if (defined(pos)) {
                    domElement.insertBefore(this.element, domElement.children[pos] || null);
                } else {
                    domElement.appendChild(this.element);
                }
            },
            optionsChange: function (e) {
                if (e.field == 'visible') {
                    this.css('display', e.value !== false ? '' : NONE);
                }
            },
            setStyle: function () {
                this.allCss(this.mapStyle());
            },
            mapStyle: function () {
                var style = [];
                if (this.srcElement && this.srcElement.options.visible === false) {
                    style.push([
                        'display',
                        NONE
                    ]);
                }
                return style;
            },
            mapOpacityTo: function (attrs, multiplier) {
                var opacity = valueOrDefault(this.opacity, 1);
                opacity *= valueOrDefault(multiplier, 1);
                attrs.push([
                    'opacity',
                    opacity
                ]);
            },
            attr: function (name, value) {
                if (this.element) {
                    this.element[name] = value;
                }
            },
            allAttr: function (attrs) {
                for (var i = 0; i < attrs.length; i++) {
                    this.attr(attrs[i][0], attrs[i][1]);
                }
            },
            css: function (name, value) {
                if (this.element) {
                    this.element.style[name] = value;
                }
            },
            allCss: function (styles) {
                for (var i = 0; i < styles.length; i++) {
                    this.css(styles[i][0], styles[i][1]);
                }
            }
        });
        var RootNode = Node.extend({
            createElement: function () {
                Node.fn.createElement.call(this);
                this.allCss([
                    [
                        'width',
                        '100%'
                    ],
                    [
                        'height',
                        '100%'
                    ],
                    [
                        'position',
                        'relative'
                    ],
                    [
                        'visibility',
                        'visible'
                    ]
                ]);
            },
            attachReference: noop
        });
        var ClipObserver = kendo.Class.extend({
            init: function (srcElement, observer) {
                this.srcElement = srcElement;
                this.observer = observer;
                srcElement.addObserver(this);
            },
            geometryChange: function () {
                this.observer.optionsChange({
                    field: 'clip',
                    value: this.srcElement
                });
            },
            clear: function () {
                this.srcElement.removeObserver(this);
            }
        });
        var ObserverNode = Node.extend({
            init: function (srcElement) {
                Node.fn.init.call(this, srcElement);
                if (srcElement) {
                    this.initClip();
                }
            },
            observe: function () {
                BaseNode.fn.observe.call(this);
            },
            mapStyle: function () {
                var style = Node.fn.mapStyle.call(this);
                if (this.srcElement && this.srcElement.clip()) {
                    style.push([
                        'clip',
                        this.clipRect()
                    ]);
                }
                return style;
            },
            optionsChange: function (e) {
                if (e.field == 'clip') {
                    this.clearClip();
                    this.initClip();
                    this.setClip();
                }
                Node.fn.optionsChange.call(this, e);
            },
            clear: function () {
                this.clearClip();
                Node.fn.clear.call(this);
            },
            initClip: function () {
                if (this.srcElement.clip()) {
                    this.clip = new ClipObserver(this.srcElement.clip(), this);
                    this.clip.observer = this;
                }
            },
            clearClip: function () {
                if (this.clip) {
                    this.clip.clear();
                    this.clip = null;
                    this.css('clip', this.clipRect());
                }
            },
            setClip: function () {
                if (this.clip) {
                    this.css('clip', this.clipRect());
                }
            },
            clipRect: function () {
                var clipRect = EMPTY_CLIP;
                var clip = this.srcElement.clip();
                if (clip) {
                    var bbox = this.clipBBox(clip);
                    var topLeft = bbox.topLeft();
                    var bottomRight = bbox.bottomRight();
                    clipRect = kendo.format('rect({0}px {1}px {2}px {3}px)', topLeft.y, bottomRight.x, bottomRight.y, topLeft.x);
                }
                return clipRect;
            },
            clipBBox: function (clip) {
                var topLeft = this.srcElement.rawBBox().topLeft();
                var clipBBox = clip.rawBBox();
                clipBBox.origin.translate(-topLeft.x, -topLeft.y);
                return clipBBox;
            }
        });
        var GroupNode = ObserverNode.extend({
            createElement: function () {
                Node.fn.createElement.call(this);
                this.setStyle();
            },
            attachTo: function (domElement, pos) {
                this.css('display', NONE);
                Node.fn.attachTo.call(this, domElement, pos);
                if (this.srcElement.options.visible !== false) {
                    this.css('display', '');
                }
            },
            _attachTo: function (domElement) {
                var frag = document.createDocumentFragment();
                frag.appendChild(this.element);
                domElement.appendChild(frag);
            },
            mapStyle: function () {
                var style = ObserverNode.fn.mapStyle.call(this);
                style.push([
                    'position',
                    'absolute'
                ]);
                style.push([
                    'white-space',
                    'nowrap'
                ]);
                return style;
            },
            optionsChange: function (e) {
                if (e.field === 'transform') {
                    this.refreshTransform();
                }
                if (e.field === 'opacity') {
                    this.refreshOpacity();
                }
                ObserverNode.fn.optionsChange.call(this, e);
            },
            refreshTransform: function (transform) {
                var currentTransform = this.srcElement.currentTransform(transform), children = this.childNodes, length = children.length, i;
                this.setClip();
                for (i = 0; i < length; i++) {
                    children[i].refreshTransform(currentTransform);
                }
            },
            currentOpacity: function () {
                var opacity = valueOrDefault(this.srcElement.options.opacity, 1);
                if (this.parent && this.parent.currentOpacity) {
                    opacity *= this.parent.currentOpacity();
                }
                return opacity;
            },
            refreshOpacity: function () {
                var children = this.childNodes, length = children.length, i;
                var opacity = this.currentOpacity();
                for (i = 0; i < length; i++) {
                    children[i].refreshOpacity(opacity);
                }
            },
            initClip: function () {
                ObserverNode.fn.initClip.call(this);
                if (this.clip) {
                    var bbox = this.clip.srcElement.bbox(this.srcElement.currentTransform());
                    if (bbox) {
                        this.css('width', bbox.width() + bbox.origin.x);
                        this.css('height', bbox.height() + bbox.origin.y);
                    }
                }
            },
            clipBBox: function (clip) {
                return clip.bbox(this.srcElement.currentTransform());
            },
            clearClip: function () {
                ObserverNode.fn.clearClip.call(this);
            }
        });
        var StrokeNode = Node.extend({
            init: function (srcElement, opacity) {
                this.opacity = opacity;
                Node.fn.init.call(this, srcElement);
            },
            createElement: function () {
                this.element = createElementVML('stroke');
                this.setOpacity();
            },
            optionsChange: function (e) {
                if (e.field.indexOf('stroke') === 0) {
                    this.setStroke();
                }
            },
            refreshOpacity: function (opacity) {
                this.opacity = opacity;
                this.setStroke();
            },
            setStroke: function () {
                this.allAttr(this.mapStroke());
            },
            setOpacity: function () {
                this.setStroke();
            },
            mapStroke: function () {
                var stroke = this.srcElement.options.stroke;
                var attrs = [];
                if (stroke && !isTransparent(stroke.color) && stroke.width !== 0) {
                    attrs.push([
                        'on',
                        'true'
                    ]);
                    attrs.push([
                        'color',
                        stroke.color
                    ]);
                    attrs.push([
                        'weight',
                        (stroke.width || 1) + 'px'
                    ]);
                    this.mapOpacityTo(attrs, stroke.opacity);
                    if (defined(stroke.dashType)) {
                        attrs.push([
                            'dashstyle',
                            stroke.dashType
                        ]);
                    }
                    if (defined(stroke.lineJoin)) {
                        attrs.push([
                            'joinstyle',
                            stroke.lineJoin
                        ]);
                    }
                    if (defined(stroke.lineCap)) {
                        var lineCap = stroke.lineCap.toLowerCase();
                        if (lineCap === 'butt') {
                            lineCap = lineCap === 'butt' ? 'flat' : lineCap;
                        }
                        attrs.push([
                            'endcap',
                            lineCap
                        ]);
                    }
                } else {
                    attrs.push([
                        'on',
                        'false'
                    ]);
                }
                return attrs;
            }
        });
        var FillNode = Node.extend({
            init: function (srcElement, transform, opacity) {
                this.opacity = opacity;
                Node.fn.init.call(this, srcElement);
            },
            createElement: function () {
                this.element = createElementVML('fill');
                this.setFill();
            },
            optionsChange: function (e) {
                if (fillField(e.field)) {
                    this.setFill();
                }
            },
            refreshOpacity: function (opacity) {
                this.opacity = opacity;
                this.setOpacity();
            },
            setFill: function () {
                this.allAttr(this.mapFill());
            },
            setOpacity: function () {
                this.setFill();
            },
            attr: function (name, value) {
                var element = this.element;
                if (element) {
                    var fields = name.split('.');
                    while (fields.length > 1) {
                        element = element[fields.shift()];
                    }
                    element[fields[0]] = value;
                }
            },
            mapFill: function () {
                var fill = this.srcElement.fill();
                var attrs = [[
                        'on',
                        'false'
                    ]];
                if (fill) {
                    if (fill.nodeType == GRADIENT) {
                        attrs = this.mapGradient(fill);
                    } else if (!isTransparent(fill.color)) {
                        attrs = this.mapFillColor(fill);
                    }
                }
                return attrs;
            },
            mapFillColor: function (fill) {
                var attrs = [
                    [
                        'on',
                        'true'
                    ],
                    [
                        'color',
                        fill.color
                    ]
                ];
                this.mapOpacityTo(attrs, fill.opacity);
                return attrs;
            },
            mapGradient: function (fill) {
                var options = this.srcElement.options;
                var fallbackFill = options.fallbackFill || fill.fallbackFill && fill.fallbackFill();
                var attrs;
                if (fill instanceof d.LinearGradient) {
                    attrs = this.mapLinearGradient(fill);
                } else if (fill instanceof d.RadialGradient && fill.supportVML) {
                    attrs = this.mapRadialGradient(fill);
                } else if (fallbackFill) {
                    attrs = this.mapFillColor(fallbackFill);
                } else {
                    attrs = [[
                            'on',
                            'false'
                        ]];
                }
                return attrs;
            },
            mapLinearGradient: function (fill) {
                var start = fill.start();
                var end = fill.end();
                var angle = util.deg(atan2(end.y - start.y, end.x - start.x));
                var attrs = [
                    [
                        'on',
                        'true'
                    ],
                    [
                        'type',
                        GRADIENT
                    ],
                    [
                        'focus',
                        0
                    ],
                    [
                        'method',
                        'none'
                    ],
                    [
                        'angle',
                        270 - angle
                    ]
                ];
                this.addColors(attrs);
                return attrs;
            },
            mapRadialGradient: function (fill) {
                var bbox = this.srcElement.rawBBox();
                var center = fill.center();
                var focusx = (center.x - bbox.origin.x) / bbox.width();
                var focusy = (center.y - bbox.origin.y) / bbox.height();
                var attrs = [
                    [
                        'on',
                        'true'
                    ],
                    [
                        'type',
                        'gradienttitle'
                    ],
                    [
                        'focus',
                        '100%'
                    ],
                    [
                        'focusposition',
                        focusx + ' ' + focusy
                    ],
                    [
                        'method',
                        'none'
                    ]
                ];
                this.addColors(attrs);
                return attrs;
            },
            addColors: function (attrs) {
                var options = this.srcElement.options;
                var opacity = valueOrDefault(this.opacity, 1);
                var stopColors = [];
                var stops = options.fill.stops;
                var baseColor = options.baseColor;
                var colorsField = this.element.colors ? 'colors.value' : 'colors';
                var color = stopColor(baseColor, stops[0], opacity);
                var color2 = stopColor(baseColor, stops[stops.length - 1], opacity);
                var stop;
                for (var idx = 0; idx < stops.length; idx++) {
                    stop = stops[idx];
                    stopColors.push(math.round(stop.offset() * 100) + '% ' + stopColor(baseColor, stop, opacity));
                }
                attrs.push([
                    colorsField,
                    stopColors.join(',')
                ], [
                    'color',
                    color
                ], [
                    'color2',
                    color2
                ]);
            }
        });
        var TransformNode = Node.extend({
            init: function (srcElement, transform) {
                this.transform = transform;
                Node.fn.init.call(this, srcElement);
            },
            createElement: function () {
                this.element = createElementVML('skew');
                this.setTransform();
            },
            optionsChange: function (e) {
                if (e.field === 'transform') {
                    this.refresh(this.srcElement.currentTransform());
                }
            },
            refresh: function (transform) {
                this.transform = transform;
                this.setTransform();
            },
            transformOrigin: function () {
                return '-0.5,-0.5';
            },
            setTransform: function () {
                this.allAttr(this.mapTransform());
            },
            mapTransform: function () {
                var transform = this.transform;
                var attrs = [], matrix = toMatrix(transform);
                if (matrix) {
                    matrix.round(TRANSFORM_PRECISION);
                    attrs.push([
                        'on',
                        'true'
                    ], [
                        'matrix',
                        [
                            matrix.a,
                            matrix.c,
                            matrix.b,
                            matrix.d,
                            0,
                            0
                        ].join(',')
                    ], [
                        'offset',
                        matrix.e + 'px,' + matrix.f + 'px'
                    ], [
                        'origin',
                        this.transformOrigin()
                    ]);
                } else {
                    attrs.push([
                        'on',
                        'false'
                    ]);
                }
                return attrs;
            }
        });
        var ShapeNode = ObserverNode.extend({
            init: function (srcElement, transform, opacity) {
                this.fill = this.createFillNode(srcElement, transform, opacity);
                this.stroke = new StrokeNode(srcElement, opacity);
                this.transform = this.createTransformNode(srcElement, transform);
                ObserverNode.fn.init.call(this, srcElement);
            },
            attachTo: function (domElement, pos) {
                this.fill.attachTo(this.element);
                this.stroke.attachTo(this.element);
                this.transform.attachTo(this.element);
                Node.fn.attachTo.call(this, domElement, pos);
            },
            createFillNode: function (srcElement, transform, opacity) {
                return new FillNode(srcElement, transform, opacity);
            },
            createTransformNode: function (srcElement, transform) {
                return new TransformNode(srcElement, transform);
            },
            createElement: function () {
                this.element = createElementVML('shape');
                this.setCoordsize();
                this.setStyle();
            },
            optionsChange: function (e) {
                if (fillField(e.field)) {
                    this.fill.optionsChange(e);
                } else if (e.field.indexOf('stroke') === 0) {
                    this.stroke.optionsChange(e);
                } else if (e.field === 'transform') {
                    this.transform.optionsChange(e);
                } else if (e.field === 'opacity') {
                    this.fill.setOpacity();
                    this.stroke.setOpacity();
                }
                ObserverNode.fn.optionsChange.call(this, e);
            },
            refreshTransform: function (transform) {
                this.transform.refresh(this.srcElement.currentTransform(transform));
            },
            refreshOpacity: function (opacity) {
                opacity *= valueOrDefault(this.srcElement.options.opacity, 1);
                this.fill.refreshOpacity(opacity);
                this.stroke.refreshOpacity(opacity);
            },
            mapStyle: function (width, height) {
                var styles = ObserverNode.fn.mapStyle.call(this);
                if (!width || !height) {
                    width = height = COORDINATE_MULTIPLE;
                }
                styles.push([
                    'position',
                    'absolute'
                ], [
                    'width',
                    width + 'px'
                ], [
                    'height',
                    height + 'px'
                ]);
                var cursor = this.srcElement.options.cursor;
                if (cursor) {
                    styles.push([
                        'cursor',
                        cursor
                    ]);
                }
                return styles;
            },
            setCoordsize: function () {
                this.allAttr([
                    [
                        'coordorigin',
                        '0 0'
                    ],
                    [
                        'coordsize',
                        COORDINATE_SIZE + ' ' + COORDINATE_SIZE
                    ]
                ]);
            }
        });
        var PathDataNode = Node.extend({
            createElement: function () {
                this.element = createElementVML('path');
                this.setPathData();
            },
            geometryChange: function () {
                this.setPathData();
            },
            setPathData: function () {
                this.attr('v', this.renderData());
            },
            renderData: function () {
                return printPath(this.srcElement);
            }
        });
        var PathNode = ShapeNode.extend({
            init: function (srcElement, transform, opacity) {
                this.pathData = this.createDataNode(srcElement);
                ShapeNode.fn.init.call(this, srcElement, transform, opacity);
            },
            attachTo: function (domElement, pos) {
                this.pathData.attachTo(this.element);
                ShapeNode.fn.attachTo.call(this, domElement, pos);
            },
            createDataNode: function (srcElement) {
                return new PathDataNode(srcElement);
            },
            geometryChange: function () {
                this.pathData.geometryChange();
                ShapeNode.fn.geometryChange.call(this);
            }
        });
        var MultiPathDataNode = PathDataNode.extend({
            renderData: function () {
                var paths = this.srcElement.paths;
                if (paths.length > 0) {
                    var result = [], i, open;
                    for (i = 0; i < paths.length; i++) {
                        open = i < paths.length - 1;
                        result.push(printPath(paths[i], open));
                    }
                    return result.join(' ');
                }
            }
        });
        var MultiPathNode = PathNode.extend({
            createDataNode: function (srcElement) {
                return new MultiPathDataNode(srcElement);
            }
        });
        var CircleTransformNode = TransformNode.extend({
            transformOrigin: function () {
                var boundingBox = this.srcElement.geometry().bbox(), center = boundingBox.center(), originX = -ceil(center.x) / ceil(boundingBox.width()), originY = -ceil(center.y) / ceil(boundingBox.height());
                return originX + ',' + originY;
            }
        });
        var CircleNode = ShapeNode.extend({
            createElement: function () {
                this.element = createElementVML('oval');
                this.setStyle();
            },
            createTransformNode: function (srcElement, transform) {
                return new CircleTransformNode(srcElement, transform);
            },
            geometryChange: function () {
                ShapeNode.fn.geometryChange.call(this);
                this.setStyle();
                this.refreshTransform();
            },
            mapStyle: function () {
                var geometry = this.srcElement.geometry();
                var radius = geometry.radius;
                var center = geometry.center;
                var diameter = ceil(radius * 2);
                var styles = ShapeNode.fn.mapStyle.call(this, diameter, diameter);
                styles.push([
                    'left',
                    ceil(center.x - radius) + 'px'
                ], [
                    'top',
                    ceil(center.y - radius) + 'px'
                ]);
                return styles;
            }
        });
        var ArcDataNode = PathDataNode.extend({
            renderData: function () {
                return printPath(this.srcElement.toPath());
            }
        });
        var ArcNode = PathNode.extend({
            createDataNode: function (srcElement) {
                return new ArcDataNode(srcElement);
            }
        });
        var TextPathDataNode = PathDataNode.extend({
            createElement: function () {
                PathDataNode.fn.createElement.call(this);
                this.attr('textpathok', true);
            },
            renderData: function () {
                var rect = this.srcElement.rect();
                var center = rect.center();
                return 'm ' + printPoints([new g.Point(rect.topLeft().x, center.y)]) + ' l ' + printPoints([new g.Point(rect.bottomRight().x, center.y)]);
            }
        });
        var TextPathNode = Node.extend({
            createElement: function () {
                this.element = createElementVML('textpath');
                this.attr('on', true);
                this.attr('fitpath', false);
                this.setStyle();
                this.setString();
            },
            optionsChange: function (e) {
                if (e.field === 'content') {
                    this.setString();
                } else {
                    this.setStyle();
                }
                Node.fn.optionsChange.call(this, e);
            },
            mapStyle: function () {
                return [[
                        'font',
                        this.srcElement.options.font
                    ]];
            },
            setString: function () {
                this.attr('string', this.srcElement.content());
            }
        });
        var TextNode = PathNode.extend({
            init: function (srcElement, transform, opacity) {
                this.path = new TextPathNode(srcElement);
                PathNode.fn.init.call(this, srcElement, transform, opacity);
            },
            createDataNode: function (srcElement) {
                return new TextPathDataNode(srcElement);
            },
            attachTo: function (domElement, pos) {
                this.path.attachTo(this.element);
                PathNode.fn.attachTo.call(this, domElement, pos);
            },
            optionsChange: function (e) {
                if (e.field === 'font' || e.field === 'content') {
                    this.path.optionsChange(e);
                    this.pathData.geometryChange(e);
                }
                PathNode.fn.optionsChange.call(this, e);
            }
        });
        var ImagePathDataNode = PathDataNode.extend({
            renderData: function () {
                var rect = this.srcElement.rect();
                var path = new d.Path().moveTo(rect.topLeft()).lineTo(rect.topRight()).lineTo(rect.bottomRight()).lineTo(rect.bottomLeft()).close();
                return printPath(path);
            }
        });
        var ImageFillNode = TransformNode.extend({
            init: function (srcElement, transform, opacity) {
                this.opacity = opacity;
                TransformNode.fn.init.call(this, srcElement, transform);
            },
            createElement: function () {
                this.element = createElementVML('fill');
                this.attr('type', 'frame');
                this.attr('rotate', true);
                this.setOpacity();
                this.setSrc();
                this.setTransform();
            },
            optionsChange: function (e) {
                if (e.field === 'src') {
                    this.setSrc();
                }
                TransformNode.fn.optionsChange.call(this, e);
            },
            geometryChange: function () {
                this.refresh();
            },
            refreshOpacity: function (opacity) {
                this.opacity = opacity;
                this.setOpacity();
            },
            setOpacity: function () {
                var attrs = [];
                this.mapOpacityTo(attrs, this.srcElement.options.opacity);
                this.allAttr(attrs);
            },
            setSrc: function () {
                this.attr('src', this.srcElement.src());
            },
            mapTransform: function () {
                var img = this.srcElement;
                var rawbbox = img.rawBBox();
                var rawcenter = rawbbox.center();
                var fillOrigin = COORDINATE_MULTIPLE / 2;
                var fillSize = COORDINATE_MULTIPLE;
                var x;
                var y;
                var width = rawbbox.width() / fillSize;
                var height = rawbbox.height() / fillSize;
                var angle = 0;
                var transform = this.transform;
                if (transform) {
                    var matrix = toMatrix(transform);
                    var sx = sqrt(matrix.a * matrix.a + matrix.b * matrix.b);
                    var sy = sqrt(matrix.c * matrix.c + matrix.d * matrix.d);
                    width *= sx;
                    height *= sy;
                    var ax = deg(atan2(matrix.b, matrix.d));
                    var ay = deg(atan2(-matrix.c, matrix.a));
                    angle = (ax + ay) / 2;
                    if (angle !== 0) {
                        var center = img.bbox().center();
                        x = (center.x - fillOrigin) / fillSize;
                        y = (center.y - fillOrigin) / fillSize;
                    } else {
                        x = (rawcenter.x * sx + matrix.e - fillOrigin) / fillSize;
                        y = (rawcenter.y * sy + matrix.f - fillOrigin) / fillSize;
                    }
                } else {
                    x = (rawcenter.x - fillOrigin) / fillSize;
                    y = (rawcenter.y - fillOrigin) / fillSize;
                }
                width = round(width, TRANSFORM_PRECISION);
                height = round(height, TRANSFORM_PRECISION);
                x = round(x, TRANSFORM_PRECISION);
                y = round(y, TRANSFORM_PRECISION);
                angle = round(angle, TRANSFORM_PRECISION);
                return [
                    [
                        'size',
                        width + ',' + height
                    ],
                    [
                        'position',
                        x + ',' + y
                    ],
                    [
                        'angle',
                        angle
                    ]
                ];
            }
        });
        var ImageNode = PathNode.extend({
            createFillNode: function (srcElement, transform, opacity) {
                return new ImageFillNode(srcElement, transform, opacity);
            },
            createDataNode: function (srcElement) {
                return new ImagePathDataNode(srcElement);
            },
            optionsChange: function (e) {
                if (e.field === 'src' || e.field === 'transform') {
                    this.fill.optionsChange(e);
                }
                PathNode.fn.optionsChange.call(this, e);
            },
            geometryChange: function () {
                this.fill.geometryChange();
                PathNode.fn.geometryChange.call(this);
            },
            refreshTransform: function (transform) {
                PathNode.fn.refreshTransform.call(this, transform);
                this.fill.refresh(this.srcElement.currentTransform(transform));
            }
        });
        var RectDataNode = PathDataNode.extend({
            renderData: function () {
                var rect = this.srcElement.geometry();
                var parts = [
                    'm',
                    printPoints([rect.topLeft()]),
                    'l',
                    printPoints([
                        rect.topRight(),
                        rect.bottomRight(),
                        rect.bottomLeft()
                    ]),
                    'x e'
                ];
                return parts.join(' ');
            }
        });
        var RectNode = PathNode.extend({
            createDataNode: function (srcElement) {
                return new RectDataNode(srcElement);
            }
        });
        var nodeMap = {
            Group: GroupNode,
            Text: TextNode,
            Path: PathNode,
            MultiPath: MultiPathNode,
            Circle: CircleNode,
            Arc: ArcNode,
            Image: ImageNode,
            Rect: RectNode
        };
        function enableVML() {
            if (doc.namespaces && !doc.namespaces.kvml) {
                doc.namespaces.add('kvml', 'urn:schemas-microsoft-com:vml');
                var stylesheet = doc.styleSheets.length > 30 ? doc.styleSheets[0] : doc.createStyleSheet();
                stylesheet.addRule('.kvml', 'behavior:url(#default#VML)');
            }
        }
        function createElementVML(type) {
            var element = doc.createElement('kvml:' + type);
            element.className = 'kvml';
            return element;
        }
        function printPoints(points) {
            var length = points.length;
            var result = [];
            for (var i = 0; i < length; i++) {
                result.push(points[i].scaleCopy(COORDINATE_MULTIPLE).toString(0, ','));
            }
            return result.join(' ');
        }
        function printPath(path, open) {
            var segments = path.segments, length = segments.length;
            if (length > 0) {
                var parts = [], output, type, currentType, i;
                for (i = 1; i < length; i++) {
                    type = segmentType(segments[i - 1], segments[i]);
                    if (type !== currentType) {
                        currentType = type;
                        parts.push(type);
                    }
                    if (type === 'l') {
                        parts.push(printPoints([segments[i].anchor()]));
                    } else {
                        parts.push(printPoints([
                            segments[i - 1].controlOut(),
                            segments[i].controlIn(),
                            segments[i].anchor()
                        ]));
                    }
                }
                output = 'm ' + printPoints([segments[0].anchor()]) + ' ' + parts.join(' ');
                if (path.options.closed) {
                    output += ' x';
                }
                if (open !== true) {
                    output += ' e';
                }
                return output;
            }
        }
        function segmentType(segmentStart, segmentEnd) {
            return segmentStart.controlOut() && segmentEnd.controlIn() ? 'c' : 'l';
        }
        function fillField(field) {
            return field.indexOf('fill') === 0 || field.indexOf(GRADIENT) === 0;
        }
        function stopColor(baseColor, stop, baseOpacity) {
            var opacity = baseOpacity * valueOrDefault(stop.opacity(), 1);
            var color;
            if (baseColor) {
                color = blendColors(baseColor, stop.color(), opacity);
            } else {
                color = blendColors(stop.color(), '#fff', 1 - opacity);
            }
            return color;
        }
        function blendColors(base, overlay, alpha) {
            var baseColor = new Color(base), overlayColor = new Color(overlay), r = blendChannel(baseColor.r, overlayColor.r, alpha), g = blendChannel(baseColor.g, overlayColor.g, alpha), b = blendChannel(baseColor.b, overlayColor.b, alpha);
            return new Color(r, g, b).toHex();
        }
        function blendChannel(a, b, alpha) {
            return math.round(alpha * b + (1 - alpha) * a);
        }
        kendo.support.vml = function () {
            var browser = kendo.support.browser;
            return browser.msie && browser.version < 9;
        }();
        var EMPTY_CLIP = 'inherit';
        if (kendo.support.browser.msie && kendo.support.browser.version < 8) {
            EMPTY_CLIP = 'rect(auto auto auto auto)';
        }
        if (kendo.support.vml) {
            d.SurfaceFactory.current.register('vml', Surface, 30);
        }
        deepExtend(d, {
            vml: {
                ArcDataNode: ArcDataNode,
                ArcNode: ArcNode,
                CircleTransformNode: CircleTransformNode,
                CircleNode: CircleNode,
                FillNode: FillNode,
                GroupNode: GroupNode,
                ImageNode: ImageNode,
                ImageFillNode: ImageFillNode,
                ImagePathDataNode: ImagePathDataNode,
                MultiPathDataNode: MultiPathDataNode,
                MultiPathNode: MultiPathNode,
                Node: Node,
                PathDataNode: PathDataNode,
                PathNode: PathNode,
                RectDataNode: RectDataNode,
                RectNode: RectNode,
                RootNode: RootNode,
                StrokeNode: StrokeNode,
                Surface: Surface,
                TextNode: TextNode,
                TextPathNode: TextPathNode,
                TextPathDataNode: TextPathDataNode,
                TransformNode: TransformNode
            }
        });
    }(window.kendo.jQuery));
}, typeof define == 'function' && define.amd ? define : function (a1, a2, a3) {
    (a3 || a2)();
}));
(function (f, define) {
    define('drawing/html', [
        'kendo.color',
        'drawing/shapes',
        'util/main',
        'util/text-metrics'
    ], f);
}(function () {
    (function ($, parseFloat, Math) {
        'use strict';
        var drawing = kendo.drawing;
        var geo = kendo.geometry;
        var slice = Array.prototype.slice;
        var browser = kendo.support.browser;
        var romanNumeral = kendo.util.arabicToRoman;
        var mergeSort = kendo.util.mergeSort;
        var KENDO_PSEUDO_ELEMENT = 'KENDO-PSEUDO-ELEMENT';
        var IMAGE_CACHE = {};
        var nodeInfo = {};
        nodeInfo._root = nodeInfo;
        var TextRect = drawing.Text.extend({
            nodeType: 'Text',
            init: function (str, rect, options) {
                drawing.Text.fn.init.call(this, str, rect.getOrigin(), options);
                this._pdfRect = rect;
            },
            rect: function () {
                return this._pdfRect;
            },
            rawBBox: function () {
                return this._pdfRect;
            }
        });
        function getXY(thing) {
            if (typeof thing == 'number') {
                return {
                    x: thing,
                    y: thing
                };
            }
            if (Array.isArray(thing)) {
                return {
                    x: thing[0],
                    y: thing[1]
                };
            }
            return {
                x: thing.x,
                y: thing.y
            };
        }
        function drawDOM(element, options) {
            if (!options) {
                options = {};
            }
            var defer = $.Deferred();
            element = $(element)[0];
            if (!element) {
                return defer.reject('No element to export');
            }
            if (typeof window.getComputedStyle != 'function') {
                throw new Error('window.getComputedStyle is missing.  You are using an unsupported browser, or running in IE8 compatibility mode.  Drawing HTML is supported in Chrome, Firefox, Safari and IE9+.');
            }
            if (kendo.pdf) {
                kendo.pdf.defineFont(getFontFaces(element.ownerDocument));
            }
            var scale = getXY(options.scale || 1);
            function doOne(element) {
                var group = new drawing.Group();
                var pos = element.getBoundingClientRect();
                setTransform(group, [
                    scale.x,
                    0,
                    0,
                    scale.y,
                    -pos.left * scale.x,
                    -pos.top * scale.y
                ]);
                nodeInfo._clipbox = false;
                nodeInfo._matrix = geo.Matrix.unit();
                nodeInfo._stackingContext = {
                    element: element,
                    group: group
                };
                if (options.avoidLinks === true) {
                    nodeInfo._avoidLinks = 'a';
                } else {
                    nodeInfo._avoidLinks = options.avoidLinks;
                }
                $(element).addClass('k-pdf-export');
                renderElement(element, group);
                $(element).removeClass('k-pdf-export');
                return group;
            }
            cacheImages(element, function () {
                var forceBreak = options && options.forcePageBreak;
                var hasPaperSize = options && options.paperSize && options.paperSize != 'auto';
                var paperOptions = kendo.pdf.getPaperOptions(function (key, def) {
                    if (key == 'paperSize') {
                        return hasPaperSize ? options[key] : 'A4';
                    }
                    return key in options ? options[key] : def;
                });
                var pageWidth = hasPaperSize && paperOptions.paperSize[0];
                var pageHeight = hasPaperSize && paperOptions.paperSize[1];
                var margin = options.margin && paperOptions.margin;
                var hasMargin = !!margin;
                if (forceBreak || pageHeight) {
                    if (!margin) {
                        margin = {
                            left: 0,
                            top: 0,
                            right: 0,
                            bottom: 0
                        };
                    }
                    if (pageWidth) {
                        pageWidth /= scale.x;
                    }
                    if (pageHeight) {
                        pageHeight /= scale.y;
                    }
                    margin.left /= scale.x;
                    margin.right /= scale.x;
                    margin.top /= scale.y;
                    margin.bottom /= scale.y;
                    var group = new drawing.Group({
                        pdf: {
                            multiPage: true,
                            paperSize: hasPaperSize ? paperOptions.paperSize : 'auto',
                            _ignoreMargin: hasMargin
                        }
                    });
                    handlePageBreaks(function (x) {
                        if (options.progress) {
                            var canceled = false, pageNum = 0;
                            (function next() {
                                if (pageNum < x.pages.length) {
                                    var page = doOne(x.pages[pageNum]);
                                    group.append(page);
                                    options.progress({
                                        page: page,
                                        pageNum: ++pageNum,
                                        totalPages: x.pages.length,
                                        cancel: function () {
                                            canceled = true;
                                        }
                                    });
                                    if (!canceled) {
                                        setTimeout(next);
                                    } else {
                                        x.container.parentNode.removeChild(x.container);
                                    }
                                } else {
                                    x.container.parentNode.removeChild(x.container);
                                    defer.resolve(group);
                                }
                            }());
                        } else {
                            x.pages.forEach(function (page) {
                                group.append(doOne(page));
                            });
                            x.container.parentNode.removeChild(x.container);
                            defer.resolve(group);
                        }
                    }, element, forceBreak, pageWidth ? pageWidth - margin.left - margin.right : null, pageHeight ? pageHeight - margin.top - margin.bottom : null, margin, options);
                } else {
                    defer.resolve(doOne(element));
                }
            });
            function makeTemplate(template) {
                if (template != null) {
                    if (typeof template == 'string') {
                        template = kendo.template(template.replace(/^\s+|\s+$/g, ''));
                    }
                    if (typeof template == 'function') {
                        return function (data) {
                            var el = template(data);
                            if (el) {
                                if (typeof el == 'string') {
                                    el = el.replace(/^\s+|\s+$/g, '');
                                }
                                return $(el)[0];
                            }
                        };
                    }
                    return function () {
                        return $(template).clone()[0];
                    };
                }
            }
            function cloneNodes(el) {
                var clone = el.cloneNode(false);
                if (el.nodeType == 1) {
                    var $el = $(el), $clone = $(clone), i;
                    var data = $el.data();
                    for (i in data) {
                        $clone.data(i, data[i]);
                    }
                    if (/^canvas$/i.test(el.tagName)) {
                        clone.getContext('2d').drawImage(el, 0, 0);
                    } else if (/^input$/i.test(el.tagName)) {
                        el.removeAttribute('name');
                    } else {
                        for (i = el.firstChild; i; i = i.nextSibling) {
                            clone.appendChild(cloneNodes(i));
                        }
                    }
                }
                return clone;
            }
            function handlePageBreaks(callback, element, forceBreak, pageWidth, pageHeight, margin, options) {
                var template = makeTemplate(options.template);
                var doc = element.ownerDocument;
                var pages = [];
                var copy = options._destructive ? element : cloneNodes(element);
                var container = doc.createElement('KENDO-PDF-DOCUMENT');
                var adjust = 0;
                $(copy).find('tfoot').each(function () {
                    this.parentNode.appendChild(this);
                });
                $(copy).find('ol').each(function () {
                    $(this).children().each(function (index) {
                        this.setAttribute('kendo-split-index', index);
                    });
                });
                $(container).css({
                    display: 'block',
                    position: 'absolute',
                    boxSizing: 'content-box',
                    left: '-10000px',
                    top: '-10000px'
                });
                if (pageWidth) {
                    $(container).css({
                        width: pageWidth,
                        paddingLeft: margin.left,
                        paddingRight: margin.right
                    });
                    $(copy).css({ overflow: 'hidden' });
                }
                element.parentNode.insertBefore(container, element);
                container.appendChild(copy);
                if (options.beforePageBreak) {
                    setTimeout(function () {
                        options.beforePageBreak(container, doPageBreak);
                    }, 15);
                } else {
                    setTimeout(doPageBreak, 15);
                }
                function doPageBreak() {
                    if (forceBreak != '-' || pageHeight) {
                        splitElement(copy);
                    }
                    var page = makePage();
                    copy.parentNode.insertBefore(page, copy);
                    page.appendChild(copy);
                    if (template) {
                        var count = pages.length;
                        pages.forEach(function (page, i) {
                            var el = template({
                                element: page,
                                pageNum: i + 1,
                                totalPages: pages.length
                            });
                            if (el) {
                                page.appendChild(el);
                                cacheImages(el, function () {
                                    if (--count === 0) {
                                        next();
                                    }
                                });
                            }
                        });
                    } else {
                        next();
                    }
                    function next() {
                        whenImagesAreActuallyLoaded(pages, function () {
                            callback({
                                pages: pages,
                                container: container
                            });
                        });
                    }
                }
                function keepTogether(jqel) {
                    if (options.keepTogether && jqel.is(options.keepTogether) && jqel.height() <= pageHeight - adjust) {
                        return true;
                    }
                    var tag = jqel[0].tagName;
                    if (/^h[1-6]$/i.test(tag) && jqel.height() >= pageHeight - adjust) {
                        return false;
                    }
                    return jqel.data('kendoChart') || /^(?:img|tr|thead|th|tfoot|iframe|svg|object|canvas|input|textarea|select|video|h[1-6])$/i.test(tag);
                }
                function splitElement(element) {
                    var style = getComputedStyle(element);
                    var bottomPadding = parseFloat(getPropertyValue(style, 'padding-bottom'));
                    var bottomBorder = parseFloat(getPropertyValue(style, 'border-bottom-width'));
                    var saveAdjust = adjust;
                    adjust += bottomPadding + bottomBorder;
                    var isFirst = true;
                    for (var el = element.firstChild; el; el = el.nextSibling) {
                        if (el.nodeType == 1) {
                            isFirst = false;
                            var jqel = $(el);
                            if (jqel.is(forceBreak)) {
                                breakAtElement(el);
                                continue;
                            }
                            if (!pageHeight) {
                                splitElement(el);
                                continue;
                            }
                            if (!/^(?:static|relative)$/.test(getPropertyValue(getComputedStyle(el), 'position'))) {
                                continue;
                            }
                            var fall = fallsOnMargin(el);
                            if (fall == 1) {
                                breakAtElement(el);
                            } else if (fall) {
                                if (keepTogether(jqel)) {
                                    breakAtElement(el);
                                } else {
                                    splitElement(el);
                                }
                            } else {
                                splitElement(el);
                            }
                        } else if (el.nodeType == 3 && pageHeight) {
                            splitText(el, isFirst);
                            isFirst = false;
                        }
                    }
                    adjust = saveAdjust;
                }
                function firstInParent(el) {
                    var p = el.parentNode, first = p.firstChild;
                    if (el === first) {
                        return true;
                    }
                    if (el === p.children[0]) {
                        if (first.nodeType == 7 || first.nodeType == 8) {
                            return true;
                        }
                        if (first.nodeType == 3) {
                            return !/\S/.test(first.data);
                        }
                    }
                    return false;
                }
                function breakAtElement(el) {
                    if (el.nodeType == 1 && el !== copy && firstInParent(el)) {
                        return breakAtElement(el.parentNode);
                    }
                    var table, colgroup, thead, grid, gridHead;
                    table = $(el).closest('table');
                    colgroup = table.find('colgroup:first');
                    if (options.repeatHeaders) {
                        thead = table.find('thead:first');
                        grid = $(el).closest('.k-grid[data-role="grid"]');
                        if (grid[0] && grid[0].querySelector('.k-auto-scrollable')) {
                            gridHead = grid.find('.k-grid-header:first');
                        }
                    }
                    var page = makePage();
                    var range = doc.createRange();
                    range.setStartBefore(copy);
                    range.setEndBefore(el);
                    page.appendChild(range.extractContents());
                    copy.parentNode.insertBefore(page, copy);
                    if (table[0]) {
                        table = $(el).closest('table');
                        if (options.repeatHeaders && thead[0]) {
                            thead.clone().prependTo(table);
                        }
                        if (colgroup[0]) {
                            colgroup.clone().prependTo(table);
                        }
                    }
                    if (options.repeatHeaders && gridHead && gridHead[0]) {
                        grid = $(el).closest('.k-grid[data-role="grid"]');
                        if (gridHead[0]) {
                            gridHead.clone().prependTo(grid);
                        }
                    }
                }
                function makePage() {
                    var page = doc.createElement('KENDO-PDF-PAGE');
                    $(page).css({
                        display: 'block',
                        boxSizing: 'content-box',
                        width: pageWidth || 'auto',
                        padding: margin.top + 'px ' + margin.right + 'px ' + margin.bottom + 'px ' + margin.left + 'px',
                        position: 'relative',
                        height: pageHeight || 'auto',
                        overflow: pageHeight || pageWidth ? 'hidden' : 'visible',
                        clear: 'both'
                    });
                    if (options && options.pageClassName) {
                        page.className = options.pageClassName;
                    }
                    pages.push(page);
                    return page;
                }
                function fallsOnMargin(thing) {
                    var box = thing.getBoundingClientRect();
                    if (box.width === 0 || box.height === 0) {
                        return 0;
                    }
                    var top = copy.getBoundingClientRect().top;
                    var available = pageHeight - adjust;
                    return box.height > available ? 3 : box.top - top > available ? 1 : box.bottom - top > available ? 2 : 0;
                }
                function splitText(node, isFirst) {
                    if (!/\S/.test(node.data)) {
                        return;
                    }
                    var len = node.data.length;
                    var range = doc.createRange();
                    range.selectNodeContents(node);
                    var fall = fallsOnMargin(range);
                    if (!fall) {
                        return;
                    }
                    var nextnode = node;
                    if (fall == 1) {
                        if (isFirst) {
                            breakAtElement(node.parentNode);
                        } else {
                            breakAtElement(node);
                        }
                    } else {
                        (function findEOP(min, pos, max) {
                            range.setEnd(node, pos);
                            if (min == pos || pos == max) {
                                return pos;
                            }
                            if (fallsOnMargin(range)) {
                                return findEOP(min, min + pos >> 1, pos);
                            } else {
                                return findEOP(pos, pos + max >> 1, max);
                            }
                        }(0, len >> 1, len));
                        if (!/\S/.test(range.toString()) && isFirst) {
                            breakAtElement(node.parentNode);
                        } else {
                            nextnode = node.splitText(range.endOffset);
                            var page = makePage();
                            range.setStartBefore(copy);
                            page.appendChild(range.extractContents());
                            copy.parentNode.insertBefore(page, copy);
                        }
                    }
                    splitText(nextnode);
                }
            }
            return defer.promise();
        }
        drawing.drawDOM = drawDOM;
        drawDOM.getFontFaces = getFontFaces;
        var parseBackgroundImage = function () {
            var tok_linear_gradient = /^((-webkit-|-moz-|-o-|-ms-)?linear-gradient\s*)\(/;
            var tok_percent = /^([-0-9.]+%)/;
            var tok_length = /^([-0-9.]+px)/;
            var tok_keyword = /^(left|right|top|bottom|to|center)\W/;
            var tok_angle = /^([-0-9.]+(deg|grad|rad|turn))/;
            var tok_whitespace = /^(\s+)/;
            var tok_popen = /^(\()/;
            var tok_pclose = /^(\))/;
            var tok_comma = /^(,)/;
            var tok_url = /^(url)\(/;
            var tok_content = /^(.*?)\)/;
            var cache1 = {}, cache2 = {};
            function parse(input) {
                var orig = input;
                if (hasOwnProperty(cache1, orig)) {
                    return cache1[orig];
                }
                function skip_ws() {
                    var m = tok_whitespace.exec(input);
                    if (m) {
                        input = input.substr(m[1].length);
                    }
                }
                function read(token) {
                    skip_ws();
                    var m = token.exec(input);
                    if (m) {
                        input = input.substr(m[1].length);
                        return m[1];
                    }
                }
                function read_stop() {
                    var color = kendo.parseColor(input, true);
                    var length, percent;
                    if (color) {
                        input = input.substr(color.match[0].length);
                        color = color.toRGB();
                        if (!(length = read(tok_length))) {
                            percent = read(tok_percent);
                        }
                        return {
                            color: color,
                            length: length,
                            percent: percent
                        };
                    }
                }
                function read_linear_gradient(propName) {
                    var angle;
                    var to1, to2;
                    var stops = [];
                    var reverse = false;
                    if (read(tok_popen)) {
                        angle = read(tok_angle);
                        if (angle) {
                            angle = parseAngle(angle);
                            read(tok_comma);
                        } else {
                            to1 = read(tok_keyword);
                            if (to1 == 'to') {
                                to1 = read(tok_keyword);
                            } else if (to1 && /^-/.test(propName)) {
                                reverse = true;
                            }
                            to2 = read(tok_keyword);
                            read(tok_comma);
                        }
                        if (/-moz-/.test(propName) && angle == null && to1 == null) {
                            var x = read(tok_percent), y = read(tok_percent);
                            reverse = true;
                            if (x == '0%') {
                                to1 = 'left';
                            } else if (x == '100%') {
                                to1 = 'right';
                            }
                            if (y == '0%') {
                                to2 = 'top';
                            } else if (y == '100%') {
                                to2 = 'bottom';
                            }
                            read(tok_comma);
                        }
                        while (input && !read(tok_pclose)) {
                            var stop = read_stop();
                            if (!stop) {
                                break;
                            }
                            stops.push(stop);
                            read(tok_comma);
                        }
                        return {
                            type: 'linear',
                            angle: angle,
                            to: to1 && to2 ? to1 + ' ' + to2 : to1 ? to1 : to2 ? to2 : null,
                            stops: stops,
                            reverse: reverse
                        };
                    }
                }
                function read_url() {
                    if (read(tok_popen)) {
                        var url = read(tok_content);
                        url = url.replace(/^['"]+|["']+$/g, '');
                        read(tok_pclose);
                        return {
                            type: 'url',
                            url: url
                        };
                    }
                }
                var tok;
                if (tok = read(tok_linear_gradient)) {
                    tok = read_linear_gradient(tok);
                } else if (tok = read(tok_url)) {
                    tok = read_url();
                }
                return cache1[orig] = tok || { type: 'none' };
            }
            return function (input) {
                if (hasOwnProperty(cache2, input)) {
                    return cache2[input];
                }
                return cache2[input] = splitProperty(input).map(parse);
            };
        }();
        var splitProperty = function () {
            var cache = {};
            return function (input, separator) {
                if (!separator) {
                    separator = /^\s*,\s*/;
                }
                var cacheKey = input + separator;
                if (hasOwnProperty(cache, cacheKey)) {
                    return cache[cacheKey];
                }
                var ret = [];
                var last = 0, pos = 0;
                var in_paren = 0;
                var in_string = false;
                var m;
                function looking_at(rx) {
                    return m = rx.exec(input.substr(pos));
                }
                function trim(str) {
                    return str.replace(/^\s+|\s+$/g, '');
                }
                while (pos < input.length) {
                    if (!in_string && looking_at(/^[\(\[\{]/)) {
                        in_paren++;
                        pos++;
                    } else if (!in_string && looking_at(/^[\)\]\}]/)) {
                        in_paren--;
                        pos++;
                    } else if (!in_string && looking_at(/^[\"\']/)) {
                        in_string = m[0];
                        pos++;
                    } else if (in_string == '\'' && looking_at(/^\\\'/)) {
                        pos += 2;
                    } else if (in_string == '"' && looking_at(/^\\\"/)) {
                        pos += 2;
                    } else if (in_string == '\'' && looking_at(/^\'/)) {
                        in_string = false;
                        pos++;
                    } else if (in_string == '"' && looking_at(/^\"/)) {
                        in_string = false;
                        pos++;
                    } else if (looking_at(separator)) {
                        if (!in_string && !in_paren && pos > last) {
                            ret.push(trim(input.substring(last, pos)));
                            last = pos + m[0].length;
                        }
                        pos += m[0].length;
                    } else {
                        pos++;
                    }
                }
                if (last < pos) {
                    ret.push(trim(input.substring(last, pos)));
                }
                return cache[cacheKey] = ret;
            };
        }();
        var getFontURL = function (cache) {
            return function (el) {
                var url = cache[el];
                if (!url) {
                    var m;
                    if (m = /url\((['"]?)([^'")]*?)\1\)\s+format\((['"]?)truetype\3\)/.exec(el)) {
                        url = cache[el] = m[2];
                    } else if (m = /url\((['"]?)([^'")]*?\.ttf)\1\)/.exec(el)) {
                        url = cache[el] = m[2];
                    }
                }
                return url;
            };
        }(Object.create(null));
        var getFontHeight = function (cache) {
            return function (font) {
                var height = cache[font];
                if (height == null) {
                    height = cache[font] = kendo.util.measureText('Mapq', { font: font }).height;
                }
                return height;
            };
        }(Object.create(null));
        function getFontFaces(doc) {
            if (doc == null) {
                doc = document;
            }
            var result = {};
            for (var i = 0; i < doc.styleSheets.length; ++i) {
                doStylesheet(doc.styleSheets[i]);
            }
            return result;
            function doStylesheet(ss) {
                if (ss) {
                    var rules = null;
                    try {
                        rules = ss.cssRules;
                    } catch (ex) {
                    }
                    if (rules) {
                        addRules(ss, rules);
                    }
                }
            }
            function findFonts(rule) {
                var src = getPropertyValue(rule.style, 'src');
                if (src) {
                    return splitProperty(src).reduce(function (a, el) {
                        var font = getFontURL(el);
                        if (font) {
                            a.push(font);
                        }
                        return a;
                    }, []);
                } else {
                    var font = getFontURL(rule.cssText);
                    return font ? [font] : [];
                }
            }
            function addRules(styleSheet, rules) {
                for (var i = 0; i < rules.length; ++i) {
                    var r = rules[i];
                    switch (r.type) {
                    case 3:
                        doStylesheet(r.styleSheet);
                        break;
                    case 5:
                        var style = r.style;
                        var family = splitProperty(getPropertyValue(style, 'font-family'));
                        var bold = /^([56789]00|bold)$/i.test(getPropertyValue(style, 'font-weight'));
                        var italic = 'italic' == getPropertyValue(style, 'font-style');
                        var src = findFonts(r);
                        if (src.length > 0) {
                            addRule(styleSheet, family, bold, italic, src[0]);
                        }
                    }
                }
            }
            function addRule(styleSheet, names, bold, italic, url) {
                if (!/^data:/i.test(url)) {
                    if (!(/^[^\/:]+:\/\//.test(url) || /^\//.test(url))) {
                        url = String(styleSheet.href).replace(/[^\/]*$/, '') + url;
                    }
                }
                names.forEach(function (name) {
                    name = name.replace(/^(['"]?)(.*?)\1$/, '$2');
                    if (bold) {
                        name += '|bold';
                    }
                    if (italic) {
                        name += '|italic';
                    }
                    result[name] = url;
                });
            }
        }
        function hasOwnProperty(obj, key) {
            return Object.prototype.hasOwnProperty.call(obj, key);
        }
        function getCounter(name) {
            name = '_counter_' + name;
            return nodeInfo[name];
        }
        function getAllCounters(name) {
            var values = [], p = nodeInfo;
            name = '_counter_' + name;
            while (p) {
                if (hasOwnProperty(p, name)) {
                    values.push(p[name]);
                }
                p = Object.getPrototypeOf(p);
            }
            return values.reverse();
        }
        function incCounter(name, inc) {
            var p = nodeInfo;
            name = '_counter_' + name;
            while (p && !hasOwnProperty(p, name)) {
                p = Object.getPrototypeOf(p);
            }
            if (!p) {
                p = nodeInfo._root;
            }
            p[name] = (p[name] || 0) + (inc == null ? 1 : inc);
        }
        function resetCounter(name, val) {
            name = '_counter_' + name;
            nodeInfo[name] = val == null ? 0 : val;
        }
        function doCounters(a, f, def) {
            for (var i = 0; i < a.length;) {
                var name = a[i++];
                var val = parseFloat(a[i]);
                if (isNaN(val)) {
                    f(name, def);
                } else {
                    f(name, val);
                    ++i;
                }
            }
        }
        function parseColor(str, css) {
            var color = kendo.parseColor(str);
            if (color) {
                color = color.toRGB();
                if (css) {
                    color = color.toCssRgba();
                } else if (color.a === 0) {
                    color = null;
                }
            }
            return color;
        }
        function whenImagesAreActuallyLoaded(elements, callback) {
            var pending = 0;
            elements.forEach(function (el) {
                var images = el.querySelectorAll('img');
                for (var i = 0; i < images.length; ++i) {
                    var img = images[i];
                    if (!img.complete) {
                        pending++;
                        img.onload = img.onerror = next;
                    }
                }
            });
            if (!pending) {
                next();
            }
            function next() {
                if (--pending <= 0) {
                    callback();
                }
            }
        }
        function cacheImages(element, callback) {
            var urls = [];
            function add(url) {
                if (!IMAGE_CACHE[url]) {
                    IMAGE_CACHE[url] = true;
                    urls.push(url);
                }
            }
            (function dive(element) {
                if (/^img$/i.test(element.tagName)) {
                    add(element.src);
                }
                parseBackgroundImage(getPropertyValue(getComputedStyle(element), 'background-image')).forEach(function (bg) {
                    if (bg.type == 'url') {
                        add(bg.url);
                    }
                });
                if (element.children) {
                    slice.call(element.children).forEach(dive);
                }
            }(element));
            var count = urls.length;
            function next() {
                if (--count <= 0) {
                    callback();
                }
            }
            if (count === 0) {
                next();
            }
            urls.forEach(function (url) {
                var img = IMAGE_CACHE[url] = new Image();
                if (!/^data:/i.test(url)) {
                    img.crossOrigin = 'Anonymous';
                }
                img.src = url;
                if (img.complete) {
                    next();
                } else {
                    img.onload = next;
                    img.onerror = function () {
                        IMAGE_CACHE[url] = null;
                        next();
                    };
                }
            });
        }
        function alphaNumeral(n) {
            var result = '';
            do {
                var r = n % 26;
                result = String.fromCharCode(97 + r) + result;
                n = Math.floor(n / 26);
            } while (n > 0);
            return result;
        }
        function pushNodeInfo(element, style, group) {
            nodeInfo = Object.create(nodeInfo);
            nodeInfo[element.tagName.toLowerCase()] = {
                element: element,
                style: style
            };
            var decoration = getPropertyValue(style, 'text-decoration');
            if (decoration && decoration != 'none') {
                var color = getPropertyValue(style, 'color');
                decoration.split(/\s+/g).forEach(function (name) {
                    if (!nodeInfo[name]) {
                        nodeInfo[name] = color;
                    }
                });
            }
            if (createsStackingContext(style)) {
                nodeInfo._stackingContext = {
                    element: element,
                    group: group
                };
            }
        }
        function popNodeInfo() {
            nodeInfo = Object.getPrototypeOf(nodeInfo);
        }
        function updateClipbox(path) {
            if (nodeInfo._clipbox != null) {
                var box = path.bbox(nodeInfo._matrix);
                if (nodeInfo._clipbox) {
                    nodeInfo._clipbox = geo.Rect.intersect(nodeInfo._clipbox, box);
                } else {
                    nodeInfo._clipbox = box;
                }
            }
        }
        function emptyClipbox() {
            var cb = nodeInfo._clipbox;
            if (cb == null) {
                return true;
            }
            if (cb) {
                return cb.width() === 0 || cb.height() === 0;
            }
        }
        function createsStackingContext(style) {
            function prop(name) {
                return getPropertyValue(style, name);
            }
            if (prop('transform') != 'none' || prop('position') != 'static' && prop('z-index') != 'auto' || prop('opacity') < 1) {
                return true;
            }
        }
        function getComputedStyle(element, pseudoElt) {
            return window.getComputedStyle(element, pseudoElt || null);
        }
        function getPropertyValue(style, prop) {
            var val = style.getPropertyValue(prop);
            if (val == null || val === '') {
                if (browser.webkit) {
                    val = style.getPropertyValue('-webkit-' + prop);
                } else if (browser.mozilla) {
                    val = style.getPropertyValue('-moz-' + prop);
                } else if (browser.opera) {
                    val = style.getPropertyValue('-o-' + prop);
                } else if (browser.msie) {
                    val = style.getPropertyValue('-ms-' + prop);
                }
            }
            return val;
        }
        function pleaseSetPropertyValue(style, prop, value, important) {
            style.setProperty(prop, value, important);
            if (browser.webkit) {
                style.setProperty('-webkit-' + prop, value, important);
            } else if (browser.mozilla) {
                style.setProperty('-moz-' + prop, value, important);
            } else if (browser.opera) {
                style.setProperty('-o-' + prop, value, important);
            } else if (browser.msie) {
                style.setProperty('-ms-' + prop, value, important);
                prop = 'ms' + prop.replace(/(^|-)([a-z])/g, function (s, p1, p2) {
                    return p1 + p2.toUpperCase();
                });
                style[prop] = value;
            }
        }
        function getBorder(style, side) {
            side = 'border-' + side;
            return {
                width: parseFloat(getPropertyValue(style, side + '-width')),
                style: getPropertyValue(style, side + '-style'),
                color: parseColor(getPropertyValue(style, side + '-color'), true)
            };
        }
        function saveStyle(element, func) {
            var prev = element.style.cssText;
            var result = func();
            element.style.cssText = prev;
            return result;
        }
        function getBorderRadius(style, side) {
            var r = getPropertyValue(style, 'border-' + side + '-radius').split(/\s+/g).map(parseFloat);
            if (r.length == 1) {
                r.push(r[0]);
            }
            return sanitizeRadius({
                x: r[0],
                y: r[1]
            });
        }
        function getContentBox(element) {
            var box = element.getBoundingClientRect();
            box = innerBox(box, 'border-*-width', element);
            box = innerBox(box, 'padding-*', element);
            return box;
        }
        function innerBox(box, prop, element) {
            var style, wt, wr, wb, wl;
            if (typeof prop == 'string') {
                style = getComputedStyle(element);
                wt = parseFloat(getPropertyValue(style, prop.replace('*', 'top')));
                wr = parseFloat(getPropertyValue(style, prop.replace('*', 'right')));
                wb = parseFloat(getPropertyValue(style, prop.replace('*', 'bottom')));
                wl = parseFloat(getPropertyValue(style, prop.replace('*', 'left')));
            } else if (typeof prop == 'number') {
                wt = wr = wb = wl = prop;
            }
            return {
                top: box.top + wt,
                right: box.right - wr,
                bottom: box.bottom - wb,
                left: box.left + wl,
                width: box.right - box.left - wr - wl,
                height: box.bottom - box.top - wb - wt
            };
        }
        function getTransform(style) {
            var transform = getPropertyValue(style, 'transform');
            if (transform == 'none') {
                return null;
            }
            var matrix = /^\s*matrix\(\s*(.*?)\s*\)\s*$/.exec(transform);
            if (matrix) {
                var origin = getPropertyValue(style, 'transform-origin');
                matrix = matrix[1].split(/\s*,\s*/g).map(parseFloat);
                origin = origin.split(/\s+/g).map(parseFloat);
                return {
                    matrix: matrix,
                    origin: origin
                };
            }
        }
        function radiansToDegrees(radians) {
            return 180 * radians / Math.PI % 360;
        }
        function parseAngle(angle) {
            var num = parseFloat(angle);
            if (/grad$/.test(angle)) {
                return Math.PI * num / 200;
            } else if (/rad$/.test(angle)) {
                return num;
            } else if (/turn$/.test(angle)) {
                return Math.PI * num * 2;
            } else if (/deg$/.test(angle)) {
                return Math.PI * num / 180;
            }
        }
        function setTransform(shape, m) {
            m = new geo.Matrix(m[0], m[1], m[2], m[3], m[4], m[5]);
            shape.transform(m);
            return m;
        }
        function setClipping(shape, clipPath) {
            shape.clip(clipPath);
        }
        function addArcToPath(path, x, y, options) {
            var points = new geo.Arc([
                    x,
                    y
                ], options).curvePoints(), i = 1;
            while (i < points.length) {
                path.curveTo(points[i++], points[i++], points[i++]);
            }
        }
        function sanitizeRadius(r) {
            if (r.x <= 0 || r.y <= 0) {
                r.x = r.y = 0;
            }
            return r;
        }
        function adjustBorderRadiusForBox(box, rTL, rTR, rBR, rBL) {
            var tl_x = Math.max(0, rTL.x), tl_y = Math.max(0, rTL.y);
            var tr_x = Math.max(0, rTR.x), tr_y = Math.max(0, rTR.y);
            var br_x = Math.max(0, rBR.x), br_y = Math.max(0, rBR.y);
            var bl_x = Math.max(0, rBL.x), bl_y = Math.max(0, rBL.y);
            var f = Math.min(box.width / (tl_x + tr_x), box.height / (tr_y + br_y), box.width / (br_x + bl_x), box.height / (bl_y + tl_y));
            if (f < 1) {
                tl_x *= f;
                tl_y *= f;
                tr_x *= f;
                tr_y *= f;
                br_x *= f;
                br_y *= f;
                bl_x *= f;
                bl_y *= f;
            }
            return {
                tl: {
                    x: tl_x,
                    y: tl_y
                },
                tr: {
                    x: tr_x,
                    y: tr_y
                },
                br: {
                    x: br_x,
                    y: br_y
                },
                bl: {
                    x: bl_x,
                    y: bl_y
                }
            };
        }
        function elementRoundBox(element, box, type) {
            var style = getComputedStyle(element);
            var rTL = getBorderRadius(style, 'top-left');
            var rTR = getBorderRadius(style, 'top-right');
            var rBL = getBorderRadius(style, 'bottom-left');
            var rBR = getBorderRadius(style, 'bottom-right');
            if (type == 'padding' || type == 'content') {
                var bt = getBorder(style, 'top');
                var br = getBorder(style, 'right');
                var bb = getBorder(style, 'bottom');
                var bl = getBorder(style, 'left');
                rTL.x -= bl.width;
                rTL.y -= bt.width;
                rTR.x -= br.width;
                rTR.y -= bt.width;
                rBR.x -= br.width;
                rBR.y -= bb.width;
                rBL.x -= bl.width;
                rBL.y -= bb.width;
                if (type == 'content') {
                    var pt = parseFloat(getPropertyValue(style, 'padding-top'));
                    var pr = parseFloat(getPropertyValue(style, 'padding-right'));
                    var pb = parseFloat(getPropertyValue(style, 'padding-bottom'));
                    var pl = parseFloat(getPropertyValue(style, 'padding-left'));
                    rTL.x -= pl;
                    rTL.y -= pt;
                    rTR.x -= pr;
                    rTR.y -= pt;
                    rBR.x -= pr;
                    rBR.y -= pb;
                    rBL.x -= pl;
                    rBL.y -= pb;
                }
            }
            if (typeof type == 'number') {
                rTL.x -= type;
                rTL.y -= type;
                rTR.x -= type;
                rTR.y -= type;
                rBR.x -= type;
                rBR.y -= type;
                rBL.x -= type;
                rBL.y -= type;
            }
            return roundBox(box, rTL, rTR, rBR, rBL);
        }
        function roundBox(box, rTL0, rTR0, rBR0, rBL0) {
            var tmp = adjustBorderRadiusForBox(box, rTL0, rTR0, rBR0, rBL0);
            var rTL = tmp.tl;
            var rTR = tmp.tr;
            var rBR = tmp.br;
            var rBL = tmp.bl;
            var path = new drawing.Path({
                fill: null,
                stroke: null
            });
            path.moveTo(box.left, box.top + rTL.y);
            if (rTL.x) {
                addArcToPath(path, box.left + rTL.x, box.top + rTL.y, {
                    startAngle: -180,
                    endAngle: -90,
                    radiusX: rTL.x,
                    radiusY: rTL.y
                });
            }
            path.lineTo(box.right - rTR.x, box.top);
            if (rTR.x) {
                addArcToPath(path, box.right - rTR.x, box.top + rTR.y, {
                    startAngle: -90,
                    endAngle: 0,
                    radiusX: rTR.x,
                    radiusY: rTR.y
                });
            }
            path.lineTo(box.right, box.bottom - rBR.y);
            if (rBR.x) {
                addArcToPath(path, box.right - rBR.x, box.bottom - rBR.y, {
                    startAngle: 0,
                    endAngle: 90,
                    radiusX: rBR.x,
                    radiusY: rBR.y
                });
            }
            path.lineTo(box.left + rBL.x, box.bottom);
            if (rBL.x) {
                addArcToPath(path, box.left + rBL.x, box.bottom - rBL.y, {
                    startAngle: 90,
                    endAngle: 180,
                    radiusX: rBL.x,
                    radiusY: rBL.y
                });
            }
            return path.close();
        }
        function formatCounter(val, style) {
            var str = parseFloat(val) + '';
            switch (style) {
            case 'decimal-leading-zero':
                if (str.length < 2) {
                    str = '0' + str;
                }
                return str;
            case 'lower-roman':
                return romanNumeral(val).toLowerCase();
            case 'upper-roman':
                return romanNumeral(val).toUpperCase();
            case 'lower-latin':
            case 'lower-alpha':
                return alphaNumeral(val - 1);
            case 'upper-latin':
            case 'upper-alpha':
                return alphaNumeral(val - 1).toUpperCase();
            default:
                return str;
            }
        }
        function evalPseudoElementContent(element, content) {
            function displayCounter(name, style, separator) {
                if (!separator) {
                    return formatCounter(getCounter(name) || 0, style);
                }
                separator = separator.replace(/^\s*(["'])(.*)\1\s*$/, '$2');
                return getAllCounters(name).map(function (val) {
                    return formatCounter(val, style);
                }).join(separator);
            }
            var a = splitProperty(content, /^\s+/);
            var result = [], m;
            a.forEach(function (el) {
                var tmp;
                if (m = /^\s*(["'])(.*)\1\s*$/.exec(el)) {
                    result.push(m[2].replace(/\\([0-9a-f]{4})/gi, function (s, p) {
                        return String.fromCharCode(parseInt(p, 16));
                    }));
                } else if (m = /^\s*counter\((.*?)\)\s*$/.exec(el)) {
                    tmp = splitProperty(m[1]);
                    result.push(displayCounter(tmp[0], tmp[1]));
                } else if (m = /^\s*counters\((.*?)\)\s*$/.exec(el)) {
                    tmp = splitProperty(m[1]);
                    result.push(displayCounter(tmp[0], tmp[2], tmp[1]));
                } else if (m = /^\s*attr\((.*?)\)\s*$/.exec(el)) {
                    result.push(element.getAttribute(m[1]) || '');
                } else {
                    result.push(el);
                }
            });
            return result.join('');
        }
        function getCssText(style) {
            if (style.cssText) {
                return style.cssText;
            }
            var result = [];
            for (var i = 0; i < style.length; ++i) {
                result.push(style[i] + ': ' + getPropertyValue(style, style[i]));
            }
            return result.join(';\n');
        }
        function _renderWithPseudoElements(element, group) {
            if (element.tagName == KENDO_PSEUDO_ELEMENT) {
                _renderElement(element, group);
                return;
            }
            var fake = [];
            function pseudo(kind, place) {
                var style = getComputedStyle(element, kind);
                if (style.content && style.content != 'normal' && style.content != 'none' && style.width != '0px') {
                    var psel = element.ownerDocument.createElement(KENDO_PSEUDO_ELEMENT);
                    psel.style.cssText = getCssText(style);
                    psel.textContent = evalPseudoElementContent(element, style.content);
                    element.insertBefore(psel, place);
                    fake.push(psel);
                }
            }
            pseudo(':before', element.firstChild);
            pseudo(':after', null);
            var saveClass = element.className;
            element.className += ' kendo-pdf-hide-pseudo-elements';
            _renderElement(element, group);
            element.className = saveClass;
            fake.forEach(function (el) {
                element.removeChild(el);
            });
        }
        function _renderElement(element, group) {
            var style = getComputedStyle(element);
            var top = getBorder(style, 'top');
            var right = getBorder(style, 'right');
            var bottom = getBorder(style, 'bottom');
            var left = getBorder(style, 'left');
            var rTL0 = getBorderRadius(style, 'top-left');
            var rTR0 = getBorderRadius(style, 'top-right');
            var rBL0 = getBorderRadius(style, 'bottom-left');
            var rBR0 = getBorderRadius(style, 'bottom-right');
            var dir = getPropertyValue(style, 'direction');
            var backgroundColor = getPropertyValue(style, 'background-color');
            backgroundColor = parseColor(backgroundColor);
            var backgroundImage = parseBackgroundImage(getPropertyValue(style, 'background-image'));
            var backgroundRepeat = splitProperty(getPropertyValue(style, 'background-repeat'));
            var backgroundPosition = splitProperty(getPropertyValue(style, 'background-position'));
            var backgroundOrigin = splitProperty(getPropertyValue(style, 'background-origin'));
            var backgroundSize = splitProperty(getPropertyValue(style, 'background-size'));
            if (browser.msie && browser.version < 10) {
                backgroundPosition = splitProperty(element.currentStyle.backgroundPosition);
            }
            var innerbox = innerBox(element.getBoundingClientRect(), 'border-*-width', element);
            (function () {
                var clip = getPropertyValue(style, 'clip');
                var m = /^\s*rect\((.*)\)\s*$/.exec(clip);
                if (m) {
                    var a = m[1].split(/[ ,]+/g);
                    var top = a[0] == 'auto' ? innerbox.top : parseFloat(a[0]) + innerbox.top;
                    var right = a[1] == 'auto' ? innerbox.right : parseFloat(a[1]) + innerbox.left;
                    var bottom = a[2] == 'auto' ? innerbox.bottom : parseFloat(a[2]) + innerbox.top;
                    var left = a[3] == 'auto' ? innerbox.left : parseFloat(a[3]) + innerbox.left;
                    var tmp = new drawing.Group();
                    var clipPath = new drawing.Path().moveTo(left, top).lineTo(right, top).lineTo(right, bottom).lineTo(left, bottom).close();
                    setClipping(tmp, clipPath);
                    group.append(tmp);
                    group = tmp;
                    updateClipbox(clipPath);
                }
            }());
            var boxes, i, cells;
            var display = getPropertyValue(style, 'display');
            if (display == 'table-row') {
                boxes = [];
                for (i = 0, cells = element.children; i < cells.length; ++i) {
                    boxes.push(cells[i].getBoundingClientRect());
                }
            } else {
                boxes = element.getClientRects();
                if (boxes.length == 1) {
                    boxes = [element.getBoundingClientRect()];
                }
            }
            boxes = adjustBoxes(boxes);
            for (i = 0; i < boxes.length; ++i) {
                drawOneBox(boxes[i], i === 0, i == boxes.length - 1);
            }
            if (boxes.length > 0 && display == 'list-item') {
                drawBullet(boxes[0]);
            }
            (function () {
                function clipit() {
                    var clipPath = elementRoundBox(element, innerbox, 'padding');
                    var tmp = new drawing.Group();
                    setClipping(tmp, clipPath);
                    group.append(tmp);
                    group = tmp;
                    updateClipbox(clipPath);
                }
                if (isFormField(element)) {
                    clipit();
                } else if (/^(hidden|auto|scroll)/.test(getPropertyValue(style, 'overflow'))) {
                    clipit();
                } else if (/^(hidden|auto|scroll)/.test(getPropertyValue(style, 'overflow-x'))) {
                    clipit();
                } else if (/^(hidden|auto|scroll)/.test(getPropertyValue(style, 'overflow-y'))) {
                    clipit();
                }
            }());
            if (!maybeRenderWidget(element, group)) {
                renderContents(element, group);
            }
            return group;
            function adjustBoxes(boxes) {
                if (/^td$/i.test(element.tagName)) {
                    var table = nodeInfo.table;
                    if (table && getPropertyValue(table.style, 'border-collapse') == 'collapse') {
                        var tableBorderLeft = getBorder(table.style, 'left').width;
                        var tableBorderTop = getBorder(table.style, 'top').width;
                        if (tableBorderLeft === 0 && tableBorderTop === 0) {
                            return boxes;
                        }
                        var tableBox = table.element.getBoundingClientRect();
                        var firstCell = table.element.rows[0].cells[0];
                        var firstCellBox = firstCell.getBoundingClientRect();
                        if (firstCellBox.top == tableBox.top || firstCellBox.left == tableBox.left) {
                            return slice.call(boxes).map(function (box) {
                                return {
                                    left: box.left + tableBorderLeft,
                                    top: box.top + tableBorderTop,
                                    right: box.right + tableBorderLeft,
                                    bottom: box.bottom + tableBorderTop,
                                    height: box.height,
                                    width: box.width
                                };
                            });
                        }
                    }
                }
                return boxes;
            }
            function drawEdge(color, len, Wtop, Wleft, Wright, rl, rr, transform) {
                if (Wtop <= 0) {
                    return;
                }
                var path, edge = new drawing.Group();
                setTransform(edge, transform);
                group.append(edge);
                sanitizeRadius(rl);
                sanitizeRadius(rr);
                path = new drawing.Path({
                    fill: { color: color },
                    stroke: null
                });
                edge.append(path);
                path.moveTo(rl.x ? Math.max(rl.x, Wleft) : 0, 0).lineTo(len - (rr.x ? Math.max(rr.x, Wright) : 0), 0).lineTo(len - Math.max(rr.x, Wright), Wtop).lineTo(Math.max(rl.x, Wleft), Wtop).close();
                if (rl.x) {
                    drawRoundCorner(Wleft, rl, [
                        -1,
                        0,
                        0,
                        1,
                        rl.x,
                        0
                    ]);
                }
                if (rr.x) {
                    drawRoundCorner(Wright, rr, [
                        1,
                        0,
                        0,
                        1,
                        len - rr.x,
                        0
                    ]);
                }
                function drawRoundCorner(Wright, r, transform) {
                    var angle = Math.PI / 2 * Wright / (Wright + Wtop);
                    var ri = {
                        x: r.x - Wright,
                        y: r.y - Wtop
                    };
                    var path = new drawing.Path({
                        fill: { color: color },
                        stroke: null
                    }).moveTo(0, 0);
                    setTransform(path, transform);
                    addArcToPath(path, 0, r.y, {
                        startAngle: -90,
                        endAngle: -radiansToDegrees(angle),
                        radiusX: r.x,
                        radiusY: r.y
                    });
                    if (ri.x > 0 && ri.y > 0) {
                        path.lineTo(ri.x * Math.cos(angle), r.y - ri.y * Math.sin(angle));
                        addArcToPath(path, 0, r.y, {
                            startAngle: -radiansToDegrees(angle),
                            endAngle: -90,
                            radiusX: ri.x,
                            radiusY: ri.y,
                            anticlockwise: true
                        });
                    } else if (ri.x > 0) {
                        path.lineTo(ri.x, Wtop).lineTo(0, Wtop);
                    } else {
                        path.lineTo(ri.x, Wtop).lineTo(ri.x, 0);
                    }
                    edge.append(path.close());
                }
            }
            function drawBackground(box) {
                var background = new drawing.Group();
                setClipping(background, roundBox(box, rTL0, rTR0, rBR0, rBL0));
                group.append(background);
                if (element.tagName == 'A' && element.href && !/^#?$/.test($(element).attr('href'))) {
                    if (!nodeInfo._avoidLinks || !$(element).is(nodeInfo._avoidLinks)) {
                        background._pdfLink = {
                            url: element.href,
                            top: box.top,
                            right: box.right,
                            bottom: box.bottom,
                            left: box.left
                        };
                    }
                }
                if (backgroundColor) {
                    var path = new drawing.Path({
                        fill: { color: backgroundColor.toCssRgba() },
                        stroke: null
                    });
                    path.moveTo(box.left, box.top).lineTo(box.right, box.top).lineTo(box.right, box.bottom).lineTo(box.left, box.bottom).close();
                    background.append(path);
                }
                for (var i = backgroundImage.length; --i >= 0;) {
                    drawOneBackground(background, box, backgroundImage[i], backgroundRepeat[i % backgroundRepeat.length], backgroundPosition[i % backgroundPosition.length], backgroundOrigin[i % backgroundOrigin.length], backgroundSize[i % backgroundSize.length]);
                }
            }
            function drawOneBackground(group, box, background, backgroundRepeat, backgroundPosition, backgroundOrigin, backgroundSize) {
                if (!background || background == 'none') {
                    return;
                }
                if (background.type == 'url') {
                    if (/^url\(\"data:image\/svg/i.test(background.url)) {
                        return;
                    }
                    var img = IMAGE_CACHE[background.url];
                    if (img && img.width > 0 && img.height > 0) {
                        drawBackgroundImage(group, box, img.width, img.height, function (group, rect) {
                            group.append(new drawing.Image(background.url, rect));
                        });
                    }
                } else if (background.type == 'linear') {
                    drawBackgroundImage(group, box, box.width, box.height, gradientRenderer(background));
                } else {
                    return;
                }
                function drawBackgroundImage(group, box, img_width, img_height, renderBG) {
                    var aspect_ratio = img_width / img_height, f;
                    var orgBox = box;
                    if (backgroundOrigin == 'content-box') {
                        orgBox = innerBox(orgBox, 'border-*-width', element);
                        orgBox = innerBox(orgBox, 'padding-*', element);
                    } else if (backgroundOrigin == 'padding-box') {
                        orgBox = innerBox(orgBox, 'border-*-width', element);
                    }
                    if (!/^\s*auto(\s+auto)?\s*$/.test(backgroundSize)) {
                        if (backgroundSize == 'contain') {
                            f = Math.min(orgBox.width / img_width, orgBox.height / img_height);
                            img_width *= f;
                            img_height *= f;
                        } else if (backgroundSize == 'cover') {
                            f = Math.max(orgBox.width / img_width, orgBox.height / img_height);
                            img_width *= f;
                            img_height *= f;
                        } else {
                            var size = backgroundSize.split(/\s+/g);
                            if (/%$/.test(size[0])) {
                                img_width = orgBox.width * parseFloat(size[0]) / 100;
                            } else {
                                img_width = parseFloat(size[0]);
                            }
                            if (size.length == 1 || size[1] == 'auto') {
                                img_height = img_width / aspect_ratio;
                            } else if (/%$/.test(size[1])) {
                                img_height = orgBox.height * parseFloat(size[1]) / 100;
                            } else {
                                img_height = parseFloat(size[1]);
                            }
                        }
                    }
                    var pos = (backgroundPosition + '').split(/\s+/);
                    if (pos.length == 1) {
                        pos[1] = '50%';
                    }
                    if (/%$/.test(pos[0])) {
                        pos[0] = parseFloat(pos[0]) / 100 * (orgBox.width - img_width);
                    } else {
                        pos[0] = parseFloat(pos[0]);
                    }
                    if (/%$/.test(pos[1])) {
                        pos[1] = parseFloat(pos[1]) / 100 * (orgBox.height - img_height);
                    } else {
                        pos[1] = parseFloat(pos[1]);
                    }
                    var rect = new geo.Rect([
                        orgBox.left + pos[0],
                        orgBox.top + pos[1]
                    ], [
                        img_width,
                        img_height
                    ]);
                    function rewX() {
                        while (rect.origin.x > box.left) {
                            rect.origin.x -= img_width;
                        }
                    }
                    function rewY() {
                        while (rect.origin.y > box.top) {
                            rect.origin.y -= img_height;
                        }
                    }
                    function repeatX() {
                        while (rect.origin.x < box.right) {
                            renderBG(group, rect.clone());
                            rect.origin.x += img_width;
                        }
                    }
                    if (backgroundRepeat == 'no-repeat') {
                        renderBG(group, rect);
                    } else if (backgroundRepeat == 'repeat-x') {
                        rewX();
                        repeatX();
                    } else if (backgroundRepeat == 'repeat-y') {
                        rewY();
                        while (rect.origin.y < box.bottom) {
                            renderBG(group, rect.clone());
                            rect.origin.y += img_height;
                        }
                    } else if (backgroundRepeat == 'repeat') {
                        rewX();
                        rewY();
                        var origin = rect.origin.clone();
                        while (rect.origin.y < box.bottom) {
                            rect.origin.x = origin.x;
                            repeatX();
                            rect.origin.y += img_height;
                        }
                    }
                }
            }
            function drawBullet() {
                var listStyleType = getPropertyValue(style, 'list-style-type');
                if (listStyleType == 'none') {
                    return;
                }
                var listStylePosition = getPropertyValue(style, 'list-style-position');
                function _drawBullet(f) {
                    saveStyle(element, function () {
                        element.style.position = 'relative';
                        var bullet = element.ownerDocument.createElement(KENDO_PSEUDO_ELEMENT);
                        bullet.style.position = 'absolute';
                        bullet.style.boxSizing = 'border-box';
                        if (listStylePosition == 'outside') {
                            bullet.style.width = '6em';
                            bullet.style.left = '-6.8em';
                            bullet.style.textAlign = 'right';
                        } else {
                            bullet.style.left = '0px';
                        }
                        f(bullet);
                        element.insertBefore(bullet, element.firstChild);
                        renderElement(bullet, group);
                        element.removeChild(bullet);
                    });
                }
                function elementIndex(f) {
                    var a = element.parentNode.children;
                    var k = element.getAttribute('kendo-split-index');
                    if (k != null) {
                        return f(k | 0, a.length);
                    }
                    for (var i = 0; i < a.length; ++i) {
                        if (a[i] === element) {
                            return f(i, a.length);
                        }
                    }
                }
                switch (listStyleType) {
                case 'circle':
                case 'disc':
                case 'square':
                    _drawBullet(function (bullet) {
                        bullet.style.fontSize = '60%';
                        bullet.style.lineHeight = '200%';
                        bullet.style.paddingRight = '0.5em';
                        bullet.style.fontFamily = 'DejaVu Serif';
                        bullet.innerHTML = {
                            'disc': '\u25CF',
                            'circle': '\u25EF',
                            'square': '\u25A0'
                        }[listStyleType];
                    });
                    break;
                case 'decimal':
                case 'decimal-leading-zero':
                    _drawBullet(function (bullet) {
                        elementIndex(function (idx) {
                            ++idx;
                            if (listStyleType == 'decimal-leading-zero' && (idx + '').length < 2) {
                                idx = '0' + idx;
                            }
                            bullet.innerHTML = idx + '.';
                        });
                    });
                    break;
                case 'lower-roman':
                case 'upper-roman':
                    _drawBullet(function (bullet) {
                        elementIndex(function (idx) {
                            idx = romanNumeral(idx + 1);
                            if (listStyleType == 'upper-roman') {
                                idx = idx.toUpperCase();
                            }
                            bullet.innerHTML = idx + '.';
                        });
                    });
                    break;
                case 'lower-latin':
                case 'lower-alpha':
                case 'upper-latin':
                case 'upper-alpha':
                    _drawBullet(function (bullet) {
                        elementIndex(function (idx) {
                            idx = alphaNumeral(idx);
                            if (/^upper/i.test(listStyleType)) {
                                idx = idx.toUpperCase();
                            }
                            bullet.innerHTML = idx + '.';
                        });
                    });
                    break;
                }
            }
            function drawOneBox(box, isFirst, isLast) {
                if (box.width === 0 || box.height === 0) {
                    return;
                }
                drawBackground(box);
                var shouldDrawLeft = left.width > 0 && (isFirst && dir == 'ltr' || isLast && dir == 'rtl');
                var shouldDrawRight = right.width > 0 && (isLast && dir == 'ltr' || isFirst && dir == 'rtl');
                if (top.width === 0 && left.width === 0 && right.width === 0 && bottom.width === 0) {
                    return;
                }
                if (true) {
                    if (top.color == right.color && top.color == bottom.color && top.color == left.color) {
                        if (top.width == right.width && top.width == bottom.width && top.width == left.width) {
                            if (shouldDrawLeft && shouldDrawRight) {
                                box = innerBox(box, top.width / 2);
                                var path = elementRoundBox(element, box, top.width / 2);
                                path.options.stroke = {
                                    color: top.color,
                                    width: top.width
                                };
                                group.append(path);
                                return;
                            }
                        }
                    }
                    if (rTL0.x === 0 && rTR0.x === 0 && rBR0.x === 0 && rBL0.x === 0) {
                        if (top.width < 2 && left.width < 2 && right.width < 2 && bottom.width < 2) {
                            if (top.width > 0) {
                                group.append(new drawing.Path({
                                    stroke: {
                                        width: top.width,
                                        color: top.color
                                    }
                                }).moveTo(box.left, box.top + top.width / 2).lineTo(box.right, box.top + top.width / 2));
                            }
                            if (bottom.width > 0) {
                                group.append(new drawing.Path({
                                    stroke: {
                                        width: bottom.width,
                                        color: bottom.color
                                    }
                                }).moveTo(box.left, box.bottom - bottom.width / 2).lineTo(box.right, box.bottom - bottom.width / 2));
                            }
                            if (shouldDrawLeft) {
                                group.append(new drawing.Path({
                                    stroke: {
                                        width: left.width,
                                        color: left.color
                                    }
                                }).moveTo(box.left + left.width / 2, box.top).lineTo(box.left + left.width / 2, box.bottom));
                            }
                            if (shouldDrawRight) {
                                group.append(new drawing.Path({
                                    stroke: {
                                        width: right.width,
                                        color: right.color
                                    }
                                }).moveTo(box.right - right.width / 2, box.top).lineTo(box.right - right.width / 2, box.bottom));
                            }
                            return;
                        }
                    }
                }
                var tmp = adjustBorderRadiusForBox(box, rTL0, rTR0, rBR0, rBL0);
                var rTL = tmp.tl;
                var rTR = tmp.tr;
                var rBR = tmp.br;
                var rBL = tmp.bl;
                drawEdge(top.color, box.width, top.width, left.width, right.width, rTL, rTR, [
                    1,
                    0,
                    0,
                    1,
                    box.left,
                    box.top
                ]);
                drawEdge(bottom.color, box.width, bottom.width, right.width, left.width, rBR, rBL, [
                    -1,
                    0,
                    0,
                    -1,
                    box.right,
                    box.bottom
                ]);
                function inv(p) {
                    return {
                        x: p.y,
                        y: p.x
                    };
                }
                drawEdge(left.color, box.height, left.width, bottom.width, top.width, inv(rBL), inv(rTL), [
                    0,
                    -1,
                    1,
                    0,
                    box.left,
                    box.bottom
                ]);
                drawEdge(right.color, box.height, right.width, top.width, bottom.width, inv(rTR), inv(rBR), [
                    0,
                    1,
                    -1,
                    0,
                    box.right,
                    box.top
                ]);
            }
        }
        function gradientRenderer(gradient) {
            return function (group, rect) {
                var width = rect.width(), height = rect.height();
                switch (gradient.type) {
                case 'linear':
                    var angle = gradient.angle != null ? gradient.angle : Math.PI;
                    switch (gradient.to) {
                    case 'top':
                        angle = 0;
                        break;
                    case 'left':
                        angle = -Math.PI / 2;
                        break;
                    case 'bottom':
                        angle = Math.PI;
                        break;
                    case 'right':
                        angle = Math.PI / 2;
                        break;
                    case 'top left':
                    case 'left top':
                        angle = -Math.atan2(height, width);
                        break;
                    case 'top right':
                    case 'right top':
                        angle = Math.atan2(height, width);
                        break;
                    case 'bottom left':
                    case 'left bottom':
                        angle = Math.PI + Math.atan2(height, width);
                        break;
                    case 'bottom right':
                    case 'right bottom':
                        angle = Math.PI - Math.atan2(height, width);
                        break;
                    }
                    if (gradient.reverse) {
                        angle -= Math.PI;
                    }
                    angle %= 2 * Math.PI;
                    if (angle < 0) {
                        angle += 2 * Math.PI;
                    }
                    var pxlen = Math.abs(width * Math.sin(angle)) + Math.abs(height * Math.cos(angle));
                    var scaledAngle = Math.atan(width * Math.tan(angle) / height);
                    var sin = Math.sin(scaledAngle), cos = Math.cos(scaledAngle);
                    var len = Math.abs(sin) + Math.abs(cos);
                    var x = len / 2 * sin;
                    var y = len / 2 * cos;
                    if (angle > Math.PI / 2 && angle <= 3 * Math.PI / 2) {
                        x = -x;
                        y = -y;
                    }
                    var implicit = [], right = 0;
                    var stops = gradient.stops.map(function (s, i) {
                        var offset = s.percent;
                        if (offset) {
                            offset = parseFloat(offset) / 100;
                        } else if (s.length) {
                            offset = parseFloat(s.length) / pxlen;
                        } else if (i === 0) {
                            offset = 0;
                        } else if (i == gradient.stops.length - 1) {
                            offset = 1;
                        }
                        var stop = {
                            color: s.color.toCssRgba(),
                            offset: offset
                        };
                        if (offset != null) {
                            right = offset;
                            implicit.forEach(function (s, i) {
                                var stop = s.stop;
                                stop.offset = s.left + (right - s.left) * (i + 1) / (implicit.length + 1);
                            });
                            implicit = [];
                        } else {
                            implicit.push({
                                left: right,
                                stop: stop
                            });
                        }
                        return stop;
                    });
                    var start = [
                        0.5 - x,
                        0.5 + y
                    ];
                    var end = [
                        0.5 + x,
                        0.5 - y
                    ];
                    group.append(drawing.Path.fromRect(rect).stroke(null).fill(new drawing.LinearGradient({
                        start: start,
                        end: end,
                        stops: stops,
                        userSpace: false
                    })));
                    break;
                case 'radial':
                    if (window.console && window.console.log) {
                        window.console.log('Radial gradients are not yet supported in HTML renderer');
                    }
                    break;
                }
            };
        }
        function maybeRenderWidget(element, group) {
            if (element.getAttribute(kendo.attr('role'))) {
                var widget = kendo.widgetInstance($(element));
                if (widget && (widget.exportDOMVisual || widget.exportVisual)) {
                    var visual;
                    if (widget.exportDOMVisual) {
                        visual = widget.exportDOMVisual();
                    } else {
                        visual = widget.exportVisual();
                    }
                    if (!visual) {
                        return false;
                    }
                    var wrap = new drawing.Group();
                    wrap.children.push(visual);
                    var bbox = element.getBoundingClientRect();
                    wrap.transform(geo.transform().translate(bbox.left, bbox.top));
                    group.append(wrap);
                    return true;
                }
            }
        }
        function renderImage(element, url, group) {
            var box = getContentBox(element);
            var rect = new geo.Rect([
                box.left,
                box.top
            ], [
                box.width,
                box.height
            ]);
            var image = new drawing.Image(url, rect);
            setClipping(image, elementRoundBox(element, box, 'content'));
            group.append(image);
        }
        function zIndexSort(a, b) {
            var sa = getComputedStyle(a);
            var sb = getComputedStyle(b);
            var za = parseFloat(getPropertyValue(sa, 'z-index'));
            var zb = parseFloat(getPropertyValue(sb, 'z-index'));
            var pa = getPropertyValue(sa, 'position');
            var pb = getPropertyValue(sb, 'position');
            if (isNaN(za) && isNaN(zb)) {
                if (/static|absolute/.test(pa) && /static|absolute/.test(pb)) {
                    return 0;
                }
                if (pa == 'static') {
                    return -1;
                }
                if (pb == 'static') {
                    return 1;
                }
                return 0;
            }
            if (isNaN(za)) {
                return zb === 0 ? 0 : zb > 0 ? -1 : 1;
            }
            if (isNaN(zb)) {
                return za === 0 ? 0 : za > 0 ? 1 : -1;
            }
            return parseFloat(za) - parseFloat(zb);
        }
        function isFormField(element) {
            return /^(?:textarea|select|input)$/i.test(element.tagName);
        }
        function getSelectedOption(element) {
            if (element.selectedOptions && element.selectedOptions.length > 0) {
                return element.selectedOptions[0];
            }
            return element.options[element.selectedIndex];
        }
        function renderCheckbox(element, group) {
            var style = getComputedStyle(element);
            var color = getPropertyValue(style, 'color');
            var box = element.getBoundingClientRect();
            if (element.type == 'checkbox') {
                group.append(drawing.Path.fromRect(new geo.Rect([
                    box.left + 1,
                    box.top + 1
                ], [
                    box.width - 2,
                    box.height - 2
                ])).stroke(color, 1));
                if (element.checked) {
                    group.append(new drawing.Path().stroke(color, 1.2).moveTo(box.left + 0.22 * box.width, box.top + 0.55 * box.height).lineTo(box.left + 0.45 * box.width, box.top + 0.75 * box.height).lineTo(box.left + 0.78 * box.width, box.top + 0.22 * box.width));
                }
            } else {
                group.append(new drawing.Circle(new geo.Circle([
                    (box.left + box.right) / 2,
                    (box.top + box.bottom) / 2
                ], Math.min(box.width - 2, box.height - 2) / 2)).stroke(color, 1));
                if (element.checked) {
                    group.append(new drawing.Circle(new geo.Circle([
                        (box.left + box.right) / 2,
                        (box.top + box.bottom) / 2
                    ], Math.min(box.width - 8, box.height - 8) / 2)).fill(color).stroke(null));
                }
            }
        }
        function renderFormField(element, group) {
            var tag = element.tagName.toLowerCase();
            if (tag == 'input' && (element.type == 'checkbox' || element.type == 'radio')) {
                return renderCheckbox(element, group);
            }
            var p = element.parentNode;
            var doc = element.ownerDocument;
            var el = doc.createElement(KENDO_PSEUDO_ELEMENT);
            var option;
            el.style.cssText = getCssText(getComputedStyle(element));
            if (tag == 'input') {
                el.style.whiteSpace = 'pre';
            }
            if (tag == 'select' || tag == 'textarea') {
                el.style.overflow = 'auto';
            }
            if (tag == 'select') {
                if (element.multiple) {
                    for (var i = 0; i < element.options.length; ++i) {
                        option = doc.createElement(KENDO_PSEUDO_ELEMENT);
                        option.style.cssText = getCssText(getComputedStyle(element.options[i]));
                        option.style.display = 'block';
                        option.textContent = element.options[i].textContent;
                        el.appendChild(option);
                    }
                } else {
                    option = getSelectedOption(element);
                    if (option) {
                        el.textContent = option.textContent;
                    }
                }
            } else {
                el.textContent = element.value;
            }
            p.insertBefore(el, element);
            el.scrollLeft = element.scrollLeft;
            el.scrollTop = element.scrollTop;
            element.style.display = 'none';
            renderContents(el, group);
            element.style.display = '';
            p.removeChild(el);
        }
        function renderContents(element, group) {
            if (nodeInfo._stackingContext.element === element) {
                nodeInfo._stackingContext.group = group;
            }
            switch (element.tagName.toLowerCase()) {
            case 'img':
                renderImage(element, element.src, group);
                break;
            case 'canvas':
                try {
                    renderImage(element, element.toDataURL('image/png'), group);
                } catch (ex) {
                }
                break;
            case 'textarea':
            case 'input':
            case 'select':
                renderFormField(element, group);
                break;
            default:
                var blocks = [], floats = [], inline = [], positioned = [];
                for (var i = element.firstChild; i; i = i.nextSibling) {
                    switch (i.nodeType) {
                    case 3:
                        if (/\S/.test(i.data)) {
                            renderText(element, i, group);
                        }
                        break;
                    case 1:
                        var style = getComputedStyle(i);
                        var display = getPropertyValue(style, 'display');
                        var floating = getPropertyValue(style, 'float');
                        var position = getPropertyValue(style, 'position');
                        if (position != 'static') {
                            positioned.push(i);
                        } else if (display != 'inline') {
                            if (floating != 'none') {
                                floats.push(i);
                            } else {
                                blocks.push(i);
                            }
                        } else {
                            inline.push(i);
                        }
                        break;
                    }
                }
                mergeSort(blocks, zIndexSort).forEach(function (el) {
                    renderElement(el, group);
                });
                mergeSort(floats, zIndexSort).forEach(function (el) {
                    renderElement(el, group);
                });
                mergeSort(inline, zIndexSort).forEach(function (el) {
                    renderElement(el, group);
                });
                mergeSort(positioned, zIndexSort).forEach(function (el) {
                    renderElement(el, group);
                });
            }
        }
        function renderText(element, node, group) {
            if (emptyClipbox()) {
                return;
            }
            var style = getComputedStyle(element);
            if (parseFloat(getPropertyValue(style, 'text-indent')) < -500) {
                return;
            }
            var text = node.data;
            var start = 0;
            var end = text.search(/\S\s*$/) + 1;
            if (!end) {
                return;
            }
            var fontSize = getPropertyValue(style, 'font-size');
            var lineHeight = getPropertyValue(style, 'line-height');
            var font = [
                getPropertyValue(style, 'font-style'),
                getPropertyValue(style, 'font-variant'),
                getPropertyValue(style, 'font-weight'),
                fontSize,
                getPropertyValue(style, 'font-family')
            ].join(' ');
            fontSize = parseFloat(fontSize);
            lineHeight = parseFloat(lineHeight);
            if (fontSize === 0) {
                return;
            }
            var color = getPropertyValue(style, 'color');
            var range = element.ownerDocument.createRange();
            var align = getPropertyValue(style, 'text-align');
            var isJustified = align == 'justify';
            var whiteSpace = getPropertyValue(style, 'white-space');
            var textOverflow, saveTextOverflow;
            if (browser.msie) {
                textOverflow = style.textOverflow;
                if (textOverflow == 'ellipsis') {
                    saveTextOverflow = element.style.textOverflow;
                    element.style.textOverflow = 'clip';
                }
            }
            var estimateLineLength = element.getBoundingClientRect().width / fontSize * 5;
            if (estimateLineLength === 0) {
                estimateLineLength = 500;
            }
            var prevLineBottom = null;
            while (!doChunk()) {
            }
            if (browser.msie && textOverflow == 'ellipsis') {
                element.style.textOverflow = saveTextOverflow;
            }
            return;
            function actuallyGetRangeBoundingRect(range) {
                if (browser.msie || browser.chrome) {
                    var rectangles = range.getClientRects(), box = {
                            top: +Infinity,
                            right: -Infinity,
                            bottom: -Infinity,
                            left: +Infinity
                        };
                    for (var i = 0; i < rectangles.length; ++i) {
                        var b = rectangles[i];
                        if (b.width <= 1 || b.bottom === prevLineBottom) {
                            continue;
                        }
                        box.left = Math.min(b.left, box.left);
                        box.top = Math.min(b.top, box.top);
                        box.right = Math.max(b.right, box.right);
                        box.bottom = Math.max(b.bottom, box.bottom);
                    }
                    box.width = box.right - box.left;
                    box.height = box.bottom - box.top;
                    return box;
                }
                return range.getBoundingClientRect();
            }
            function doChunk() {
                var origStart = start;
                var box, pos = text.substr(start).search(/\S/);
                start += pos;
                if (pos < 0 || start >= end) {
                    return true;
                }
                range.setStart(node, start);
                range.setEnd(node, start + 1);
                box = actuallyGetRangeBoundingRect(range);
                var found = false;
                if (isJustified) {
                    pos = text.substr(start).search(/\s/);
                    if (pos >= 0) {
                        range.setEnd(node, start + pos);
                        var r = actuallyGetRangeBoundingRect(range);
                        if (r.bottom == box.bottom) {
                            box = r;
                            found = true;
                            start += pos;
                        }
                    }
                }
                if (!found) {
                    pos = function findEOL(min, eol, max) {
                        range.setEnd(node, eol);
                        var r = actuallyGetRangeBoundingRect(range);
                        if (r.bottom != box.bottom && min < eol) {
                            return findEOL(min, min + eol >> 1, eol);
                        } else if (r.right != box.right) {
                            box = r;
                            if (eol < max) {
                                return findEOL(eol, eol + max >> 1, max);
                            } else {
                                return eol;
                            }
                        } else {
                            return eol;
                        }
                    }(start, Math.min(end, start + estimateLineLength), end);
                    if (pos == start) {
                        return true;
                    }
                    start = pos;
                    pos = range.toString().search(/\s+$/);
                    if (pos === 0) {
                        return;
                    }
                    if (pos > 0) {
                        range.setEnd(node, range.startOffset + pos);
                        box = actuallyGetRangeBoundingRect(range);
                    }
                }
                if (browser.msie) {
                    box = range.getClientRects()[0];
                }
                var str = range.toString();
                if (!/^(?:pre|pre-wrap)$/i.test(whiteSpace)) {
                    str = str.replace(/\s+/g, ' ');
                } else if (/\t/.test(str)) {
                    var cc = 0;
                    for (pos = origStart; pos < range.startOffset; ++pos) {
                        var code = text.charCodeAt(pos);
                        if (code == 9) {
                            cc += 8 - cc % 8;
                        } else if (code == 10 || code == 13) {
                            cc = 0;
                        } else {
                            cc++;
                        }
                    }
                    while ((pos = str.search('\t')) >= 0) {
                        var indent = '        '.substr(0, 8 - (cc + pos) % 8);
                        str = str.substr(0, pos) + indent + str.substr(pos + 1);
                    }
                }
                if (!found) {
                    prevLineBottom = box.bottom;
                }
                drawText(str, box);
            }
            function drawText(str, box) {
                if (browser.msie && !isNaN(lineHeight)) {
                    var height = getFontHeight(font);
                    var top = (box.top + box.bottom - height) / 2;
                    box = {
                        top: top,
                        right: box.right,
                        bottom: top + height,
                        left: box.left,
                        height: height,
                        width: box.right - box.left
                    };
                }
                var text = new TextRect(str, new geo.Rect([
                    box.left,
                    box.top
                ], [
                    box.width,
                    box.height
                ]), {
                    font: font,
                    fill: { color: color }
                });
                group.append(text);
                decorate(box);
            }
            function decorate(box) {
                line(nodeInfo['underline'], box.bottom);
                line(nodeInfo['line-through'], box.bottom - box.height / 2.7);
                line(nodeInfo['overline'], box.top);
                function line(color, ypos) {
                    if (color) {
                        var width = fontSize / 12;
                        var path = new drawing.Path({
                            stroke: {
                                width: width,
                                color: color
                            }
                        });
                        ypos -= width;
                        path.moveTo(box.left, ypos).lineTo(box.right, ypos);
                        group.append(path);
                    }
                }
            }
        }
        function groupInStackingContext(element, group, zIndex) {
            var main;
            if (zIndex != 'auto') {
                main = nodeInfo._stackingContext.group;
                zIndex = parseFloat(zIndex);
            } else {
                main = group;
                zIndex = 0;
            }
            var a = main.children;
            for (var i = 0; i < a.length; ++i) {
                if (a[i]._dom_zIndex != null && a[i]._dom_zIndex > zIndex) {
                    break;
                }
            }
            var tmp = new drawing.Group();
            main.insertAt(tmp, i);
            tmp._dom_zIndex = zIndex;
            if (main !== group) {
                if (nodeInfo._clipbox) {
                    var m = nodeInfo._matrix.invert();
                    var r = nodeInfo._clipbox.transformCopy(m);
                    setClipping(tmp, drawing.Path.fromRect(r));
                }
            }
            return tmp;
        }
        function renderElement(element, container) {
            var style = getComputedStyle(element);
            var counterReset = getPropertyValue(style, 'counter-reset');
            if (counterReset) {
                doCounters(splitProperty(counterReset, /^\s+/), resetCounter, 0);
            }
            var counterIncrement = getPropertyValue(style, 'counter-increment');
            if (counterIncrement) {
                doCounters(splitProperty(counterIncrement, /^\s+/), incCounter, 1);
            }
            if (/^(style|script|link|meta|iframe|svg|col|colgroup)$/i.test(element.tagName)) {
                return;
            }
            if (nodeInfo._clipbox == null) {
                return;
            }
            var opacity = parseFloat(getPropertyValue(style, 'opacity'));
            var visibility = getPropertyValue(style, 'visibility');
            var display = getPropertyValue(style, 'display');
            if (opacity === 0 || visibility == 'hidden' || display == 'none') {
                return;
            }
            var tr = getTransform(style);
            var group;
            var zIndex = getPropertyValue(style, 'z-index');
            if ((tr || opacity < 1) && zIndex == 'auto') {
                zIndex = 0;
            }
            group = groupInStackingContext(element, container, zIndex);
            if (opacity < 1) {
                group.opacity(opacity * group.opacity());
            }
            pushNodeInfo(element, style, group);
            if (!tr) {
                _renderWithPseudoElements(element, group);
            } else {
                saveStyle(element, function () {
                    pleaseSetPropertyValue(element.style, 'transform', 'none', 'important');
                    pleaseSetPropertyValue(element.style, 'transition', 'none', 'important');
                    if (getPropertyValue(style, 'position') == 'static') {
                        pleaseSetPropertyValue(element.style, 'position', 'relative', 'important');
                    }
                    var bbox = element.getBoundingClientRect();
                    var x = bbox.left + tr.origin[0];
                    var y = bbox.top + tr.origin[1];
                    var m = [
                        1,
                        0,
                        0,
                        1,
                        -x,
                        -y
                    ];
                    m = mmul(m, tr.matrix);
                    m = mmul(m, [
                        1,
                        0,
                        0,
                        1,
                        x,
                        y
                    ]);
                    m = setTransform(group, m);
                    nodeInfo._matrix = nodeInfo._matrix.multiplyCopy(m);
                    _renderWithPseudoElements(element, group);
                });
            }
            popNodeInfo();
        }
        function mmul(a, b) {
            var a1 = a[0], b1 = a[1], c1 = a[2], d1 = a[3], e1 = a[4], f1 = a[5];
            var a2 = b[0], b2 = b[1], c2 = b[2], d2 = b[3], e2 = b[4], f2 = b[5];
            return [
                a1 * a2 + b1 * c2,
                a1 * b2 + b1 * d2,
                c1 * a2 + d1 * c2,
                c1 * b2 + d1 * d2,
                e1 * a2 + f1 * c2 + e2,
                e1 * b2 + f1 * d2 + f2
            ];
        }
    }(window.kendo.jQuery, parseFloat, Math));
}, typeof define == 'function' && define.amd ? define : function (a1, a2, a3) {
    (a3 || a2)();
}));
(function (f, define) {
    define('drawing/animation', [
        'drawing/geometry',
        'drawing/core'
    ], f);
}(function () {
    (function ($) {
        var noop = $.noop, kendo = window.kendo, Class = kendo.Class, util = kendo.util, animationFrame = kendo.animationFrame, deepExtend = kendo.deepExtend;
        var Animation = Class.extend({
            init: function (element, options) {
                var anim = this;
                anim.options = deepExtend({}, anim.options, options);
                anim.element = element;
            },
            options: {
                duration: 500,
                easing: 'swing'
            },
            setup: noop,
            step: noop,
            play: function () {
                var anim = this, options = anim.options, easing = $.easing[options.easing], duration = options.duration, delay = options.delay || 0, start = util.now() + delay, finish = start + duration;
                if (duration === 0) {
                    anim.step(1);
                    anim.abort();
                } else {
                    setTimeout(function () {
                        var loop = function () {
                            if (anim._stopped) {
                                return;
                            }
                            var wallTime = util.now();
                            var time = util.limitValue(wallTime - start, 0, duration);
                            var pos = time / duration;
                            var easingPos = easing(pos, time, 0, 1, duration);
                            anim.step(easingPos);
                            if (wallTime < finish) {
                                animationFrame(loop);
                            } else {
                                anim.abort();
                            }
                        };
                        loop();
                    }, delay);
                }
            },
            abort: function () {
                this._stopped = true;
            },
            destroy: function () {
                this.abort();
            }
        });
        var AnimationFactory = function () {
            this._items = [];
        };
        AnimationFactory.prototype = {
            register: function (name, type) {
                this._items.push({
                    name: name,
                    type: type
                });
            },
            create: function (element, options) {
                var items = this._items;
                var match;
                if (options && options.type) {
                    var type = options.type.toLowerCase();
                    for (var i = 0; i < items.length; i++) {
                        if (items[i].name.toLowerCase() === type) {
                            match = items[i];
                            break;
                        }
                    }
                }
                if (match) {
                    return new match.type(element, options);
                }
            }
        };
        AnimationFactory.current = new AnimationFactory();
        Animation.create = function (type, element, options) {
            return AnimationFactory.current.create(type, element, options);
        };
        deepExtend(kendo.drawing, {
            Animation: Animation,
            AnimationFactory: AnimationFactory
        });
    }(window.kendo.jQuery));
}, typeof define == 'function' && define.amd ? define : function (a1, a2, a3) {
    (a3 || a2)();
}));
(function (f, define) {
    define('kendo.drawing', [
        'kendo.color',
        'util/main',
        'util/text-metrics',
        'util/base64',
        'mixins/observers',
        'drawing/geometry',
        'drawing/core',
        'drawing/mixins',
        'drawing/shapes',
        'drawing/parser',
        'drawing/search',
        'drawing/svg',
        'drawing/canvas',
        'drawing/vml',
        'drawing/html',
        'drawing/animation'
    ], f);
}(function () {
    var __meta__ = {
        id: 'drawing',
        name: 'Drawing API',
        category: 'framework',
        description: 'The Kendo UI low-level drawing API',
        depends: [
            'core',
            'color',
            'popup'
        ]
    };
}, typeof define == 'function' && define.amd ? define : function (a1, a2, a3) {
    (a3 || a2)();
}));
/** 
 * Kendo UI v2016.3.1118 (http://www.telerik.com/kendo-ui)                                                                                                                                              
 * Copyright 2016 Telerik AD. All rights reserved.                                                                                                                                                      
 *                                                                                                                                                                                                      
 * Kendo UI commercial licenses may be obtained at                                                                                                                                                      
 * http://www.telerik.com/purchase/license-agreement/kendo-ui-complete                                                                                                                                  
 * If you do not own a commercial license, this file shall be governed by the trial license terms.                                                                                                      
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       

*/
(function (f, define) {
    define('util/main', ['kendo.core'], f);
}(function () {
    (function () {
        var math = Math, kendo = window.kendo, deepExtend = kendo.deepExtend;
        var DEG_TO_RAD = math.PI / 180, MAX_NUM = Number.MAX_VALUE, MIN_NUM = -Number.MAX_VALUE, UNDEFINED = 'undefined';
        function defined(value) {
            return typeof value !== UNDEFINED;
        }
        function round(value, precision) {
            var power = pow(precision);
            return math.round(value * power) / power;
        }
        function pow(p) {
            if (p) {
                return math.pow(10, p);
            } else {
                return 1;
            }
        }
        function limitValue(value, min, max) {
            return math.max(math.min(value, max), min);
        }
        function rad(degrees) {
            return degrees * DEG_TO_RAD;
        }
        function deg(radians) {
            return radians / DEG_TO_RAD;
        }
        function isNumber(val) {
            return typeof val === 'number' && !isNaN(val);
        }
        function valueOrDefault(value, defaultValue) {
            return defined(value) ? value : defaultValue;
        }
        function sqr(value) {
            return value * value;
        }
        function objectKey(object) {
            var parts = [];
            for (var key in object) {
                parts.push(key + object[key]);
            }
            return parts.sort().join('');
        }
        function hashKey(str) {
            var hash = 2166136261;
            for (var i = 0; i < str.length; ++i) {
                hash += (hash << 1) + (hash << 4) + (hash << 7) + (hash << 8) + (hash << 24);
                hash ^= str.charCodeAt(i);
            }
            return hash >>> 0;
        }
        function hashObject(object) {
            return hashKey(objectKey(object));
        }
        var now = Date.now;
        if (!now) {
            now = function () {
                return new Date().getTime();
            };
        }
        function arrayLimits(arr) {
            var length = arr.length, i, min = MAX_NUM, max = MIN_NUM;
            for (i = 0; i < length; i++) {
                max = math.max(max, arr[i]);
                min = math.min(min, arr[i]);
            }
            return {
                min: min,
                max: max
            };
        }
        function arrayMin(arr) {
            return arrayLimits(arr).min;
        }
        function arrayMax(arr) {
            return arrayLimits(arr).max;
        }
        function sparseArrayMin(arr) {
            return sparseArrayLimits(arr).min;
        }
        function sparseArrayMax(arr) {
            return sparseArrayLimits(arr).max;
        }
        function sparseArrayLimits(arr) {
            var min = MAX_NUM, max = MIN_NUM;
            for (var i = 0, length = arr.length; i < length; i++) {
                var n = arr[i];
                if (n !== null && isFinite(n)) {
                    min = math.min(min, n);
                    max = math.max(max, n);
                }
            }
            return {
                min: min === MAX_NUM ? undefined : min,
                max: max === MIN_NUM ? undefined : max
            };
        }
        function last(array) {
            if (array) {
                return array[array.length - 1];
            }
        }
        function append(first, second) {
            first.push.apply(first, second);
            return first;
        }
        function renderTemplate(text) {
            return kendo.template(text, {
                useWithBlock: false,
                paramName: 'd'
            });
        }
        function renderAttr(name, value) {
            return defined(value) && value !== null ? ' ' + name + '=\'' + value + '\' ' : '';
        }
        function renderAllAttr(attrs) {
            var output = '';
            for (var i = 0; i < attrs.length; i++) {
                output += renderAttr(attrs[i][0], attrs[i][1]);
            }
            return output;
        }
        function renderStyle(attrs) {
            var output = '';
            for (var i = 0; i < attrs.length; i++) {
                var value = attrs[i][1];
                if (defined(value)) {
                    output += attrs[i][0] + ':' + value + ';';
                }
            }
            if (output !== '') {
                return output;
            }
        }
        function renderSize(size) {
            if (typeof size !== 'string') {
                size += 'px';
            }
            return size;
        }
        function renderPos(pos) {
            var result = [];
            if (pos) {
                var parts = kendo.toHyphens(pos).split('-');
                for (var i = 0; i < parts.length; i++) {
                    result.push('k-pos-' + parts[i]);
                }
            }
            return result.join(' ');
        }
        function isTransparent(color) {
            return color === '' || color === null || color === 'none' || color === 'transparent' || !defined(color);
        }
        function arabicToRoman(n) {
            var literals = {
                1: 'i',
                10: 'x',
                100: 'c',
                2: 'ii',
                20: 'xx',
                200: 'cc',
                3: 'iii',
                30: 'xxx',
                300: 'ccc',
                4: 'iv',
                40: 'xl',
                400: 'cd',
                5: 'v',
                50: 'l',
                500: 'd',
                6: 'vi',
                60: 'lx',
                600: 'dc',
                7: 'vii',
                70: 'lxx',
                700: 'dcc',
                8: 'viii',
                80: 'lxxx',
                800: 'dccc',
                9: 'ix',
                90: 'xc',
                900: 'cm',
                1000: 'm'
            };
            var values = [
                1000,
                900,
                800,
                700,
                600,
                500,
                400,
                300,
                200,
                100,
                90,
                80,
                70,
                60,
                50,
                40,
                30,
                20,
                10,
                9,
                8,
                7,
                6,
                5,
                4,
                3,
                2,
                1
            ];
            var roman = '';
            while (n > 0) {
                if (n < values[0]) {
                    values.shift();
                } else {
                    roman += literals[values[0]];
                    n -= values[0];
                }
            }
            return roman;
        }
        function romanToArabic(r) {
            r = r.toLowerCase();
            var digits = {
                i: 1,
                v: 5,
                x: 10,
                l: 50,
                c: 100,
                d: 500,
                m: 1000
            };
            var value = 0, prev = 0;
            for (var i = 0; i < r.length; ++i) {
                var v = digits[r.charAt(i)];
                if (!v) {
                    return null;
                }
                value += v;
                if (v > prev) {
                    value -= 2 * prev;
                }
                prev = v;
            }
            return value;
        }
        function memoize(f) {
            var cache = Object.create(null);
            return function () {
                var id = '';
                for (var i = arguments.length; --i >= 0;) {
                    id += ':' + arguments[i];
                }
                return id in cache ? cache[id] : cache[id] = f.apply(this, arguments);
            };
        }
        function ucs2decode(string) {
            var output = [], counter = 0, length = string.length, value, extra;
            while (counter < length) {
                value = string.charCodeAt(counter++);
                if (value >= 55296 && value <= 56319 && counter < length) {
                    extra = string.charCodeAt(counter++);
                    if ((extra & 64512) == 56320) {
                        output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
                    } else {
                        output.push(value);
                        counter--;
                    }
                } else {
                    output.push(value);
                }
            }
            return output;
        }
        function ucs2encode(array) {
            return array.map(function (value) {
                var output = '';
                if (value > 65535) {
                    value -= 65536;
                    output += String.fromCharCode(value >>> 10 & 1023 | 55296);
                    value = 56320 | value & 1023;
                }
                output += String.fromCharCode(value);
                return output;
            }).join('');
        }
        function mergeSort(a, cmp) {
            if (a.length < 2) {
                return a.slice();
            }
            function merge(a, b) {
                var r = [], ai = 0, bi = 0, i = 0;
                while (ai < a.length && bi < b.length) {
                    if (cmp(a[ai], b[bi]) <= 0) {
                        r[i++] = a[ai++];
                    } else {
                        r[i++] = b[bi++];
                    }
                }
                if (ai < a.length) {
                    r.push.apply(r, a.slice(ai));
                }
                if (bi < b.length) {
                    r.push.apply(r, b.slice(bi));
                }
                return r;
            }
            return function sort(a) {
                if (a.length <= 1) {
                    return a;
                }
                var m = Math.floor(a.length / 2);
                var left = a.slice(0, m);
                var right = a.slice(m);
                left = sort(left);
                right = sort(right);
                return merge(left, right);
            }(a);
        }
        deepExtend(kendo, {
            util: {
                MAX_NUM: MAX_NUM,
                MIN_NUM: MIN_NUM,
                append: append,
                arrayLimits: arrayLimits,
                arrayMin: arrayMin,
                arrayMax: arrayMax,
                defined: defined,
                deg: deg,
                hashKey: hashKey,
                hashObject: hashObject,
                isNumber: isNumber,
                isTransparent: isTransparent,
                last: last,
                limitValue: limitValue,
                now: now,
                objectKey: objectKey,
                round: round,
                rad: rad,
                renderAttr: renderAttr,
                renderAllAttr: renderAllAttr,
                renderPos: renderPos,
                renderSize: renderSize,
                renderStyle: renderStyle,
                renderTemplate: renderTemplate,
                sparseArrayLimits: sparseArrayLimits,
                sparseArrayMin: sparseArrayMin,
                sparseArrayMax: sparseArrayMax,
                sqr: sqr,
                valueOrDefault: valueOrDefault,
                romanToArabic: romanToArabic,
                arabicToRoman: arabicToRoman,
                memoize: memoize,
                ucs2encode: ucs2encode,
                ucs2decode: ucs2decode,
                mergeSort: mergeSort
            }
        });
        kendo.drawing.util = kendo.util;
        kendo.dataviz.util = kendo.util;
    }());
    return window.kendo;
}, typeof define == 'function' && define.amd ? define : function (a1, a2, a3) {
    (a3 || a2)();
}));
(function (f, define) {
    define('pdf/core', [
        'kendo.core',
        'util/main'
    ], f);
}(function () {
    (function (window, parseFloat, undefined) {
        'use strict';
        var kendo = window.kendo;
        var HAS_TYPED_ARRAYS = !!window.Uint8Array;
        var NL = '\n';
        var RESOURCE_COUNTER = 0;
        var BASE64 = function () {
            var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
            return {
                decode: function (str) {
                    var input = str.replace(/[^A-Za-z0-9\+\/\=]/g, ''), i = 0, n = input.length, output = [];
                    while (i < n) {
                        var enc1 = keyStr.indexOf(input.charAt(i++));
                        var enc2 = keyStr.indexOf(input.charAt(i++));
                        var enc3 = keyStr.indexOf(input.charAt(i++));
                        var enc4 = keyStr.indexOf(input.charAt(i++));
                        var chr1 = enc1 << 2 | enc2 >>> 4;
                        var chr2 = (enc2 & 15) << 4 | enc3 >>> 2;
                        var chr3 = (enc3 & 3) << 6 | enc4;
                        output.push(chr1);
                        if (enc3 != 64) {
                            output.push(chr2);
                        }
                        if (enc4 != 64) {
                            output.push(chr3);
                        }
                    }
                    return output;
                },
                encode: function (bytes) {
                    var i = 0, n = bytes.length;
                    var output = '';
                    while (i < n) {
                        var chr1 = bytes[i++];
                        var chr2 = bytes[i++];
                        var chr3 = bytes[i++];
                        var enc1 = chr1 >>> 2;
                        var enc2 = (chr1 & 3) << 4 | chr2 >>> 4;
                        var enc3 = (chr2 & 15) << 2 | chr3 >>> 6;
                        var enc4 = chr3 & 63;
                        if (i - n == 2) {
                            enc3 = enc4 = 64;
                        } else if (i - n == 1) {
                            enc4 = 64;
                        }
                        output += keyStr.charAt(enc1) + keyStr.charAt(enc2) + keyStr.charAt(enc3) + keyStr.charAt(enc4);
                    }
                    return output;
                }
            };
        }();
        var PAPER_SIZE = {
            a0: [
                2383.94,
                3370.39
            ],
            a1: [
                1683.78,
                2383.94
            ],
            a2: [
                1190.55,
                1683.78
            ],
            a3: [
                841.89,
                1190.55
            ],
            a4: [
                595.28,
                841.89
            ],
            a5: [
                419.53,
                595.28
            ],
            a6: [
                297.64,
                419.53
            ],
            a7: [
                209.76,
                297.64
            ],
            a8: [
                147.4,
                209.76
            ],
            a9: [
                104.88,
                147.4
            ],
            a10: [
                73.7,
                104.88
            ],
            b0: [
                2834.65,
                4008.19
            ],
            b1: [
                2004.09,
                2834.65
            ],
            b2: [
                1417.32,
                2004.09
            ],
            b3: [
                1000.63,
                1417.32
            ],
            b4: [
                708.66,
                1000.63
            ],
            b5: [
                498.9,
                708.66
            ],
            b6: [
                354.33,
                498.9
            ],
            b7: [
                249.45,
                354.33
            ],
            b8: [
                175.75,
                249.45
            ],
            b9: [
                124.72,
                175.75
            ],
            b10: [
                87.87,
                124.72
            ],
            c0: [
                2599.37,
                3676.54
            ],
            c1: [
                1836.85,
                2599.37
            ],
            c2: [
                1298.27,
                1836.85
            ],
            c3: [
                918.43,
                1298.27
            ],
            c4: [
                649.13,
                918.43
            ],
            c5: [
                459.21,
                649.13
            ],
            c6: [
                323.15,
                459.21
            ],
            c7: [
                229.61,
                323.15
            ],
            c8: [
                161.57,
                229.61
            ],
            c9: [
                113.39,
                161.57
            ],
            c10: [
                79.37,
                113.39
            ],
            executive: [
                521.86,
                756
            ],
            folio: [
                612,
                936
            ],
            legal: [
                612,
                1008
            ],
            letter: [
                612,
                792
            ],
            tabloid: [
                792,
                1224
            ]
        };
        function makeOutput() {
            var indentLevel = 0, output = BinaryStream();
            function out() {
                for (var i = 0; i < arguments.length; ++i) {
                    var x = arguments[i];
                    if (x === undefined) {
                        throw new Error('Cannot output undefined to PDF');
                    } else if (x instanceof PDFValue) {
                        x.beforeRender(out);
                        x.render(out);
                    } else if (isArray(x)) {
                        renderArray(x, out);
                    } else if (isDate(x)) {
                        renderDate(x, out);
                    } else if (typeof x == 'number') {
                        if (isNaN(x)) {
                            throw new Error('Cannot output NaN to PDF');
                        }
                        var num = x.toFixed(7);
                        if (num.indexOf('.') >= 0) {
                            num = num.replace(/\.?0+$/, '');
                        }
                        if (num == '-0') {
                            num = '0';
                        }
                        output.writeString(num);
                    } else if (/string|boolean/.test(typeof x)) {
                        output.writeString(x + '');
                    } else if (typeof x.get == 'function') {
                        output.write(x.get());
                    } else if (typeof x == 'object') {
                        if (!x) {
                            output.writeString('null');
                        } else {
                            out(new PDFDictionary(x));
                        }
                    }
                }
            }
            out.writeData = function (data) {
                output.write(data);
            };
            out.withIndent = function (f) {
                ++indentLevel;
                f(out);
                --indentLevel;
            };
            out.indent = function () {
                out(NL, pad('', indentLevel * 2, '  '));
                out.apply(null, arguments);
            };
            out.offset = function () {
                return output.offset();
            };
            out.toString = function () {
                throw new Error('FIX CALLER');
            };
            out.get = function () {
                return output.get();
            };
            out.stream = function () {
                return output;
            };
            return out;
        }
        function wrapObject(value, id) {
            var beforeRender = value.beforeRender;
            var renderValue = value.render;
            value.beforeRender = function () {
            };
            value.render = function (out) {
                out(id, ' 0 R');
            };
            value.renderFull = function (out) {
                value._offset = out.offset();
                out(id, ' 0 obj ');
                beforeRender.call(value, out);
                renderValue.call(value, out);
                out(' endobj');
            };
        }
        function getPaperOptions(getOption) {
            if (typeof getOption != 'function') {
                var options = getOption;
                getOption = function (key, def) {
                    return key in options ? options[key] : def;
                };
            }
            var paperSize = getOption('paperSize', PAPER_SIZE.a4);
            if (!paperSize) {
                return {};
            }
            if (typeof paperSize == 'string') {
                paperSize = PAPER_SIZE[paperSize.toLowerCase()];
                if (paperSize == null) {
                    throw new Error('Unknown paper size');
                }
            }
            paperSize[0] = unitsToPoints(paperSize[0]);
            paperSize[1] = unitsToPoints(paperSize[1]);
            if (getOption('landscape', false)) {
                paperSize = [
                    Math.max(paperSize[0], paperSize[1]),
                    Math.min(paperSize[0], paperSize[1])
                ];
            }
            var margin = getOption('margin');
            if (margin) {
                if (typeof margin == 'string' || typeof margin == 'number') {
                    margin = unitsToPoints(margin, 0);
                    margin = {
                        left: margin,
                        top: margin,
                        right: margin,
                        bottom: margin
                    };
                } else {
                    margin = {
                        left: unitsToPoints(margin.left, 0),
                        top: unitsToPoints(margin.top, 0),
                        right: unitsToPoints(margin.right, 0),
                        bottom: unitsToPoints(margin.bottom, 0)
                    };
                }
                if (getOption('addMargin')) {
                    paperSize[0] += margin.left + margin.right;
                    paperSize[1] += margin.top + margin.bottom;
                }
            }
            return {
                paperSize: paperSize,
                margin: margin
            };
        }
        function PDFDocument(options) {
            var self = this;
            var out = makeOutput();
            var objcount = 0;
            var objects = [];
            function getOption(name, defval) {
                return options && options[name] != null ? options[name] : defval;
            }
            self.getOption = getOption;
            self.attach = function (value) {
                if (objects.indexOf(value) < 0) {
                    wrapObject(value, ++objcount);
                    objects.push(value);
                }
                return value;
            };
            self.pages = [];
            self.FONTS = {};
            self.IMAGES = {};
            self.GRAD_COL_FUNCTIONS = {};
            self.GRAD_OPC_FUNCTIONS = {};
            self.GRAD_COL = {};
            self.GRAD_OPC = {};
            var catalog = self.attach(new PDFCatalog());
            var pageTree = self.attach(new PDFPageTree());
            catalog.setPages(pageTree);
            self.addPage = function (options) {
                var paperOptions = getPaperOptions(function (name, defval) {
                    return options && options[name] != null ? options[name] : defval;
                });
                var paperSize = paperOptions.paperSize;
                var margin = paperOptions.margin;
                var contentWidth = paperSize[0];
                var contentHeight = paperSize[1];
                if (margin) {
                    contentWidth -= margin.left + margin.right;
                    contentHeight -= margin.top + margin.bottom;
                }
                var content = new PDFStream(makeOutput(), null, true);
                var props = {
                    Contents: self.attach(content),
                    Parent: pageTree,
                    MediaBox: [
                        0,
                        0,
                        paperSize[0],
                        paperSize[1]
                    ]
                };
                var page = new PDFPage(self, props);
                page._content = content;
                pageTree.addPage(self.attach(page));
                page.transform(1, 0, 0, -1, 0, paperSize[1]);
                if (margin) {
                    page.translate(margin.left, margin.top);
                    page.rect(0, 0, contentWidth, contentHeight);
                    page.clip();
                }
                self.pages.push(page);
                return page;
            };
            self.render = function () {
                var i;
                out('%PDF-1.4', NL, '%ÂÁÚÏÎ', NL, NL);
                for (i = 0; i < objects.length; ++i) {
                    objects[i].renderFull(out);
                    out(NL, NL);
                }
                var xrefOffset = out.offset();
                out('xref', NL, 0, ' ', objects.length + 1, NL);
                out('0000000000 65535 f ', NL);
                for (i = 0; i < objects.length; ++i) {
                    out(zeropad(objects[i]._offset, 10), ' 00000 n ', NL);
                }
                out(NL);
                out('trailer', NL);
                out(new PDFDictionary({
                    Size: objects.length + 1,
                    Root: catalog,
                    Info: new PDFDictionary({
                        Producer: new PDFString(getOption('producer', 'Kendo UI PDF Generator v.' + kendo.version)),
                        Title: new PDFString(getOption('title', '')),
                        Author: new PDFString(getOption('author', '')),
                        Subject: new PDFString(getOption('subject', '')),
                        Keywords: new PDFString(getOption('keywords', '')),
                        Creator: new PDFString(getOption('creator', 'Kendo UI PDF Generator v.' + kendo.version)),
                        CreationDate: getOption('date', new Date())
                    })
                }), NL, NL);
                out('startxref', NL, xrefOffset, NL);
                out('%%EOF', NL);
                return out.stream().offset(0);
            };
        }
        var FONT_CACHE = {
            'Times-Roman': true,
            'Times-Bold': true,
            'Times-Italic': true,
            'Times-BoldItalic': true,
            'Helvetica': true,
            'Helvetica-Bold': true,
            'Helvetica-Oblique': true,
            'Helvetica-BoldOblique': true,
            'Courier': true,
            'Courier-Bold': true,
            'Courier-Oblique': true,
            'Courier-BoldOblique': true,
            'Symbol': true,
            'ZapfDingbats': true
        };
        function loadBinary(url, cont) {
            function error() {
                if (window.console) {
                    if (window.console.error) {
                        window.console.error('Cannot load URL: %s', url);
                    } else {
                        window.console.log('Cannot load URL: %s', url);
                    }
                }
                cont(null);
            }
            var req = new XMLHttpRequest();
            req.open('GET', url, true);
            if (HAS_TYPED_ARRAYS) {
                req.responseType = 'arraybuffer';
            }
            req.onload = function () {
                if (req.status == 200 || req.status == 304) {
                    if (HAS_TYPED_ARRAYS) {
                        cont(new Uint8Array(req.response));
                    } else {
                        cont(new VBArray(req.responseBody).toArray());
                    }
                } else {
                    error();
                }
            };
            req.onerror = error;
            req.send(null);
        }
        function loadFont(url, cont) {
            var font = FONT_CACHE[url];
            if (font) {
                cont(font);
            } else {
                loadBinary(url, function (data) {
                    if (data == null) {
                        throw new Error('Cannot load font from ' + url);
                    } else {
                        var font = new kendo.pdf.TTFFont(data);
                        FONT_CACHE[url] = font;
                        cont(font);
                    }
                });
            }
        }
        var IMAGE_CACHE = {};
        function loadImage(url, cont) {
            var img = IMAGE_CACHE[url], bloburl, blob;
            if (img) {
                cont(img);
            } else {
                img = new Image();
                if (!/^data:/i.test(url)) {
                    img.crossOrigin = 'Anonymous';
                }
                if (HAS_TYPED_ARRAYS && !/^data:/i.test(url)) {
                    var xhr = new XMLHttpRequest();
                    xhr.onload = function () {
                        blob = xhr.response;
                        bloburl = URL.createObjectURL(blob);
                        _load(bloburl);
                    };
                    xhr.onerror = _onerror;
                    xhr.open('GET', url, true);
                    xhr.responseType = 'blob';
                    xhr.send();
                } else {
                    _load(url);
                }
            }
            function _load(url) {
                img.src = url;
                if (img.complete && !kendo.support.browser.msie) {
                    _onload();
                } else {
                    img.onload = _onload;
                    img.onerror = _onerror;
                }
            }
            function _onerror() {
                cont(IMAGE_CACHE[url] = 'TAINTED');
            }
            function _onload() {
                if (blob && /^image\/jpe?g$/i.test(blob.type)) {
                    var reader = new FileReader();
                    reader.onload = function () {
                        img = new PDFJpegImage(img.width, img.height, BinaryStream(new Uint8Array(this.result)));
                        URL.revokeObjectURL(bloburl);
                        cont(IMAGE_CACHE[url] = img);
                    };
                    reader.readAsArrayBuffer(blob);
                    return;
                }
                var canvas = document.createElement('canvas');
                canvas.width = img.width;
                canvas.height = img.height;
                var ctx = canvas.getContext('2d');
                ctx.drawImage(img, 0, 0);
                var imgdata;
                try {
                    imgdata = ctx.getImageData(0, 0, img.width, img.height);
                } catch (ex) {
                    return _onerror();
                } finally {
                    if (bloburl) {
                        URL.revokeObjectURL(bloburl);
                    }
                }
                var hasAlpha = false, rgb = BinaryStream(), alpha = BinaryStream();
                var rawbytes = imgdata.data;
                var i = 0;
                while (i < rawbytes.length) {
                    rgb.writeByte(rawbytes[i++]);
                    rgb.writeByte(rawbytes[i++]);
                    rgb.writeByte(rawbytes[i++]);
                    var a = rawbytes[i++];
                    if (a < 255) {
                        hasAlpha = true;
                    }
                    alpha.writeByte(a);
                }
                if (hasAlpha) {
                    img = new PDFRawImage(img.width, img.height, rgb, alpha);
                } else {
                    var data = canvas.toDataURL('image/jpeg');
                    data = data.substr(data.indexOf(';base64,') + 8);
                    var stream = BinaryStream();
                    stream.writeBase64(data);
                    stream.offset(0);
                    img = new PDFJpegImage(img.width, img.height, stream);
                }
                cont(IMAGE_CACHE[url] = img);
            }
        }
        function manyLoader(loadOne) {
            return function (urls, callback) {
                var n = urls.length, i = n;
                if (n === 0) {
                    return callback();
                }
                while (i-- > 0) {
                    loadOne(urls[i], function () {
                        if (--n === 0) {
                            callback();
                        }
                    });
                }
            };
        }
        var loadFonts = manyLoader(loadFont);
        var loadImages = manyLoader(loadImage);
        PDFDocument.prototype = {
            loadFonts: loadFonts,
            loadImages: loadImages,
            getFont: function (url) {
                var font = this.FONTS[url];
                if (!font) {
                    font = FONT_CACHE[url];
                    if (!font) {
                        throw new Error('Font ' + url + ' has not been loaded');
                    }
                    if (font === true) {
                        font = this.attach(new PDFStandardFont(url));
                    } else {
                        font = this.attach(new PDFFont(this, font));
                    }
                    this.FONTS[url] = font;
                }
                return font;
            },
            getImage: function (url) {
                var img = this.IMAGES[url];
                if (!img) {
                    img = IMAGE_CACHE[url];
                    if (!img) {
                        throw new Error('Image ' + url + ' has not been loaded');
                    }
                    if (img === 'TAINTED') {
                        return null;
                    }
                    img = this.IMAGES[url] = this.attach(img.asStream(this));
                }
                return img;
            },
            getOpacityGS: function (opacity, forStroke) {
                var id = parseFloat(opacity).toFixed(3);
                opacity = parseFloat(id);
                id += forStroke ? 'S' : 'F';
                var cache = this._opacityGSCache || (this._opacityGSCache = {});
                var gs = cache[id];
                if (!gs) {
                    var props = { Type: _('ExtGState') };
                    if (forStroke) {
                        props.CA = opacity;
                    } else {
                        props.ca = opacity;
                    }
                    gs = this.attach(new PDFDictionary(props));
                    gs._resourceName = _('GS' + ++RESOURCE_COUNTER);
                    cache[id] = gs;
                }
                return gs;
            },
            dict: function (props) {
                return new PDFDictionary(props);
            },
            name: function (str) {
                return _(str);
            },
            stream: function (props, content) {
                return new PDFStream(content, props);
            }
        };
        function pad(str, len, ch) {
            while (str.length < len) {
                str = ch + str;
            }
            return str;
        }
        function zeropad(n, len) {
            return pad(n + '', len, '0');
        }
        function hasOwnProperty(obj, key) {
            return Object.prototype.hasOwnProperty.call(obj, key);
        }
        var isArray = Array.isArray || function (obj) {
            return obj instanceof Array;
        };
        function isDate(obj) {
            return obj instanceof Date;
        }
        function renderArray(a, out) {
            out('[');
            if (a.length > 0) {
                out.withIndent(function () {
                    for (var i = 0; i < a.length; ++i) {
                        if (i > 0 && i % 8 === 0) {
                            out.indent(a[i]);
                        } else {
                            out(' ', a[i]);
                        }
                    }
                });
            }
            out(' ]');
        }
        function renderDate(date, out) {
            out('(D:', zeropad(date.getUTCFullYear(), 4), zeropad(date.getUTCMonth() + 1, 2), zeropad(date.getUTCDate(), 2), zeropad(date.getUTCHours(), 2), zeropad(date.getUTCMinutes(), 2), zeropad(date.getUTCSeconds(), 2), 'Z)');
        }
        function mm2pt(mm) {
            return mm * (72 / 25.4);
        }
        function cm2pt(cm) {
            return mm2pt(cm * 10);
        }
        function in2pt(inch) {
            return inch * 72;
        }
        function unitsToPoints(x, def) {
            if (typeof x == 'number') {
                return x;
            }
            if (typeof x == 'string') {
                var m;
                m = /^\s*([0-9.]+)\s*(mm|cm|in|pt)\s*$/.exec(x);
                if (m) {
                    var num = parseFloat(m[1]);
                    if (!isNaN(num)) {
                        if (m[2] == 'pt') {
                            return num;
                        }
                        return {
                            'mm': mm2pt,
                            'cm': cm2pt,
                            'in': in2pt
                        }[m[2]](num);
                    }
                }
            }
            if (def != null) {
                return def;
            }
            throw new Error('Can\'t parse unit: ' + x);
        }
        function PDFValue() {
        }
        PDFValue.prototype.beforeRender = function () {
        };
        function defclass(Ctor, proto, Base) {
            if (!Base) {
                Base = PDFValue;
            }
            Ctor.prototype = new Base();
            for (var i in proto) {
                if (hasOwnProperty(proto, i)) {
                    Ctor.prototype[i] = proto[i];
                }
            }
            return Ctor;
        }
        var PDFString = defclass(function PDFString(value) {
            this.value = value;
        }, {
            render: function (out) {
                var txt = '', esc = this.escape();
                for (var i = 0; i < esc.length; ++i) {
                    txt += String.fromCharCode(esc.charCodeAt(i) & 255);
                }
                out('(', txt, ')');
            },
            escape: function () {
                return this.value.replace(/([\(\)\\])/g, '\\$1');
            },
            toString: function () {
                return this.value;
            }
        });
        var PDFHexString = defclass(function PDFHexString(value) {
            this.value = value;
        }, {
            render: function (out) {
                out('<');
                for (var i = 0; i < this.value.length; ++i) {
                    out(zeropad(this.value.charCodeAt(i).toString(16), 4));
                }
                out('>');
            }
        }, PDFString);
        var PDFName = defclass(function PDFName(name) {
            this.name = name;
        }, {
            render: function (out) {
                out('/' + this.escape());
            },
            escape: function () {
                return this.name.replace(/[^\x21-\x7E]/g, function (c) {
                    return '#' + zeropad(c.charCodeAt(0).toString(16), 2);
                });
            },
            toString: function () {
                return this.name;
            }
        });
        var PDFName_cache = {};
        PDFName.get = _;
        function _(name) {
            if (hasOwnProperty(PDFName_cache, name)) {
                return PDFName_cache[name];
            }
            return PDFName_cache[name] = new PDFName(name);
        }
        var PDFDictionary = defclass(function PDFDictionary(props) {
            this.props = props;
        }, {
            render: function (out) {
                var props = this.props, empty = true;
                out('<<');
                out.withIndent(function () {
                    for (var i in props) {
                        if (hasOwnProperty(props, i) && !/^_/.test(i)) {
                            empty = false;
                            out.indent(_(i), ' ', props[i]);
                        }
                    }
                });
                if (!empty) {
                    out.indent();
                }
                out('>>');
            }
        });
        var PDFStream = defclass(function PDFStream(data, props, compress) {
            if (typeof data == 'string') {
                var tmp = BinaryStream();
                tmp.write(data);
                data = tmp;
            }
            this.data = data;
            this.props = props || {};
            this.compress = compress;
        }, {
            render: function (out) {
                var data = this.data.get(), props = this.props;
                if (this.compress && window.pako && typeof window.pako.deflate == 'function') {
                    if (!props.Filter) {
                        props.Filter = [];
                    } else if (!(props.Filter instanceof Array)) {
                        props.Filter = [props.Filter];
                    }
                    props.Filter.unshift(_('FlateDecode'));
                    data = window.pako.deflate(data);
                }
                props.Length = data.length;
                out(new PDFDictionary(props), ' stream', NL);
                out.writeData(data);
                out(NL, 'endstream');
            }
        });
        var PDFCatalog = defclass(function PDFCatalog(props) {
            props = this.props = props || {};
            props.Type = _('Catalog');
        }, {
            setPages: function (pagesObj) {
                this.props.Pages = pagesObj;
            }
        }, PDFDictionary);
        var PDFPageTree = defclass(function PDFPageTree() {
            this.props = {
                Type: _('Pages'),
                Kids: [],
                Count: 0
            };
        }, {
            addPage: function (pageObj) {
                this.props.Kids.push(pageObj);
                this.props.Count++;
            }
        }, PDFDictionary);
        function PDFJpegImage(width, height, data) {
            this.asStream = function () {
                var stream = new PDFStream(data, {
                    Type: _('XObject'),
                    Subtype: _('Image'),
                    Width: width,
                    Height: height,
                    BitsPerComponent: 8,
                    ColorSpace: _('DeviceRGB'),
                    Filter: _('DCTDecode')
                });
                stream._resourceName = _('I' + ++RESOURCE_COUNTER);
                return stream;
            };
        }
        function PDFRawImage(width, height, rgb, alpha) {
            this.asStream = function (pdf) {
                var mask = new PDFStream(alpha, {
                    Type: _('XObject'),
                    Subtype: _('Image'),
                    Width: width,
                    Height: height,
                    BitsPerComponent: 8,
                    ColorSpace: _('DeviceGray')
                }, true);
                var stream = new PDFStream(rgb, {
                    Type: _('XObject'),
                    Subtype: _('Image'),
                    Width: width,
                    Height: height,
                    BitsPerComponent: 8,
                    ColorSpace: _('DeviceRGB'),
                    SMask: pdf.attach(mask)
                }, true);
                stream._resourceName = _('I' + ++RESOURCE_COUNTER);
                return stream;
            };
        }
        var PDFStandardFont = defclass(function PDFStandardFont(name) {
            this.props = {
                Type: _('Font'),
                Subtype: _('Type1'),
                BaseFont: _(name)
            };
            this._resourceName = _('F' + ++RESOURCE_COUNTER);
        }, {
            encodeText: function (str) {
                return new PDFString(str + '');
            }
        }, PDFDictionary);
        var PDFFont = defclass(function PDFFont(pdf, font, props) {
            props = this.props = props || {};
            props.Type = _('Font');
            props.Subtype = _('Type0');
            props.Encoding = _('Identity-H');
            this._pdf = pdf;
            this._font = font;
            this._sub = font.makeSubset();
            this._resourceName = _('F' + ++RESOURCE_COUNTER);
            var head = font.head;
            this.name = font.psName;
            var scale = this.scale = font.scale;
            this.bbox = [
                head.xMin * scale,
                head.yMin * scale,
                head.xMax * scale,
                head.yMax * scale
            ];
            this.italicAngle = font.post.italicAngle;
            this.ascent = font.ascent * scale;
            this.descent = font.descent * scale;
            this.lineGap = font.lineGap * scale;
            this.capHeight = font.os2.capHeight || this.ascent;
            this.xHeight = font.os2.xHeight || 0;
            this.stemV = 0;
            this.familyClass = (font.os2.familyClass || 0) >> 8;
            this.isSerif = this.familyClass >= 1 && this.familyClass <= 7;
            this.isScript = this.familyClass == 10;
            this.flags = (font.post.isFixedPitch ? 1 : 0) | (this.isSerif ? 1 << 1 : 0) | (this.isScript ? 1 << 3 : 0) | (this.italicAngle !== 0 ? 1 << 6 : 0) | 1 << 5;
        }, {
            encodeText: function (text) {
                return new PDFHexString(this._sub.encodeText(text + ''));
            },
            getTextWidth: function (fontSize, text) {
                var width = 0, codeMap = this._font.cmap.codeMap;
                for (var i = 0; i < text.length; ++i) {
                    var glyphId = codeMap[text.charCodeAt(i)];
                    width += this._font.widthOfGlyph(glyphId || 0);
                }
                return width * fontSize / 1000;
            },
            beforeRender: function () {
                var self = this;
                var sub = self._sub;
                var data = sub.render();
                var fontStream = new PDFStream(BinaryStream(data), { Length1: data.length }, true);
                var descriptor = self._pdf.attach(new PDFDictionary({
                    Type: _('FontDescriptor'),
                    FontName: _(self._sub.psName),
                    FontBBox: self.bbox,
                    Flags: self.flags,
                    StemV: self.stemV,
                    ItalicAngle: self.italicAngle,
                    Ascent: self.ascent,
                    Descent: self.descent,
                    CapHeight: self.capHeight,
                    XHeight: self.xHeight,
                    FontFile2: self._pdf.attach(fontStream)
                }));
                var cmap = sub.ncid2ogid;
                var firstChar = sub.firstChar;
                var lastChar = sub.lastChar;
                var charWidths = [];
                (function loop(i, chunk) {
                    if (i <= lastChar) {
                        var gid = cmap[i];
                        if (gid == null) {
                            loop(i + 1);
                        } else {
                            if (!chunk) {
                                charWidths.push(i, chunk = []);
                            }
                            chunk.push(self._font.widthOfGlyph(gid));
                            loop(i + 1, chunk);
                        }
                    }
                }(firstChar));
                var descendant = new PDFDictionary({
                    Type: _('Font'),
                    Subtype: _('CIDFontType2'),
                    BaseFont: _(self._sub.psName),
                    CIDSystemInfo: new PDFDictionary({
                        Registry: new PDFString('Adobe'),
                        Ordering: new PDFString('Identity'),
                        Supplement: 0
                    }),
                    FontDescriptor: descriptor,
                    FirstChar: firstChar,
                    LastChar: lastChar,
                    DW: Math.round(self._font.widthOfGlyph(0)),
                    W: charWidths,
                    CIDToGIDMap: self._pdf.attach(self._makeCidToGidMap())
                });
                var dict = self.props;
                dict.BaseFont = _(self._sub.psName);
                dict.DescendantFonts = [self._pdf.attach(descendant)];
                var unimap = new PDFToUnicodeCmap(firstChar, lastChar, sub.subset);
                var unimapStream = new PDFStream(makeOutput(), null, true);
                unimapStream.data(unimap);
                dict.ToUnicode = self._pdf.attach(unimapStream);
            },
            _makeCidToGidMap: function () {
                return new PDFStream(BinaryStream(this._sub.cidToGidMap()), null, true);
            }
        }, PDFDictionary);
        var PDFToUnicodeCmap = defclass(function PDFUnicodeCMap(firstChar, lastChar, map) {
            this.firstChar = firstChar;
            this.lastChar = lastChar;
            this.map = map;
        }, {
            render: function (out) {
                out.indent('/CIDInit /ProcSet findresource begin');
                out.indent('12 dict begin');
                out.indent('begincmap');
                out.indent('/CIDSystemInfo <<');
                out.indent('  /Registry (Adobe)');
                out.indent('  /Ordering (UCS)');
                out.indent('  /Supplement 0');
                out.indent('>> def');
                out.indent('/CMapName /Adobe-Identity-UCS def');
                out.indent('/CMapType 2 def');
                out.indent('1 begincodespacerange');
                out.indent('  <0000><ffff>');
                out.indent('endcodespacerange');
                var self = this;
                out.indent(self.lastChar - self.firstChar + 1, ' beginbfchar');
                out.withIndent(function () {
                    for (var code = self.firstChar; code <= self.lastChar; ++code) {
                        var unicode = self.map[code];
                        var str = kendo.util.ucs2encode([unicode]);
                        out.indent('<', zeropad(code.toString(16), 4), '>', '<');
                        for (var i = 0; i < str.length; ++i) {
                            out(zeropad(str.charCodeAt(i).toString(16), 4));
                        }
                        out('>');
                    }
                });
                out.indent('endbfchar');
                out.indent('endcmap');
                out.indent('CMapName currentdict /CMap defineresource pop');
                out.indent('end');
                out.indent('end');
            }
        });
        function makeHash(a) {
            return a.map(function (x) {
                return isArray(x) ? makeHash(x) : typeof x == 'number' ? (Math.round(x * 1000) / 1000).toFixed(3) : x;
            }).join(' ');
        }
        function cacheColorGradientFunction(pdf, r1, g1, b1, r2, g2, b2) {
            var hash = makeHash([
                r1,
                g1,
                b1,
                r2,
                g2,
                b2
            ]);
            var func = pdf.GRAD_COL_FUNCTIONS[hash];
            if (!func) {
                func = pdf.GRAD_COL_FUNCTIONS[hash] = pdf.attach(new PDFDictionary({
                    FunctionType: 2,
                    Domain: [
                        0,
                        1
                    ],
                    Range: [
                        0,
                        1,
                        0,
                        1,
                        0,
                        1
                    ],
                    N: 1,
                    C0: [
                        r1,
                        g1,
                        b1
                    ],
                    C1: [
                        r2,
                        g2,
                        b2
                    ]
                }));
            }
            return func;
        }
        function cacheOpacityGradientFunction(pdf, a1, a2) {
            var hash = makeHash([
                a1,
                a2
            ]);
            var func = pdf.GRAD_OPC_FUNCTIONS[hash];
            if (!func) {
                func = pdf.GRAD_OPC_FUNCTIONS[hash] = pdf.attach(new PDFDictionary({
                    FunctionType: 2,
                    Domain: [
                        0,
                        1
                    ],
                    Range: [
                        0,
                        1
                    ],
                    N: 1,
                    C0: [a1],
                    C1: [a2]
                }));
            }
            return func;
        }
        function makeGradientFunctions(pdf, stops) {
            var hasAlpha = false;
            var opacities = [];
            var colors = [];
            var offsets = [];
            var encode = [];
            var i, prev, cur, prevColor, curColor;
            for (i = 1; i < stops.length; ++i) {
                prev = stops[i - 1];
                cur = stops[i];
                prevColor = prev.color;
                curColor = cur.color;
                colors.push(cacheColorGradientFunction(pdf, prevColor.r, prevColor.g, prevColor.b, curColor.r, curColor.g, curColor.b));
                if (prevColor.a < 1 || curColor.a < 1) {
                    hasAlpha = true;
                }
                offsets.push(cur.offset);
                encode.push(0, 1);
            }
            if (hasAlpha) {
                for (i = 1; i < stops.length; ++i) {
                    prev = stops[i - 1];
                    cur = stops[i];
                    prevColor = prev.color;
                    curColor = cur.color;
                    opacities.push(cacheOpacityGradientFunction(pdf, prevColor.a, curColor.a));
                }
            }
            offsets.pop();
            return {
                hasAlpha: hasAlpha,
                colors: assemble(colors),
                opacities: hasAlpha ? assemble(opacities) : null
            };
            function assemble(funcs) {
                if (funcs.length == 1) {
                    return funcs[0];
                }
                return {
                    FunctionType: 3,
                    Functions: funcs,
                    Domain: [
                        0,
                        1
                    ],
                    Bounds: offsets,
                    Encode: encode
                };
            }
        }
        function cacheColorGradient(pdf, isRadial, stops, coords, funcs, box) {
            var shading, hash;
            if (!box) {
                var a = [isRadial].concat(coords);
                stops.forEach(function (x) {
                    a.push(x.offset, x.color.r, x.color.g, x.color.b);
                });
                hash = makeHash(a);
                shading = pdf.GRAD_COL[hash];
            }
            if (!shading) {
                shading = new PDFDictionary({
                    Type: _('Shading'),
                    ShadingType: isRadial ? 3 : 2,
                    ColorSpace: _('DeviceRGB'),
                    Coords: coords,
                    Domain: [
                        0,
                        1
                    ],
                    Function: funcs,
                    Extend: [
                        true,
                        true
                    ]
                });
                pdf.attach(shading);
                shading._resourceName = 'S' + ++RESOURCE_COUNTER;
                if (hash) {
                    pdf.GRAD_COL[hash] = shading;
                }
            }
            return shading;
        }
        function cacheOpacityGradient(pdf, isRadial, stops, coords, funcs, box) {
            var opacity, hash;
            if (!box) {
                var a = [isRadial].concat(coords);
                stops.forEach(function (x) {
                    a.push(x.offset, x.color.a);
                });
                hash = makeHash(a);
                opacity = pdf.GRAD_OPC[hash];
            }
            if (!opacity) {
                opacity = new PDFDictionary({
                    Type: _('ExtGState'),
                    AIS: false,
                    CA: 1,
                    ca: 1,
                    SMask: {
                        Type: _('Mask'),
                        S: _('Luminosity'),
                        G: pdf.attach(new PDFStream('/a0 gs /s0 sh', {
                            Type: _('XObject'),
                            Subtype: _('Form'),
                            FormType: 1,
                            BBox: box ? [
                                box.left,
                                box.top + box.height,
                                box.left + box.width,
                                box.top
                            ] : [
                                0,
                                1,
                                1,
                                0
                            ],
                            Group: {
                                Type: _('Group'),
                                S: _('Transparency'),
                                CS: _('DeviceGray'),
                                I: true
                            },
                            Resources: {
                                ExtGState: {
                                    a0: {
                                        CA: 1,
                                        ca: 1
                                    }
                                },
                                Shading: {
                                    s0: {
                                        ColorSpace: _('DeviceGray'),
                                        Coords: coords,
                                        Domain: [
                                            0,
                                            1
                                        ],
                                        ShadingType: isRadial ? 3 : 2,
                                        Function: funcs,
                                        Extend: [
                                            true,
                                            true
                                        ]
                                    }
                                }
                            }
                        }))
                    }
                });
                pdf.attach(opacity);
                opacity._resourceName = 'O' + ++RESOURCE_COUNTER;
                if (hash) {
                    pdf.GRAD_OPC[hash] = opacity;
                }
            }
            return opacity;
        }
        function cacheGradient(pdf, gradient, box) {
            var isRadial = gradient.type == 'radial';
            var funcs = makeGradientFunctions(pdf, gradient.stops);
            var coords = isRadial ? [
                gradient.start.x,
                gradient.start.y,
                gradient.start.r,
                gradient.end.x,
                gradient.end.y,
                gradient.end.r
            ] : [
                gradient.start.x,
                gradient.start.y,
                gradient.end.x,
                gradient.end.y
            ];
            var shading = cacheColorGradient(pdf, isRadial, gradient.stops, coords, funcs.colors, gradient.userSpace && box);
            var opacity = funcs.hasAlpha ? cacheOpacityGradient(pdf, isRadial, gradient.stops, coords, funcs.opacities, gradient.userSpace && box) : null;
            return {
                hasAlpha: funcs.hasAlpha,
                shading: shading,
                opacity: opacity
            };
        }
        var PDFPage = defclass(function PDFPage(pdf, props) {
            this._pdf = pdf;
            this._rcount = 0;
            this._textMode = false;
            this._fontResources = {};
            this._gsResources = {};
            this._xResources = {};
            this._patResources = {};
            this._shResources = {};
            this._opacity = 1;
            this._matrix = [
                1,
                0,
                0,
                1,
                0,
                0
            ];
            this._annotations = [];
            this._font = null;
            this._fontSize = null;
            this._contextStack = [];
            props = this.props = props || {};
            props.Type = _('Page');
            props.ProcSet = [
                _('PDF'),
                _('Text'),
                _('ImageB'),
                _('ImageC'),
                _('ImageI')
            ];
            props.Resources = new PDFDictionary({
                Font: new PDFDictionary(this._fontResources),
                ExtGState: new PDFDictionary(this._gsResources),
                XObject: new PDFDictionary(this._xResources),
                Pattern: new PDFDictionary(this._patResources),
                Shading: new PDFDictionary(this._shResources)
            });
            props.Annots = this._annotations;
        }, {
            _out: function () {
                this._content.data.apply(null, arguments);
            },
            transform: function (a, b, c, d, e, f) {
                if (!isIdentityMatrix(arguments)) {
                    this._matrix = mmul(arguments, this._matrix);
                    this._out(a, ' ', b, ' ', c, ' ', d, ' ', e, ' ', f, ' cm');
                    this._out(NL);
                }
            },
            translate: function (dx, dy) {
                this.transform(1, 0, 0, 1, dx, dy);
            },
            scale: function (sx, sy) {
                this.transform(sx, 0, 0, sy, 0, 0);
            },
            rotate: function (angle) {
                var cos = Math.cos(angle), sin = Math.sin(angle);
                this.transform(cos, sin, -sin, cos, 0, 0);
            },
            beginText: function () {
                this._textMode = true;
                this._out('BT', NL);
            },
            endText: function () {
                this._textMode = false;
                this._out('ET', NL);
            },
            _requireTextMode: function () {
                if (!this._textMode) {
                    throw new Error('Text mode required; call page.beginText() first');
                }
            },
            _requireFont: function () {
                if (!this._font) {
                    throw new Error('No font selected; call page.setFont() first');
                }
            },
            setFont: function (font, size) {
                this._requireTextMode();
                if (font == null) {
                    font = this._font;
                } else if (!(font instanceof PDFFont)) {
                    font = this._pdf.getFont(font);
                }
                if (size == null) {
                    size = this._fontSize;
                }
                this._fontResources[font._resourceName] = font;
                this._font = font;
                this._fontSize = size;
                this._out(font._resourceName, ' ', size, ' Tf', NL);
            },
            setTextLeading: function (size) {
                this._requireTextMode();
                this._out(size, ' TL', NL);
            },
            setTextRenderingMode: function (mode) {
                this._requireTextMode();
                this._out(mode, ' Tr', NL);
            },
            showText: function (text, requestedWidth) {
                this._requireFont();
                if (text.length > 1 && requestedWidth && this._font instanceof PDFFont) {
                    var outputWidth = this._font.getTextWidth(this._fontSize, text);
                    var scale = requestedWidth / outputWidth * 100;
                    this._out(scale, ' Tz ');
                }
                this._out(this._font.encodeText(text), ' Tj', NL);
            },
            showTextNL: function (text) {
                this._requireFont();
                this._out(this._font.encodeText(text), ' \'', NL);
            },
            addLink: function (uri, box) {
                var ll = this._toPage({
                    x: box.left,
                    y: box.bottom
                });
                var ur = this._toPage({
                    x: box.right,
                    y: box.top
                });
                this._annotations.push(new PDFDictionary({
                    Type: _('Annot'),
                    Subtype: _('Link'),
                    Rect: [
                        ll.x,
                        ll.y,
                        ur.x,
                        ur.y
                    ],
                    Border: [
                        0,
                        0,
                        0
                    ],
                    A: new PDFDictionary({
                        Type: _('Action'),
                        S: _('URI'),
                        URI: new PDFString(uri)
                    })
                }));
            },
            setStrokeColor: function (r, g, b) {
                this._out(r, ' ', g, ' ', b, ' RG', NL);
            },
            setOpacity: function (opacity) {
                this.setFillOpacity(opacity);
                this.setStrokeOpacity(opacity);
                this._opacity *= opacity;
            },
            setStrokeOpacity: function (opacity) {
                if (opacity < 1) {
                    var gs = this._pdf.getOpacityGS(this._opacity * opacity, true);
                    this._gsResources[gs._resourceName] = gs;
                    this._out(gs._resourceName, ' gs', NL);
                }
            },
            setFillColor: function (r, g, b) {
                this._out(r, ' ', g, ' ', b, ' rg', NL);
            },
            setFillOpacity: function (opacity) {
                if (opacity < 1) {
                    var gs = this._pdf.getOpacityGS(this._opacity * opacity, false);
                    this._gsResources[gs._resourceName] = gs;
                    this._out(gs._resourceName, ' gs', NL);
                }
            },
            gradient: function (gradient, box) {
                this.save();
                this.rect(box.left, box.top, box.width, box.height);
                this.clip();
                if (!gradient.userSpace) {
                    this.transform(box.width, 0, 0, box.height, box.left, box.top);
                }
                var g = cacheGradient(this._pdf, gradient, box);
                var sname = g.shading._resourceName, oname;
                this._shResources[sname] = g.shading;
                if (g.hasAlpha) {
                    oname = g.opacity._resourceName;
                    this._gsResources[oname] = g.opacity;
                    this._out('/' + oname + ' gs ');
                }
                this._out('/' + sname + ' sh', NL);
                this.restore();
            },
            setDashPattern: function (dashArray, dashPhase) {
                this._out(dashArray, ' ', dashPhase, ' d', NL);
            },
            setLineWidth: function (width) {
                this._out(width, ' w', NL);
            },
            setLineCap: function (lineCap) {
                this._out(lineCap, ' J', NL);
            },
            setLineJoin: function (lineJoin) {
                this._out(lineJoin, ' j', NL);
            },
            setMitterLimit: function (mitterLimit) {
                this._out(mitterLimit, ' M', NL);
            },
            save: function () {
                this._contextStack.push(this._context());
                this._out('q', NL);
            },
            restore: function () {
                this._out('Q', NL);
                this._context(this._contextStack.pop());
            },
            moveTo: function (x, y) {
                this._out(x, ' ', y, ' m', NL);
            },
            lineTo: function (x, y) {
                this._out(x, ' ', y, ' l', NL);
            },
            bezier: function (x1, y1, x2, y2, x3, y3) {
                this._out(x1, ' ', y1, ' ', x2, ' ', y2, ' ', x3, ' ', y3, ' c', NL);
            },
            bezier1: function (x1, y1, x3, y3) {
                this._out(x1, ' ', y1, ' ', x3, ' ', y3, ' y', NL);
            },
            bezier2: function (x2, y2, x3, y3) {
                this._out(x2, ' ', y2, ' ', x3, ' ', y3, ' v', NL);
            },
            close: function () {
                this._out('h', NL);
            },
            rect: function (x, y, w, h) {
                this._out(x, ' ', y, ' ', w, ' ', h, ' re', NL);
            },
            ellipse: function (x, y, rx, ry) {
                function _X(v) {
                    return x + v;
                }
                function _Y(v) {
                    return y + v;
                }
                var k = 0.5522847498307936;
                this.moveTo(_X(0), _Y(ry));
                this.bezier(_X(rx * k), _Y(ry), _X(rx), _Y(ry * k), _X(rx), _Y(0));
                this.bezier(_X(rx), _Y(-ry * k), _X(rx * k), _Y(-ry), _X(0), _Y(-ry));
                this.bezier(_X(-rx * k), _Y(-ry), _X(-rx), _Y(-ry * k), _X(-rx), _Y(0));
                this.bezier(_X(-rx), _Y(ry * k), _X(-rx * k), _Y(ry), _X(0), _Y(ry));
            },
            circle: function (x, y, r) {
                this.ellipse(x, y, r, r);
            },
            stroke: function () {
                this._out('S', NL);
            },
            nop: function () {
                this._out('n', NL);
            },
            clip: function () {
                this._out('W n', NL);
            },
            clipStroke: function () {
                this._out('W S', NL);
            },
            closeStroke: function () {
                this._out('s', NL);
            },
            fill: function () {
                this._out('f', NL);
            },
            fillStroke: function () {
                this._out('B', NL);
            },
            drawImage: function (url) {
                var img = this._pdf.getImage(url);
                if (img) {
                    this._xResources[img._resourceName] = img;
                    this._out(img._resourceName, ' Do', NL);
                }
            },
            comment: function (txt) {
                var self = this;
                txt.split(/\r?\n/g).forEach(function (line) {
                    self._out('% ', line, NL);
                });
            },
            _context: function (val) {
                if (val != null) {
                    this._opacity = val.opacity;
                    this._matrix = val.matrix;
                } else {
                    return {
                        opacity: this._opacity,
                        matrix: this._matrix
                    };
                }
            },
            _toPage: function (p) {
                var m = this._matrix;
                var a = m[0], b = m[1], c = m[2], d = m[3], e = m[4], f = m[5];
                return {
                    x: a * p.x + c * p.y + e,
                    y: b * p.x + d * p.y + f
                };
            }
        }, PDFDictionary);
        function BinaryStream(data) {
            var offset = 0, length = 0;
            if (data == null) {
                data = HAS_TYPED_ARRAYS ? new Uint8Array(256) : [];
            } else {
                length = data.length;
            }
            var ensure = HAS_TYPED_ARRAYS ? function (len) {
                if (len >= data.length) {
                    var tmp = new Uint8Array(Math.max(len + 256, data.length * 2));
                    tmp.set(data, 0);
                    data = tmp;
                }
            } : function () {
            };
            var get = HAS_TYPED_ARRAYS ? function () {
                return new Uint8Array(data.buffer, 0, length);
            } : function () {
                return data;
            };
            var write = HAS_TYPED_ARRAYS ? function (bytes) {
                if (typeof bytes == 'string') {
                    return writeString(bytes);
                }
                var len = bytes.length;
                ensure(offset + len);
                data.set(bytes, offset);
                offset += len;
                if (offset > length) {
                    length = offset;
                }
            } : function (bytes) {
                if (typeof bytes == 'string') {
                    return writeString(bytes);
                }
                for (var i = 0; i < bytes.length; ++i) {
                    writeByte(bytes[i]);
                }
            };
            var slice = HAS_TYPED_ARRAYS ? function (start, length) {
                if (data.buffer.slice) {
                    return new Uint8Array(data.buffer.slice(start, start + length));
                } else {
                    var x = new Uint8Array(length);
                    x.set(new Uint8Array(data.buffer, start, length));
                    return x;
                }
            } : function (start, length) {
                return data.slice(start, start + length);
            };
            function eof() {
                return offset >= length;
            }
            function readByte() {
                return offset < length ? data[offset++] : 0;
            }
            function writeByte(b) {
                ensure(offset);
                data[offset++] = b & 255;
                if (offset > length) {
                    length = offset;
                }
            }
            function readShort() {
                return readByte() << 8 | readByte();
            }
            function writeShort(w) {
                writeByte(w >> 8);
                writeByte(w);
            }
            function readShort_() {
                var w = readShort();
                return w >= 32768 ? w - 65536 : w;
            }
            function writeShort_(w) {
                writeShort(w < 0 ? w + 65536 : w);
            }
            function readLong() {
                return readShort() * 65536 + readShort();
            }
            function writeLong(w) {
                writeShort(w >>> 16 & 65535);
                writeShort(w & 65535);
            }
            function readLong_() {
                var w = readLong();
                return w >= 2147483648 ? w - 4294967296 : w;
            }
            function writeLong_(w) {
                writeLong(w < 0 ? w + 4294967296 : w);
            }
            function readFixed() {
                return readLong() / 65536;
            }
            function writeFixed(f) {
                writeLong(Math.round(f * 65536));
            }
            function readFixed_() {
                return readLong_() / 65536;
            }
            function writeFixed_(f) {
                writeLong_(Math.round(f * 65536));
            }
            function read(len) {
                return times(len, readByte);
            }
            function readString(len) {
                return String.fromCharCode.apply(String, read(len));
            }
            function writeString(str) {
                for (var i = 0; i < str.length; ++i) {
                    writeByte(str.charCodeAt(i));
                }
            }
            function times(n, reader) {
                for (var ret = new Array(n), i = 0; i < n; ++i) {
                    ret[i] = reader();
                }
                return ret;
            }
            var stream = {
                eof: eof,
                readByte: readByte,
                writeByte: writeByte,
                readShort: readShort,
                writeShort: writeShort,
                readLong: readLong,
                writeLong: writeLong,
                readFixed: readFixed,
                writeFixed: writeFixed,
                readShort_: readShort_,
                writeShort_: writeShort_,
                readLong_: readLong_,
                writeLong_: writeLong_,
                readFixed_: readFixed_,
                writeFixed_: writeFixed_,
                read: read,
                write: write,
                readString: readString,
                writeString: writeString,
                times: times,
                get: get,
                slice: slice,
                offset: function (pos) {
                    if (pos != null) {
                        offset = pos;
                        return stream;
                    }
                    return offset;
                },
                skip: function (nbytes) {
                    offset += nbytes;
                },
                toString: function () {
                    throw new Error('FIX CALLER.  BinaryStream is no longer convertible to string!');
                },
                length: function () {
                    return length;
                },
                saveExcursion: function (f) {
                    var pos = offset;
                    try {
                        return f();
                    } finally {
                        offset = pos;
                    }
                },
                writeBase64: function (base64) {
                    if (window.atob) {
                        writeString(window.atob(base64));
                    } else {
                        write(BASE64.decode(base64));
                    }
                },
                base64: function () {
                    return BASE64.encode(get());
                }
            };
            return stream;
        }
        function unquote(str) {
            return str.replace(/^\s*(['"])(.*)\1\s*$/, '$2');
        }
        function parseFontDef(fontdef) {
            var rx = /^\s*((normal|italic)\s+)?((normal|small-caps)\s+)?((normal|bold|\d+)\s+)?(([0-9.]+)(px|pt))(\/(([0-9.]+)(px|pt)|normal))?\s+(.*?)\s*$/i;
            var m = rx.exec(fontdef);
            if (!m) {
                return {
                    fontSize: 12,
                    fontFamily: 'sans-serif'
                };
            }
            var fontSize = m[8] ? parseInt(m[8], 10) : 12;
            return {
                italic: m[2] && m[2].toLowerCase() == 'italic',
                variant: m[4],
                bold: m[6] && /bold|700/i.test(m[6]),
                fontSize: fontSize,
                lineHeight: m[12] ? m[12] == 'normal' ? fontSize : parseInt(m[12], 10) : null,
                fontFamily: m[14].split(/\s*,\s*/g).map(unquote)
            };
        }
        function getFontURL(style) {
            function mkFamily(name) {
                if (style.bold) {
                    name += '|bold';
                }
                if (style.italic) {
                    name += '|italic';
                }
                return name.toLowerCase();
            }
            var fontFamily = style.fontFamily;
            var name, url;
            if (fontFamily instanceof Array) {
                for (var i = 0; i < fontFamily.length; ++i) {
                    name = mkFamily(fontFamily[i]);
                    url = FONT_MAPPINGS[name];
                    if (url) {
                        break;
                    }
                }
            } else {
                url = FONT_MAPPINGS[fontFamily.toLowerCase()];
            }
            while (typeof url == 'function') {
                url = url();
            }
            if (!url) {
                url = 'Times-Roman';
            }
            return url;
        }
        var FONT_MAPPINGS = {
            'serif': 'Times-Roman',
            'serif|bold': 'Times-Bold',
            'serif|italic': 'Times-Italic',
            'serif|bold|italic': 'Times-BoldItalic',
            'sans-serif': 'Helvetica',
            'sans-serif|bold': 'Helvetica-Bold',
            'sans-serif|italic': 'Helvetica-Oblique',
            'sans-serif|bold|italic': 'Helvetica-BoldOblique',
            'monospace': 'Courier',
            'monospace|bold': 'Courier-Bold',
            'monospace|italic': 'Courier-Oblique',
            'monospace|bold|italic': 'Courier-BoldOblique',
            'zapfdingbats': 'ZapfDingbats',
            'zapfdingbats|bold': 'ZapfDingbats',
            'zapfdingbats|italic': 'ZapfDingbats',
            'zapfdingbats|bold|italic': 'ZapfDingbats'
        };
        function fontAlias(alias, name) {
            alias = alias.toLowerCase();
            FONT_MAPPINGS[alias] = function () {
                return FONT_MAPPINGS[name];
            };
            FONT_MAPPINGS[alias + '|bold'] = function () {
                return FONT_MAPPINGS[name + '|bold'];
            };
            FONT_MAPPINGS[alias + '|italic'] = function () {
                return FONT_MAPPINGS[name + '|italic'];
            };
            FONT_MAPPINGS[alias + '|bold|italic'] = function () {
                return FONT_MAPPINGS[name + '|bold|italic'];
            };
        }
        fontAlias('Times New Roman', 'serif');
        fontAlias('Courier New', 'monospace');
        fontAlias('Arial', 'sans-serif');
        fontAlias('Helvetica', 'sans-serif');
        fontAlias('Verdana', 'sans-serif');
        fontAlias('Tahoma', 'sans-serif');
        fontAlias('Georgia', 'sans-serif');
        fontAlias('Monaco', 'monospace');
        fontAlias('Andale Mono', 'monospace');
        function defineFont(name, url) {
            if (arguments.length == 1) {
                for (var i in name) {
                    if (hasOwnProperty(name, i)) {
                        defineFont(i, name[i]);
                    }
                }
            } else {
                name = name.toLowerCase();
                FONT_MAPPINGS[name] = url;
                switch (name) {
                case 'dejavu sans':
                    FONT_MAPPINGS['sans-serif'] = url;
                    break;
                case 'dejavu sans|bold':
                    FONT_MAPPINGS['sans-serif|bold'] = url;
                    break;
                case 'dejavu sans|italic':
                    FONT_MAPPINGS['sans-serif|italic'] = url;
                    break;
                case 'dejavu sans|bold|italic':
                    FONT_MAPPINGS['sans-serif|bold|italic'] = url;
                    break;
                case 'dejavu serif':
                    FONT_MAPPINGS['serif'] = url;
                    break;
                case 'dejavu serif|bold':
                    FONT_MAPPINGS['serif|bold'] = url;
                    break;
                case 'dejavu serif|italic':
                    FONT_MAPPINGS['serif|italic'] = url;
                    break;
                case 'dejavu serif|bold|italic':
                    FONT_MAPPINGS['serif|bold|italic'] = url;
                    break;
                case 'dejavu mono':
                    FONT_MAPPINGS['monospace'] = url;
                    break;
                case 'dejavu mono|bold':
                    FONT_MAPPINGS['monospace|bold'] = url;
                    break;
                case 'dejavu mono|italic':
                    FONT_MAPPINGS['monospace|italic'] = url;
                    break;
                case 'dejavu mono|bold|italic':
                    FONT_MAPPINGS['monospace|bold|italic'] = url;
                    break;
                }
            }
        }
        kendo.pdf = {
            Document: PDFDocument,
            BinaryStream: BinaryStream,
            defineFont: defineFont,
            parseFontDef: parseFontDef,
            getFontURL: getFontURL,
            loadFonts: loadFonts,
            loadImages: loadImages,
            getPaperOptions: getPaperOptions,
            TEXT_RENDERING_MODE: {
                fill: 0,
                stroke: 1,
                fillAndStroke: 2,
                invisible: 3,
                fillAndClip: 4,
                strokeAndClip: 5,
                fillStrokeClip: 6,
                clip: 7
            }
        };
        function mmul(a, b) {
            var a1 = a[0], b1 = a[1], c1 = a[2], d1 = a[3], e1 = a[4], f1 = a[5];
            var a2 = b[0], b2 = b[1], c2 = b[2], d2 = b[3], e2 = b[4], f2 = b[5];
            return [
                a1 * a2 + b1 * c2,
                a1 * b2 + b1 * d2,
                c1 * a2 + d1 * c2,
                c1 * b2 + d1 * d2,
                e1 * a2 + f1 * c2 + e2,
                e1 * b2 + f1 * d2 + f2
            ];
        }
        function isIdentityMatrix(m) {
            return m[0] === 1 && m[1] === 0 && m[2] === 0 && m[3] === 1 && m[4] === 0 && m[5] === 0;
        }
    }(window, parseFloat));
}, typeof define == 'function' && define.amd ? define : function (a1, a2, a3) {
    (a3 || a2)();
}));
(function (f, define) {
    define('pdf/ttf', [
        'pdf/core',
        'util/main'
    ], f);
}(function () {
    (function (window) {
        'use strict';
        function hasOwnProperty(obj, key) {
            return Object.prototype.hasOwnProperty.call(obj, key);
        }
        function sortedKeys(obj) {
            return Object.keys(obj).sort(function (a, b) {
                return a - b;
            }).map(parseFloat);
        }
        var PDF = window.kendo.pdf;
        var BinaryStream = PDF.BinaryStream;
        function Directory(data) {
            this.raw = data;
            this.scalerType = data.readLong();
            this.tableCount = data.readShort();
            this.searchRange = data.readShort();
            this.entrySelector = data.readShort();
            this.rangeShift = data.readShort();
            var tables = this.tables = {};
            for (var i = 0; i < this.tableCount; ++i) {
                var entry = {
                    tag: data.readString(4),
                    checksum: data.readLong(),
                    offset: data.readLong(),
                    length: data.readLong()
                };
                tables[entry.tag] = entry;
            }
        }
        Directory.prototype = {
            readTable: function (name, Ctor) {
                var def = this.tables[name];
                if (!def) {
                    throw new Error('Table ' + name + ' not found in directory');
                }
                return this[name] = def.table = new Ctor(this, def);
            },
            render: function (tables) {
                var tableCount = Object.keys(tables).length;
                var maxpow2 = Math.pow(2, Math.floor(Math.log(tableCount) / Math.LN2));
                var searchRange = maxpow2 * 16;
                var entrySelector = Math.floor(Math.log(maxpow2) / Math.LN2);
                var rangeShift = tableCount * 16 - searchRange;
                var out = BinaryStream();
                out.writeLong(this.scalerType);
                out.writeShort(tableCount);
                out.writeShort(searchRange);
                out.writeShort(entrySelector);
                out.writeShort(rangeShift);
                var directoryLength = tableCount * 16;
                var offset = out.offset() + directoryLength;
                var headOffset = null;
                var tableData = BinaryStream();
                for (var tag in tables) {
                    if (hasOwnProperty(tables, tag)) {
                        var table = tables[tag];
                        out.writeString(tag);
                        out.writeLong(this.checksum(table));
                        out.writeLong(offset);
                        out.writeLong(table.length);
                        tableData.write(table);
                        if (tag == 'head') {
                            headOffset = offset;
                        }
                        offset += table.length;
                        while (offset % 4) {
                            tableData.writeByte(0);
                            offset++;
                        }
                    }
                }
                out.write(tableData.get());
                var sum = this.checksum(out.get());
                var adjustment = 2981146554 - sum;
                out.offset(headOffset + 8);
                out.writeLong(adjustment);
                return out.get();
            },
            checksum: function (data) {
                data = BinaryStream(data);
                var sum = 0;
                while (!data.eof()) {
                    sum += data.readLong();
                }
                return sum & 4294967295;
            }
        };
        function deftable(methods) {
            function Ctor(file, def) {
                this.definition = def;
                this.length = def.length;
                this.offset = def.offset;
                this.file = file;
                this.rawData = file.raw;
                this.parse(file.raw);
            }
            Ctor.prototype.raw = function () {
                return this.rawData.slice(this.offset, this.length);
            };
            for (var i in methods) {
                if (hasOwnProperty(methods, i)) {
                    Ctor[i] = Ctor.prototype[i] = methods[i];
                }
            }
            return Ctor;
        }
        var HeadTable = deftable({
            parse: function (data) {
                data.offset(this.offset);
                this.version = data.readLong();
                this.revision = data.readLong();
                this.checkSumAdjustment = data.readLong();
                this.magicNumber = data.readLong();
                this.flags = data.readShort();
                this.unitsPerEm = data.readShort();
                this.created = data.read(8);
                this.modified = data.read(8);
                this.xMin = data.readShort_();
                this.yMin = data.readShort_();
                this.xMax = data.readShort_();
                this.yMax = data.readShort_();
                this.macStyle = data.readShort();
                this.lowestRecPPEM = data.readShort();
                this.fontDirectionHint = data.readShort_();
                this.indexToLocFormat = data.readShort_();
                this.glyphDataFormat = data.readShort_();
            },
            render: function (indexToLocFormat) {
                var out = BinaryStream();
                out.writeLong(this.version);
                out.writeLong(this.revision);
                out.writeLong(0);
                out.writeLong(this.magicNumber);
                out.writeShort(this.flags);
                out.writeShort(this.unitsPerEm);
                out.write(this.created);
                out.write(this.modified);
                out.writeShort_(this.xMin);
                out.writeShort_(this.yMin);
                out.writeShort_(this.xMax);
                out.writeShort_(this.yMax);
                out.writeShort(this.macStyle);
                out.writeShort(this.lowestRecPPEM);
                out.writeShort_(this.fontDirectionHint);
                out.writeShort_(indexToLocFormat);
                out.writeShort_(this.glyphDataFormat);
                return out.get();
            }
        });
        var LocaTable = deftable({
            parse: function (data) {
                data.offset(this.offset);
                var format = this.file.head.indexToLocFormat;
                if (format === 0) {
                    this.offsets = data.times(this.length / 2, function () {
                        return 2 * data.readShort();
                    });
                } else {
                    this.offsets = data.times(this.length / 4, data.readLong);
                }
            },
            offsetOf: function (id) {
                return this.offsets[id];
            },
            lengthOf: function (id) {
                return this.offsets[id + 1] - this.offsets[id];
            },
            render: function (offsets) {
                var out = BinaryStream();
                var needsLongFormat = offsets[offsets.length - 1] > 65535;
                for (var i = 0; i < offsets.length; ++i) {
                    if (needsLongFormat) {
                        out.writeLong(offsets[i]);
                    } else {
                        out.writeShort(offsets[i] / 2);
                    }
                }
                return {
                    format: needsLongFormat ? 1 : 0,
                    table: out.get()
                };
            }
        });
        var HheaTable = deftable({
            parse: function (data) {
                data.offset(this.offset);
                this.version = data.readLong();
                this.ascent = data.readShort_();
                this.descent = data.readShort_();
                this.lineGap = data.readShort_();
                this.advanceWidthMax = data.readShort();
                this.minLeftSideBearing = data.readShort_();
                this.minRightSideBearing = data.readShort_();
                this.xMaxExtent = data.readShort_();
                this.caretSlopeRise = data.readShort_();
                this.caretSlopeRun = data.readShort_();
                this.caretOffset = data.readShort_();
                data.skip(4 * 2);
                this.metricDataFormat = data.readShort_();
                this.numOfLongHorMetrics = data.readShort();
            },
            render: function (ids) {
                var out = BinaryStream();
                out.writeLong(this.version);
                out.writeShort_(this.ascent);
                out.writeShort_(this.descent);
                out.writeShort_(this.lineGap);
                out.writeShort(this.advanceWidthMax);
                out.writeShort_(this.minLeftSideBearing);
                out.writeShort_(this.minRightSideBearing);
                out.writeShort_(this.xMaxExtent);
                out.writeShort_(this.caretSlopeRise);
                out.writeShort_(this.caretSlopeRun);
                out.writeShort_(this.caretOffset);
                out.write([
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                ]);
                out.writeShort_(this.metricDataFormat);
                out.writeShort(ids.length);
                return out.get();
            }
        });
        var MaxpTable = deftable({
            parse: function (data) {
                data.offset(this.offset);
                this.version = data.readLong();
                this.numGlyphs = data.readShort();
                this.maxPoints = data.readShort();
                this.maxContours = data.readShort();
                this.maxComponentPoints = data.readShort();
                this.maxComponentContours = data.readShort();
                this.maxZones = data.readShort();
                this.maxTwilightPoints = data.readShort();
                this.maxStorage = data.readShort();
                this.maxFunctionDefs = data.readShort();
                this.maxInstructionDefs = data.readShort();
                this.maxStackElements = data.readShort();
                this.maxSizeOfInstructions = data.readShort();
                this.maxComponentElements = data.readShort();
                this.maxComponentDepth = data.readShort();
            },
            render: function (glyphIds) {
                var out = BinaryStream();
                out.writeLong(this.version);
                out.writeShort(glyphIds.length);
                out.writeShort(this.maxPoints);
                out.writeShort(this.maxContours);
                out.writeShort(this.maxComponentPoints);
                out.writeShort(this.maxComponentContours);
                out.writeShort(this.maxZones);
                out.writeShort(this.maxTwilightPoints);
                out.writeShort(this.maxStorage);
                out.writeShort(this.maxFunctionDefs);
                out.writeShort(this.maxInstructionDefs);
                out.writeShort(this.maxStackElements);
                out.writeShort(this.maxSizeOfInstructions);
                out.writeShort(this.maxComponentElements);
                out.writeShort(this.maxComponentDepth);
                return out.get();
            }
        });
        var HmtxTable = deftable({
            parse: function (data) {
                data.offset(this.offset);
                var dir = this.file, hhea = dir.hhea;
                this.metrics = data.times(hhea.numOfLongHorMetrics, function () {
                    return {
                        advance: data.readShort(),
                        lsb: data.readShort_()
                    };
                });
                var lsbCount = dir.maxp.numGlyphs - dir.hhea.numOfLongHorMetrics;
                this.leftSideBearings = data.times(lsbCount, data.readShort_);
            },
            forGlyph: function (id) {
                var metrics = this.metrics;
                var n = metrics.length;
                if (id < n) {
                    return metrics[id];
                }
                return {
                    advance: metrics[n - 1].advance,
                    lsb: this.leftSideBearings[id - n]
                };
            },
            render: function (glyphIds) {
                var out = BinaryStream();
                for (var i = 0; i < glyphIds.length; ++i) {
                    var m = this.forGlyph(glyphIds[i]);
                    out.writeShort(m.advance);
                    out.writeShort_(m.lsb);
                }
                return out.get();
            }
        });
        var GlyfTable = function () {
            function SimpleGlyph(raw) {
                this.raw = raw;
            }
            SimpleGlyph.prototype = {
                compound: false,
                render: function () {
                    return this.raw.get();
                }
            };
            var ARG_1_AND_2_ARE_WORDS = 1;
            var WE_HAVE_A_SCALE = 8;
            var MORE_COMPONENTS = 32;
            var WE_HAVE_AN_X_AND_Y_SCALE = 64;
            var WE_HAVE_A_TWO_BY_TWO = 128;
            function CompoundGlyph(data) {
                this.raw = data;
                var ids = this.glyphIds = [];
                var offsets = this.idOffsets = [];
                while (true) {
                    var flags = data.readShort();
                    offsets.push(data.offset());
                    ids.push(data.readShort());
                    if (!(flags & MORE_COMPONENTS)) {
                        break;
                    }
                    data.skip(flags & ARG_1_AND_2_ARE_WORDS ? 4 : 2);
                    if (flags & WE_HAVE_A_TWO_BY_TWO) {
                        data.skip(8);
                    } else if (flags & WE_HAVE_AN_X_AND_Y_SCALE) {
                        data.skip(4);
                    } else if (flags & WE_HAVE_A_SCALE) {
                        data.skip(2);
                    }
                }
            }
            CompoundGlyph.prototype = {
                compound: true,
                render: function (old2new) {
                    var out = BinaryStream(this.raw.get());
                    for (var i = 0; i < this.glyphIds.length; ++i) {
                        var id = this.glyphIds[i];
                        out.offset(this.idOffsets[i]);
                        out.writeShort(old2new[id]);
                    }
                    return out.get();
                }
            };
            return deftable({
                parse: function () {
                    this.cache = {};
                },
                glyphFor: function (id) {
                    var cache = this.cache;
                    if (hasOwnProperty(cache, id)) {
                        return cache[id];
                    }
                    var loca = this.file.loca;
                    var length = loca.lengthOf(id);
                    if (length === 0) {
                        return cache[id] = null;
                    }
                    var data = this.rawData;
                    var offset = this.offset + loca.offsetOf(id);
                    var raw = BinaryStream(data.slice(offset, length));
                    var numberOfContours = raw.readShort_();
                    var xMin = raw.readShort_();
                    var yMin = raw.readShort_();
                    var xMax = raw.readShort_();
                    var yMax = raw.readShort_();
                    var glyph = cache[id] = numberOfContours == -1 ? new CompoundGlyph(raw) : new SimpleGlyph(raw);
                    glyph.numberOfContours = numberOfContours;
                    glyph.xMin = xMin;
                    glyph.yMin = yMin;
                    glyph.xMax = xMax;
                    glyph.yMax = yMax;
                    return glyph;
                },
                render: function (glyphs, oldIds, old2new) {
                    var out = BinaryStream(), offsets = [];
                    for (var i = 0; i < oldIds.length; ++i) {
                        var id = oldIds[i];
                        var glyph = glyphs[id];
                        offsets.push(out.offset());
                        if (glyph) {
                            out.write(glyph.render(old2new));
                        }
                    }
                    offsets.push(out.offset());
                    return {
                        table: out.get(),
                        offsets: offsets
                    };
                }
            });
        }();
        var NameTable = function () {
            function NameEntry(text, entry) {
                this.text = text;
                this.length = text.length;
                this.platformID = entry.platformID;
                this.platformSpecificID = entry.platformSpecificID;
                this.languageID = entry.languageID;
                this.nameID = entry.nameID;
            }
            return deftable({
                parse: function (data) {
                    data.offset(this.offset);
                    data.readShort();
                    var count = data.readShort();
                    var stringOffset = this.offset + data.readShort();
                    var nameRecords = data.times(count, function () {
                        return {
                            platformID: data.readShort(),
                            platformSpecificID: data.readShort(),
                            languageID: data.readShort(),
                            nameID: data.readShort(),
                            length: data.readShort(),
                            offset: data.readShort() + stringOffset
                        };
                    });
                    var strings = this.strings = {};
                    for (var i = 0; i < nameRecords.length; ++i) {
                        var rec = nameRecords[i];
                        data.offset(rec.offset);
                        var text = data.readString(rec.length);
                        if (!strings[rec.nameID]) {
                            strings[rec.nameID] = [];
                        }
                        strings[rec.nameID].push(new NameEntry(text, rec));
                    }
                    this.postscriptEntry = strings[6][0];
                    this.postscriptName = this.postscriptEntry.text.replace(/[^\x20-\x7F]/g, '');
                },
                render: function (psName) {
                    var strings = this.strings;
                    var strCount = 0;
                    for (var i in strings) {
                        if (hasOwnProperty(strings, i)) {
                            strCount += strings[i].length;
                        }
                    }
                    var out = BinaryStream();
                    var strTable = BinaryStream();
                    out.writeShort(0);
                    out.writeShort(strCount);
                    out.writeShort(6 + 12 * strCount);
                    for (i in strings) {
                        if (hasOwnProperty(strings, i)) {
                            var list = i == 6 ? [new NameEntry(psName, this.postscriptEntry)] : strings[i];
                            for (var j = 0; j < list.length; ++j) {
                                var str = list[j];
                                out.writeShort(str.platformID);
                                out.writeShort(str.platformSpecificID);
                                out.writeShort(str.languageID);
                                out.writeShort(str.nameID);
                                out.writeShort(str.length);
                                out.writeShort(strTable.offset());
                                strTable.writeString(str.text);
                            }
                        }
                    }
                    out.write(strTable.get());
                    return out.get();
                }
            });
        }();
        var PostTable = function () {
            var POSTSCRIPT_GLYPHS = '.notdef .null nonmarkingreturn space exclam quotedbl numbersign dollar percent ampersand quotesingle parenleft parenright asterisk plus comma hyphen period slash zero one two three four five six seven eight nine colon semicolon less equal greater question at A B C D E F G H I J K L M N O P Q R S T U V W X Y Z bracketleft backslash bracketright asciicircum underscore grave a b c d e f g h i j k l m n o p q r s t u v w x y z braceleft bar braceright asciitilde Adieresis Aring Ccedilla Eacute Ntilde Odieresis Udieresis aacute agrave acircumflex adieresis atilde aring ccedilla eacute egrave ecircumflex edieresis iacute igrave icircumflex idieresis ntilde oacute ograve ocircumflex odieresis otilde uacute ugrave ucircumflex udieresis dagger degree cent sterling section bullet paragraph germandbls registered copyright trademark acute dieresis notequal AE Oslash infinity plusminus lessequal greaterequal yen mu partialdiff summation product pi integral ordfeminine ordmasculine Omega ae oslash questiondown exclamdown logicalnot radical florin approxequal Delta guillemotleft guillemotright ellipsis nonbreakingspace Agrave Atilde Otilde OE oe endash emdash quotedblleft quotedblright quoteleft quoteright divide lozenge ydieresis Ydieresis fraction currency guilsinglleft guilsinglright fi fl daggerdbl periodcentered quotesinglbase quotedblbase perthousand Acircumflex Ecircumflex Aacute Edieresis Egrave Iacute Icircumflex Idieresis Igrave Oacute Ocircumflex apple Ograve Uacute Ucircumflex Ugrave dotlessi circumflex tilde macron breve dotaccent ring cedilla hungarumlaut ogonek caron Lslash lslash Scaron scaron Zcaron zcaron brokenbar Eth eth Yacute yacute Thorn thorn minus multiply onesuperior twosuperior threesuperior onehalf onequarter threequarters franc Gbreve gbreve Idotaccent Scedilla scedilla Cacute cacute Ccaron ccaron dcroat'.split(/\s+/g);
            return deftable({
                parse: function (data) {
                    data.offset(this.offset);
                    this.format = data.readLong();
                    this.italicAngle = data.readFixed_();
                    this.underlinePosition = data.readShort_();
                    this.underlineThickness = data.readShort_();
                    this.isFixedPitch = data.readLong();
                    this.minMemType42 = data.readLong();
                    this.maxMemType42 = data.readLong();
                    this.minMemType1 = data.readLong();
                    this.maxMemType1 = data.readLong();
                    var numberOfGlyphs;
                    switch (this.format) {
                    case 65536:
                    case 196608:
                        break;
                    case 131072:
                        numberOfGlyphs = data.readShort();
                        this.glyphNameIndex = data.times(numberOfGlyphs, data.readShort);
                        this.names = [];
                        var limit = this.offset + this.length;
                        while (data.offset() < limit) {
                            this.names.push(data.readString(data.readByte()));
                        }
                        break;
                    case 151552:
                        numberOfGlyphs = data.readShort();
                        this.offsets = data.read(numberOfGlyphs);
                        break;
                    case 262144:
                        this.map = data.times(this.file.maxp.numGlyphs, data.readShort);
                        break;
                    }
                },
                glyphFor: function (code) {
                    switch (this.format) {
                    case 65536:
                        return POSTSCRIPT_GLYPHS[code] || '.notdef';
                    case 131072:
                        var index = this.glyphNameIndex[code];
                        if (index < POSTSCRIPT_GLYPHS.length) {
                            return POSTSCRIPT_GLYPHS[index];
                        }
                        return this.names[index - POSTSCRIPT_GLYPHS.length] || '.notdef';
                    case 151552:
                    case 196608:
                        return '.notdef';
                    case 262144:
                        return this.map[code] || 65535;
                    }
                },
                render: function (mapping) {
                    if (this.format == 196608) {
                        return this.raw();
                    }
                    var out = BinaryStream(this.rawData.slice(this.offset, 32));
                    out.writeLong(131072);
                    out.offset(32);
                    var indexes = [];
                    var strings = [];
                    for (var i = 0; i < mapping.length; ++i) {
                        var id = mapping[i];
                        var post = this.glyphFor(id);
                        var index = POSTSCRIPT_GLYPHS.indexOf(post);
                        if (index >= 0) {
                            indexes.push(index);
                        } else {
                            indexes.push(POSTSCRIPT_GLYPHS.length + strings.length);
                            strings.push(post);
                        }
                    }
                    out.writeShort(mapping.length);
                    for (i = 0; i < indexes.length; ++i) {
                        out.writeShort(indexes[i]);
                    }
                    for (i = 0; i < strings.length; ++i) {
                        out.writeByte(strings[i].length);
                        out.writeString(strings[i]);
                    }
                    return out.get();
                }
            });
        }();
        var CmapTable = function () {
            function CmapEntry(data, offset, codeMap) {
                var self = this;
                self.platformID = data.readShort();
                self.platformSpecificID = data.readShort();
                self.offset = offset + data.readLong();
                data.saveExcursion(function () {
                    var code;
                    data.offset(self.offset);
                    self.format = data.readShort();
                    switch (self.format) {
                    case 0:
                        self.length = data.readShort();
                        self.language = data.readShort();
                        for (var i = 0; i < 256; ++i) {
                            codeMap[i] = data.readByte();
                        }
                        break;
                    case 4:
                        self.length = data.readShort();
                        self.language = data.readShort();
                        var segCount = data.readShort() / 2;
                        data.skip(6);
                        var endCode = data.times(segCount, data.readShort);
                        data.skip(2);
                        var startCode = data.times(segCount, data.readShort);
                        var idDelta = data.times(segCount, data.readShort_);
                        var idRangeOffset = data.times(segCount, data.readShort);
                        var count = (self.length + self.offset - data.offset()) / 2;
                        var glyphIds = data.times(count, data.readShort);
                        for (i = 0; i < segCount; ++i) {
                            var start = startCode[i], end = endCode[i];
                            for (code = start; code <= end; ++code) {
                                var glyphId;
                                if (idRangeOffset[i] === 0) {
                                    glyphId = code + idDelta[i];
                                } else {
                                    var index = idRangeOffset[i] / 2 - (segCount - i) + (code - start);
                                    glyphId = glyphIds[index] || 0;
                                    if (glyphId !== 0) {
                                        glyphId += idDelta[i];
                                    }
                                }
                                codeMap[code] = glyphId & 65535;
                            }
                        }
                        break;
                    case 6:
                        self.length = data.readShort();
                        self.language = data.readShort();
                        code = data.readShort();
                        var length = data.readShort();
                        while (length-- > 0) {
                            codeMap[code++] = data.readShort();
                        }
                        break;
                    case 12:
                        data.readShort();
                        self.length = data.readLong();
                        self.language = data.readLong();
                        var ngroups = data.readLong();
                        while (ngroups-- > 0) {
                            code = data.readLong();
                            var endCharCode = data.readLong();
                            var glyphCode = data.readLong();
                            while (code <= endCharCode) {
                                codeMap[code++] = glyphCode++;
                            }
                        }
                        break;
                    default:
                        if (window.console) {
                            window.console.error('Unhandled CMAP format: ' + self.format);
                        }
                    }
                });
            }
            function renderCharmap(ncid2ogid, ogid2ngid) {
                var codes = sortedKeys(ncid2ogid);
                var startCodes = [];
                var endCodes = [];
                var last = null;
                var diff = null;
                function new_gid(charcode) {
                    return ogid2ngid[ncid2ogid[charcode]];
                }
                for (var i = 0; i < codes.length; ++i) {
                    var code = codes[i];
                    var gid = new_gid(code);
                    var delta = gid - code;
                    if (last == null || delta !== diff) {
                        if (last) {
                            endCodes.push(last);
                        }
                        startCodes.push(code);
                        diff = delta;
                    }
                    last = code;
                }
                if (last) {
                    endCodes.push(last);
                }
                endCodes.push(65535);
                startCodes.push(65535);
                var segCount = startCodes.length;
                var segCountX2 = segCount * 2;
                var searchRange = 2 * Math.pow(2, Math.floor(Math.log(segCount) / Math.LN2));
                var entrySelector = Math.log(searchRange / 2) / Math.LN2;
                var rangeShift = segCountX2 - searchRange;
                var deltas = [];
                var rangeOffsets = [];
                var glyphIds = [];
                for (i = 0; i < segCount; ++i) {
                    var startCode = startCodes[i];
                    var endCode = endCodes[i];
                    if (startCode == 65535) {
                        deltas.push(0);
                        rangeOffsets.push(0);
                        break;
                    }
                    var startGlyph = new_gid(startCode);
                    if (startCode - startGlyph >= 32768) {
                        deltas.push(0);
                        rangeOffsets.push(2 * (glyphIds.length + segCount - i));
                        for (var j = startCode; j <= endCode; ++j) {
                            glyphIds.push(new_gid(j));
                        }
                    } else {
                        deltas.push(startGlyph - startCode);
                        rangeOffsets.push(0);
                    }
                }
                var out = BinaryStream();
                out.writeShort(3);
                out.writeShort(1);
                out.writeLong(12);
                out.writeShort(4);
                out.writeShort(16 + segCount * 8 + glyphIds.length * 2);
                out.writeShort(0);
                out.writeShort(segCountX2);
                out.writeShort(searchRange);
                out.writeShort(entrySelector);
                out.writeShort(rangeShift);
                endCodes.forEach(out.writeShort);
                out.writeShort(0);
                startCodes.forEach(out.writeShort);
                deltas.forEach(out.writeShort_);
                rangeOffsets.forEach(out.writeShort);
                glyphIds.forEach(out.writeShort);
                return out.get();
            }
            return deftable({
                parse: function (data) {
                    var self = this;
                    var offset = self.offset;
                    data.offset(offset);
                    self.codeMap = {};
                    self.version = data.readShort();
                    var tableCount = data.readShort();
                    self.tables = data.times(tableCount, function () {
                        return new CmapEntry(data, offset, self.codeMap);
                    });
                },
                render: function (ncid2ogid, ogid2ngid) {
                    var out = BinaryStream();
                    out.writeShort(0);
                    out.writeShort(1);
                    out.write(renderCharmap(ncid2ogid, ogid2ngid));
                    return out.get();
                }
            });
        }();
        var OS2Table = deftable({
            parse: function (data) {
                data.offset(this.offset);
                this.version = data.readShort();
                this.averageCharWidth = data.readShort_();
                this.weightClass = data.readShort();
                this.widthClass = data.readShort();
                this.type = data.readShort();
                this.ySubscriptXSize = data.readShort_();
                this.ySubscriptYSize = data.readShort_();
                this.ySubscriptXOffset = data.readShort_();
                this.ySubscriptYOffset = data.readShort_();
                this.ySuperscriptXSize = data.readShort_();
                this.ySuperscriptYSize = data.readShort_();
                this.ySuperscriptXOffset = data.readShort_();
                this.ySuperscriptYOffset = data.readShort_();
                this.yStrikeoutSize = data.readShort_();
                this.yStrikeoutPosition = data.readShort_();
                this.familyClass = data.readShort_();
                this.panose = data.times(10, data.readByte);
                this.charRange = data.times(4, data.readLong);
                this.vendorID = data.readString(4);
                this.selection = data.readShort();
                this.firstCharIndex = data.readShort();
                this.lastCharIndex = data.readShort();
                if (this.version > 0) {
                    this.ascent = data.readShort_();
                    this.descent = data.readShort_();
                    this.lineGap = data.readShort_();
                    this.winAscent = data.readShort();
                    this.winDescent = data.readShort();
                    this.codePageRange = data.times(2, data.readLong);
                    if (this.version > 1) {
                        this.xHeight = data.readShort();
                        this.capHeight = data.readShort();
                        this.defaultChar = data.readShort();
                        this.breakChar = data.readShort();
                        this.maxContext = data.readShort();
                    }
                }
            },
            render: function () {
                return this.raw();
            }
        });
        var subsetTag = 100000;
        function nextSubsetTag() {
            var ret = '', n = subsetTag + '';
            for (var i = 0; i < n.length; ++i) {
                ret += String.fromCharCode(n.charCodeAt(i) - 48 + 65);
            }
            ++subsetTag;
            return ret;
        }
        function Subfont(font) {
            this.font = font;
            this.subset = {};
            this.unicodes = {};
            this.ogid2ngid = { 0: 0 };
            this.ngid2ogid = { 0: 0 };
            this.ncid2ogid = {};
            this.next = this.firstChar = 1;
            this.nextGid = 1;
            this.psName = nextSubsetTag() + '+' + this.font.psName;
        }
        Subfont.prototype = {
            use: function (ch) {
                var self = this;
                if (typeof ch == 'string') {
                    return kendo.util.ucs2decode(ch).reduce(function (ret, code) {
                        return ret + String.fromCharCode(self.use(code));
                    }, '');
                }
                var code = self.unicodes[ch];
                if (!code) {
                    code = self.next++;
                    self.subset[code] = ch;
                    self.unicodes[ch] = code;
                    var old_gid = self.font.cmap.codeMap[ch];
                    if (old_gid) {
                        self.ncid2ogid[code] = old_gid;
                        if (self.ogid2ngid[old_gid] == null) {
                            var new_gid = self.nextGid++;
                            self.ogid2ngid[old_gid] = new_gid;
                            self.ngid2ogid[new_gid] = old_gid;
                        }
                    }
                }
                return code;
            },
            encodeText: function (text) {
                return this.use(text);
            },
            glyphIds: function () {
                return sortedKeys(this.ogid2ngid);
            },
            glyphsFor: function (glyphIds, result) {
                if (!result) {
                    result = {};
                }
                for (var i = 0; i < glyphIds.length; ++i) {
                    var id = glyphIds[i];
                    if (!result[id]) {
                        var glyph = result[id] = this.font.glyf.glyphFor(id);
                        if (glyph && glyph.compound) {
                            this.glyphsFor(glyph.glyphIds, result);
                        }
                    }
                }
                return result;
            },
            render: function () {
                var glyphs = this.glyphsFor(this.glyphIds());
                for (var old_gid in glyphs) {
                    if (hasOwnProperty(glyphs, old_gid)) {
                        old_gid = parseInt(old_gid, 10);
                        if (this.ogid2ngid[old_gid] == null) {
                            var new_gid = this.nextGid++;
                            this.ogid2ngid[old_gid] = new_gid;
                            this.ngid2ogid[new_gid] = old_gid;
                        }
                    }
                }
                var new_gid_ids = sortedKeys(this.ngid2ogid);
                var old_gid_ids = new_gid_ids.map(function (id) {
                    return this.ngid2ogid[id];
                }, this);
                var font = this.font;
                var glyf = font.glyf.render(glyphs, old_gid_ids, this.ogid2ngid);
                var loca = font.loca.render(glyf.offsets);
                this.lastChar = this.next - 1;
                var tables = {
                    'cmap': CmapTable.render(this.ncid2ogid, this.ogid2ngid),
                    'glyf': glyf.table,
                    'loca': loca.table,
                    'hmtx': font.hmtx.render(old_gid_ids),
                    'hhea': font.hhea.render(old_gid_ids),
                    'maxp': font.maxp.render(old_gid_ids),
                    'post': font.post.render(old_gid_ids),
                    'name': font.name.render(this.psName),
                    'head': font.head.render(loca.format),
                    'OS/2': font.os2.render()
                };
                return this.font.directory.render(tables);
            },
            cidToGidMap: function () {
                var out = BinaryStream(), len = 0;
                for (var cid = this.firstChar; cid < this.next; ++cid) {
                    while (len < cid) {
                        out.writeShort(0);
                        len++;
                    }
                    var old_gid = this.ncid2ogid[cid];
                    if (old_gid) {
                        var new_gid = this.ogid2ngid[old_gid];
                        out.writeShort(new_gid);
                    } else {
                        out.writeShort(0);
                    }
                    len++;
                }
                return out.get();
            }
        };
        function TTFFont(rawData, name) {
            var self = this;
            var data = self.contents = BinaryStream(rawData);
            if (data.readString(4) == 'ttcf') {
                if (!name) {
                    throw new Error('Must specify a name for TTC files');
                }
                data.readLong();
                var numFonts = data.readLong();
                for (var i = 0; i < numFonts; ++i) {
                    var offset = data.readLong();
                    data.saveExcursion(function () {
                        data.offset(offset);
                        self.parse();
                    });
                    if (self.psName == name) {
                        return;
                    }
                }
                throw new Error('Font ' + name + ' not found in collection');
            } else {
                data.offset(0);
                self.parse();
            }
        }
        TTFFont.prototype = {
            parse: function () {
                var dir = this.directory = new Directory(this.contents);
                this.head = dir.readTable('head', HeadTable);
                this.loca = dir.readTable('loca', LocaTable);
                this.hhea = dir.readTable('hhea', HheaTable);
                this.maxp = dir.readTable('maxp', MaxpTable);
                this.hmtx = dir.readTable('hmtx', HmtxTable);
                this.glyf = dir.readTable('glyf', GlyfTable);
                this.name = dir.readTable('name', NameTable);
                this.post = dir.readTable('post', PostTable);
                this.cmap = dir.readTable('cmap', CmapTable);
                this.os2 = dir.readTable('OS/2', OS2Table);
                this.psName = this.name.postscriptName;
                this.ascent = this.os2.ascent || this.hhea.ascent;
                this.descent = this.os2.descent || this.hhea.descent;
                this.lineGap = this.os2.lineGap || this.hhea.lineGap;
                this.scale = 1000 / this.head.unitsPerEm;
            },
            widthOfGlyph: function (glyph) {
                return this.hmtx.forGlyph(glyph).advance * this.scale;
            },
            makeSubset: function () {
                return new Subfont(this);
            }
        };
        PDF.TTFFont = TTFFont;
    }(window));
}, typeof define == 'function' && define.amd ? define : function (a1, a2, a3) {
    (a3 || a2)();
}));
(function (f, define) {
    define('util/text-metrics', [
        'kendo.core',
        'util/main'
    ], f);
}(function () {
    (function ($) {
        var doc = document, kendo = window.kendo, Class = kendo.Class, util = kendo.util, defined = util.defined;
        var LRUCache = Class.extend({
            init: function (size) {
                this._size = size;
                this._length = 0;
                this._map = {};
            },
            put: function (key, value) {
                var lru = this, map = lru._map, entry = {
                        key: key,
                        value: value
                    };
                map[key] = entry;
                if (!lru._head) {
                    lru._head = lru._tail = entry;
                } else {
                    lru._tail.newer = entry;
                    entry.older = lru._tail;
                    lru._tail = entry;
                }
                if (lru._length >= lru._size) {
                    map[lru._head.key] = null;
                    lru._head = lru._head.newer;
                    lru._head.older = null;
                } else {
                    lru._length++;
                }
            },
            get: function (key) {
                var lru = this, entry = lru._map[key];
                if (entry) {
                    if (entry === lru._head && entry !== lru._tail) {
                        lru._head = entry.newer;
                        lru._head.older = null;
                    }
                    if (entry !== lru._tail) {
                        if (entry.older) {
                            entry.older.newer = entry.newer;
                            entry.newer.older = entry.older;
                        }
                        entry.older = lru._tail;
                        entry.newer = null;
                        lru._tail.newer = entry;
                        lru._tail = entry;
                    }
                    return entry.value;
                }
            }
        });
        var defaultMeasureBox = $('<div style=\'position: absolute !important; top: -4000px !important; width: auto !important; height: auto !important;' + 'padding: 0 !important; margin: 0 !important; border: 0 !important;' + 'line-height: normal !important; visibility: hidden !important; white-space: nowrap!important;\' />')[0];
        function zeroSize() {
            return {
                width: 0,
                height: 0,
                baseline: 0
            };
        }
        var TextMetrics = Class.extend({
            init: function (options) {
                this._cache = new LRUCache(1000);
                this._initOptions(options);
            },
            options: { baselineMarkerSize: 1 },
            measure: function (text, style, box) {
                if (!text) {
                    return zeroSize();
                }
                var styleKey = util.objectKey(style), cacheKey = util.hashKey(text + styleKey), cachedResult = this._cache.get(cacheKey);
                if (cachedResult) {
                    return cachedResult;
                }
                var size = zeroSize();
                var measureBox = box ? box : defaultMeasureBox;
                var baselineMarker = this._baselineMarker().cloneNode(false);
                for (var key in style) {
                    var value = style[key];
                    if (defined(value)) {
                        measureBox.style[key] = value;
                    }
                }
                $(measureBox).text(text);
                measureBox.appendChild(baselineMarker);
                doc.body.appendChild(measureBox);
                if ((text + '').length) {
                    size.width = measureBox.offsetWidth - this.options.baselineMarkerSize;
                    size.height = measureBox.offsetHeight;
                    size.baseline = baselineMarker.offsetTop + this.options.baselineMarkerSize;
                }
                if (size.width > 0 && size.height > 0) {
                    this._cache.put(cacheKey, size);
                }
                measureBox.parentNode.removeChild(measureBox);
                return size;
            },
            _baselineMarker: function () {
                return $('<div class=\'k-baseline-marker\' ' + 'style=\'display: inline-block; vertical-align: baseline;' + 'width: ' + this.options.baselineMarkerSize + 'px; height: ' + this.options.baselineMarkerSize + 'px;' + 'overflow: hidden;\' />')[0];
            }
        });
        TextMetrics.current = new TextMetrics();
        function measureText(text, style, measureBox) {
            return TextMetrics.current.measure(text, style, measureBox);
        }
        function loadFonts(fonts, callback) {
            var promises = [];
            if (fonts.length > 0 && document.fonts) {
                try {
                    promises = fonts.map(function (font) {
                        return document.fonts.load(font);
                    });
                } catch (e) {
                    kendo.logToConsole(e);
                }
                Promise.all(promises).then(callback, callback);
            } else {
                callback();
            }
        }
        kendo.util.TextMetrics = TextMetrics;
        kendo.util.LRUCache = LRUCache;
        kendo.util.loadFonts = loadFonts;
        kendo.util.measureText = measureText;
    }(window.kendo.jQuery));
}, typeof define == 'function' && define.amd ? define : function (a1, a2, a3) {
    (a3 || a2)();
}));
(function (f, define) {
    define('util/base64', ['util/main'], f);
}(function () {
    (function () {
        var kendo = window.kendo, deepExtend = kendo.deepExtend, fromCharCode = String.fromCharCode;
        var KEY_STR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
        function encodeBase64(input) {
            var output = '';
            var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
            var i = 0;
            input = encodeUTF8(input);
            while (i < input.length) {
                chr1 = input.charCodeAt(i++);
                chr2 = input.charCodeAt(i++);
                chr3 = input.charCodeAt(i++);
                enc1 = chr1 >> 2;
                enc2 = (chr1 & 3) << 4 | chr2 >> 4;
                enc3 = (chr2 & 15) << 2 | chr3 >> 6;
                enc4 = chr3 & 63;
                if (isNaN(chr2)) {
                    enc3 = enc4 = 64;
                } else if (isNaN(chr3)) {
                    enc4 = 64;
                }
                output = output + KEY_STR.charAt(enc1) + KEY_STR.charAt(enc2) + KEY_STR.charAt(enc3) + KEY_STR.charAt(enc4);
            }
            return output;
        }
        function encodeUTF8(input) {
            var output = '';
            for (var i = 0; i < input.length; i++) {
                var c = input.charCodeAt(i);
                if (c < 128) {
                    output += fromCharCode(c);
                } else if (c < 2048) {
                    output += fromCharCode(192 | c >>> 6);
                    output += fromCharCode(128 | c & 63);
                } else if (c < 65536) {
                    output += fromCharCode(224 | c >>> 12);
                    output += fromCharCode(128 | c >>> 6 & 63);
                    output += fromCharCode(128 | c & 63);
                }
            }
            return output;
        }
        deepExtend(kendo.util, {
            encodeBase64: encodeBase64,
            encodeUTF8: encodeUTF8
        });
    }());
    return window.kendo;
}, typeof define == 'function' && define.amd ? define : function (a1, a2, a3) {
    (a3 || a2)();
}));
(function (f, define) {
    define('mixins/observers', ['kendo.core'], f);
}(function () {
    (function ($) {
        var math = Math, kendo = window.kendo, deepExtend = kendo.deepExtend, inArray = $.inArray;
        var ObserversMixin = {
            observers: function () {
                this._observers = this._observers || [];
                return this._observers;
            },
            addObserver: function (element) {
                if (!this._observers) {
                    this._observers = [element];
                } else {
                    this._observers.push(element);
                }
                return this;
            },
            removeObserver: function (element) {
                var observers = this.observers();
                var index = inArray(element, observers);
                if (index != -1) {
                    observers.splice(index, 1);
                }
                return this;
            },
            trigger: function (methodName, event) {
                var observers = this._observers;
                var observer;
                var idx;
                if (observers && !this._suspended) {
                    for (idx = 0; idx < observers.length; idx++) {
                        observer = observers[idx];
                        if (observer[methodName]) {
                            observer[methodName](event);
                        }
                    }
                }
                return this;
            },
            optionsChange: function (e) {
                e = e || {};
                e.element = this;
                this.trigger('optionsChange', e);
            },
            geometryChange: function () {
                this.trigger('geometryChange', { element: this });
            },
            suspend: function () {
                this._suspended = (this._suspended || 0) + 1;
                return this;
            },
            resume: function () {
                this._suspended = math.max((this._suspended || 0) - 1, 0);
                return this;
            },
            _observerField: function (field, value) {
                if (this[field]) {
                    this[field].removeObserver(this);
                }
                this[field] = value;
                value.addObserver(this);
            }
        };
        deepExtend(kendo, { mixins: { ObserversMixin: ObserversMixin } });
    }(window.kendo.jQuery));
    return window.kendo;
}, typeof define == 'function' && define.amd ? define : function (a1, a2, a3) {
    (a3 || a2)();
}));
(function (f, define) {
    define('pdf/drawing', [
        'kendo.core',
        'kendo.color',
        'kendo.drawing',
        'pdf/core'
    ], f);
}(function () {
    (function (kendo, $) {
        'use strict';
        var drawing = kendo.drawing;
        var geo = kendo.geometry;
        var TEXT_RENDERING_MODE = kendo.pdf.TEXT_RENDERING_MODE;
        var DASH_PATTERNS = {
            dash: [4],
            dashDot: [
                4,
                2,
                1,
                2
            ],
            dot: [
                1,
                2
            ],
            longDash: [
                8,
                2
            ],
            longDashDot: [
                8,
                2,
                1,
                2
            ],
            longDashDotDot: [
                8,
                2,
                1,
                2,
                1,
                2
            ],
            solid: []
        };
        var LINE_CAP = {
            butt: 0,
            round: 1,
            square: 2
        };
        var LINE_JOIN = {
            miter: 0,
            round: 1,
            bevel: 2
        };
        function render(group, callback) {
            var fonts = [], images = [], options = group.options;
            function getOption(name, defval, hash) {
                if (!hash) {
                    hash = options;
                }
                if (hash.pdf && hash.pdf[name] != null) {
                    return hash.pdf[name];
                }
                return defval;
            }
            var multiPage = getOption('multiPage');
            group.traverse(function (element) {
                dispatch({
                    Image: function (element) {
                        if (images.indexOf(element.src()) < 0) {
                            images.push(element.src());
                        }
                    },
                    Text: function (element) {
                        var style = kendo.pdf.parseFontDef(element.options.font);
                        var url = kendo.pdf.getFontURL(style);
                        if (fonts.indexOf(url) < 0) {
                            fonts.push(url);
                        }
                    }
                }, element);
            });
            function doIt() {
                if (--count > 0) {
                    return;
                }
                var pdf = new kendo.pdf.Document({
                    producer: getOption('producer'),
                    title: getOption('title'),
                    author: getOption('author'),
                    subject: getOption('subject'),
                    keywords: getOption('keywords'),
                    creator: getOption('creator'),
                    date: getOption('date')
                });
                function drawPage(group) {
                    var options = group.options;
                    var tmp = optimize(group);
                    var bbox = tmp.bbox;
                    group = tmp.root;
                    var paperSize = getOption('paperSize', getOption('paperSize', 'auto'), options), addMargin = false;
                    if (paperSize == 'auto') {
                        if (bbox) {
                            var size = bbox.getSize();
                            paperSize = [
                                size.width,
                                size.height
                            ];
                            addMargin = true;
                            var origin = bbox.getOrigin();
                            tmp = new drawing.Group();
                            tmp.transform(new geo.Matrix(1, 0, 0, 1, -origin.x, -origin.y));
                            tmp.append(group);
                            group = tmp;
                        } else {
                            paperSize = 'A4';
                        }
                    }
                    var page;
                    page = pdf.addPage({
                        paperSize: paperSize,
                        margin: getOption('margin', getOption('margin'), options),
                        addMargin: addMargin,
                        landscape: getOption('landscape', getOption('landscape', false), options)
                    });
                    drawElement(group, page, pdf);
                }
                if (multiPage) {
                    group.children.forEach(drawPage);
                } else {
                    drawPage(group);
                }
                callback(pdf.render(), pdf);
            }
            var count = 2;
            kendo.pdf.loadFonts(fonts, doIt);
            kendo.pdf.loadImages(images, doIt);
        }
        function toDataURL(group, callback) {
            render(group, function (data) {
                callback('data:application/pdf;base64,' + data.base64());
            });
        }
        function toBlob(group, callback) {
            render(group, function (data) {
                callback(new Blob([data.get()], { type: 'application/pdf' }));
            });
        }
        function saveAs(group, filename, proxy, callback) {
            if (window.Blob && !kendo.support.browser.safari) {
                toBlob(group, function (blob) {
                    kendo.saveAs({
                        dataURI: blob,
                        fileName: filename
                    });
                    if (callback) {
                        callback(blob);
                    }
                });
            } else {
                toDataURL(group, function (dataURL) {
                    kendo.saveAs({
                        dataURI: dataURL,
                        fileName: filename,
                        proxyURL: proxy
                    });
                    if (callback) {
                        callback(dataURL);
                    }
                });
            }
        }
        function dispatch(handlers, element) {
            var handler = handlers[element.nodeType];
            if (handler) {
                return handler.call.apply(handler, arguments);
            }
            return element;
        }
        function drawElement(element, page, pdf) {
            if (element.options._pdfDebug) {
                page.comment('BEGIN: ' + element.options._pdfDebug);
            }
            var transform = element.transform();
            var opacity = element.opacity();
            page.save();
            if (opacity != null && opacity < 1) {
                page.setOpacity(opacity);
            }
            setStrokeOptions(element, page, pdf);
            setFillOptions(element, page, pdf);
            if (transform) {
                var m = transform.matrix();
                page.transform(m.a, m.b, m.c, m.d, m.e, m.f);
            }
            setClipping(element, page, pdf);
            dispatch({
                Path: drawPath,
                MultiPath: drawMultiPath,
                Circle: drawCircle,
                Arc: drawArc,
                Text: drawText,
                Image: drawImage,
                Group: drawGroup,
                Rect: drawRect
            }, element, page, pdf);
            page.restore();
            if (element.options._pdfDebug) {
                page.comment('END: ' + element.options._pdfDebug);
            }
        }
        function setStrokeOptions(element, page) {
            var stroke = element.stroke && element.stroke();
            if (!stroke) {
                return;
            }
            var color = stroke.color;
            if (color) {
                color = parseColor(color);
                if (color == null) {
                    return;
                }
                page.setStrokeColor(color.r, color.g, color.b);
                if (color.a != 1) {
                    page.setStrokeOpacity(color.a);
                }
            }
            var width = stroke.width;
            if (width != null) {
                if (width === 0) {
                    return;
                }
                page.setLineWidth(width);
            }
            var dashType = stroke.dashType;
            if (dashType) {
                page.setDashPattern(DASH_PATTERNS[dashType], 0);
            }
            var lineCap = stroke.lineCap;
            if (lineCap) {
                page.setLineCap(LINE_CAP[lineCap]);
            }
            var lineJoin = stroke.lineJoin;
            if (lineJoin) {
                page.setLineJoin(LINE_JOIN[lineJoin]);
            }
            var opacity = stroke.opacity;
            if (opacity != null) {
                page.setStrokeOpacity(opacity);
            }
        }
        function setFillOptions(element, page) {
            var fill = element.fill && element.fill();
            if (!fill) {
                return;
            }
            if (fill instanceof drawing.Gradient) {
                return;
            }
            var color = fill.color;
            if (color) {
                color = parseColor(color);
                if (color == null) {
                    return;
                }
                page.setFillColor(color.r, color.g, color.b);
                if (color.a != 1) {
                    page.setFillOpacity(color.a);
                }
            }
            var opacity = fill.opacity;
            if (opacity != null) {
                page.setFillOpacity(opacity);
            }
        }
        function setClipping(element, page, pdf) {
            var clip = element.clip();
            if (clip) {
                _drawPath(clip, page, pdf);
                page.clip();
            }
        }
        function shouldDraw(thing) {
            return thing && (thing instanceof drawing.Gradient || thing.color && !/^(none|transparent)$/i.test(thing.color) && (thing.width == null || thing.width > 0) && (thing.opacity == null || thing.opacity > 0));
        }
        function maybeGradient(element, page, pdf, stroke) {
            var fill = element.fill();
            if (fill instanceof drawing.Gradient) {
                if (stroke) {
                    page.clipStroke();
                } else {
                    page.clip();
                }
                var isRadial = fill instanceof drawing.RadialGradient;
                var start, end;
                if (isRadial) {
                    start = {
                        x: fill.center().x,
                        y: fill.center().y,
                        r: 0
                    };
                    end = {
                        x: fill.center().x,
                        y: fill.center().y,
                        r: fill.radius()
                    };
                } else {
                    start = {
                        x: fill.start().x,
                        y: fill.start().y
                    };
                    end = {
                        x: fill.end().x,
                        y: fill.end().y
                    };
                }
                var stops = fill.stops.elements().map(function (stop) {
                    var offset = stop.offset();
                    if (/%$/.test(offset)) {
                        offset = parseFloat(offset) / 100;
                    } else {
                        offset = parseFloat(offset);
                    }
                    var color = parseColor(stop.color());
                    color.a *= stop.opacity();
                    return {
                        offset: offset,
                        color: color
                    };
                });
                stops.unshift(stops[0]);
                stops.push(stops[stops.length - 1]);
                var gradient = {
                    userSpace: fill.userSpace(),
                    type: isRadial ? 'radial' : 'linear',
                    start: start,
                    end: end,
                    stops: stops
                };
                var box = element.rawBBox();
                var tl = box.topLeft(), size = box.getSize();
                box = {
                    left: tl.x,
                    top: tl.y,
                    width: size.width,
                    height: size.height
                };
                page.gradient(gradient, box);
                return true;
            }
        }
        function maybeFillStroke(element, page, pdf) {
            if (shouldDraw(element.fill()) && shouldDraw(element.stroke())) {
                if (!maybeGradient(element, page, pdf, true)) {
                    page.fillStroke();
                }
            } else if (shouldDraw(element.fill())) {
                if (!maybeGradient(element, page, pdf, false)) {
                    page.fill();
                }
            } else if (shouldDraw(element.stroke())) {
                page.stroke();
            } else {
                page.nop();
            }
        }
        function maybeDrawRect(path, page) {
            var segments = path.segments;
            if (segments.length == 4 && path.options.closed) {
                var a = [];
                for (var i = 0; i < segments.length; ++i) {
                    if (segments[i].controlIn()) {
                        return false;
                    }
                    a[i] = segments[i].anchor();
                }
                var isRect = a[0].y == a[1].y && a[1].x == a[2].x && a[2].y == a[3].y && a[3].x == a[0].x || a[0].x == a[1].x && a[1].y == a[2].y && a[2].x == a[3].x && a[3].y == a[0].y;
                if (isRect) {
                    page.rect(a[0].x, a[0].y, a[2].x - a[0].x, a[2].y - a[0].y);
                    return true;
                }
            }
        }
        function _drawPath(element, page, pdf) {
            var segments = element.segments;
            if (segments.length === 0) {
                return;
            }
            if (!maybeDrawRect(element, page, pdf)) {
                for (var prev, i = 0; i < segments.length; ++i) {
                    var seg = segments[i];
                    var anchor = seg.anchor();
                    if (!prev) {
                        page.moveTo(anchor.x, anchor.y);
                    } else {
                        var prevOut = prev.controlOut();
                        var controlIn = seg.controlIn();
                        if (prevOut && controlIn) {
                            page.bezier(prevOut.x, prevOut.y, controlIn.x, controlIn.y, anchor.x, anchor.y);
                        } else {
                            page.lineTo(anchor.x, anchor.y);
                        }
                    }
                    prev = seg;
                }
                if (element.options.closed) {
                    page.close();
                }
            }
        }
        function drawPath(element, page, pdf) {
            _drawPath(element, page, pdf);
            maybeFillStroke(element, page, pdf);
        }
        function drawMultiPath(element, page, pdf) {
            var paths = element.paths;
            for (var i = 0; i < paths.length; ++i) {
                _drawPath(paths[i], page, pdf);
            }
            maybeFillStroke(element, page, pdf);
        }
        function drawCircle(element, page, pdf) {
            var g = element.geometry();
            page.circle(g.center.x, g.center.y, g.radius);
            maybeFillStroke(element, page, pdf);
        }
        function drawArc(element, page, pdf) {
            var points = element.geometry().curvePoints();
            page.moveTo(points[0].x, points[0].y);
            for (var i = 1; i < points.length;) {
                page.bezier(points[i].x, points[i++].y, points[i].x, points[i++].y, points[i].x, points[i++].y);
            }
            maybeFillStroke(element, page, pdf);
        }
        function drawText(element, page) {
            var style = kendo.pdf.parseFontDef(element.options.font);
            var pos = element._position;
            var mode;
            if (element.fill() && element.stroke()) {
                mode = TEXT_RENDERING_MODE.fillAndStroke;
            } else if (element.fill()) {
                mode = TEXT_RENDERING_MODE.fill;
            } else if (element.stroke()) {
                mode = TEXT_RENDERING_MODE.stroke;
            }
            page.transform(1, 0, 0, -1, pos.x, pos.y + style.fontSize);
            page.beginText();
            page.setFont(kendo.pdf.getFontURL(style), style.fontSize);
            page.setTextRenderingMode(mode);
            page.showText(element.content(), element._pdfRect ? element._pdfRect.width() : null);
            page.endText();
        }
        function drawGroup(element, page, pdf) {
            if (element._pdfLink) {
                page.addLink(element._pdfLink.url, element._pdfLink);
            }
            var children = element.children;
            for (var i = 0; i < children.length; ++i) {
                drawElement(children[i], page, pdf);
            }
        }
        function drawImage(element, page) {
            var url = element.src();
            if (!url) {
                return;
            }
            var rect = element.rect();
            var tl = rect.getOrigin();
            var sz = rect.getSize();
            page.transform(sz.width, 0, 0, -sz.height, tl.x, tl.y + sz.height);
            page.drawImage(url);
        }
        function drawRect(element, page, pdf) {
            var geometry = element.geometry();
            page.rect(geometry.origin.x, geometry.origin.y, geometry.size.width, geometry.size.height);
            maybeFillStroke(element, page, pdf);
        }
        function exportPDF(group, options) {
            var defer = $.Deferred();
            for (var i in options) {
                if (i == 'margin' && group.options.pdf && group.options.pdf._ignoreMargin) {
                    continue;
                }
                group.options.set('pdf.' + i, options[i]);
            }
            drawing.pdf.toDataURL(group, defer.resolve);
            return defer.promise();
        }
        function parseColor(x) {
            var color = kendo.parseColor(x, true);
            return color ? color.toRGB() : null;
        }
        function optimize(root) {
            var clipbox = false;
            var matrix = geo.Matrix.unit();
            var currentBox = null;
            var changed;
            do {
                changed = false;
                root = opt(root);
            } while (root && changed);
            return {
                root: root,
                bbox: currentBox
            };
            function change(newShape) {
                changed = true;
                return newShape;
            }
            function visible(shape) {
                return shape.visible() && shape.opacity() > 0 && (shouldDraw(shape.fill()) || shouldDraw(shape.stroke()));
            }
            function optArray(a) {
                var b = [];
                for (var i = 0; i < a.length; ++i) {
                    var el = opt(a[i]);
                    if (el != null) {
                        b.push(el);
                    }
                }
                return b;
            }
            function withClipping(shape, f) {
                var saveclipbox = clipbox;
                var savematrix = matrix;
                if (shape.transform()) {
                    matrix = matrix.multiplyCopy(shape.transform().matrix());
                }
                var clip = shape.clip();
                if (clip) {
                    clip = clip.bbox();
                    if (clip) {
                        clip = clip.bbox(matrix);
                        clipbox = clipbox ? geo.Rect.intersect(clipbox, clip) : clip;
                    }
                }
                try {
                    return f();
                } finally {
                    clipbox = saveclipbox;
                    matrix = savematrix;
                }
            }
            function inClipbox(shape) {
                if (clipbox == null) {
                    return false;
                }
                var box = shape.rawBBox().bbox(matrix);
                if (clipbox && box) {
                    box = geo.Rect.intersect(box, clipbox);
                }
                return box;
            }
            function opt(shape) {
                return withClipping(shape, function () {
                    if (!(shape instanceof drawing.Group || shape instanceof drawing.MultiPath)) {
                        var box = inClipbox(shape);
                        if (!box) {
                            return change(null);
                        }
                        currentBox = currentBox ? geo.Rect.union(currentBox, box) : box;
                    }
                    return dispatch({
                        Path: function (shape) {
                            if (shape.segments.length === 0 || !visible(shape)) {
                                return change(null);
                            }
                            return shape;
                        },
                        MultiPath: function (shape) {
                            if (!visible(shape)) {
                                return change(null);
                            }
                            var el = new drawing.MultiPath(shape.options);
                            el.paths = optArray(shape.paths);
                            if (el.paths.length === 0) {
                                return change(null);
                            }
                            return el;
                        },
                        Circle: function (shape) {
                            if (!visible(shape)) {
                                return change(null);
                            }
                            return shape;
                        },
                        Arc: function (shape) {
                            if (!visible(shape)) {
                                return change(null);
                            }
                            return shape;
                        },
                        Text: function (shape) {
                            if (!/\S/.test(shape.content()) || !visible(shape)) {
                                return change(null);
                            }
                            return shape;
                        },
                        Image: function (shape) {
                            if (!(shape.visible() && shape.opacity() > 0)) {
                                return change(null);
                            }
                            return shape;
                        },
                        Group: function (shape) {
                            var el = new drawing.Group(shape.options);
                            el.children = optArray(shape.children);
                            el._pdfLink = shape._pdfLink;
                            if (shape !== root && el.children.length === 0 && !shape._pdfLink) {
                                return change(null);
                            }
                            return el;
                        },
                        Rect: function (shape) {
                            if (!visible(shape)) {
                                return change(null);
                            }
                            return shape;
                        }
                    }, shape);
                });
            }
        }
        kendo.deepExtend(drawing, {
            exportPDF: exportPDF,
            pdf: {
                toDataURL: toDataURL,
                toBlob: toBlob,
                saveAs: saveAs,
                toStream: render
            }
        });
    }(window.kendo, window.kendo.jQuery));
}, typeof define == 'function' && define.amd ? define : function (a1, a2, a3) {
    (a3 || a2)();
}));
(function (f, define) {
    define('kendo.pdf', [
        'kendo.core',
        'pdf/core',
        'pdf/ttf',
        'pdf/drawing',
        'kendo.drawing'
    ], f);
}(function () {
    var __meta__ = {
        id: 'pdf',
        name: 'PDF export',
        description: 'PDF Generation framework',
        mixin: true,
        category: 'framework',
        depends: [
            'core',
            'drawing'
        ]
    };
    (function (kendo, $) {
        kendo.PDFMixin = {
            extend: function (proto) {
                proto.events.push('pdfExport');
                proto.options.pdf = this.options;
                proto.saveAsPDF = this.saveAsPDF;
                proto._drawPDF = this._drawPDF;
                proto._drawPDFShadow = this._drawPDFShadow;
            },
            options: {
                fileName: 'Export.pdf',
                proxyURL: '',
                paperSize: 'auto',
                allPages: false,
                landscape: false,
                margin: null,
                title: null,
                author: null,
                subject: null,
                keywords: null,
                creator: 'Kendo UI PDF Generator v.' + kendo.version,
                date: null
            },
            saveAsPDF: function () {
                var progress = new $.Deferred();
                var promise = progress.promise();
                var args = { promise: promise };
                if (this.trigger('pdfExport', args)) {
                    return;
                }
                var options = this.options.pdf;
                options.multiPage = options.multiPage || options.allPages;
                this._drawPDF(progress).then(function (root) {
                    return kendo.drawing.exportPDF(root, options);
                }).done(function (dataURI) {
                    kendo.saveAs({
                        dataURI: dataURI,
                        fileName: options.fileName,
                        proxyURL: options.proxyURL,
                        forceProxy: options.forceProxy,
                        proxyTarget: options.proxyTarget
                    });
                    progress.resolve();
                }).fail(function (err) {
                    progress.reject(err);
                });
                return promise;
            },
            _drawPDF: function (progress) {
                var promise = new $.Deferred();
                kendo.drawing.drawDOM(this.wrapper).done(function (group) {
                    var args = {
                        page: group,
                        pageNumber: 1,
                        progress: 1,
                        totalPages: 1
                    };
                    progress.notify(args);
                    promise.resolve(args.page);
                }).fail(function (err) {
                    promise.reject(err);
                });
                return promise;
            },
            _drawPDFShadow: function (settings, drawOptions) {
                settings = settings || {};
                var wrapper = this.wrapper;
                var shadow = $('<div class=\'k-pdf-export-shadow\'>');
                if (settings.width) {
                    shadow.css({
                        width: settings.width,
                        overflow: 'visible'
                    });
                }
                wrapper.before(shadow);
                shadow.append(settings.content || wrapper.clone(true, true));
                var defer = $.Deferred();
                setTimeout(function () {
                    var promise = kendo.drawing.drawDOM(shadow, drawOptions);
                    promise.always(function () {
                        shadow.remove();
                    }).then(function () {
                        defer.resolve.apply(defer, arguments);
                    }).fail(function () {
                        defer.reject.apply(defer, arguments);
                    }).progress(function () {
                        defer.progress.apply(defer, arguments);
                    });
                }, 15);
                return defer.promise();
            }
        };
    }(kendo, window.kendo.jQuery));
    return kendo;
}, typeof define == 'function' && define.amd ? define : function (a1, a2, a3) {
    (a3 || a2)();
}));
/** 
 * Kendo UI v2016.2.714 (http://www.telerik.com/kendo-ui)                                                                                                                                               
 * Copyright 2016 Telerik AD. All rights reserved.                                                                                                                                                      
 *                                                                                                                                                                                                      
 * Kendo UI commercial licenses may be obtained at                                                                                                                                                      
 * http://www.telerik.com/purchase/license-agreement/kendo-ui-complete                                                                                                                                  
 * If you do not own a commercial license, this file shall be governed by the trial license terms.                                                                                                      
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       

*/
(function (f, define) {
    define('kendo.timezones', ['kendo.core'], f);
}(function () {
    var __meta__ = {
        id: 'timezones',
        name: 'Timezones',
        category: 'framework',
        depends: ['core'],
        hidden: true
    };
    var kendo = window.kendo;
    kendo.timezone.zones = {
        'Africa/Algiers': [
            [
                '-12.2',
                '-',
                'LMT',
                '-2486678340000'
            ],
            [
                '-9.35',
                '-',
                'PMT',
                '-1855958400000'
            ],
            [
                '0',
                'Algeria',
                'WE%sT',
                '-942012000000'
            ],
            [
                '-60',
                'Algeria',
                'CE%sT',
                '-733276800000'
            ],
            [
                '0',
                '-',
                'WET',
                '-439430400000'
            ],
            [
                '-60',
                '-',
                'CET',
                '-212025600000'
            ],
            [
                '0',
                'Algeria',
                'WE%sT',
                '246240000000'
            ],
            [
                '-60',
                'Algeria',
                'CE%sT',
                '309744000000'
            ],
            [
                '0',
                'Algeria',
                'WE%sT',
                '357523200000'
            ],
            [
                '-60',
                '-',
                'CET'
            ]
        ],
        'Atlantic/Cape_Verde': [
            [
                '94.06666666666668',
                '-',
                'LMT',
                '-1956700800000'
            ],
            [
                '120',
                '-',
                'CVT',
                '-862617600000'
            ],
            [
                '120',
                '1:00',
                'CVST',
                '-764121600000'
            ],
            [
                '120',
                '-',
                'CVT',
                '186112800000'
            ],
            [
                '60',
                '-',
                'CVT'
            ]
        ],
        'Africa/Ndjamena': [
            [
                '-60.2',
                '-',
                'LMT',
                '-1798848000000'
            ],
            [
                '-60',
                '-',
                'WAT',
                '308707200000'
            ],
            [
                '-60',
                '1:00',
                'WAST',
                '321321600000'
            ],
            [
                '-60',
                '-',
                'WAT'
            ]
        ],
        'Indian/Comoro': [
            [
                '-173.06666666666666',
                '-',
                'LMT',
                '-1846281600000'
            ],
            [
                '-180',
                '-',
                'EAT'
            ]
        ],
        'Africa/Abidjan': [
            [
                '16.133333333333333',
                '-',
                'LMT',
                '-1798848000000'
            ],
            [
                '0',
                '-',
                'GMT'
            ]
        ],
        'Africa/Bamako': 'Africa/Abidjan',
        'Africa/Banjul': 'Africa/Abidjan',
        'Africa/Conakry': 'Africa/Abidjan',
        'Africa/Dakar': 'Africa/Abidjan',
        'Africa/Freetown': 'Africa/Abidjan',
        'Africa/Lome': 'Africa/Abidjan',
        'Africa/Nouakchott': 'Africa/Abidjan',
        'Africa/Ouagadougou': 'Africa/Abidjan',
        'Africa/Sao_Tome': 'Africa/Abidjan',
        'Atlantic/St_Helena': 'Africa/Abidjan',
        'Africa/Djibouti': [
            [
                '-172.6',
                '-',
                'LMT',
                '-1846281600000'
            ],
            [
                '-180',
                '-',
                'EAT'
            ]
        ],
        'Africa/Cairo': [
            [
                '-125.15',
                '-',
                'LMT',
                '-2185401600000'
            ],
            [
                '-120',
                'Egypt',
                'EE%sT'
            ]
        ],
        'Africa/Asmara': [
            [
                '-155.53333333333333',
                '-',
                'LMT',
                '-3124224000000'
            ],
            [
                '-155.53333333333333',
                '-',
                'AMT',
                '-2493072000000'
            ],
            [
                '-155.33333333333334',
                '-',
                'ADMT',
                '-1062201600000'
            ],
            [
                '-180',
                '-',
                'EAT'
            ]
        ],
        'Africa/Addis_Ababa': [
            [
                '-154.8',
                '-',
                'LMT',
                '-3124224000000'
            ],
            [
                '-155.33333333333334',
                '-',
                'ADMT',
                '-1062201600000'
            ],
            [
                '-180',
                '-',
                'EAT'
            ]
        ],
        'Africa/Accra': [
            [
                '0.8666666666666666',
                '-',
                'LMT',
                '-1609545600000'
            ],
            [
                '0',
                'Ghana',
                '%s'
            ]
        ],
        'Africa/Bissau': [
            [
                '62.333333333333336',
                '-',
                'LMT',
                '-1830384000000'
            ],
            [
                '60',
                '-',
                'WAT',
                '189216000000'
            ],
            [
                '0',
                '-',
                'GMT'
            ]
        ],
        'Africa/Nairobi': [
            [
                '-147.26666666666665',
                '-',
                'LMT',
                '-1309737600000'
            ],
            [
                '-180',
                '-',
                'EAT',
                '-1230854400000'
            ],
            [
                '-150',
                '-',
                'BEAT',
                '-915235200000'
            ],
            [
                '-165',
                '-',
                'BEAUT',
                '-284083200000'
            ],
            [
                '-180',
                '-',
                'EAT'
            ]
        ],
        'Africa/Monrovia': [
            [
                '43.13333333333333',
                '-',
                'LMT',
                '-2745532800000'
            ],
            [
                '43.13333333333333',
                '-',
                'MMT',
                '-1604361600000'
            ],
            [
                '44.5',
                '-',
                'LRT',
                '73526400000'
            ],
            [
                '0',
                '-',
                'GMT'
            ]
        ],
        'Africa/Tripoli': [
            [
                '-52.733333333333334',
                '-',
                'LMT',
                '-1546387200000'
            ],
            [
                '-60',
                'Libya',
                'CE%sT',
                '-315705600000'
            ],
            [
                '-120',
                '-',
                'EET',
                '410140800000'
            ],
            [
                '-60',
                'Libya',
                'CE%sT',
                '641779200000'
            ],
            [
                '-120',
                '-',
                'EET',
                '844041600000'
            ],
            [
                '-60',
                'Libya',
                'CE%sT',
                '875923200000'
            ],
            [
                '-120',
                '-',
                'EET',
                '1352512800000'
            ],
            [
                '-60',
                'Libya',
                'CE%sT',
                '1382666400000'
            ],
            [
                '-120',
                '-',
                'EET'
            ]
        ],
        'Indian/Antananarivo': [
            [
                '-190.06666666666666',
                '-',
                'LMT',
                '-1846281600000'
            ],
            [
                '-180',
                '-',
                'EAT',
                '-499914000000'
            ],
            [
                '-180',
                '1:00',
                'EAST',
                '-492051600000'
            ],
            [
                '-180',
                '-',
                'EAT'
            ]
        ],
        'Indian/Mauritius': [
            [
                '-230',
                '-',
                'LMT',
                '-1956700800000'
            ],
            [
                '-240',
                'Mauritius',
                'MU%sT'
            ]
        ],
        'Indian/Mayotte': [
            [
                '-180.93333333333334',
                '-',
                'LMT',
                '-1846281600000'
            ],
            [
                '-180',
                '-',
                'EAT'
            ]
        ],
        'Africa/Casablanca': [
            [
                '30.333333333333332',
                '-',
                'LMT',
                '-1773014400000'
            ],
            [
                '0',
                'Morocco',
                'WE%sT',
                '448243200000'
            ],
            [
                '-60',
                '-',
                'CET',
                '536371200000'
            ],
            [
                '0',
                'Morocco',
                'WE%sT'
            ]
        ],
        'Africa/El_Aaiun': [
            [
                '52.8',
                '-',
                'LMT',
                '-1136073600000'
            ],
            [
                '60',
                '-',
                'WAT',
                '198288000000'
            ],
            [
                '0',
                'Morocco',
                'WE%sT'
            ]
        ],
        'Africa/Maputo': [
            [
                '-130.33333333333331',
                '-',
                'LMT',
                '-2109283200000'
            ],
            [
                '-120',
                '-',
                'CAT'
            ]
        ],
        'Africa/Blantyre': 'Africa/Maputo',
        'Africa/Bujumbura': 'Africa/Maputo',
        'Africa/Gaborone': 'Africa/Maputo',
        'Africa/Harare': 'Africa/Maputo',
        'Africa/Kigali': 'Africa/Maputo',
        'Africa/Lubumbashi': 'Africa/Maputo',
        'Africa/Lusaka': 'Africa/Maputo',
        'Africa/Windhoek': [
            [
                '-68.4',
                '-',
                'LMT',
                '-2458166400000'
            ],
            [
                '-90',
                '-',
                'SWAT',
                '-2109283200000'
            ],
            [
                '-120',
                '-',
                'SAST',
                '-860968800000'
            ],
            [
                '-120',
                '1:00',
                'SAST',
                '-845244000000'
            ],
            [
                '-120',
                '-',
                'SAST',
                '637977600000'
            ],
            [
                '-120',
                '-',
                'CAT',
                '765331200000'
            ],
            [
                '-60',
                'Namibia',
                'WA%sT'
            ]
        ],
        'Africa/Lagos': [
            [
                '-13.6',
                '-',
                'LMT',
                '-1588464000000'
            ],
            [
                '-60',
                '-',
                'WAT'
            ]
        ],
        'Africa/Bangui': 'Africa/Lagos',
        'Africa/Brazzaville': 'Africa/Lagos',
        'Africa/Douala': 'Africa/Lagos',
        'Africa/Kinshasa': 'Africa/Lagos',
        'Africa/Libreville': 'Africa/Lagos',
        'Africa/Luanda': 'Africa/Lagos',
        'Africa/Malabo': 'Africa/Lagos',
        'Africa/Niamey': 'Africa/Lagos',
        'Africa/Porto-Novo': 'Africa/Lagos',
        'Indian/Reunion': [
            [
                '-221.86666666666665',
                '-',
                'LMT',
                '-1848873600000'
            ],
            [
                '-240',
                '-',
                'RET'
            ]
        ],
        'Indian/Mahe': [
            [
                '-221.8',
                '-',
                'LMT',
                '-2006640000000'
            ],
            [
                '-240',
                '-',
                'SCT'
            ]
        ],
        'Africa/Mogadishu': [
            [
                '-181.46666666666667',
                '-',
                'LMT',
                '-2403561600000'
            ],
            [
                '-180',
                '-',
                'EAT',
                '-1199318400000'
            ],
            [
                '-150',
                '-',
                'BEAT',
                '-378777600000'
            ],
            [
                '-180',
                '-',
                'EAT'
            ]
        ],
        'Africa/Johannesburg': [
            [
                '-112',
                '-',
                'LMT',
                '-2458166400000'
            ],
            [
                '-90',
                '-',
                'SAST',
                '-2109283200000'
            ],
            [
                '-120',
                'SA',
                'SAST'
            ]
        ],
        'Africa/Maseru': 'Africa/Johannesburg',
        'Africa/Mbabane': 'Africa/Johannesburg',
        'Africa/Khartoum': [
            [
                '-130.13333333333333',
                '-',
                'LMT',
                '-1199318400000'
            ],
            [
                '-120',
                'Sudan',
                'CA%sT',
                '947937600000'
            ],
            [
                '-180',
                '-',
                'EAT'
            ]
        ],
        'Africa/Juba': 'Africa/Khartoum',
        'Africa/Dar_es_Salaam': [
            [
                '-157.13333333333335',
                '-',
                'LMT',
                '-1199318400000'
            ],
            [
                '-180',
                '-',
                'EAT',
                '-662774400000'
            ],
            [
                '-165',
                '-',
                'BEAUT',
                '-252547200000'
            ],
            [
                '-180',
                '-',
                'EAT'
            ]
        ],
        'Africa/Tunis': [
            [
                '-40.733333333333334',
                '-',
                'LMT',
                '-2797200000000'
            ],
            [
                '-9.35',
                '-',
                'PMT',
                '-1855958400000'
            ],
            [
                '-60',
                'Tunisia',
                'CE%sT'
            ]
        ],
        'Africa/Kampala': [
            [
                '-129.66666666666669',
                '-',
                'LMT',
                '-1309737600000'
            ],
            [
                '-180',
                '-',
                'EAT',
                '-1230854400000'
            ],
            [
                '-150',
                '-',
                'BEAT',
                '-662774400000'
            ],
            [
                '-165',
                '-',
                'BEAUT',
                '-378777600000'
            ],
            [
                '-180',
                '-',
                'EAT'
            ]
        ],
        'Antarctica/Casey': [
            [
                '0',
                '-',
                'zzz',
                '-86400000'
            ],
            [
                '-480',
                '-',
                'AWST',
                '1255831200000'
            ],
            [
                '-660',
                '-',
                'CAST',
                '1267754400000'
            ],
            [
                '-480',
                '-',
                'AWST',
                '1319767200000'
            ],
            [
                '-660',
                '-',
                'CAST',
                '1329843600000'
            ],
            [
                '-480',
                '-',
                'AWST'
            ]
        ],
        'Antarctica/Davis': [
            [
                '0',
                '-',
                'zzz',
                '-409190400000'
            ],
            [
                '-420',
                '-',
                'DAVT',
                '-163036800000'
            ],
            [
                '0',
                '-',
                'zzz',
                '-28857600000'
            ],
            [
                '-420',
                '-',
                'DAVT',
                '1255831200000'
            ],
            [
                '-300',
                '-',
                'DAVT',
                '1268251200000'
            ],
            [
                '-420',
                '-',
                'DAVT',
                '1319767200000'
            ],
            [
                '-300',
                '-',
                'DAVT',
                '1329854400000'
            ],
            [
                '-420',
                '-',
                'DAVT'
            ]
        ],
        'Antarctica/Mawson': [
            [
                '0',
                '-',
                'zzz',
                '-501206400000'
            ],
            [
                '-360',
                '-',
                'MAWT',
                '1255831200000'
            ],
            [
                '-300',
                '-',
                'MAWT'
            ]
        ],
        'Indian/Kerguelen': [
            [
                '0',
                '-',
                'zzz',
                '-599702400000'
            ],
            [
                '-300',
                '-',
                'TFT'
            ]
        ],
        'Antarctica/DumontDUrville': [
            [
                '0',
                '-',
                'zzz',
                '-694396800000'
            ],
            [
                '-600',
                '-',
                'PMT',
                '-566956800000'
            ],
            [
                '0',
                '-',
                'zzz',
                '-415497600000'
            ],
            [
                '-600',
                '-',
                'DDUT'
            ]
        ],
        'Antarctica/Syowa': [
            [
                '0',
                '-',
                'zzz',
                '-407808000000'
            ],
            [
                '-180',
                '-',
                'SYOT'
            ]
        ],
        'Antarctica/Troll': [
            [
                '0',
                '-',
                'zzz',
                '1108166400000'
            ],
            [
                '0',
                'Troll',
                '%s'
            ]
        ],
        'Antarctica/Vostok': [
            [
                '0',
                '-',
                'zzz',
                '-380073600000'
            ],
            [
                '-360',
                '-',
                'VOST'
            ]
        ],
        'Antarctica/Rothera': [
            [
                '0',
                '-',
                'zzz',
                '218246400000'
            ],
            [
                '180',
                '-',
                'ROTT'
            ]
        ],
        'Antarctica/Palmer': [
            [
                '0',
                '-',
                'zzz',
                '-126316800000'
            ],
            [
                '240',
                'ArgAQ',
                'AR%sT',
                '-7603200000'
            ],
            [
                '180',
                'ArgAQ',
                'AR%sT',
                '389059200000'
            ],
            [
                '240',
                'ChileAQ',
                'CL%sT'
            ]
        ],
        'Asia/Kabul': [
            [
                '-276.8',
                '-',
                'LMT',
                '-2493072000000'
            ],
            [
                '-240',
                '-',
                'AFT',
                '-757468800000'
            ],
            [
                '-270',
                '-',
                'AFT'
            ]
        ],
        'Asia/Yerevan': [
            [
                '-178',
                '-',
                'LMT',
                '-1441152000000'
            ],
            [
                '-180',
                '-',
                'YERT',
                '-405129600000'
            ],
            [
                '-240',
                'RussiaAsia',
                'YER%sT',
                '670384800000'
            ],
            [
                '-180',
                '1:00',
                'YERST',
                '685584000000'
            ],
            [
                '-180',
                'RussiaAsia',
                'AM%sT',
                '811908000000'
            ],
            [
                '-240',
                '-',
                'AMT',
                '883526400000'
            ],
            [
                '-240',
                'RussiaAsia',
                'AM%sT',
                '1332640800000'
            ],
            [
                '-240',
                '-',
                'AMT'
            ]
        ],
        'Asia/Baku': [
            [
                '-199.4',
                '-',
                'LMT',
                '-1441152000000'
            ],
            [
                '-180',
                '-',
                'BAKT',
                '-405129600000'
            ],
            [
                '-240',
                'RussiaAsia',
                'BAK%sT',
                '670384800000'
            ],
            [
                '-180',
                '1:00',
                'BAKST',
                '683510400000'
            ],
            [
                '-180',
                'RussiaAsia',
                'AZ%sT',
                '715388400000'
            ],
            [
                '-240',
                '-',
                'AZT',
                '851990400000'
            ],
            [
                '-240',
                'EUAsia',
                'AZ%sT',
                '883526400000'
            ],
            [
                '-240',
                'Azer',
                'AZ%sT'
            ]
        ],
        'Asia/Bahrain': [
            [
                '-202.33333333333334',
                '-',
                'LMT',
                '-1546387200000'
            ],
            [
                '-240',
                '-',
                'GST',
                '76204800000'
            ],
            [
                '-180',
                '-',
                'AST'
            ]
        ],
        'Asia/Dhaka': [
            [
                '-361.6666666666667',
                '-',
                'LMT',
                '-2493072000000'
            ],
            [
                '-353.3333333333333',
                '-',
                'HMT',
                '-891561600000'
            ],
            [
                '-390',
                '-',
                'BURT',
                '-872035200000'
            ],
            [
                '-330',
                '-',
                'IST',
                '-862617600000'
            ],
            [
                '-390',
                '-',
                'BURT',
                '-576115200000'
            ],
            [
                '-360',
                '-',
                'DACT',
                '38793600000'
            ],
            [
                '-360',
                '-',
                'BDT',
                '1262217600000'
            ],
            [
                '-360',
                'Dhaka',
                'BD%sT'
            ]
        ],
        'Asia/Thimphu': [
            [
                '-358.6',
                '-',
                'LMT',
                '-706320000000'
            ],
            [
                '-330',
                '-',
                'IST',
                '560044800000'
            ],
            [
                '-360',
                '-',
                'BTT'
            ]
        ],
        'Indian/Chagos': [
            [
                '-289.6666666666667',
                '-',
                'LMT',
                '-1956700800000'
            ],
            [
                '-300',
                '-',
                'IOT',
                '851990400000'
            ],
            [
                '-360',
                '-',
                'IOT'
            ]
        ],
        'Asia/Brunei': [
            [
                '-459.6666666666667',
                '-',
                'LMT',
                '-1383436800000'
            ],
            [
                '-450',
                '-',
                'BNT',
                '-1136160000000'
            ],
            [
                '-480',
                '-',
                'BNT'
            ]
        ],
        'Asia/Rangoon': [
            [
                '-384.6666666666667',
                '-',
                'LMT',
                '-2808604800000'
            ],
            [
                '-384.6666666666667',
                '-',
                'RMT',
                '-1546387200000'
            ],
            [
                '-390',
                '-',
                'BURT',
                '-873244800000'
            ],
            [
                '-540',
                '-',
                'JST',
                '-778377600000'
            ],
            [
                '-390',
                '-',
                'MMT'
            ]
        ],
        'Asia/Phnom_Penh': [
            [
                '-419.6666666666667',
                '-',
                'LMT',
                '-2005948800000'
            ],
            [
                '-426.3333333333333',
                '-',
                'SMT',
                '-1855958340000'
            ],
            [
                '-420',
                '-',
                'ICT',
                '-1819929600000'
            ],
            [
                '-480',
                '-',
                'ICT',
                '-1220400000000'
            ],
            [
                '-420',
                '-',
                'ICT'
            ]
        ],
        'Asia/Shanghai': [
            [
                '-485.7166666666667',
                '-',
                'LMT',
                '-2146003200000'
            ],
            [
                '-480',
                'Shang',
                'C%sT',
                '-631238400000'
            ],
            [
                '-480',
                'PRC',
                'C%sT'
            ]
        ],
        'Asia/Urumqi': [
            [
                '-350.3333333333333',
                '-',
                'LMT',
                '-1293926400000'
            ],
            [
                '-360',
                '-',
                'XJT'
            ]
        ],
        'Asia/Hong_Kong': [
            [
                '-456.7',
                '-',
                'LMT',
                '-2056665600000'
            ],
            [
                '-480',
                'HK',
                'HK%sT',
                '-884217600000'
            ],
            [
                '-540',
                '-',
                'JST',
                '-766713600000'
            ],
            [
                '-480',
                'HK',
                'HK%sT'
            ]
        ],
        'Asia/Taipei': [
            [
                '-486',
                '-',
                'LMT',
                '-2335219200000'
            ],
            [
                '-480',
                '-',
                'JWST',
                '-1017792000000'
            ],
            [
                '-540',
                '-',
                'JST',
                '-766191600000'
            ],
            [
                '-480',
                'Taiwan',
                'C%sT'
            ]
        ],
        'Asia/Macau': [
            [
                '-454.3333333333333',
                '-',
                'LMT',
                '-1830384000000'
            ],
            [
                '-480',
                'Macau',
                'MO%sT',
                '945648000000'
            ],
            [
                '-480',
                'PRC',
                'C%sT'
            ]
        ],
        'Asia/Nicosia': [
            [
                '-133.46666666666667',
                '-',
                'LMT',
                '-1518912000000'
            ],
            [
                '-120',
                'Cyprus',
                'EE%sT',
                '904608000000'
            ],
            [
                '-120',
                'EUAsia',
                'EE%sT'
            ]
        ],
        'Europe/Nicosia': 'Asia/Nicosia',
        'Asia/Tbilisi': [
            [
                '-179.18333333333334',
                '-',
                'LMT',
                '-2808604800000'
            ],
            [
                '-179.18333333333334',
                '-',
                'TBMT',
                '-1441152000000'
            ],
            [
                '-180',
                '-',
                'TBIT',
                '-405129600000'
            ],
            [
                '-240',
                'RussiaAsia',
                'TBI%sT',
                '670384800000'
            ],
            [
                '-180',
                '1:00',
                'TBIST',
                '671155200000'
            ],
            [
                '-180',
                'RussiaAsia',
                'GE%sT',
                '725760000000'
            ],
            [
                '-180',
                'E-EurAsia',
                'GE%sT',
                '778377600000'
            ],
            [
                '-240',
                'E-EurAsia',
                'GE%sT',
                '844128000000'
            ],
            [
                '-240',
                '1:00',
                'GEST',
                '857174400000'
            ],
            [
                '-240',
                'E-EurAsia',
                'GE%sT',
                '1088294400000'
            ],
            [
                '-180',
                'RussiaAsia',
                'GE%sT',
                '1109642400000'
            ],
            [
                '-240',
                '-',
                'GET'
            ]
        ],
        'Asia/Dili': [
            [
                '-502.3333333333333',
                '-',
                'LMT',
                '-1830384000000'
            ],
            [
                '-480',
                '-',
                'TLT',
                '-879123600000'
            ],
            [
                '-540',
                '-',
                'JST',
                '-766022400000'
            ],
            [
                '-540',
                '-',
                'TLT',
                '199929600000'
            ],
            [
                '-480',
                '-',
                'WITA',
                '969148800000'
            ],
            [
                '-540',
                '-',
                'TLT'
            ]
        ],
        'Asia/Kolkata': [
            [
                '-353.4666666666667',
                '-',
                'LMT',
                '-2808604800000'
            ],
            [
                '-353.3333333333333',
                '-',
                'HMT',
                '-891561600000'
            ],
            [
                '-390',
                '-',
                'BURT',
                '-872035200000'
            ],
            [
                '-330',
                '-',
                'IST',
                '-862617600000'
            ],
            [
                '-330',
                '1:00',
                'IST',
                '-764121600000'
            ],
            [
                '-330',
                '-',
                'IST'
            ]
        ],
        'Asia/Jakarta': [
            [
                '-427.2',
                '-',
                'LMT',
                '-3231273600000'
            ],
            [
                '-427.2',
                '-',
                'BMT',
                '-1451693568000'
            ],
            [
                '-440',
                '-',
                'JAVT',
                '-1172880000000'
            ],
            [
                '-450',
                '-',
                'WIB',
                '-876614400000'
            ],
            [
                '-540',
                '-',
                'JST',
                '-766022400000'
            ],
            [
                '-450',
                '-',
                'WIB',
                '-683856000000'
            ],
            [
                '-480',
                '-',
                'WIB',
                '-620784000000'
            ],
            [
                '-450',
                '-',
                'WIB',
                '-157852800000'
            ],
            [
                '-420',
                '-',
                'WIB'
            ]
        ],
        'Asia/Pontianak': [
            [
                '-437.3333333333333',
                '-',
                'LMT',
                '-1946160000000'
            ],
            [
                '-437.3333333333333',
                '-',
                'PMT',
                '-1172880000000'
            ],
            [
                '-450',
                '-',
                'WIB',
                '-881193600000'
            ],
            [
                '-540',
                '-',
                'JST',
                '-766022400000'
            ],
            [
                '-450',
                '-',
                'WIB',
                '-683856000000'
            ],
            [
                '-480',
                '-',
                'WIB',
                '-620784000000'
            ],
            [
                '-450',
                '-',
                'WIB',
                '-157852800000'
            ],
            [
                '-480',
                '-',
                'WITA',
                '567993600000'
            ],
            [
                '-420',
                '-',
                'WIB'
            ]
        ],
        'Asia/Makassar': [
            [
                '-477.6',
                '-',
                'LMT',
                '-1546387200000'
            ],
            [
                '-477.6',
                '-',
                'MMT',
                '-1172880000000'
            ],
            [
                '-480',
                '-',
                'WITA',
                '-880243200000'
            ],
            [
                '-540',
                '-',
                'JST',
                '-766022400000'
            ],
            [
                '-480',
                '-',
                'WITA'
            ]
        ],
        'Asia/Jayapura': [
            [
                '-562.8',
                '-',
                'LMT',
                '-1172880000000'
            ],
            [
                '-540',
                '-',
                'WIT',
                '-799459200000'
            ],
            [
                '-570',
                '-',
                'ACST',
                '-157852800000'
            ],
            [
                '-540',
                '-',
                'WIT'
            ]
        ],
        'Asia/Tehran': [
            [
                '-205.73333333333335',
                '-',
                'LMT',
                '-1672617600000'
            ],
            [
                '-205.73333333333335',
                '-',
                'TMT',
                '-725932800000'
            ],
            [
                '-210',
                '-',
                'IRST',
                '247190400000'
            ],
            [
                '-240',
                'Iran',
                'IR%sT',
                '315446400000'
            ],
            [
                '-210',
                'Iran',
                'IR%sT'
            ]
        ],
        'Asia/Baghdad': [
            [
                '-177.66666666666666',
                '-',
                'LMT',
                '-2493072000000'
            ],
            [
                '-177.6',
                '-',
                'BMT',
                '-1609545600000'
            ],
            [
                '-180',
                '-',
                'AST',
                '389059200000'
            ],
            [
                '-180',
                'Iraq',
                'A%sT'
            ]
        ],
        'Asia/Jerusalem': [
            [
                '-140.9',
                '-',
                'LMT',
                '-2808604800000'
            ],
            [
                '-140.66666666666666',
                '-',
                'JMT',
                '-1609545600000'
            ],
            [
                '-120',
                'Zion',
                'I%sT'
            ]
        ],
        'Asia/Tokyo': [
            [
                '-558.9833333333333',
                '-',
                'LMT',
                '-2587712400000'
            ],
            [
                '-540',
                '-',
                'JST',
                '-2335219200000'
            ],
            [
                '-540',
                '-',
                'JCST',
                '-1017792000000'
            ],
            [
                '-540',
                'Japan',
                'J%sT'
            ]
        ],
        'Asia/Amman': [
            [
                '-143.73333333333335',
                '-',
                'LMT',
                '-1199318400000'
            ],
            [
                '-120',
                'Jordan',
                'EE%sT'
            ]
        ],
        'Asia/Almaty': [
            [
                '-307.8',
                '-',
                'LMT',
                '-1441152000000'
            ],
            [
                '-300',
                '-',
                'ALMT',
                '-1247529600000'
            ],
            [
                '-360',
                'RussiaAsia',
                'ALM%sT',
                '694137600000'
            ],
            [
                '-360',
                '-',
                'ALMT',
                '725760000000'
            ],
            [
                '-360',
                'RussiaAsia',
                'ALM%sT',
                '1110844800000'
            ],
            [
                '-360',
                '-',
                'ALMT'
            ]
        ],
        'Asia/Qyzylorda': [
            [
                '-261.8666666666667',
                '-',
                'LMT',
                '-1441152000000'
            ],
            [
                '-240',
                '-',
                'KIZT',
                '-1247529600000'
            ],
            [
                '-300',
                '-',
                'KIZT',
                '354931200000'
            ],
            [
                '-300',
                '1:00',
                'KIZST',
                '370742400000'
            ],
            [
                '-360',
                '-',
                'KIZT',
                '386467200000'
            ],
            [
                '-300',
                'RussiaAsia',
                'KIZ%sT',
                '694137600000'
            ],
            [
                '-300',
                '-',
                'KIZT',
                '692841600000'
            ],
            [
                '-300',
                '-',
                'QYZT',
                '695786400000'
            ],
            [
                '-360',
                'RussiaAsia',
                'QYZ%sT',
                '1110844800000'
            ],
            [
                '-360',
                '-',
                'QYZT'
            ]
        ],
        'Asia/Aqtobe': [
            [
                '-228.66666666666666',
                '-',
                'LMT',
                '-1441152000000'
            ],
            [
                '-240',
                '-',
                'AKTT',
                '-1247529600000'
            ],
            [
                '-300',
                '-',
                'AKTT',
                '354931200000'
            ],
            [
                '-300',
                '1:00',
                'AKTST',
                '370742400000'
            ],
            [
                '-360',
                '-',
                'AKTT',
                '386467200000'
            ],
            [
                '-300',
                'RussiaAsia',
                'AKT%sT',
                '694137600000'
            ],
            [
                '-300',
                '-',
                'AKTT',
                '692841600000'
            ],
            [
                '-300',
                'RussiaAsia',
                'AQT%sT',
                '1110844800000'
            ],
            [
                '-300',
                '-',
                'AQTT'
            ]
        ],
        'Asia/Aqtau': [
            [
                '-201.06666666666666',
                '-',
                'LMT',
                '-1441152000000'
            ],
            [
                '-240',
                '-',
                'FORT',
                '-1247529600000'
            ],
            [
                '-300',
                '-',
                'FORT',
                '-189475200000'
            ],
            [
                '-300',
                '-',
                'SHET',
                '370742400000'
            ],
            [
                '-360',
                '-',
                'SHET',
                '386467200000'
            ],
            [
                '-300',
                'RussiaAsia',
                'SHE%sT',
                '694137600000'
            ],
            [
                '-300',
                '-',
                'SHET',
                '692841600000'
            ],
            [
                '-300',
                'RussiaAsia',
                'AQT%sT',
                '794023200000'
            ],
            [
                '-240',
                'RussiaAsia',
                'AQT%sT',
                '1110844800000'
            ],
            [
                '-300',
                '-',
                'AQTT'
            ]
        ],
        'Asia/Oral': [
            [
                '-205.4',
                '-',
                'LMT',
                '-1441152000000'
            ],
            [
                '-240',
                '-',
                'URAT',
                '-1247529600000'
            ],
            [
                '-300',
                '-',
                'URAT',
                '354931200000'
            ],
            [
                '-300',
                '1:00',
                'URAST',
                '370742400000'
            ],
            [
                '-360',
                '-',
                'URAT',
                '386467200000'
            ],
            [
                '-300',
                'RussiaAsia',
                'URA%sT',
                '606880800000'
            ],
            [
                '-240',
                'RussiaAsia',
                'URA%sT',
                '694137600000'
            ],
            [
                '-240',
                '-',
                'URAT',
                '692841600000'
            ],
            [
                '-240',
                'RussiaAsia',
                'ORA%sT',
                '1110844800000'
            ],
            [
                '-300',
                '-',
                'ORAT'
            ]
        ],
        'Asia/Bishkek': [
            [
                '-298.4',
                '-',
                'LMT',
                '-1441152000000'
            ],
            [
                '-300',
                '-',
                'FRUT',
                '-1247529600000'
            ],
            [
                '-360',
                'RussiaAsia',
                'FRU%sT',
                '670384800000'
            ],
            [
                '-300',
                '1:00',
                'FRUST',
                '683604000000'
            ],
            [
                '-300',
                'Kyrgyz',
                'KG%sT',
                '1123804800000'
            ],
            [
                '-360',
                '-',
                'KGT'
            ]
        ],
        'Asia/Seoul': [
            [
                '-507.8666666666667',
                '-',
                'LMT',
                '-2493072000000'
            ],
            [
                '-510',
                '-',
                'KST',
                '-2053900800000'
            ],
            [
                '-540',
                '-',
                'JCST',
                '-1293926400000'
            ],
            [
                '-510',
                '-',
                'KST',
                '-1167696000000'
            ],
            [
                '-540',
                '-',
                'JCST',
                '-1017792000000'
            ],
            [
                '-540',
                '-',
                'JST',
                '-767318400000'
            ],
            [
                '-540',
                '-',
                'KST',
                '-498096000000'
            ],
            [
                '-480',
                'ROK',
                'K%sT',
                '-264902400000'
            ],
            [
                '-510',
                '-',
                'KST',
                '-39484800000'
            ],
            [
                '-540',
                'ROK',
                'K%sT'
            ]
        ],
        'Asia/Pyongyang': [
            [
                '-503',
                '-',
                'LMT',
                '-2493072000000'
            ],
            [
                '-510',
                '-',
                'KST',
                '-2053900800000'
            ],
            [
                '-540',
                '-',
                'JCST',
                '-1293926400000'
            ],
            [
                '-510',
                '-',
                'KST',
                '-1167696000000'
            ],
            [
                '-540',
                '-',
                'JCST',
                '-1017792000000'
            ],
            [
                '-540',
                '-',
                'JST',
                '-768614400000'
            ],
            [
                '-540',
                '-',
                'KST',
                '-498096000000'
            ],
            [
                '-480',
                '-',
                'KST',
                '-264902400000'
            ],
            [
                '-540',
                '-',
                'KST'
            ]
        ],
        'Asia/Kuwait': [
            [
                '-191.93333333333334',
                '-',
                'LMT',
                '-599702400000'
            ],
            [
                '-180',
                '-',
                'AST'
            ]
        ],
        'Asia/Vientiane': [
            [
                '-410.4',
                '-',
                'LMT',
                '-2005948800000'
            ],
            [
                '-426.3333333333333',
                '-',
                'SMT',
                '-1855958340000'
            ],
            [
                '-420',
                '-',
                'ICT',
                '-1819929600000'
            ],
            [
                '-480',
                '-',
                'ICT',
                '-1220400000000'
            ],
            [
                '-420',
                '-',
                'ICT'
            ]
        ],
        'Asia/Beirut': [
            [
                '-142',
                '-',
                'LMT',
                '-2808604800000'
            ],
            [
                '-120',
                'Lebanon',
                'EE%sT'
            ]
        ],
        'Asia/Kuala_Lumpur': [
            [
                '-406.7666666666667',
                '-',
                'LMT',
                '-2177452800000'
            ],
            [
                '-415.4166666666667',
                '-',
                'SMT',
                '-2038176000000'
            ],
            [
                '-420',
                '-',
                'MALT',
                '-1167609600000'
            ],
            [
                '-420',
                '0:20',
                'MALST',
                '-1073001600000'
            ],
            [
                '-440',
                '-',
                'MALT',
                '-894153600000'
            ],
            [
                '-450',
                '-',
                'MALT',
                '-879638400000'
            ],
            [
                '-540',
                '-',
                'JST',
                '-766972800000'
            ],
            [
                '-450',
                '-',
                'MALT',
                '378691200000'
            ],
            [
                '-480',
                '-',
                'MYT'
            ]
        ],
        'Asia/Kuching': [
            [
                '-441.3333333333333',
                '-',
                'LMT',
                '-1383436800000'
            ],
            [
                '-450',
                '-',
                'BORT',
                '-1136160000000'
            ],
            [
                '-480',
                'NBorneo',
                'BOR%sT',
                '-879638400000'
            ],
            [
                '-540',
                '-',
                'JST',
                '-766972800000'
            ],
            [
                '-480',
                '-',
                'BORT',
                '378691200000'
            ],
            [
                '-480',
                '-',
                'MYT'
            ]
        ],
        'Indian/Maldives': [
            [
                '-294',
                '-',
                'LMT',
                '-2808604800000'
            ],
            [
                '-294',
                '-',
                'MMT',
                '-284083200000'
            ],
            [
                '-300',
                '-',
                'MVT'
            ]
        ],
        'Asia/Hovd': [
            [
                '-366.6',
                '-',
                'LMT',
                '-2032905600000'
            ],
            [
                '-360',
                '-',
                'HOVT',
                '283910400000'
            ],
            [
                '-420',
                'Mongol',
                'HOV%sT'
            ]
        ],
        'Asia/Ulaanbaatar': [
            [
                '-427.5333333333333',
                '-',
                'LMT',
                '-2032905600000'
            ],
            [
                '-420',
                '-',
                'ULAT',
                '283910400000'
            ],
            [
                '-480',
                'Mongol',
                'ULA%sT'
            ]
        ],
        'Asia/Choibalsan': [
            [
                '-458',
                '-',
                'LMT',
                '-2032905600000'
            ],
            [
                '-420',
                '-',
                'ULAT',
                '283910400000'
            ],
            [
                '-480',
                '-',
                'ULAT',
                '418003200000'
            ],
            [
                '-540',
                'Mongol',
                'CHO%sT',
                '1206921600000'
            ],
            [
                '-480',
                'Mongol',
                'CHO%sT'
            ]
        ],
        'Asia/Kathmandu': [
            [
                '-341.2666666666667',
                '-',
                'LMT',
                '-1546387200000'
            ],
            [
                '-330',
                '-',
                'IST',
                '536371200000'
            ],
            [
                '-345',
                '-',
                'NPT'
            ]
        ],
        'Asia/Muscat': [
            [
                '-234.4',
                '-',
                'LMT',
                '-1546387200000'
            ],
            [
                '-240',
                '-',
                'GST'
            ]
        ],
        'Asia/Karachi': [
            [
                '-268.2',
                '-',
                'LMT',
                '-1956700800000'
            ],
            [
                '-330',
                '-',
                'IST',
                '-862617600000'
            ],
            [
                '-330',
                '1:00',
                'IST',
                '-764121600000'
            ],
            [
                '-330',
                '-',
                'IST',
                '-576115200000'
            ],
            [
                '-300',
                '-',
                'KART',
                '38793600000'
            ],
            [
                '-300',
                'Pakistan',
                'PK%sT'
            ]
        ],
        'Asia/Gaza': [
            [
                '-137.86666666666665',
                '-',
                'LMT',
                '-2185401600000'
            ],
            [
                '-120',
                'Zion',
                'EET',
                '-682646400000'
            ],
            [
                '-120',
                'EgyptAsia',
                'EE%sT',
                '-81302400000'
            ],
            [
                '-120',
                'Zion',
                'I%sT',
                '851990400000'
            ],
            [
                '-120',
                'Jordan',
                'EE%sT',
                '946598400000'
            ],
            [
                '-120',
                'Palestine',
                'EE%sT',
                '1219968000000'
            ],
            [
                '-120',
                '-',
                'EET',
                '1220227200000'
            ],
            [
                '-120',
                'Palestine',
                'EE%sT',
                '1293753600000'
            ],
            [
                '-120',
                '-',
                'EET',
                '1269648060000'
            ],
            [
                '-120',
                'Palestine',
                'EE%sT',
                '1312156800000'
            ],
            [
                '-120',
                '-',
                'EET',
                '1356912000000'
            ],
            [
                '-120',
                'Palestine',
                'EE%sT'
            ]
        ],
        'Asia/Hebron': [
            [
                '-140.38333333333335',
                '-',
                'LMT',
                '-2185401600000'
            ],
            [
                '-120',
                'Zion',
                'EET',
                '-682646400000'
            ],
            [
                '-120',
                'EgyptAsia',
                'EE%sT',
                '-81302400000'
            ],
            [
                '-120',
                'Zion',
                'I%sT',
                '851990400000'
            ],
            [
                '-120',
                'Jordan',
                'EE%sT',
                '946598400000'
            ],
            [
                '-120',
                'Palestine',
                'EE%sT'
            ]
        ],
        'Asia/Manila': [
            [
                '956',
                '-',
                'LMT',
                '-3944678400000'
            ],
            [
                '-484',
                '-',
                'LMT',
                '-2229292800000'
            ],
            [
                '-480',
                'Phil',
                'PH%sT',
                '-873244800000'
            ],
            [
                '-540',
                '-',
                'JST',
                '-794188800000'
            ],
            [
                '-480',
                'Phil',
                'PH%sT'
            ]
        ],
        'Asia/Qatar': [
            [
                '-206.13333333333335',
                '-',
                'LMT',
                '-1546387200000'
            ],
            [
                '-240',
                '-',
                'GST',
                '76204800000'
            ],
            [
                '-180',
                '-',
                'AST'
            ]
        ],
        'Asia/Riyadh': [
            [
                '-186.86666666666665',
                '-',
                'LMT',
                '-719625600000'
            ],
            [
                '-180',
                '-',
                'AST'
            ]
        ],
        'Asia/Singapore': [
            [
                '-415.4166666666667',
                '-',
                'LMT',
                '-2177452800000'
            ],
            [
                '-415.4166666666667',
                '-',
                'SMT',
                '-2038176000000'
            ],
            [
                '-420',
                '-',
                'MALT',
                '-1167609600000'
            ],
            [
                '-420',
                '0:20',
                'MALST',
                '-1073001600000'
            ],
            [
                '-440',
                '-',
                'MALT',
                '-894153600000'
            ],
            [
                '-450',
                '-',
                'MALT',
                '-879638400000'
            ],
            [
                '-540',
                '-',
                'JST',
                '-766972800000'
            ],
            [
                '-450',
                '-',
                'MALT',
                '-138758400000'
            ],
            [
                '-450',
                '-',
                'SGT',
                '378691200000'
            ],
            [
                '-480',
                '-',
                'SGT'
            ]
        ],
        'Asia/Colombo': [
            [
                '-319.4',
                '-',
                'LMT',
                '-2808604800000'
            ],
            [
                '-319.5333333333333',
                '-',
                'MMT',
                '-1988236800000'
            ],
            [
                '-330',
                '-',
                'IST',
                '-883267200000'
            ],
            [
                '-330',
                '0:30',
                'IHST',
                '-862617600000'
            ],
            [
                '-330',
                '1:00',
                'IST',
                '-764028000000'
            ],
            [
                '-330',
                '-',
                'IST',
                '832982400000'
            ],
            [
                '-390',
                '-',
                'LKT',
                '846289800000'
            ],
            [
                '-360',
                '-',
                'LKT',
                '1145061000000'
            ],
            [
                '-330',
                '-',
                'IST'
            ]
        ],
        'Asia/Damascus': [
            [
                '-145.2',
                '-',
                'LMT',
                '-1546387200000'
            ],
            [
                '-120',
                'Syria',
                'EE%sT'
            ]
        ],
        'Asia/Dushanbe': [
            [
                '-275.2',
                '-',
                'LMT',
                '-1441152000000'
            ],
            [
                '-300',
                '-',
                'DUST',
                '-1247529600000'
            ],
            [
                '-360',
                'RussiaAsia',
                'DUS%sT',
                '670384800000'
            ],
            [
                '-300',
                '1:00',
                'DUSST',
                '684381600000'
            ],
            [
                '-300',
                '-',
                'TJT'
            ]
        ],
        'Asia/Bangkok': [
            [
                '-402.06666666666666',
                '-',
                'LMT',
                '-2808604800000'
            ],
            [
                '-402.06666666666666',
                '-',
                'BMT',
                '-1570060800000'
            ],
            [
                '-420',
                '-',
                'ICT'
            ]
        ],
        'Asia/Ashgabat': [
            [
                '-233.53333333333333',
                '-',
                'LMT',
                '-1441152000000'
            ],
            [
                '-240',
                '-',
                'ASHT',
                '-1247529600000'
            ],
            [
                '-300',
                'RussiaAsia',
                'ASH%sT',
                '670384800000'
            ],
            [
                '-240',
                'RussiaAsia',
                'ASH%sT',
                '688521600000'
            ],
            [
                '-240',
                'RussiaAsia',
                'TM%sT',
                '695786400000'
            ],
            [
                '-300',
                '-',
                'TMT'
            ]
        ],
        'Asia/Dubai': [
            [
                '-221.2',
                '-',
                'LMT',
                '-1546387200000'
            ],
            [
                '-240',
                '-',
                'GST'
            ]
        ],
        'Asia/Samarkand': [
            [
                '-267.8833333333333',
                '-',
                'LMT',
                '-1441152000000'
            ],
            [
                '-240',
                '-',
                'SAMT',
                '-1247529600000'
            ],
            [
                '-300',
                '-',
                'SAMT',
                '354931200000'
            ],
            [
                '-300',
                '1:00',
                'SAMST',
                '370742400000'
            ],
            [
                '-360',
                '-',
                'TAST',
                '386467200000'
            ],
            [
                '-300',
                'RussiaAsia',
                'SAM%sT',
                '683683200000'
            ],
            [
                '-300',
                'RussiaAsia',
                'UZ%sT',
                '725760000000'
            ],
            [
                '-300',
                '-',
                'UZT'
            ]
        ],
        'Asia/Tashkent': [
            [
                '-277.18333333333334',
                '-',
                'LMT',
                '-1441152000000'
            ],
            [
                '-300',
                '-',
                'TAST',
                '-1247529600000'
            ],
            [
                '-360',
                'RussiaAsia',
                'TAS%sT',
                '670384800000'
            ],
            [
                '-300',
                'RussiaAsia',
                'TAS%sT',
                '683683200000'
            ],
            [
                '-300',
                'RussiaAsia',
                'UZ%sT',
                '725760000000'
            ],
            [
                '-300',
                '-',
                'UZT'
            ]
        ],
        'Asia/Ho_Chi_Minh': [
            [
                '-426.6666666666667',
                '-',
                'LMT',
                '-2005948800000'
            ],
            [
                '-426.3333333333333',
                '-',
                'SMT',
                '-1855958340000'
            ],
            [
                '-420',
                '-',
                'ICT',
                '-1819929600000'
            ],
            [
                '-480',
                '-',
                'ICT',
                '-1220400000000'
            ],
            [
                '-420',
                '-',
                'ICT'
            ]
        ],
        'Asia/Aden': [
            [
                '-179.9',
                '-',
                'LMT',
                '-599702400000'
            ],
            [
                '-180',
                '-',
                'AST'
            ]
        ],
        'Australia/Darwin': [
            [
                '-523.3333333333333',
                '-',
                'LMT',
                '-2364076800000'
            ],
            [
                '-540',
                '-',
                'ACST',
                '-2230156800000'
            ],
            [
                '-570',
                'Aus',
                'AC%sT'
            ]
        ],
        'Australia/Perth': [
            [
                '-463.4',
                '-',
                'LMT',
                '-2337897600000'
            ],
            [
                '-480',
                'Aus',
                'AW%sT',
                '-836438400000'
            ],
            [
                '-480',
                'AW',
                'AW%sT'
            ]
        ],
        'Australia/Eucla': [
            [
                '-515.4666666666667',
                '-',
                'LMT',
                '-2337897600000'
            ],
            [
                '-525',
                'Aus',
                'ACW%sT',
                '-836438400000'
            ],
            [
                '-525',
                'AW',
                'ACW%sT'
            ]
        ],
        'Australia/Brisbane': [
            [
                '-612.1333333333333',
                '-',
                'LMT',
                '-2335305600000'
            ],
            [
                '-600',
                'Aus',
                'AE%sT',
                '62985600000'
            ],
            [
                '-600',
                'AQ',
                'AE%sT'
            ]
        ],
        'Australia/Lindeman': [
            [
                '-595.9333333333334',
                '-',
                'LMT',
                '-2335305600000'
            ],
            [
                '-600',
                'Aus',
                'AE%sT',
                '62985600000'
            ],
            [
                '-600',
                'AQ',
                'AE%sT',
                '709948800000'
            ],
            [
                '-600',
                'Holiday',
                'AE%sT'
            ]
        ],
        'Australia/Adelaide': [
            [
                '-554.3333333333334',
                '-',
                'LMT',
                '-2364076800000'
            ],
            [
                '-540',
                '-',
                'ACST',
                '-2230156800000'
            ],
            [
                '-570',
                'Aus',
                'AC%sT',
                '62985600000'
            ],
            [
                '-570',
                'AS',
                'AC%sT'
            ]
        ],
        'Australia/Hobart': [
            [
                '-589.2666666666667',
                '-',
                'LMT',
                '-2345760000000'
            ],
            [
                '-600',
                '-',
                'AEST',
                '-1680472800000'
            ],
            [
                '-600',
                '1:00',
                'AEDT',
                '-1669852800000'
            ],
            [
                '-600',
                'Aus',
                'AE%sT',
                '-63244800000'
            ],
            [
                '-600',
                'AT',
                'AE%sT'
            ]
        ],
        'Australia/Currie': [
            [
                '-575.4666666666666',
                '-',
                'LMT',
                '-2345760000000'
            ],
            [
                '-600',
                '-',
                'AEST',
                '-1680472800000'
            ],
            [
                '-600',
                '1:00',
                'AEDT',
                '-1669852800000'
            ],
            [
                '-600',
                'Aus',
                'AE%sT',
                '47174400000'
            ],
            [
                '-600',
                'AT',
                'AE%sT'
            ]
        ],
        'Australia/Melbourne': [
            [
                '-579.8666666666667',
                '-',
                'LMT',
                '-2364076800000'
            ],
            [
                '-600',
                'Aus',
                'AE%sT',
                '62985600000'
            ],
            [
                '-600',
                'AV',
                'AE%sT'
            ]
        ],
        'Australia/Sydney': [
            [
                '-604.8666666666667',
                '-',
                'LMT',
                '-2364076800000'
            ],
            [
                '-600',
                'Aus',
                'AE%sT',
                '62985600000'
            ],
            [
                '-600',
                'AN',
                'AE%sT'
            ]
        ],
        'Australia/Broken_Hill': [
            [
                '-565.8',
                '-',
                'LMT',
                '-2364076800000'
            ],
            [
                '-600',
                '-',
                'AEST',
                '-2314915200000'
            ],
            [
                '-540',
                '-',
                'ACST',
                '-2230156800000'
            ],
            [
                '-570',
                'Aus',
                'AC%sT',
                '62985600000'
            ],
            [
                '-570',
                'AN',
                'AC%sT',
                '978220800000'
            ],
            [
                '-570',
                'AS',
                'AC%sT'
            ]
        ],
        'Australia/Lord_Howe': [
            [
                '-636.3333333333334',
                '-',
                'LMT',
                '-2364076800000'
            ],
            [
                '-600',
                '-',
                'AEST',
                '352252800000'
            ],
            [
                '-630',
                'LH',
                'LH%sT'
            ]
        ],
        'Antarctica/Macquarie': [
            [
                '0',
                '-',
                'zzz',
                '-2214259200000'
            ],
            [
                '-600',
                '-',
                'AEST',
                '-1680472800000'
            ],
            [
                '-600',
                '1:00',
                'AEDT',
                '-1669852800000'
            ],
            [
                '-600',
                'Aus',
                'AE%sT',
                '-1601683200000'
            ],
            [
                '0',
                '-',
                'zzz',
                '-687052800000'
            ],
            [
                '-600',
                'Aus',
                'AE%sT',
                '-63244800000'
            ],
            [
                '-600',
                'AT',
                'AE%sT',
                '1270350000000'
            ],
            [
                '-660',
                '-',
                'MIST'
            ]
        ],
        'Indian/Christmas': [
            [
                '-422.8666666666667',
                '-',
                'LMT',
                '-2364076800000'
            ],
            [
                '-420',
                '-',
                'CXT'
            ]
        ],
        'Indian/Cocos': [
            [
                '-387.6666666666667',
                '-',
                'LMT',
                '-2177539200000'
            ],
            [
                '-390',
                '-',
                'CCT'
            ]
        ],
        'Pacific/Fiji': [
            [
                '-715.7333333333333',
                '-',
                'LMT',
                '-1709942400000'
            ],
            [
                '-720',
                'Fiji',
                'FJ%sT'
            ]
        ],
        'Pacific/Gambier': [
            [
                '539.8',
                '-',
                'LMT',
                '-1806710400000'
            ],
            [
                '540',
                '-',
                'GAMT'
            ]
        ],
        'Pacific/Marquesas': [
            [
                '558',
                '-',
                'LMT',
                '-1806710400000'
            ],
            [
                '570',
                '-',
                'MART'
            ]
        ],
        'Pacific/Tahiti': [
            [
                '598.2666666666667',
                '-',
                'LMT',
                '-1806710400000'
            ],
            [
                '600',
                '-',
                'TAHT'
            ]
        ],
        'Pacific/Guam': [
            [
                '861',
                '-',
                'LMT',
                '-3944678400000'
            ],
            [
                '-579',
                '-',
                'LMT',
                '-2146003200000'
            ],
            [
                '-600',
                '-',
                'GST',
                '977529600000'
            ],
            [
                '-600',
                '-',
                'ChST'
            ]
        ],
        'Pacific/Tarawa': [
            [
                '-692.0666666666666',
                '-',
                'LMT',
                '-2146003200000'
            ],
            [
                '-720',
                '-',
                'GILT'
            ]
        ],
        'Pacific/Enderbury': [
            [
                '684.3333333333334',
                '-',
                'LMT',
                '-2146003200000'
            ],
            [
                '720',
                '-',
                'PHOT',
                '307584000000'
            ],
            [
                '660',
                '-',
                'PHOT',
                '820368000000'
            ],
            [
                '-780',
                '-',
                'PHOT'
            ]
        ],
        'Pacific/Kiritimati': [
            [
                '629.3333333333334',
                '-',
                'LMT',
                '-2146003200000'
            ],
            [
                '640',
                '-',
                'LINT',
                '307584000000'
            ],
            [
                '600',
                '-',
                'LINT',
                '820368000000'
            ],
            [
                '-840',
                '-',
                'LINT'
            ]
        ],
        'Pacific/Saipan': [
            [
                '857',
                '-',
                'LMT',
                '-3944678400000'
            ],
            [
                '-583',
                '-',
                'LMT',
                '-2146003200000'
            ],
            [
                '-540',
                '-',
                'MPT',
                '-7948800000'
            ],
            [
                '-600',
                '-',
                'MPT',
                '977529600000'
            ],
            [
                '-600',
                '-',
                'ChST'
            ]
        ],
        'Pacific/Majuro': [
            [
                '-684.8',
                '-',
                'LMT',
                '-2146003200000'
            ],
            [
                '-660',
                '-',
                'MHT',
                '-7948800000'
            ],
            [
                '-720',
                '-',
                'MHT'
            ]
        ],
        'Pacific/Kwajalein': [
            [
                '-669.3333333333334',
                '-',
                'LMT',
                '-2146003200000'
            ],
            [
                '-660',
                '-',
                'MHT',
                '-7948800000'
            ],
            [
                '720',
                '-',
                'KWAT',
                '745804800000'
            ],
            [
                '-720',
                '-',
                'MHT'
            ]
        ],
        'Pacific/Chuuk': [
            [
                '-607.1333333333333',
                '-',
                'LMT',
                '-2146003200000'
            ],
            [
                '-600',
                '-',
                'CHUT'
            ]
        ],
        'Pacific/Pohnpei': [
            [
                '-632.8666666666667',
                '-',
                'LMT',
                '-2146003200000'
            ],
            [
                '-660',
                '-',
                'PONT'
            ]
        ],
        'Pacific/Kosrae': [
            [
                '-651.9333333333334',
                '-',
                'LMT',
                '-2146003200000'
            ],
            [
                '-660',
                '-',
                'KOST',
                '-7948800000'
            ],
            [
                '-720',
                '-',
                'KOST',
                '946598400000'
            ],
            [
                '-660',
                '-',
                'KOST'
            ]
        ],
        'Pacific/Nauru': [
            [
                '-667.6666666666666',
                '-',
                'LMT',
                '-1545091200000'
            ],
            [
                '-690',
                '-',
                'NRT',
                '-877305600000'
            ],
            [
                '-540',
                '-',
                'JST',
                '-800928000000'
            ],
            [
                '-690',
                '-',
                'NRT',
                '294364800000'
            ],
            [
                '-720',
                '-',
                'NRT'
            ]
        ],
        'Pacific/Noumea': [
            [
                '-665.8',
                '-',
                'LMT',
                '-1829347200000'
            ],
            [
                '-660',
                'NC',
                'NC%sT'
            ]
        ],
        'Pacific/Auckland': [
            [
                '-699.0666666666666',
                '-',
                'LMT',
                '-3192393600000'
            ],
            [
                '-690',
                'NZ',
                'NZ%sT',
                '-757382400000'
            ],
            [
                '-720',
                'NZ',
                'NZ%sT'
            ]
        ],
        'Pacific/Chatham': [
            [
                '-733.8',
                '-',
                'LMT',
                '-3192393600000'
            ],
            [
                '-735',
                '-',
                'CHAST',
                '-757382400000'
            ],
            [
                '-765',
                'Chatham',
                'CHA%sT'
            ]
        ],
        'Antarctica/McMurdo': 'Pacific/Auckland',
        'Pacific/Rarotonga': [
            [
                '639.0666666666666',
                '-',
                'LMT',
                '-2146003200000'
            ],
            [
                '630',
                '-',
                'CKT',
                '279676800000'
            ],
            [
                '600',
                'Cook',
                'CK%sT'
            ]
        ],
        'Pacific/Niue': [
            [
                '679.6666666666666',
                '-',
                'LMT',
                '-2146003200000'
            ],
            [
                '680',
                '-',
                'NUT',
                '-568166400000'
            ],
            [
                '690',
                '-',
                'NUT',
                '276048000000'
            ],
            [
                '660',
                '-',
                'NUT'
            ]
        ],
        'Pacific/Norfolk': [
            [
                '-671.8666666666667',
                '-',
                'LMT',
                '-2146003200000'
            ],
            [
                '-672',
                '-',
                'NMT',
                '-568166400000'
            ],
            [
                '-690',
                '-',
                'NFT'
            ]
        ],
        'Pacific/Palau': [
            [
                '-537.9333333333334',
                '-',
                'LMT',
                '-2146003200000'
            ],
            [
                '-540',
                '-',
                'PWT'
            ]
        ],
        'Pacific/Port_Moresby': [
            [
                '-588.6666666666666',
                '-',
                'LMT',
                '-2808604800000'
            ],
            [
                '-588.5333333333334',
                '-',
                'PMMT',
                '-2335305600000'
            ],
            [
                '-600',
                '-',
                'PGT'
            ]
        ],
        'Pacific/Pitcairn': [
            [
                '520.3333333333333',
                '-',
                'LMT',
                '-2146003200000'
            ],
            [
                '510',
                '-',
                'PNT',
                '893635200000'
            ],
            [
                '480',
                '-',
                'PST'
            ]
        ],
        'Pacific/Pago_Pago': [
            [
                '-757.2',
                '-',
                'LMT',
                '-2855692800000'
            ],
            [
                '682.8',
                '-',
                'LMT',
                '-1830470400000'
            ],
            [
                '660',
                '-',
                'NST',
                '-86918400000'
            ],
            [
                '660',
                '-',
                'BST',
                '438998400000'
            ],
            [
                '660',
                '-',
                'SST'
            ]
        ],
        'Pacific/Apia': [
            [
                '-753.0666666666666',
                '-',
                'LMT',
                '-2855692800000'
            ],
            [
                '686.9333333333334',
                '-',
                'LMT',
                '-1830470400000'
            ],
            [
                '690',
                '-',
                'WSST',
                '-599702400000'
            ],
            [
                '660',
                'WS',
                'S%sT',
                '1325203200000'
            ],
            [
                '-780',
                'WS',
                'WS%sT'
            ]
        ],
        'Pacific/Guadalcanal': [
            [
                '-639.8',
                '-',
                'LMT',
                '-1806710400000'
            ],
            [
                '-660',
                '-',
                'SBT'
            ]
        ],
        'Pacific/Fakaofo': [
            [
                '684.9333333333334',
                '-',
                'LMT',
                '-2146003200000'
            ],
            [
                '660',
                '-',
                'TKT',
                '1325203200000'
            ],
            [
                '-780',
                '-',
                'TKT'
            ]
        ],
        'Pacific/Tongatapu': [
            [
                '-739.3333333333334',
                '-',
                'LMT',
                '-2146003200000'
            ],
            [
                '-740',
                '-',
                'TOT',
                '-883699200000'
            ],
            [
                '-780',
                '-',
                'TOT',
                '946598400000'
            ],
            [
                '-780',
                'Tonga',
                'TO%sT'
            ]
        ],
        'Pacific/Funafuti': [
            [
                '-716.8666666666667',
                '-',
                'LMT',
                '-2146003200000'
            ],
            [
                '-720',
                '-',
                'TVT'
            ]
        ],
        'Pacific/Midway': [
            [
                '709.4666666666666',
                '-',
                'LMT',
                '-2146003200000'
            ],
            [
                '660',
                '-',
                'NST',
                '-428544000000'
            ],
            [
                '660',
                '1:00',
                'NDT',
                '-420681600000'
            ],
            [
                '660',
                '-',
                'NST',
                '-86918400000'
            ],
            [
                '660',
                '-',
                'BST',
                '438998400000'
            ],
            [
                '660',
                '-',
                'SST'
            ]
        ],
        'Pacific/Wake': [
            [
                '-666.4666666666666',
                '-',
                'LMT',
                '-2146003200000'
            ],
            [
                '-720',
                '-',
                'WAKT'
            ]
        ],
        'Pacific/Efate': [
            [
                '-673.2666666666667',
                '-',
                'LMT',
                '-1829347200000'
            ],
            [
                '-660',
                'Vanuatu',
                'VU%sT'
            ]
        ],
        'Pacific/Wallis': [
            [
                '-735.3333333333334',
                '-',
                'LMT',
                '-2146003200000'
            ],
            [
                '-720',
                '-',
                'WFT'
            ]
        ],
        'Africa/Asmera': 'Africa/Asmara',
        'Africa/Timbuktu': 'Africa/Abidjan',
        'America/Argentina/ComodRivadavia': 'America/Argentina/Catamarca',
        'America/Atka': 'America/Adak',
        'America/Buenos_Aires': 'America/Argentina/Buenos_Aires',
        'America/Catamarca': 'America/Argentina/Catamarca',
        'America/Coral_Harbour': 'America/Atikokan',
        'America/Cordoba': 'America/Argentina/Cordoba',
        'America/Ensenada': 'America/Tijuana',
        'America/Fort_Wayne': 'America/Indiana/Indianapolis',
        'America/Indianapolis': 'America/Indiana/Indianapolis',
        'America/Jujuy': 'America/Argentina/Jujuy',
        'America/Knox_IN': 'America/Indiana/Knox',
        'America/Louisville': 'America/Kentucky/Louisville',
        'America/Mendoza': 'America/Argentina/Mendoza',
        'America/Porto_Acre': 'America/Rio_Branco',
        'America/Rosario': 'America/Argentina/Cordoba',
        'America/Shiprock': 'America/Denver',
        'America/Virgin': 'America/Port_of_Spain',
        'Antarctica/South_Pole': 'Pacific/Auckland',
        'Asia/Ashkhabad': 'Asia/Ashgabat',
        'Asia/Calcutta': 'Asia/Kolkata',
        'Asia/Chongqing': 'Asia/Shanghai',
        'Asia/Chungking': 'Asia/Shanghai',
        'Asia/Dacca': 'Asia/Dhaka',
        'Asia/Harbin': 'Asia/Shanghai',
        'Asia/Kashgar': 'Asia/Urumqi',
        'Asia/Katmandu': 'Asia/Kathmandu',
        'Asia/Macao': 'Asia/Macau',
        'Asia/Saigon': 'Asia/Ho_Chi_Minh',
        'Asia/Tel_Aviv': 'Asia/Jerusalem',
        'Asia/Thimbu': 'Asia/Thimphu',
        'Asia/Ujung_Pandang': 'Asia/Makassar',
        'Asia/Ulan_Bator': 'Asia/Ulaanbaatar',
        'Atlantic/Faeroe': 'Atlantic/Faroe',
        'Atlantic/Jan_Mayen': 'Europe/Oslo',
        'Australia/ACT': 'Australia/Sydney',
        'Australia/Canberra': 'Australia/Sydney',
        'Australia/LHI': 'Australia/Lord_Howe',
        'Australia/NSW': 'Australia/Sydney',
        'Australia/North': 'Australia/Darwin',
        'Australia/Queensland': 'Australia/Brisbane',
        'Australia/South': 'Australia/Adelaide',
        'Australia/Tasmania': 'Australia/Hobart',
        'Australia/Victoria': 'Australia/Melbourne',
        'Australia/West': 'Australia/Perth',
        'Australia/Yancowinna': 'Australia/Broken_Hill',
        'Brazil/Acre': 'America/Rio_Branco',
        'Brazil/DeNoronha': 'America/Noronha',
        'Brazil/East': 'America/Sao_Paulo',
        'Brazil/West': 'America/Manaus',
        'Canada/Atlantic': 'America/Halifax',
        'Canada/Central': 'America/Winnipeg',
        'Canada/East-Saskatchewan': 'America/Regina',
        'Canada/Eastern': 'America/Toronto',
        'Canada/Mountain': 'America/Edmonton',
        'Canada/Newfoundland': 'America/St_Johns',
        'Canada/Pacific': 'America/Vancouver',
        'Canada/Saskatchewan': 'America/Regina',
        'Canada/Yukon': 'America/Whitehorse',
        'Chile/Continental': 'America/Santiago',
        'Chile/EasterIsland': 'Pacific/Easter',
        'Cuba': 'America/Havana',
        'Egypt': 'Africa/Cairo',
        'Eire': 'Europe/Dublin',
        'Europe/Belfast': 'Europe/London',
        'Europe/Tiraspol': 'Europe/Chisinau',
        'GB': 'Europe/London',
        'GB-Eire': 'Europe/London',
        'GMT+0': 'Etc/GMT',
        'GMT-0': 'Etc/GMT',
        'GMT0': 'Etc/GMT',
        'Greenwich': 'Etc/GMT',
        'Hongkong': 'Asia/Hong_Kong',
        'Iceland': 'Atlantic/Reykjavik',
        'Iran': 'Asia/Tehran',
        'Israel': 'Asia/Jerusalem',
        'Jamaica': 'America/Jamaica',
        'Japan': 'Asia/Tokyo',
        'Kwajalein': 'Pacific/Kwajalein',
        'Libya': 'Africa/Tripoli',
        'Mexico/BajaNorte': 'America/Tijuana',
        'Mexico/BajaSur': 'America/Mazatlan',
        'Mexico/General': 'America/Mexico_City',
        'NZ': 'Pacific/Auckland',
        'NZ-CHAT': 'Pacific/Chatham',
        'Navajo': 'America/Denver',
        'PRC': 'Asia/Shanghai',
        'Pacific/Ponape': 'Pacific/Pohnpei',
        'Pacific/Samoa': 'Pacific/Pago_Pago',
        'Pacific/Truk': 'Pacific/Chuuk',
        'Pacific/Yap': 'Pacific/Chuuk',
        'Poland': 'Europe/Warsaw',
        'Portugal': 'Europe/Lisbon',
        'ROC': 'Asia/Taipei',
        'ROK': 'Asia/Seoul',
        'Singapore': 'Asia/Singapore',
        'Turkey': 'Europe/Istanbul',
        'UCT': 'Etc/UCT',
        'US/Alaska': 'America/Anchorage',
        'US/Aleutian': 'America/Adak',
        'US/Arizona': 'America/Phoenix',
        'US/Central': 'America/Chicago',
        'US/East-Indiana': 'America/Indiana/Indianapolis',
        'US/Eastern': 'America/New_York',
        'US/Hawaii': 'Pacific/Honolulu',
        'US/Indiana-Starke': 'America/Indiana/Knox',
        'US/Michigan': 'America/Detroit',
        'US/Mountain': 'America/Denver',
        'US/Pacific': 'America/Los_Angeles',
        'US/Samoa': 'Pacific/Pago_Pago',
        'UTC': 'Etc/UTC',
        'Universal': 'Etc/UTC',
        'W-SU': 'Europe/Moscow',
        'Zulu': 'Etc/UTC',
        'Etc/GMT': [[
                '0',
                '-',
                'GMT'
            ]],
        'Etc/UTC': [[
                '0',
                '-',
                'UTC'
            ]],
        'Etc/UCT': [[
                '0',
                '-',
                'UCT'
            ]],
        'GMT': 'Etc/GMT',
        'Etc/Universal': 'Etc/UTC',
        'Etc/Zulu': 'Etc/UTC',
        'Etc/Greenwich': 'Etc/GMT',
        'Etc/GMT-0': 'Etc/GMT',
        'Etc/GMT+0': 'Etc/GMT',
        'Etc/GMT0': 'Etc/GMT',
        'Etc/GMT-14': [[
                '-840',
                '-',
                'GMT-14'
            ]],
        'Etc/GMT-13': [[
                '-780',
                '-',
                'GMT-13'
            ]],
        'Etc/GMT-12': [[
                '-720',
                '-',
                'GMT-12'
            ]],
        'Etc/GMT-11': [[
                '-660',
                '-',
                'GMT-11'
            ]],
        'Etc/GMT-10': [[
                '-600',
                '-',
                'GMT-10'
            ]],
        'Etc/GMT-9': [[
                '-540',
                '-',
                'GMT-9'
            ]],
        'Etc/GMT-8': [[
                '-480',
                '-',
                'GMT-8'
            ]],
        'Etc/GMT-7': [[
                '-420',
                '-',
                'GMT-7'
            ]],
        'Etc/GMT-6': [[
                '-360',
                '-',
                'GMT-6'
            ]],
        'Etc/GMT-5': [[
                '-300',
                '-',
                'GMT-5'
            ]],
        'Etc/GMT-4': [[
                '-240',
                '-',
                'GMT-4'
            ]],
        'Etc/GMT-3': [[
                '-180',
                '-',
                'GMT-3'
            ]],
        'Etc/GMT-2': [[
                '-120',
                '-',
                'GMT-2'
            ]],
        'Etc/GMT-1': [[
                '-60',
                '-',
                'GMT-1'
            ]],
        'Etc/GMT+1': [[
                '60',
                '-',
                'GMT+1'
            ]],
        'Etc/GMT+2': [[
                '120',
                '-',
                'GMT+2'
            ]],
        'Etc/GMT+3': [[
                '180',
                '-',
                'GMT+3'
            ]],
        'Etc/GMT+4': [[
                '240',
                '-',
                'GMT+4'
            ]],
        'Etc/GMT+5': [[
                '300',
                '-',
                'GMT+5'
            ]],
        'Etc/GMT+6': [[
                '360',
                '-',
                'GMT+6'
            ]],
        'Etc/GMT+7': [[
                '420',
                '-',
                'GMT+7'
            ]],
        'Etc/GMT+8': [[
                '480',
                '-',
                'GMT+8'
            ]],
        'Etc/GMT+9': [[
                '540',
                '-',
                'GMT+9'
            ]],
        'Etc/GMT+10': [[
                '600',
                '-',
                'GMT+10'
            ]],
        'Etc/GMT+11': [[
                '660',
                '-',
                'GMT+11'
            ]],
        'Etc/GMT+12': [[
                '720',
                '-',
                'GMT+12'
            ]],
        'Europe/London': [
            [
                '1.25',
                '-',
                'LMT',
                '-3852662400000'
            ],
            [
                '0',
                'GB-Eire',
                '%s',
                '-37238400000'
            ],
            [
                '-60',
                '-',
                'BST',
                '57722400000'
            ],
            [
                '0',
                'GB-Eire',
                '%s',
                '851990400000'
            ],
            [
                '0',
                'EU',
                'GMT/BST'
            ]
        ],
        'Europe/Jersey': 'Europe/London',
        'Europe/Guernsey': 'Europe/London',
        'Europe/Isle_of_Man': 'Europe/London',
        'Europe/Dublin': [
            [
                '25',
                '-',
                'LMT',
                '-2821651200000'
            ],
            [
                '25.35',
                '-',
                'DMT',
                '-1691964000000'
            ],
            [
                '25.35',
                '1:00',
                'IST',
                '-1680472800000'
            ],
            [
                '0',
                'GB-Eire',
                '%s',
                '-1517011200000'
            ],
            [
                '0',
                'GB-Eire',
                'GMT/IST',
                '-942012000000'
            ],
            [
                '0',
                '1:00',
                'IST',
                '-733356000000'
            ],
            [
                '0',
                '-',
                'GMT',
                '-719445600000'
            ],
            [
                '0',
                '1:00',
                'IST',
                '-699487200000'
            ],
            [
                '0',
                '-',
                'GMT',
                '-684972000000'
            ],
            [
                '0',
                'GB-Eire',
                'GMT/IST',
                '-37238400000'
            ],
            [
                '-60',
                '-',
                'IST',
                '57722400000'
            ],
            [
                '0',
                'GB-Eire',
                'GMT/IST',
                '851990400000'
            ],
            [
                '0',
                'EU',
                'GMT/IST'
            ]
        ],
        'WET': [[
                '0',
                'EU',
                'WE%sT'
            ]],
        'CET': [[
                '-60',
                'C-Eur',
                'CE%sT'
            ]],
        'MET': [[
                '-60',
                'C-Eur',
                'ME%sT'
            ]],
        'EET': [[
                '-120',
                'EU',
                'EE%sT'
            ]],
        'Europe/Tirane': [
            [
                '-79.33333333333333',
                '-',
                'LMT',
                '-1735776000000'
            ],
            [
                '-60',
                '-',
                'CET',
                '-932342400000'
            ],
            [
                '-60',
                'Albania',
                'CE%sT',
                '457488000000'
            ],
            [
                '-60',
                'EU',
                'CE%sT'
            ]
        ],
        'Europe/Andorra': [
            [
                '-6.066666666666667',
                '-',
                'LMT',
                '-2146003200000'
            ],
            [
                '0',
                '-',
                'WET',
                '-733881600000'
            ],
            [
                '-60',
                '-',
                'CET',
                '481082400000'
            ],
            [
                '-60',
                'EU',
                'CE%sT'
            ]
        ],
        'Europe/Vienna': [
            [
                '-65.35',
                '-',
                'LMT',
                '-2422051200000'
            ],
            [
                '-60',
                'C-Eur',
                'CE%sT',
                '-1546387200000'
            ],
            [
                '-60',
                'Austria',
                'CE%sT',
                '-938901600000'
            ],
            [
                '-60',
                'C-Eur',
                'CE%sT',
                '-781048800000'
            ],
            [
                '-60',
                '1:00',
                'CEST',
                '-780184800000'
            ],
            [
                '-60',
                '-',
                'CET',
                '-725932800000'
            ],
            [
                '-60',
                'Austria',
                'CE%sT',
                '378604800000'
            ],
            [
                '-60',
                'EU',
                'CE%sT'
            ]
        ],
        'Europe/Minsk': [
            [
                '-110.26666666666667',
                '-',
                'LMT',
                '-2808604800000'
            ],
            [
                '-110',
                '-',
                'MMT',
                '-1441152000000'
            ],
            [
                '-120',
                '-',
                'EET',
                '-1247529600000'
            ],
            [
                '-180',
                '-',
                'MSK',
                '-899769600000'
            ],
            [
                '-60',
                'C-Eur',
                'CE%sT',
                '-804643200000'
            ],
            [
                '-180',
                'Russia',
                'MSK/MSD',
                '662601600000'
            ],
            [
                '-180',
                '-',
                'MSK',
                '670384800000'
            ],
            [
                '-120',
                '1:00',
                'EEST',
                '686109600000'
            ],
            [
                '-120',
                '-',
                'EET',
                '701827200000'
            ],
            [
                '-120',
                '1:00',
                'EEST',
                '717552000000'
            ],
            [
                '-120',
                'Russia',
                'EE%sT',
                '1301191200000'
            ],
            [
                '-180',
                '-',
                'FET'
            ]
        ],
        'Europe/Brussels': [
            [
                '-17.5',
                '-',
                'LMT',
                '-2808604800000'
            ],
            [
                '-17.5',
                '-',
                'BMT',
                '-2450952000000'
            ],
            [
                '0',
                '-',
                'WET',
                '-1740355200000'
            ],
            [
                '-60',
                '-',
                'CET',
                '-1693699200000'
            ],
            [
                '-60',
                'C-Eur',
                'CE%sT',
                '-1613826000000'
            ],
            [
                '0',
                'Belgium',
                'WE%sT',
                '-934668000000'
            ],
            [
                '-60',
                'C-Eur',
                'CE%sT',
                '-799286400000'
            ],
            [
                '-60',
                'Belgium',
                'CE%sT',
                '252374400000'
            ],
            [
                '-60',
                'EU',
                'CE%sT'
            ]
        ],
        'Europe/Sofia': [
            [
                '-93.26666666666667',
                '-',
                'LMT',
                '-2808604800000'
            ],
            [
                '-116.93333333333332',
                '-',
                'IMT',
                '-2369520000000'
            ],
            [
                '-120',
                '-',
                'EET',
                '-857250000000'
            ],
            [
                '-60',
                'C-Eur',
                'CE%sT',
                '-757468800000'
            ],
            [
                '-60',
                '-',
                'CET',
                '-781045200000'
            ],
            [
                '-120',
                '-',
                'EET',
                '291769200000'
            ],
            [
                '-120',
                'Bulg',
                'EE%sT',
                '401853600000'
            ],
            [
                '-120',
                'C-Eur',
                'EE%sT',
                '694137600000'
            ],
            [
                '-120',
                'E-Eur',
                'EE%sT',
                '883526400000'
            ],
            [
                '-120',
                'EU',
                'EE%sT'
            ]
        ],
        'Europe/Prague': [
            [
                '-57.733333333333334',
                '-',
                'LMT',
                '-3755376000000'
            ],
            [
                '-57.733333333333334',
                '-',
                'PMT',
                '-2469398400000'
            ],
            [
                '-60',
                'C-Eur',
                'CE%sT',
                '-798069600000'
            ],
            [
                '-60',
                'Czech',
                'CE%sT',
                '315446400000'
            ],
            [
                '-60',
                'EU',
                'CE%sT'
            ]
        ],
        'Europe/Copenhagen': [
            [
                '-50.333333333333336',
                '-',
                'LMT',
                '-2493072000000'
            ],
            [
                '-50.333333333333336',
                '-',
                'CMT',
                '-2398291200000'
            ],
            [
                '-60',
                'Denmark',
                'CE%sT',
                '-857253600000'
            ],
            [
                '-60',
                'C-Eur',
                'CE%sT',
                '-781048800000'
            ],
            [
                '-60',
                'Denmark',
                'CE%sT',
                '347068800000'
            ],
            [
                '-60',
                'EU',
                'CE%sT'
            ]
        ],
        'Atlantic/Faroe': [
            [
                '27.066666666666666',
                '-',
                'LMT',
                '-1955750400000'
            ],
            [
                '0',
                '-',
                'WET',
                '378604800000'
            ],
            [
                '0',
                'EU',
                'WE%sT'
            ]
        ],
        'America/Danmarkshavn': [
            [
                '74.66666666666667',
                '-',
                'LMT',
                '-1686096000000'
            ],
            [
                '180',
                '-',
                'WGT',
                '323834400000'
            ],
            [
                '180',
                'EU',
                'WG%sT',
                '851990400000'
            ],
            [
                '0',
                '-',
                'GMT'
            ]
        ],
        'America/Scoresbysund': [
            [
                '87.86666666666667',
                '-',
                'LMT',
                '-1686096000000'
            ],
            [
                '120',
                '-',
                'CGT',
                '323834400000'
            ],
            [
                '120',
                'C-Eur',
                'CG%sT',
                '354672000000'
            ],
            [
                '60',
                'EU',
                'EG%sT'
            ]
        ],
        'America/Godthab': [
            [
                '206.93333333333334',
                '-',
                'LMT',
                '-1686096000000'
            ],
            [
                '180',
                '-',
                'WGT',
                '323834400000'
            ],
            [
                '180',
                'EU',
                'WG%sT'
            ]
        ],
        'America/Thule': [
            [
                '275.1333333333333',
                '-',
                'LMT',
                '-1686096000000'
            ],
            [
                '240',
                'Thule',
                'A%sT'
            ]
        ],
        'Europe/Tallinn': [
            [
                '-99',
                '-',
                'LMT',
                '-2808604800000'
            ],
            [
                '-99',
                '-',
                'TMT',
                '-1638316800000'
            ],
            [
                '-60',
                'C-Eur',
                'CE%sT',
                '-1593820800000'
            ],
            [
                '-99',
                '-',
                'TMT',
                '-1535932800000'
            ],
            [
                '-120',
                '-',
                'EET',
                '-927936000000'
            ],
            [
                '-180',
                '-',
                'MSK',
                '-892944000000'
            ],
            [
                '-60',
                'C-Eur',
                'CE%sT',
                '-797644800000'
            ],
            [
                '-180',
                'Russia',
                'MSK/MSD',
                '606880800000'
            ],
            [
                '-120',
                '1:00',
                'EEST',
                '622605600000'
            ],
            [
                '-120',
                'C-Eur',
                'EE%sT',
                '906422400000'
            ],
            [
                '-120',
                'EU',
                'EE%sT',
                '941414400000'
            ],
            [
                '-120',
                '-',
                'EET',
                '1014249600000'
            ],
            [
                '-120',
                'EU',
                'EE%sT'
            ]
        ],
        'Europe/Helsinki': [
            [
                '-99.81666666666668',
                '-',
                'LMT',
                '-2890252800000'
            ],
            [
                '-99.81666666666668',
                '-',
                'HMT',
                '-1535932800000'
            ],
            [
                '-120',
                'Finland',
                'EE%sT',
                '441676800000'
            ],
            [
                '-120',
                'EU',
                'EE%sT'
            ]
        ],
        'Europe/Mariehamn': 'Europe/Helsinki',
        'Europe/Paris': [
            [
                '-9.35',
                '-',
                'LMT',
                '-2486678340000'
            ],
            [
                '-9.35',
                '-',
                'PMT',
                '-1855958340000'
            ],
            [
                '0',
                'France',
                'WE%sT',
                '-932432400000'
            ],
            [
                '-60',
                'C-Eur',
                'CE%sT',
                '-800064000000'
            ],
            [
                '0',
                'France',
                'WE%sT',
                '-766616400000'
            ],
            [
                '-60',
                'France',
                'CE%sT',
                '252374400000'
            ],
            [
                '-60',
                'EU',
                'CE%sT'
            ]
        ],
        'Europe/Berlin': [
            [
                '-53.46666666666666',
                '-',
                'LMT',
                '-2422051200000'
            ],
            [
                '-60',
                'C-Eur',
                'CE%sT',
                '-776556000000'
            ],
            [
                '-60',
                'SovietZone',
                'CE%sT',
                '-725932800000'
            ],
            [
                '-60',
                'Germany',
                'CE%sT',
                '347068800000'
            ],
            [
                '-60',
                'EU',
                'CE%sT'
            ]
        ],
        'Europe/Busingen': 'Europe/Zurich',
        'Europe/Gibraltar': [
            [
                '21.4',
                '-',
                'LMT',
                '-2821651200000'
            ],
            [
                '0',
                'GB-Eire',
                '%s',
                '-401320800000'
            ],
            [
                '-60',
                '-',
                'CET',
                '410140800000'
            ],
            [
                '-60',
                'EU',
                'CE%sT'
            ]
        ],
        'Europe/Athens': [
            [
                '-94.86666666666667',
                '-',
                'LMT',
                '-2344636800000'
            ],
            [
                '-94.86666666666667',
                '-',
                'AMT',
                '-1686095940000'
            ],
            [
                '-120',
                'Greece',
                'EE%sT',
                '-904867200000'
            ],
            [
                '-60',
                'Greece',
                'CE%sT',
                '-812419200000'
            ],
            [
                '-120',
                'Greece',
                'EE%sT',
                '378604800000'
            ],
            [
                '-120',
                'EU',
                'EE%sT'
            ]
        ],
        'Europe/Budapest': [
            [
                '-76.33333333333333',
                '-',
                'LMT',
                '-2500934400000'
            ],
            [
                '-60',
                'C-Eur',
                'CE%sT',
                '-1609545600000'
            ],
            [
                '-60',
                'Hungary',
                'CE%sT',
                '-906768000000'
            ],
            [
                '-60',
                'C-Eur',
                'CE%sT',
                '-757468800000'
            ],
            [
                '-60',
                'Hungary',
                'CE%sT',
                '338954400000'
            ],
            [
                '-60',
                'EU',
                'CE%sT'
            ]
        ],
        'Atlantic/Reykjavik': [
            [
                '87.4',
                '-',
                'LMT',
                '-4165603200000'
            ],
            [
                '87.8',
                '-',
                'RMT',
                '-1925078400000'
            ],
            [
                '60',
                'Iceland',
                'IS%sT',
                '-54774000000'
            ],
            [
                '0',
                '-',
                'GMT'
            ]
        ],
        'Europe/Rome': [
            [
                '-49.93333333333334',
                '-',
                'LMT',
                '-3259094400000'
            ],
            [
                '-49.93333333333334',
                '-',
                'RMT',
                '-2403561600000'
            ],
            [
                '-60',
                'Italy',
                'CE%sT',
                '-857253600000'
            ],
            [
                '-60',
                'C-Eur',
                'CE%sT',
                '-804816000000'
            ],
            [
                '-60',
                'Italy',
                'CE%sT',
                '347068800000'
            ],
            [
                '-60',
                'EU',
                'CE%sT'
            ]
        ],
        'Europe/Vatican': 'Europe/Rome',
        'Europe/San_Marino': 'Europe/Rome',
        'Europe/Riga': [
            [
                '-96.56666666666668',
                '-',
                'LMT',
                '-2808604800000'
            ],
            [
                '-96.56666666666668',
                '-',
                'RMT',
                '-1632002400000'
            ],
            [
                '-96.56666666666668',
                '1:00',
                'LST',
                '-1618693200000'
            ],
            [
                '-96.56666666666668',
                '-',
                'RMT',
                '-1601676000000'
            ],
            [
                '-96.56666666666668',
                '1:00',
                'LST',
                '-1597266000000'
            ],
            [
                '-96.56666666666668',
                '-',
                'RMT',
                '-1377302400000'
            ],
            [
                '-120',
                '-',
                'EET',
                '-928022400000'
            ],
            [
                '-180',
                '-',
                'MSK',
                '-899510400000'
            ],
            [
                '-60',
                'C-Eur',
                'CE%sT',
                '-795830400000'
            ],
            [
                '-180',
                'Russia',
                'MSK/MSD',
                '604720800000'
            ],
            [
                '-120',
                '1:00',
                'EEST',
                '620618400000'
            ],
            [
                '-120',
                'Latvia',
                'EE%sT',
                '853804800000'
            ],
            [
                '-120',
                'EU',
                'EE%sT',
                '951782400000'
            ],
            [
                '-120',
                '-',
                'EET',
                '978393600000'
            ],
            [
                '-120',
                'EU',
                'EE%sT'
            ]
        ],
        'Europe/Vaduz': 'Europe/Zurich',
        'Europe/Vilnius': [
            [
                '-101.26666666666667',
                '-',
                'LMT',
                '-2808604800000'
            ],
            [
                '-84',
                '-',
                'WMT',
                '-1641081600000'
            ],
            [
                '-95.6',
                '-',
                'KMT',
                '-1585094400000'
            ],
            [
                '-60',
                '-',
                'CET',
                '-1561248000000'
            ],
            [
                '-120',
                '-',
                'EET',
                '-1553558400000'
            ],
            [
                '-60',
                '-',
                'CET',
                '-928195200000'
            ],
            [
                '-180',
                '-',
                'MSK',
                '-900115200000'
            ],
            [
                '-60',
                'C-Eur',
                'CE%sT',
                '-802137600000'
            ],
            [
                '-180',
                'Russia',
                'MSK/MSD',
                '670384800000'
            ],
            [
                '-120',
                '1:00',
                'EEST',
                '686109600000'
            ],
            [
                '-120',
                'C-Eur',
                'EE%sT',
                '915062400000'
            ],
            [
                '-120',
                '-',
                'EET',
                '891133200000'
            ],
            [
                '-60',
                'EU',
                'CE%sT',
                '941331600000'
            ],
            [
                '-120',
                '-',
                'EET',
                '1041379200000'
            ],
            [
                '-120',
                'EU',
                'EE%sT'
            ]
        ],
        'Europe/Luxembourg': [
            [
                '-24.6',
                '-',
                'LMT',
                '-2069712000000'
            ],
            [
                '-60',
                'Lux',
                'CE%sT',
                '-1612656000000'
            ],
            [
                '0',
                'Lux',
                'WE%sT',
                '-1269813600000'
            ],
            [
                '0',
                'Belgium',
                'WE%sT',
                '-935182800000'
            ],
            [
                '-60',
                'C-Eur',
                'WE%sT',
                '-797979600000'
            ],
            [
                '-60',
                'Belgium',
                'CE%sT',
                '252374400000'
            ],
            [
                '-60',
                'EU',
                'CE%sT'
            ]
        ],
        'Europe/Malta': [
            [
                '-58.06666666666666',
                '-',
                'LMT',
                '-2403475200000'
            ],
            [
                '-60',
                'Italy',
                'CE%sT',
                '-857253600000'
            ],
            [
                '-60',
                'C-Eur',
                'CE%sT',
                '-781048800000'
            ],
            [
                '-60',
                'Italy',
                'CE%sT',
                '102384000000'
            ],
            [
                '-60',
                'Malta',
                'CE%sT',
                '378604800000'
            ],
            [
                '-60',
                'EU',
                'CE%sT'
            ]
        ],
        'Europe/Chisinau': [
            [
                '-115.33333333333333',
                '-',
                'LMT',
                '-2808604800000'
            ],
            [
                '-115',
                '-',
                'CMT',
                '-1637107200000'
            ],
            [
                '-104.4',
                '-',
                'BMT',
                '-1213142400000'
            ],
            [
                '-120',
                'Romania',
                'EE%sT',
                '-927158400000'
            ],
            [
                '-120',
                '1:00',
                'EEST',
                '-898128000000'
            ],
            [
                '-60',
                'C-Eur',
                'CE%sT',
                '-800150400000'
            ],
            [
                '-180',
                'Russia',
                'MSK/MSD',
                '662601600000'
            ],
            [
                '-180',
                '-',
                'MSK',
                '641952000000'
            ],
            [
                '-120',
                '-',
                'EET',
                '694137600000'
            ],
            [
                '-120',
                'Russia',
                'EE%sT',
                '725760000000'
            ],
            [
                '-120',
                'E-Eur',
                'EE%sT',
                '883526400000'
            ],
            [
                '-120',
                'EU',
                'EE%sT'
            ]
        ],
        'Europe/Monaco': [
            [
                '-29.53333333333333',
                '-',
                'LMT',
                '-2486678400000'
            ],
            [
                '-9.35',
                '-',
                'PMT',
                '-1855958400000'
            ],
            [
                '0',
                'France',
                'WE%sT',
                '-766616400000'
            ],
            [
                '-60',
                'France',
                'CE%sT',
                '252374400000'
            ],
            [
                '-60',
                'EU',
                'CE%sT'
            ]
        ],
        'Europe/Amsterdam': [
            [
                '-19.53333333333333',
                '-',
                'LMT',
                '-4228761600000'
            ],
            [
                '-19.53333333333333',
                'Neth',
                '%s',
                '-1025740800000'
            ],
            [
                '-20',
                'Neth',
                'NE%sT',
                '-935020800000'
            ],
            [
                '-60',
                'C-Eur',
                'CE%sT',
                '-781048800000'
            ],
            [
                '-60',
                'Neth',
                'CE%sT',
                '252374400000'
            ],
            [
                '-60',
                'EU',
                'CE%sT'
            ]
        ],
        'Europe/Oslo': [
            [
                '-43',
                '-',
                'LMT',
                '-2366755200000'
            ],
            [
                '-60',
                'Norway',
                'CE%sT',
                '-927507600000'
            ],
            [
                '-60',
                'C-Eur',
                'CE%sT',
                '-781048800000'
            ],
            [
                '-60',
                'Norway',
                'CE%sT',
                '347068800000'
            ],
            [
                '-60',
                'EU',
                'CE%sT'
            ]
        ],
        'Arctic/Longyearbyen': 'Europe/Oslo',
        'Europe/Warsaw': [
            [
                '-84',
                '-',
                'LMT',
                '-2808604800000'
            ],
            [
                '-84',
                '-',
                'WMT',
                '-1717027200000'
            ],
            [
                '-60',
                'C-Eur',
                'CE%sT',
                '-1618693200000'
            ],
            [
                '-120',
                'Poland',
                'EE%sT',
                '-1501718400000'
            ],
            [
                '-60',
                'Poland',
                'CE%sT',
                '-931730400000'
            ],
            [
                '-60',
                'C-Eur',
                'CE%sT',
                '-796867200000'
            ],
            [
                '-60',
                'Poland',
                'CE%sT',
                '252374400000'
            ],
            [
                '-60',
                'W-Eur',
                'CE%sT',
                '599529600000'
            ],
            [
                '-60',
                'EU',
                'CE%sT'
            ]
        ],
        'Europe/Lisbon': [
            [
                '36.75',
                '-',
                'LMT',
                '-2682374400000'
            ],
            [
                '36.75',
                '-',
                'LMT',
                '-1830384000000'
            ],
            [
                '0',
                'Port',
                'WE%sT',
                '-118274400000'
            ],
            [
                '-60',
                '-',
                'CET',
                '212547600000'
            ],
            [
                '0',
                'Port',
                'WE%sT',
                '433299600000'
            ],
            [
                '0',
                'W-Eur',
                'WE%sT',
                '717555600000'
            ],
            [
                '-60',
                'EU',
                'CE%sT',
                '828234000000'
            ],
            [
                '0',
                'EU',
                'WE%sT'
            ]
        ],
        'Atlantic/Azores': [
            [
                '102.66666666666667',
                '-',
                'LMT',
                '-2682374400000'
            ],
            [
                '114.53333333333333',
                '-',
                'HMT',
                '-1830384000000'
            ],
            [
                '120',
                'Port',
                'AZO%sT',
                '-118274400000'
            ],
            [
                '60',
                'Port',
                'AZO%sT',
                '433299600000'
            ],
            [
                '60',
                'W-Eur',
                'AZO%sT',
                '717555600000'
            ],
            [
                '0',
                'EU',
                'WE%sT',
                '733280400000'
            ],
            [
                '60',
                'EU',
                'AZO%sT'
            ]
        ],
        'Atlantic/Madeira': [
            [
                '67.6',
                '-',
                'LMT',
                '-2682374400000'
            ],
            [
                '67.6',
                '-',
                'FMT',
                '-1830384000000'
            ],
            [
                '60',
                'Port',
                'MAD%sT',
                '-118274400000'
            ],
            [
                '0',
                'Port',
                'WE%sT',
                '433299600000'
            ],
            [
                '0',
                'EU',
                'WE%sT'
            ]
        ],
        'Europe/Bucharest': [
            [
                '-104.4',
                '-',
                'LMT',
                '-2469398400000'
            ],
            [
                '-104.4',
                '-',
                'BMT',
                '-1213142400000'
            ],
            [
                '-120',
                'Romania',
                'EE%sT',
                '354679200000'
            ],
            [
                '-120',
                'C-Eur',
                'EE%sT',
                '694137600000'
            ],
            [
                '-120',
                'Romania',
                'EE%sT',
                '788832000000'
            ],
            [
                '-120',
                'E-Eur',
                'EE%sT',
                '883526400000'
            ],
            [
                '-120',
                'EU',
                'EE%sT'
            ]
        ],
        'Europe/Kaliningrad': [
            [
                '-82',
                '-',
                'LMT',
                '-2422051200000'
            ],
            [
                '-60',
                'C-Eur',
                'CE%sT',
                '-757468800000'
            ],
            [
                '-120',
                'Poland',
                'CE%sT',
                '-725932800000'
            ],
            [
                '-180',
                'Russia',
                'MSK/MSD',
                '670384800000'
            ],
            [
                '-120',
                'Russia',
                'EE%sT',
                '1301191200000'
            ],
            [
                '-180',
                '-',
                'FET',
                '1414288800000'
            ],
            [
                '-120',
                '-',
                'EET'
            ]
        ],
        'Europe/Moscow': [
            [
                '-150.28333333333333',
                '-',
                'LMT',
                '-2808604800000'
            ],
            [
                '-150.28333333333333',
                '-',
                'MMT',
                '-1688256000000'
            ],
            [
                '-151.31666666666666',
                'Russia',
                '%s',
                '-1593813600000'
            ],
            [
                '-180',
                'Russia',
                '%s',
                '-1522713600000'
            ],
            [
                '-180',
                'Russia',
                'MSK/MSD',
                '-1491177600000'
            ],
            [
                '-120',
                '-',
                'EET',
                '-1247529600000'
            ],
            [
                '-180',
                'Russia',
                'MSK/MSD',
                '670384800000'
            ],
            [
                '-120',
                'Russia',
                'EE%sT',
                '695786400000'
            ],
            [
                '-180',
                'Russia',
                'MSK/MSD',
                '1301191200000'
            ],
            [
                '-240',
                '-',
                'MSK',
                '1414288800000'
            ],
            [
                '-180',
                '-',
                'MSK'
            ]
        ],
        'Europe/Simferopol': [
            [
                '-136.4',
                '-',
                'LMT',
                '-2808604800000'
            ],
            [
                '-136',
                '-',
                'SMT',
                '-1441152000000'
            ],
            [
                '-120',
                '-',
                'EET',
                '-1247529600000'
            ],
            [
                '-180',
                '-',
                'MSK',
                '-888883200000'
            ],
            [
                '-60',
                'C-Eur',
                'CE%sT',
                '-811641600000'
            ],
            [
                '-180',
                'Russia',
                'MSK/MSD',
                '662601600000'
            ],
            [
                '-180',
                '-',
                'MSK',
                '646797600000'
            ],
            [
                '-120',
                '-',
                'EET',
                '725760000000'
            ],
            [
                '-120',
                'E-Eur',
                'EE%sT',
                '767750400000'
            ],
            [
                '-180',
                'E-Eur',
                'MSK/MSD',
                '828241200000'
            ],
            [
                '-180',
                '1:00',
                'MSD',
                '846385200000'
            ],
            [
                '-180',
                'Russia',
                'MSK/MSD',
                '883526400000'
            ],
            [
                '-180',
                '-',
                'MSK',
                '857178000000'
            ],
            [
                '-120',
                'EU',
                'EE%sT',
                '1396144800000'
            ],
            [
                '-240',
                '-',
                'MSK',
                '1414288800000'
            ],
            [
                '-180',
                '-',
                'MSK'
            ]
        ],
        'Europe/Volgograd': [
            [
                '-177.66666666666666',
                '-',
                'LMT',
                '-1577750400000'
            ],
            [
                '-180',
                '-',
                'TSAT',
                '-1411862400000'
            ],
            [
                '-180',
                '-',
                'STAT',
                '-1247529600000'
            ],
            [
                '-240',
                '-',
                'STAT',
                '-256867200000'
            ],
            [
                '-240',
                'Russia',
                'VOL%sT',
                '606880800000'
            ],
            [
                '-180',
                'Russia',
                'VOL%sT',
                '670384800000'
            ],
            [
                '-240',
                '-',
                'VOLT',
                '701834400000'
            ],
            [
                '-180',
                'Russia',
                'MSK',
                '1301191200000'
            ],
            [
                '-240',
                '-',
                'MSK',
                '1414288800000'
            ],
            [
                '-180',
                '-',
                'MSK'
            ]
        ],
        'Europe/Samara': [
            [
                '-200.33333333333334',
                '-',
                'LMT',
                '-1593813600000'
            ],
            [
                '-180',
                '-',
                'SAMT',
                '-1247529600000'
            ],
            [
                '-240',
                '-',
                'SAMT',
                '-1102291200000'
            ],
            [
                '-240',
                'Russia',
                'KUY%sT',
                '606880800000'
            ],
            [
                '-180',
                'Russia',
                'MSK/MSD',
                '670384800000'
            ],
            [
                '-120',
                'Russia',
                'EE%sT',
                '686109600000'
            ],
            [
                '-180',
                '-',
                'KUYT',
                '687927600000'
            ],
            [
                '-240',
                'Russia',
                'SAM%sT',
                '1269741600000'
            ],
            [
                '-180',
                'Russia',
                'SAM%sT',
                '1301191200000'
            ],
            [
                '-240',
                '-',
                'SAMT'
            ]
        ],
        'Asia/Yekaterinburg': [
            [
                '-242.55',
                '-',
                'LMT',
                '-1688256000000'
            ],
            [
                '-225.08333333333334',
                '-',
                'PMT',
                '-1592596800000'
            ],
            [
                '-240',
                '-',
                'SVET',
                '-1247529600000'
            ],
            [
                '-300',
                'Russia',
                'SVE%sT',
                '670384800000'
            ],
            [
                '-240',
                'Russia',
                'SVE%sT',
                '695786400000'
            ],
            [
                '-300',
                'Russia',
                'YEK%sT',
                '1301191200000'
            ],
            [
                '-360',
                '-',
                'YEKT',
                '1414288800000'
            ],
            [
                '-300',
                '-',
                'YEKT'
            ]
        ],
        'Asia/Omsk': [
            [
                '-293.5',
                '-',
                'LMT',
                '-1582070400000'
            ],
            [
                '-300',
                '-',
                'OMST',
                '-1247529600000'
            ],
            [
                '-360',
                'Russia',
                'OMS%sT',
                '670384800000'
            ],
            [
                '-300',
                'Russia',
                'OMS%sT',
                '695786400000'
            ],
            [
                '-360',
                'Russia',
                'OMS%sT',
                '1301191200000'
            ],
            [
                '-420',
                '-',
                'OMST',
                '1414288800000'
            ],
            [
                '-360',
                '-',
                'OMST'
            ]
        ],
        'Asia/Novosibirsk': [
            [
                '-331.6666666666667',
                '-',
                'LMT',
                '-1579456800000'
            ],
            [
                '-360',
                '-',
                'NOVT',
                '-1247529600000'
            ],
            [
                '-420',
                'Russia',
                'NOV%sT',
                '670384800000'
            ],
            [
                '-360',
                'Russia',
                'NOV%sT',
                '695786400000'
            ],
            [
                '-420',
                'Russia',
                'NOV%sT',
                '738115200000'
            ],
            [
                '-360',
                'Russia',
                'NOV%sT',
                '1301191200000'
            ],
            [
                '-420',
                '-',
                'NOVT',
                '1414288800000'
            ],
            [
                '-360',
                '-',
                'NOVT'
            ]
        ],
        'Asia/Novokuznetsk': [
            [
                '-348.8',
                '-',
                'LMT',
                '-1441238400000'
            ],
            [
                '-360',
                '-',
                'KRAT',
                '-1247529600000'
            ],
            [
                '-420',
                'Russia',
                'KRA%sT',
                '670384800000'
            ],
            [
                '-360',
                'Russia',
                'KRA%sT',
                '695786400000'
            ],
            [
                '-420',
                'Russia',
                'KRA%sT',
                '1269741600000'
            ],
            [
                '-360',
                'Russia',
                'NOV%sT',
                '1301191200000'
            ],
            [
                '-420',
                '-',
                'NOVT',
                '1414288800000'
            ],
            [
                '-420',
                '-',
                'KRAT'
            ]
        ],
        'Asia/Krasnoyarsk': [
            [
                '-371.43333333333334',
                '-',
                'LMT',
                '-1577491200000'
            ],
            [
                '-360',
                '-',
                'KRAT',
                '-1247529600000'
            ],
            [
                '-420',
                'Russia',
                'KRA%sT',
                '670384800000'
            ],
            [
                '-360',
                'Russia',
                'KRA%sT',
                '695786400000'
            ],
            [
                '-420',
                'Russia',
                'KRA%sT',
                '1301191200000'
            ],
            [
                '-480',
                '-',
                'KRAT',
                '1414288800000'
            ],
            [
                '-420',
                '-',
                'KRAT'
            ]
        ],
        'Asia/Irkutsk': [
            [
                '-417.0833333333333',
                '-',
                'LMT',
                '-2808604800000'
            ],
            [
                '-417.0833333333333',
                '-',
                'IMT',
                '-1575849600000'
            ],
            [
                '-420',
                '-',
                'IRKT',
                '-1247529600000'
            ],
            [
                '-480',
                'Russia',
                'IRK%sT',
                '670384800000'
            ],
            [
                '-420',
                'Russia',
                'IRK%sT',
                '695786400000'
            ],
            [
                '-480',
                'Russia',
                'IRK%sT',
                '1301191200000'
            ],
            [
                '-540',
                '-',
                'IRKT',
                '1414288800000'
            ],
            [
                '-480',
                '-',
                'IRKT'
            ]
        ],
        'Asia/Chita': [
            [
                '-453.8666666666667',
                '-',
                'LMT',
                '-1579392000000'
            ],
            [
                '-480',
                '-',
                'YAKT',
                '-1247529600000'
            ],
            [
                '-540',
                'Russia',
                'YAK%sT',
                '670384800000'
            ],
            [
                '-480',
                'Russia',
                'YAK%sT',
                '695786400000'
            ],
            [
                '-540',
                'Russia',
                'YAK%sT',
                '1301191200000'
            ],
            [
                '-600',
                '-',
                'YAKT',
                '1414288800000'
            ],
            [
                '-480',
                '-',
                'IRKT'
            ]
        ],
        'Asia/Yakutsk': [
            [
                '-518.9666666666667',
                '-',
                'LMT',
                '-1579392000000'
            ],
            [
                '-480',
                '-',
                'YAKT',
                '-1247529600000'
            ],
            [
                '-540',
                'Russia',
                'YAK%sT',
                '670384800000'
            ],
            [
                '-480',
                'Russia',
                'YAK%sT',
                '695786400000'
            ],
            [
                '-540',
                'Russia',
                'YAK%sT',
                '1301191200000'
            ],
            [
                '-600',
                '-',
                'YAKT',
                '1414288800000'
            ],
            [
                '-540',
                '-',
                'YAKT'
            ]
        ],
        'Asia/Vladivostok': [
            [
                '-527.5166666666667',
                '-',
                'LMT',
                '-1487289600000'
            ],
            [
                '-540',
                '-',
                'VLAT',
                '-1247529600000'
            ],
            [
                '-600',
                'Russia',
                'VLA%sT',
                '670384800000'
            ],
            [
                '-540',
                'Russia',
                'VLA%sT',
                '695786400000'
            ],
            [
                '-600',
                'Russia',
                'VLA%sT',
                '1301191200000'
            ],
            [
                '-660',
                '-',
                'VLAT',
                '1414288800000'
            ],
            [
                '-600',
                '-',
                'VLAT'
            ]
        ],
        'Asia/Khandyga': [
            [
                '-542.2166666666666',
                '-',
                'LMT',
                '-1579392000000'
            ],
            [
                '-480',
                '-',
                'YAKT',
                '-1247529600000'
            ],
            [
                '-540',
                'Russia',
                'YAK%sT',
                '670384800000'
            ],
            [
                '-480',
                'Russia',
                'YAK%sT',
                '695786400000'
            ],
            [
                '-540',
                'Russia',
                'YAK%sT',
                '1104451200000'
            ],
            [
                '-600',
                'Russia',
                'VLA%sT',
                '1301191200000'
            ],
            [
                '-660',
                '-',
                'VLAT',
                '1315872000000'
            ],
            [
                '-600',
                '-',
                'YAKT',
                '1414288800000'
            ],
            [
                '-540',
                '-',
                'YAKT'
            ]
        ],
        'Asia/Sakhalin': [
            [
                '-570.8',
                '-',
                'LMT',
                '-2031004800000'
            ],
            [
                '-540',
                '-',
                'JCST',
                '-1017792000000'
            ],
            [
                '-540',
                '-',
                'JST',
                '-768528000000'
            ],
            [
                '-660',
                'Russia',
                'SAK%sT',
                '670384800000'
            ],
            [
                '-600',
                'Russia',
                'SAK%sT',
                '695786400000'
            ],
            [
                '-660',
                'Russia',
                'SAK%sT',
                '857181600000'
            ],
            [
                '-600',
                'Russia',
                'SAK%sT',
                '1301191200000'
            ],
            [
                '-660',
                '-',
                'SAKT',
                '1414288800000'
            ],
            [
                '-600',
                '-',
                'SAKT'
            ]
        ],
        'Asia/Magadan': [
            [
                '-603.2',
                '-',
                'LMT',
                '-1441152000000'
            ],
            [
                '-600',
                '-',
                'MAGT',
                '-1247529600000'
            ],
            [
                '-660',
                'Russia',
                'MAG%sT',
                '670384800000'
            ],
            [
                '-600',
                'Russia',
                'MAG%sT',
                '695786400000'
            ],
            [
                '-660',
                'Russia',
                'MAG%sT',
                '1301191200000'
            ],
            [
                '-720',
                '-',
                'MAGT',
                '1414288800000'
            ],
            [
                '-600',
                '-',
                'MAGT'
            ]
        ],
        'Asia/Srednekolymsk': [
            [
                '-614.8666666666667',
                '-',
                'LMT',
                '-1441152000000'
            ],
            [
                '-600',
                '-',
                'MAGT',
                '-1247529600000'
            ],
            [
                '-660',
                'Russia',
                'MAG%sT',
                '670384800000'
            ],
            [
                '-600',
                'Russia',
                'MAG%sT',
                '695786400000'
            ],
            [
                '-660',
                'Russia',
                'MAG%sT',
                '1301191200000'
            ],
            [
                '-720',
                '-',
                'MAGT',
                '1414288800000'
            ],
            [
                '-660',
                '-',
                'SRET'
            ]
        ],
        'Asia/Ust-Nera': [
            [
                '-572.9',
                '-',
                'LMT',
                '-1579392000000'
            ],
            [
                '-480',
                '-',
                'YAKT',
                '-1247529600000'
            ],
            [
                '-540',
                'Russia',
                'YAKT',
                '354931200000'
            ],
            [
                '-660',
                'Russia',
                'MAG%sT',
                '670384800000'
            ],
            [
                '-600',
                'Russia',
                'MAG%sT',
                '695786400000'
            ],
            [
                '-660',
                'Russia',
                'MAG%sT',
                '1301191200000'
            ],
            [
                '-720',
                '-',
                'MAGT',
                '1315872000000'
            ],
            [
                '-660',
                '-',
                'VLAT',
                '1414288800000'
            ],
            [
                '-600',
                '-',
                'VLAT'
            ]
        ],
        'Asia/Kamchatka': [
            [
                '-634.6',
                '-',
                'LMT',
                '-1487721600000'
            ],
            [
                '-660',
                '-',
                'PETT',
                '-1247529600000'
            ],
            [
                '-720',
                'Russia',
                'PET%sT',
                '670384800000'
            ],
            [
                '-660',
                'Russia',
                'PET%sT',
                '695786400000'
            ],
            [
                '-720',
                'Russia',
                'PET%sT',
                '1269741600000'
            ],
            [
                '-660',
                'Russia',
                'PET%sT',
                '1301191200000'
            ],
            [
                '-720',
                '-',
                'PETT'
            ]
        ],
        'Asia/Anadyr': [
            [
                '-709.9333333333334',
                '-',
                'LMT',
                '-1441152000000'
            ],
            [
                '-720',
                '-',
                'ANAT',
                '-1247529600000'
            ],
            [
                '-780',
                'Russia',
                'ANA%sT',
                '386467200000'
            ],
            [
                '-720',
                'Russia',
                'ANA%sT',
                '670384800000'
            ],
            [
                '-660',
                'Russia',
                'ANA%sT',
                '695786400000'
            ],
            [
                '-720',
                'Russia',
                'ANA%sT',
                '1269741600000'
            ],
            [
                '-660',
                'Russia',
                'ANA%sT',
                '1301191200000'
            ],
            [
                '-720',
                '-',
                'ANAT'
            ]
        ],
        'Europe/Belgrade': [
            [
                '-82',
                '-',
                'LMT',
                '-2682374400000'
            ],
            [
                '-60',
                '-',
                'CET',
                '-905821200000'
            ],
            [
                '-60',
                'C-Eur',
                'CE%sT',
                '-757468800000'
            ],
            [
                '-60',
                '-',
                'CET',
                '-777938400000'
            ],
            [
                '-60',
                '1:00',
                'CEST',
                '-766620000000'
            ],
            [
                '-60',
                '-',
                'CET',
                '407203200000'
            ],
            [
                '-60',
                'EU',
                'CE%sT'
            ]
        ],
        'Europe/Ljubljana': 'Europe/Belgrade',
        'Europe/Podgorica': 'Europe/Belgrade',
        'Europe/Sarajevo': 'Europe/Belgrade',
        'Europe/Skopje': 'Europe/Belgrade',
        'Europe/Zagreb': 'Europe/Belgrade',
        'Europe/Bratislava': 'Europe/Prague',
        'Europe/Madrid': [
            [
                '14.733333333333334',
                '-',
                'LMT',
                '-2177452800000'
            ],
            [
                '0',
                'Spain',
                'WE%sT',
                '-733881600000'
            ],
            [
                '-60',
                'Spain',
                'CE%sT',
                '315446400000'
            ],
            [
                '-60',
                'EU',
                'CE%sT'
            ]
        ],
        'Africa/Ceuta': [
            [
                '21.26666666666667',
                '-',
                'LMT',
                '-2146003200000'
            ],
            [
                '0',
                '-',
                'WET',
                '-1630112400000'
            ],
            [
                '0',
                '1:00',
                'WEST',
                '-1616806800000'
            ],
            [
                '0',
                '-',
                'WET',
                '-1420156800000'
            ],
            [
                '0',
                'Spain',
                'WE%sT',
                '-1262390400000'
            ],
            [
                '0',
                'SpainAfrica',
                'WE%sT',
                '448243200000'
            ],
            [
                '-60',
                '-',
                'CET',
                '536371200000'
            ],
            [
                '-60',
                'EU',
                'CE%sT'
            ]
        ],
        'Atlantic/Canary': [
            [
                '61.6',
                '-',
                'LMT',
                '-1509667200000'
            ],
            [
                '60',
                '-',
                'CANT',
                '-733878000000'
            ],
            [
                '0',
                '-',
                'WET',
                '323827200000'
            ],
            [
                '0',
                '1:00',
                'WEST',
                '338947200000'
            ],
            [
                '0',
                'EU',
                'WE%sT'
            ]
        ],
        'Europe/Stockholm': [
            [
                '-72.2',
                '-',
                'LMT',
                '-2871676800000'
            ],
            [
                '-60.233333333333334',
                '-',
                'SET',
                '-2208988800000'
            ],
            [
                '-60',
                '-',
                'CET',
                '-1692493200000'
            ],
            [
                '-60',
                '1:00',
                'CEST',
                '-1680476400000'
            ],
            [
                '-60',
                '-',
                'CET',
                '347068800000'
            ],
            [
                '-60',
                'EU',
                'CE%sT'
            ]
        ],
        'Europe/Zurich': [
            [
                '-34.13333333333333',
                '-',
                'LMT',
                '-3675196800000'
            ],
            [
                '-29.76666666666667',
                '-',
                'BMT',
                '-2385244800000'
            ],
            [
                '-60',
                'Swiss',
                'CE%sT',
                '378604800000'
            ],
            [
                '-60',
                'EU',
                'CE%sT'
            ]
        ],
        'Europe/Istanbul': [
            [
                '-115.86666666666667',
                '-',
                'LMT',
                '-2808604800000'
            ],
            [
                '-116.93333333333332',
                '-',
                'IMT',
                '-1869868800000'
            ],
            [
                '-120',
                'Turkey',
                'EE%sT',
                '277257600000'
            ],
            [
                '-180',
                'Turkey',
                'TR%sT',
                '482803200000'
            ],
            [
                '-120',
                'Turkey',
                'EE%sT',
                '1199059200000'
            ],
            [
                '-120',
                'EU',
                'EE%sT',
                '1301187600000'
            ],
            [
                '-120',
                '-',
                'EET',
                '1301274000000'
            ],
            [
                '-120',
                'EU',
                'EE%sT',
                '1396141200000'
            ],
            [
                '-120',
                '-',
                'EET',
                '1396227600000'
            ],
            [
                '-120',
                'EU',
                'EE%sT'
            ]
        ],
        'Asia/Istanbul': 'Europe/Istanbul',
        'Europe/Kiev': [
            [
                '-122.06666666666668',
                '-',
                'LMT',
                '-2808604800000'
            ],
            [
                '-122.06666666666668',
                '-',
                'KMT',
                '-1441152000000'
            ],
            [
                '-120',
                '-',
                'EET',
                '-1247529600000'
            ],
            [
                '-180',
                '-',
                'MSK',
                '-892512000000'
            ],
            [
                '-60',
                'C-Eur',
                'CE%sT',
                '-825379200000'
            ],
            [
                '-180',
                'Russia',
                'MSK/MSD',
                '646797600000'
            ],
            [
                '-120',
                '1:00',
                'EEST',
                '686113200000'
            ],
            [
                '-120',
                'E-Eur',
                'EE%sT',
                '820368000000'
            ],
            [
                '-120',
                'EU',
                'EE%sT'
            ]
        ],
        'Europe/Uzhgorod': [
            [
                '-89.2',
                '-',
                'LMT',
                '-2500934400000'
            ],
            [
                '-60',
                '-',
                'CET',
                '-915235200000'
            ],
            [
                '-60',
                'C-Eur',
                'CE%sT',
                '-796867200000'
            ],
            [
                '-60',
                '1:00',
                'CEST',
                '-794707200000'
            ],
            [
                '-60',
                '-',
                'CET',
                '-773452800000'
            ],
            [
                '-180',
                'Russia',
                'MSK/MSD',
                '662601600000'
            ],
            [
                '-180',
                '-',
                'MSK',
                '646797600000'
            ],
            [
                '-60',
                '-',
                'CET',
                '670388400000'
            ],
            [
                '-120',
                '-',
                'EET',
                '725760000000'
            ],
            [
                '-120',
                'E-Eur',
                'EE%sT',
                '820368000000'
            ],
            [
                '-120',
                'EU',
                'EE%sT'
            ]
        ],
        'Europe/Zaporozhye': [
            [
                '-140.66666666666666',
                '-',
                'LMT',
                '-2808604800000'
            ],
            [
                '-140',
                '-',
                'CUT',
                '-1441152000000'
            ],
            [
                '-120',
                '-',
                'EET',
                '-1247529600000'
            ],
            [
                '-180',
                '-',
                'MSK',
                '-894758400000'
            ],
            [
                '-60',
                'C-Eur',
                'CE%sT',
                '-826416000000'
            ],
            [
                '-180',
                'Russia',
                'MSK/MSD',
                '670384800000'
            ],
            [
                '-120',
                'E-Eur',
                'EE%sT',
                '820368000000'
            ],
            [
                '-120',
                'EU',
                'EE%sT'
            ]
        ],
        'EST': [[
                '300',
                '-',
                'EST'
            ]],
        'MST': [[
                '420',
                '-',
                'MST'
            ]],
        'HST': [[
                '600',
                '-',
                'HST'
            ]],
        'EST5EDT': [[
                '300',
                'US',
                'E%sT'
            ]],
        'CST6CDT': [[
                '360',
                'US',
                'C%sT'
            ]],
        'MST7MDT': [[
                '420',
                'US',
                'M%sT'
            ]],
        'PST8PDT': [[
                '480',
                'US',
                'P%sT'
            ]],
        'America/New_York': [
            [
                '296.0333333333333',
                '-',
                'LMT',
                '-2717668562000'
            ],
            [
                '300',
                'US',
                'E%sT',
                '-1546387200000'
            ],
            [
                '300',
                'NYC',
                'E%sT',
                '-852163200000'
            ],
            [
                '300',
                'US',
                'E%sT',
                '-725932800000'
            ],
            [
                '300',
                'NYC',
                'E%sT',
                '-63244800000'
            ],
            [
                '300',
                'US',
                'E%sT'
            ]
        ],
        'America/Chicago': [
            [
                '350.6',
                '-',
                'LMT',
                '-2717668236000'
            ],
            [
                '360',
                'US',
                'C%sT',
                '-1546387200000'
            ],
            [
                '360',
                'Chicago',
                'C%sT',
                '-1067810400000'
            ],
            [
                '300',
                '-',
                'EST',
                '-1045432800000'
            ],
            [
                '360',
                'Chicago',
                'C%sT',
                '-852163200000'
            ],
            [
                '360',
                'US',
                'C%sT',
                '-725932800000'
            ],
            [
                '360',
                'Chicago',
                'C%sT',
                '-63244800000'
            ],
            [
                '360',
                'US',
                'C%sT'
            ]
        ],
        'America/North_Dakota/Center': [
            [
                '405.2',
                '-',
                'LMT',
                '-2717667912000'
            ],
            [
                '420',
                'US',
                'M%sT',
                '719978400000'
            ],
            [
                '360',
                'US',
                'C%sT'
            ]
        ],
        'America/North_Dakota/New_Salem': [
            [
                '405.65',
                '-',
                'LMT',
                '-2717667939000'
            ],
            [
                '420',
                'US',
                'M%sT',
                '1067133600000'
            ],
            [
                '360',
                'US',
                'C%sT'
            ]
        ],
        'America/North_Dakota/Beulah': [
            [
                '407.1166666666667',
                '-',
                'LMT',
                '-2717668027000'
            ],
            [
                '420',
                'US',
                'M%sT',
                '1289095200000'
            ],
            [
                '360',
                'US',
                'C%sT'
            ]
        ],
        'America/Denver': [
            [
                '419.93333333333334',
                '-',
                'LMT',
                '-2717668796000'
            ],
            [
                '420',
                'US',
                'M%sT',
                '-1546387200000'
            ],
            [
                '420',
                'Denver',
                'M%sT',
                '-852163200000'
            ],
            [
                '420',
                'US',
                'M%sT',
                '-725932800000'
            ],
            [
                '420',
                'Denver',
                'M%sT',
                '-63244800000'
            ],
            [
                '420',
                'US',
                'M%sT'
            ]
        ],
        'America/Los_Angeles': [
            [
                '472.9666666666667',
                '-',
                'LMT',
                '-2717668378000'
            ],
            [
                '480',
                'US',
                'P%sT',
                '-725932800000'
            ],
            [
                '480',
                'CA',
                'P%sT',
                '-63244800000'
            ],
            [
                '480',
                'US',
                'P%sT'
            ]
        ],
        'America/Juneau': [
            [
                '-902.3166666666666',
                '-',
                'LMT',
                '-3225312000000'
            ],
            [
                '537.6833333333334',
                '-',
                'LMT',
                '-2188987200000'
            ],
            [
                '480',
                '-',
                'PST',
                '-852163200000'
            ],
            [
                '480',
                'US',
                'P%sT',
                '-725932800000'
            ],
            [
                '480',
                '-',
                'PST',
                '-86400000'
            ],
            [
                '480',
                'US',
                'P%sT',
                '325648800000'
            ],
            [
                '540',
                'US',
                'Y%sT',
                '341373600000'
            ],
            [
                '480',
                'US',
                'P%sT',
                '436327200000'
            ],
            [
                '540',
                'US',
                'Y%sT',
                '438998400000'
            ],
            [
                '540',
                'US',
                'AK%sT'
            ]
        ],
        'America/Sitka': [
            [
                '-898.7833333333334',
                '-',
                'LMT',
                '-3225312000000'
            ],
            [
                '541.2166666666666',
                '-',
                'LMT',
                '-2188987200000'
            ],
            [
                '480',
                '-',
                'PST',
                '-852163200000'
            ],
            [
                '480',
                'US',
                'P%sT',
                '-725932800000'
            ],
            [
                '480',
                '-',
                'PST',
                '-86400000'
            ],
            [
                '480',
                'US',
                'P%sT',
                '436327200000'
            ],
            [
                '540',
                'US',
                'Y%sT',
                '438998400000'
            ],
            [
                '540',
                'US',
                'AK%sT'
            ]
        ],
        'America/Metlakatla': [
            [
                '-913.7',
                '-',
                'LMT',
                '-3225312000000'
            ],
            [
                '526.3',
                '-',
                'LMT',
                '-2188987200000'
            ],
            [
                '480',
                '-',
                'PST',
                '-852163200000'
            ],
            [
                '480',
                'US',
                'P%sT',
                '-725932800000'
            ],
            [
                '480',
                '-',
                'PST',
                '-86400000'
            ],
            [
                '480',
                'US',
                'P%sT',
                '436327200000'
            ],
            [
                '480',
                '-',
                'PST'
            ]
        ],
        'America/Yakutat': [
            [
                '-881.0833333333334',
                '-',
                'LMT',
                '-3225312000000'
            ],
            [
                '558.9166666666666',
                '-',
                'LMT',
                '-2188987200000'
            ],
            [
                '540',
                '-',
                'YST',
                '-852163200000'
            ],
            [
                '540',
                'US',
                'Y%sT',
                '-725932800000'
            ],
            [
                '540',
                '-',
                'YST',
                '-86400000'
            ],
            [
                '540',
                'US',
                'Y%sT',
                '438998400000'
            ],
            [
                '540',
                'US',
                'AK%sT'
            ]
        ],
        'America/Anchorage': [
            [
                '-840.4',
                '-',
                'LMT',
                '-3225312000000'
            ],
            [
                '599.6',
                '-',
                'LMT',
                '-2188987200000'
            ],
            [
                '600',
                '-',
                'CAT',
                '-852163200000'
            ],
            [
                '600',
                'US',
                'CAT/CAWT',
                '-769395600000'
            ],
            [
                '600',
                'US',
                'CAT/CAPT',
                '-725932800000'
            ],
            [
                '600',
                '-',
                'CAT',
                '-86918400000'
            ],
            [
                '600',
                '-',
                'AHST',
                '-86400000'
            ],
            [
                '600',
                'US',
                'AH%sT',
                '436327200000'
            ],
            [
                '540',
                'US',
                'Y%sT',
                '438998400000'
            ],
            [
                '540',
                'US',
                'AK%sT'
            ]
        ],
        'America/Nome': [
            [
                '-778.35',
                '-',
                'LMT',
                '-3225312000000'
            ],
            [
                '661.6333333333333',
                '-',
                'LMT',
                '-2188987200000'
            ],
            [
                '660',
                '-',
                'NST',
                '-852163200000'
            ],
            [
                '660',
                'US',
                'N%sT',
                '-725932800000'
            ],
            [
                '660',
                '-',
                'NST',
                '-86918400000'
            ],
            [
                '660',
                '-',
                'BST',
                '-86400000'
            ],
            [
                '660',
                'US',
                'B%sT',
                '436327200000'
            ],
            [
                '540',
                'US',
                'Y%sT',
                '438998400000'
            ],
            [
                '540',
                'US',
                'AK%sT'
            ]
        ],
        'America/Adak': [
            [
                '-733.35',
                '-',
                'LMT',
                '-3225312000000'
            ],
            [
                '706.6333333333333',
                '-',
                'LMT',
                '-2188987200000'
            ],
            [
                '660',
                '-',
                'NST',
                '-852163200000'
            ],
            [
                '660',
                'US',
                'N%sT',
                '-725932800000'
            ],
            [
                '660',
                '-',
                'NST',
                '-86918400000'
            ],
            [
                '660',
                '-',
                'BST',
                '-86400000'
            ],
            [
                '660',
                'US',
                'B%sT',
                '436327200000'
            ],
            [
                '600',
                'US',
                'AH%sT',
                '438998400000'
            ],
            [
                '600',
                'US',
                'HA%sT'
            ]
        ],
        'Pacific/Honolulu': [
            [
                '631.4333333333334',
                '-',
                'LMT',
                '-2334139200000'
            ],
            [
                '630',
                '-',
                'HST',
                '-1157320800000'
            ],
            [
                '630',
                '1:00',
                'HDT',
                '-1155470400000'
            ],
            [
                '630',
                '-',
                'HST',
                '-880236000000'
            ],
            [
                '630',
                '1:00',
                'HDT',
                '-765410400000'
            ],
            [
                '630',
                '-',
                'HST',
                '-712188000000'
            ],
            [
                '600',
                '-',
                'HST'
            ]
        ],
        'Pacific/Johnston': 'Pacific/Honolulu',
        'America/Phoenix': [
            [
                '448.3',
                '-',
                'LMT',
                '-2717670498000'
            ],
            [
                '420',
                'US',
                'M%sT',
                '-820540740000'
            ],
            [
                '420',
                '-',
                'MST',
                '-812678340000'
            ],
            [
                '420',
                'US',
                'M%sT',
                '-796867140000'
            ],
            [
                '420',
                '-',
                'MST',
                '-63244800000'
            ],
            [
                '420',
                'US',
                'M%sT',
                '-56246400000'
            ],
            [
                '420',
                '-',
                'MST'
            ]
        ],
        'America/Boise': [
            [
                '464.81666666666666',
                '-',
                'LMT',
                '-2717667889000'
            ],
            [
                '480',
                'US',
                'P%sT',
                '-1471816800000'
            ],
            [
                '420',
                'US',
                'M%sT',
                '157680000000'
            ],
            [
                '420',
                '-',
                'MST',
                '129088800000'
            ],
            [
                '420',
                'US',
                'M%sT'
            ]
        ],
        'America/Indiana/Indianapolis': [
            [
                '344.6333333333333',
                '-',
                'LMT',
                '-2717667878000'
            ],
            [
                '360',
                'US',
                'C%sT',
                '-1546387200000'
            ],
            [
                '360',
                'Indianapolis',
                'C%sT',
                '-852163200000'
            ],
            [
                '360',
                'US',
                'C%sT',
                '-725932800000'
            ],
            [
                '360',
                'Indianapolis',
                'C%sT',
                '-463615200000'
            ],
            [
                '300',
                '-',
                'EST',
                '-386805600000'
            ],
            [
                '360',
                '-',
                'CST',
                '-368661600000'
            ],
            [
                '300',
                '-',
                'EST',
                '-86400000'
            ],
            [
                '300',
                'US',
                'E%sT',
                '62985600000'
            ],
            [
                '300',
                '-',
                'EST',
                '1167523200000'
            ],
            [
                '300',
                'US',
                'E%sT'
            ]
        ],
        'America/Indiana/Marengo': [
            [
                '345.3833333333333',
                '-',
                'LMT',
                '-2717667923000'
            ],
            [
                '360',
                'US',
                'C%sT',
                '-568166400000'
            ],
            [
                '360',
                'Marengo',
                'C%sT',
                '-273708000000'
            ],
            [
                '300',
                '-',
                'EST',
                '-86400000'
            ],
            [
                '300',
                'US',
                'E%sT',
                '126669600000'
            ],
            [
                '360',
                '1:00',
                'CDT',
                '152071200000'
            ],
            [
                '300',
                'US',
                'E%sT',
                '220838400000'
            ],
            [
                '300',
                '-',
                'EST',
                '1167523200000'
            ],
            [
                '300',
                'US',
                'E%sT'
            ]
        ],
        'America/Indiana/Vincennes': [
            [
                '350.1166666666667',
                '-',
                'LMT',
                '-2717668207000'
            ],
            [
                '360',
                'US',
                'C%sT',
                '-725932800000'
            ],
            [
                '360',
                'Vincennes',
                'C%sT',
                '-179359200000'
            ],
            [
                '300',
                '-',
                'EST',
                '-86400000'
            ],
            [
                '300',
                'US',
                'E%sT',
                '62985600000'
            ],
            [
                '300',
                '-',
                'EST',
                '1143943200000'
            ],
            [
                '360',
                'US',
                'C%sT',
                '1194141600000'
            ],
            [
                '300',
                'US',
                'E%sT'
            ]
        ],
        'America/Indiana/Tell_City': [
            [
                '347.05',
                '-',
                'LMT',
                '-2717668023000'
            ],
            [
                '360',
                'US',
                'C%sT',
                '-725932800000'
            ],
            [
                '360',
                'Perry',
                'C%sT',
                '-179359200000'
            ],
            [
                '300',
                '-',
                'EST',
                '-86400000'
            ],
            [
                '300',
                'US',
                'E%sT',
                '62985600000'
            ],
            [
                '300',
                '-',
                'EST',
                '1143943200000'
            ],
            [
                '360',
                'US',
                'C%sT'
            ]
        ],
        'America/Indiana/Petersburg': [
            [
                '349.1166666666667',
                '-',
                'LMT',
                '-2717668147000'
            ],
            [
                '360',
                'US',
                'C%sT',
                '-441936000000'
            ],
            [
                '360',
                'Pike',
                'C%sT',
                '-147909600000'
            ],
            [
                '300',
                '-',
                'EST',
                '-100130400000'
            ],
            [
                '360',
                'US',
                'C%sT',
                '247024800000'
            ],
            [
                '300',
                '-',
                'EST',
                '1143943200000'
            ],
            [
                '360',
                'US',
                'C%sT',
                '1194141600000'
            ],
            [
                '300',
                'US',
                'E%sT'
            ]
        ],
        'America/Indiana/Knox': [
            [
                '346.5',
                '-',
                'LMT',
                '-2717667990000'
            ],
            [
                '360',
                'US',
                'C%sT',
                '-694396800000'
            ],
            [
                '360',
                'Starke',
                'C%sT',
                '-242258400000'
            ],
            [
                '300',
                '-',
                'EST',
                '-195084000000'
            ],
            [
                '360',
                'US',
                'C%sT',
                '688528800000'
            ],
            [
                '300',
                '-',
                'EST',
                '1143943200000'
            ],
            [
                '360',
                'US',
                'C%sT'
            ]
        ],
        'America/Indiana/Winamac': [
            [
                '346.4166666666667',
                '-',
                'LMT',
                '-2717667985000'
            ],
            [
                '360',
                'US',
                'C%sT',
                '-725932800000'
            ],
            [
                '360',
                'Pulaski',
                'C%sT',
                '-273708000000'
            ],
            [
                '300',
                '-',
                'EST',
                '-86400000'
            ],
            [
                '300',
                'US',
                'E%sT',
                '62985600000'
            ],
            [
                '300',
                '-',
                'EST',
                '1143943200000'
            ],
            [
                '360',
                'US',
                'C%sT',
                '1173578400000'
            ],
            [
                '300',
                'US',
                'E%sT'
            ]
        ],
        'America/Indiana/Vevay': [
            [
                '340.2666666666667',
                '-',
                'LMT',
                '-2717667616000'
            ],
            [
                '360',
                'US',
                'C%sT',
                '-495064800000'
            ],
            [
                '300',
                '-',
                'EST',
                '-86400000'
            ],
            [
                '300',
                'US',
                'E%sT',
                '126144000000'
            ],
            [
                '300',
                '-',
                'EST',
                '1167523200000'
            ],
            [
                '300',
                'US',
                'E%sT'
            ]
        ],
        'America/Kentucky/Louisville': [
            [
                '343.0333333333333',
                '-',
                'LMT',
                '-2717667782000'
            ],
            [
                '360',
                'US',
                'C%sT',
                '-1514851200000'
            ],
            [
                '360',
                'Louisville',
                'C%sT',
                '-852163200000'
            ],
            [
                '360',
                'US',
                'C%sT',
                '-725932800000'
            ],
            [
                '360',
                'Louisville',
                'C%sT',
                '-266450400000'
            ],
            [
                '300',
                '-',
                'EST',
                '-31622400000'
            ],
            [
                '300',
                'US',
                'E%sT',
                '126669600000'
            ],
            [
                '360',
                '1:00',
                'CDT',
                '152071200000'
            ],
            [
                '300',
                'US',
                'E%sT'
            ]
        ],
        'America/Kentucky/Monticello': [
            [
                '339.4',
                '-',
                'LMT',
                '-2717667564000'
            ],
            [
                '360',
                'US',
                'C%sT',
                '-725932800000'
            ],
            [
                '360',
                '-',
                'CST',
                '-31622400000'
            ],
            [
                '360',
                'US',
                'C%sT',
                '972784800000'
            ],
            [
                '300',
                'US',
                'E%sT'
            ]
        ],
        'America/Detroit': [
            [
                '332.18333333333334',
                '-',
                'LMT',
                '-2019772800000'
            ],
            [
                '360',
                '-',
                'CST',
                '-1724104800000'
            ],
            [
                '300',
                '-',
                'EST',
                '-852163200000'
            ],
            [
                '300',
                'US',
                'E%sT',
                '-725932800000'
            ],
            [
                '300',
                'Detroit',
                'E%sT',
                '126144000000'
            ],
            [
                '300',
                'US',
                'E%sT',
                '189216000000'
            ],
            [
                '300',
                '-',
                'EST',
                '167796000000'
            ],
            [
                '300',
                'US',
                'E%sT'
            ]
        ],
        'America/Menominee': [
            [
                '350.45',
                '-',
                'LMT',
                '-2659780800000'
            ],
            [
                '360',
                'US',
                'C%sT',
                '-725932800000'
            ],
            [
                '360',
                'Menominee',
                'C%sT',
                '-21506400000'
            ],
            [
                '300',
                '-',
                'EST',
                '104896800000'
            ],
            [
                '360',
                'US',
                'C%sT'
            ]
        ],
        'America/St_Johns': [
            [
                '210.86666666666665',
                '-',
                'LMT',
                '-2682374400000'
            ],
            [
                '210.86666666666665',
                'StJohns',
                'N%sT',
                '-1609545600000'
            ],
            [
                '210.86666666666665',
                'Canada',
                'N%sT',
                '-1578009600000'
            ],
            [
                '210.86666666666665',
                'StJohns',
                'N%sT',
                '-1096934400000'
            ],
            [
                '210',
                'StJohns',
                'N%sT',
                '-872380800000'
            ],
            [
                '210',
                'Canada',
                'N%sT',
                '-725932800000'
            ],
            [
                '210',
                'StJohns',
                'N%sT',
                '1320105600000'
            ],
            [
                '210',
                'Canada',
                'N%sT'
            ]
        ],
        'America/Goose_Bay': [
            [
                '241.66666666666666',
                '-',
                'LMT',
                '-2682374400000'
            ],
            [
                '210.86666666666665',
                '-',
                'NST',
                '-1609545600000'
            ],
            [
                '210.86666666666665',
                'Canada',
                'N%sT',
                '-1578009600000'
            ],
            [
                '210.86666666666665',
                '-',
                'NST',
                '-1096934400000'
            ],
            [
                '210',
                '-',
                'NST',
                '-1041465600000'
            ],
            [
                '210',
                'StJohns',
                'N%sT',
                '-872380800000'
            ],
            [
                '210',
                'Canada',
                'N%sT',
                '-725932800000'
            ],
            [
                '210',
                'StJohns',
                'N%sT',
                '-119916000000'
            ],
            [
                '240',
                'StJohns',
                'A%sT',
                '1320105600000'
            ],
            [
                '240',
                'Canada',
                'A%sT'
            ]
        ],
        'America/Halifax': [
            [
                '254.4',
                '-',
                'LMT',
                '-2131660800000'
            ],
            [
                '240',
                'Halifax',
                'A%sT',
                '-1609545600000'
            ],
            [
                '240',
                'Canada',
                'A%sT',
                '-1578009600000'
            ],
            [
                '240',
                'Halifax',
                'A%sT',
                '-880236000000'
            ],
            [
                '240',
                'Canada',
                'A%sT',
                '-725932800000'
            ],
            [
                '240',
                'Halifax',
                'A%sT',
                '157680000000'
            ],
            [
                '240',
                'Canada',
                'A%sT'
            ]
        ],
        'America/Glace_Bay': [
            [
                '239.8',
                '-',
                'LMT',
                '-2131660800000'
            ],
            [
                '240',
                'Canada',
                'A%sT',
                '-505008000000'
            ],
            [
                '240',
                'Halifax',
                'A%sT',
                '-473472000000'
            ],
            [
                '240',
                '-',
                'AST',
                '94608000000'
            ],
            [
                '240',
                'Halifax',
                'A%sT',
                '157680000000'
            ],
            [
                '240',
                'Canada',
                'A%sT'
            ]
        ],
        'America/Moncton': [
            [
                '259.1333333333333',
                '-',
                'LMT',
                '-2715897600000'
            ],
            [
                '300',
                '-',
                'EST',
                '-2131660800000'
            ],
            [
                '240',
                'Canada',
                'A%sT',
                '-1136160000000'
            ],
            [
                '240',
                'Moncton',
                'A%sT',
                '-852163200000'
            ],
            [
                '240',
                'Canada',
                'A%sT',
                '-725932800000'
            ],
            [
                '240',
                'Moncton',
                'A%sT',
                '126144000000'
            ],
            [
                '240',
                'Canada',
                'A%sT',
                '757296000000'
            ],
            [
                '240',
                'Moncton',
                'A%sT',
                '1199059200000'
            ],
            [
                '240',
                'Canada',
                'A%sT'
            ]
        ],
        'America/Blanc-Sablon': [
            [
                '228.46666666666667',
                '-',
                'LMT',
                '-2682374400000'
            ],
            [
                '240',
                'Canada',
                'A%sT',
                '31449600000'
            ],
            [
                '240',
                '-',
                'AST'
            ]
        ],
        'America/Montreal': [
            [
                '294.2666666666667',
                '-',
                'LMT',
                '-2682374400000'
            ],
            [
                '300',
                'Mont',
                'E%sT',
                '-1609545600000'
            ],
            [
                '300',
                'Canada',
                'E%sT',
                '-1578009600000'
            ],
            [
                '300',
                'Mont',
                'E%sT',
                '-880236000000'
            ],
            [
                '300',
                'Canada',
                'E%sT',
                '-725932800000'
            ],
            [
                '300',
                'Mont',
                'E%sT',
                '157680000000'
            ],
            [
                '300',
                'Canada',
                'E%sT'
            ]
        ],
        'America/Toronto': [
            [
                '317.5333333333333',
                '-',
                'LMT',
                '-2335305600000'
            ],
            [
                '300',
                'Canada',
                'E%sT',
                '-1578009600000'
            ],
            [
                '300',
                'Toronto',
                'E%sT',
                '-880236000000'
            ],
            [
                '300',
                'Canada',
                'E%sT',
                '-725932800000'
            ],
            [
                '300',
                'Toronto',
                'E%sT',
                '157680000000'
            ],
            [
                '300',
                'Canada',
                'E%sT'
            ]
        ],
        'America/Thunder_Bay': [
            [
                '357',
                '-',
                'LMT',
                '-2335305600000'
            ],
            [
                '360',
                '-',
                'CST',
                '-1862006400000'
            ],
            [
                '300',
                '-',
                'EST',
                '-852163200000'
            ],
            [
                '300',
                'Canada',
                'E%sT',
                '31449600000'
            ],
            [
                '300',
                'Toronto',
                'E%sT',
                '126144000000'
            ],
            [
                '300',
                '-',
                'EST',
                '157680000000'
            ],
            [
                '300',
                'Canada',
                'E%sT'
            ]
        ],
        'America/Nipigon': [
            [
                '353.06666666666666',
                '-',
                'LMT',
                '-2335305600000'
            ],
            [
                '300',
                'Canada',
                'E%sT',
                '-923270400000'
            ],
            [
                '300',
                '1:00',
                'EDT',
                '-880236000000'
            ],
            [
                '300',
                'Canada',
                'E%sT'
            ]
        ],
        'America/Rainy_River': [
            [
                '378.2666666666667',
                '-',
                'LMT',
                '-2335305600000'
            ],
            [
                '360',
                'Canada',
                'C%sT',
                '-923270400000'
            ],
            [
                '360',
                '1:00',
                'CDT',
                '-880236000000'
            ],
            [
                '360',
                'Canada',
                'C%sT'
            ]
        ],
        'America/Atikokan': [
            [
                '366.4666666666667',
                '-',
                'LMT',
                '-2335305600000'
            ],
            [
                '360',
                'Canada',
                'C%sT',
                '-923270400000'
            ],
            [
                '360',
                '1:00',
                'CDT',
                '-880236000000'
            ],
            [
                '360',
                'Canada',
                'C%sT',
                '-765410400000'
            ],
            [
                '300',
                '-',
                'EST'
            ]
        ],
        'America/Winnipeg': [
            [
                '388.6',
                '-',
                'LMT',
                '-2602281600000'
            ],
            [
                '360',
                'Winn',
                'C%sT',
                '1167523200000'
            ],
            [
                '360',
                'Canada',
                'C%sT'
            ]
        ],
        'America/Regina': [
            [
                '418.6',
                '-',
                'LMT',
                '-2030227200000'
            ],
            [
                '420',
                'Regina',
                'M%sT',
                '-307749600000'
            ],
            [
                '360',
                '-',
                'CST'
            ]
        ],
        'America/Swift_Current': [
            [
                '431.3333333333333',
                '-',
                'LMT',
                '-2030227200000'
            ],
            [
                '420',
                'Canada',
                'M%sT',
                '-749599200000'
            ],
            [
                '420',
                'Regina',
                'M%sT',
                '-599702400000'
            ],
            [
                '420',
                'Swift',
                'M%sT',
                '70941600000'
            ],
            [
                '360',
                '-',
                'CST'
            ]
        ],
        'America/Edmonton': [
            [
                '453.8666666666667',
                '-',
                'LMT',
                '-1998691200000'
            ],
            [
                '420',
                'Edm',
                'M%sT',
                '567907200000'
            ],
            [
                '420',
                'Canada',
                'M%sT'
            ]
        ],
        'America/Vancouver': [
            [
                '492.4666666666667',
                '-',
                'LMT',
                '-2682374400000'
            ],
            [
                '480',
                'Vanc',
                'P%sT',
                '567907200000'
            ],
            [
                '480',
                'Canada',
                'P%sT'
            ]
        ],
        'America/Dawson_Creek': [
            [
                '480.93333333333334',
                '-',
                'LMT',
                '-2682374400000'
            ],
            [
                '480',
                'Canada',
                'P%sT',
                '-694396800000'
            ],
            [
                '480',
                'Vanc',
                'P%sT',
                '83988000000'
            ],
            [
                '420',
                '-',
                'MST'
            ]
        ],
        'America/Creston': [
            [
                '466.06666666666666',
                '-',
                'LMT',
                '-2682374400000'
            ],
            [
                '420',
                '-',
                'MST',
                '-1680480000000'
            ],
            [
                '480',
                '-',
                'PST',
                '-1627862400000'
            ],
            [
                '420',
                '-',
                'MST'
            ]
        ],
        'America/Pangnirtung': [
            [
                '0',
                '-',
                'zzz',
                '-1514851200000'
            ],
            [
                '240',
                'NT_YK',
                'A%sT',
                '796701600000'
            ],
            [
                '300',
                'Canada',
                'E%sT',
                '941335200000'
            ],
            [
                '360',
                'Canada',
                'C%sT',
                '972784800000'
            ],
            [
                '300',
                'Canada',
                'E%sT'
            ]
        ],
        'America/Iqaluit': [
            [
                '0',
                '-',
                'zzz',
                '-865296000000'
            ],
            [
                '300',
                'NT_YK',
                'E%sT',
                '941335200000'
            ],
            [
                '360',
                'Canada',
                'C%sT',
                '972784800000'
            ],
            [
                '300',
                'Canada',
                'E%sT'
            ]
        ],
        'America/Resolute': [
            [
                '0',
                '-',
                'zzz',
                '-704937600000'
            ],
            [
                '360',
                'NT_YK',
                'C%sT',
                '972784800000'
            ],
            [
                '300',
                '-',
                'EST',
                '986094000000'
            ],
            [
                '360',
                'Canada',
                'C%sT',
                '1162087200000'
            ],
            [
                '300',
                '-',
                'EST',
                '1173582000000'
            ],
            [
                '360',
                'Canada',
                'C%sT'
            ]
        ],
        'America/Rankin_Inlet': [
            [
                '0',
                '-',
                'zzz',
                '-378777600000'
            ],
            [
                '360',
                'NT_YK',
                'C%sT',
                '972784800000'
            ],
            [
                '300',
                '-',
                'EST',
                '986094000000'
            ],
            [
                '360',
                'Canada',
                'C%sT'
            ]
        ],
        'America/Cambridge_Bay': [
            [
                '0',
                '-',
                'zzz',
                '-1546387200000'
            ],
            [
                '420',
                'NT_YK',
                'M%sT',
                '941335200000'
            ],
            [
                '360',
                'Canada',
                'C%sT',
                '972784800000'
            ],
            [
                '300',
                '-',
                'EST',
                '973382400000'
            ],
            [
                '360',
                '-',
                'CST',
                '986094000000'
            ],
            [
                '420',
                'Canada',
                'M%sT'
            ]
        ],
        'America/Yellowknife': [
            [
                '0',
                '-',
                'zzz',
                '-1073088000000'
            ],
            [
                '420',
                'NT_YK',
                'M%sT',
                '347068800000'
            ],
            [
                '420',
                'Canada',
                'M%sT'
            ]
        ],
        'America/Inuvik': [
            [
                '0',
                '-',
                'zzz',
                '-505008000000'
            ],
            [
                '480',
                'NT_YK',
                'P%sT',
                '291780000000'
            ],
            [
                '420',
                'NT_YK',
                'M%sT',
                '347068800000'
            ],
            [
                '420',
                'Canada',
                'M%sT'
            ]
        ],
        'America/Whitehorse': [
            [
                '540.2',
                '-',
                'LMT',
                '-2189030400000'
            ],
            [
                '540',
                'NT_YK',
                'Y%sT',
                '-110584800000'
            ],
            [
                '480',
                'NT_YK',
                'P%sT',
                '347068800000'
            ],
            [
                '480',
                'Canada',
                'P%sT'
            ]
        ],
        'America/Dawson': [
            [
                '557.6666666666666',
                '-',
                'LMT',
                '-2189030400000'
            ],
            [
                '540',
                'NT_YK',
                'Y%sT',
                '120614400000'
            ],
            [
                '480',
                'NT_YK',
                'P%sT',
                '347068800000'
            ],
            [
                '480',
                'Canada',
                'P%sT'
            ]
        ],
        'America/Cancun': [
            [
                '347.06666666666666',
                '-',
                'LMT',
                '-1514764024000'
            ],
            [
                '360',
                '-',
                'CST',
                '377913600000'
            ],
            [
                '300',
                'Mexico',
                'E%sT',
                '902023200000'
            ],
            [
                '360',
                'Mexico',
                'C%sT'
            ]
        ],
        'America/Merida': [
            [
                '358.4666666666667',
                '-',
                'LMT',
                '-1514764708000'
            ],
            [
                '360',
                '-',
                'CST',
                '377913600000'
            ],
            [
                '300',
                '-',
                'EST',
                '407635200000'
            ],
            [
                '360',
                'Mexico',
                'C%sT'
            ]
        ],
        'America/Matamoros': [
            [
                '400',
                '-',
                'LMT',
                '-1514767200000'
            ],
            [
                '360',
                '-',
                'CST',
                '599529600000'
            ],
            [
                '360',
                'US',
                'C%sT',
                '631065600000'
            ],
            [
                '360',
                'Mexico',
                'C%sT',
                '1293753600000'
            ],
            [
                '360',
                'US',
                'C%sT'
            ]
        ],
        'America/Monterrey': [
            [
                '401.2666666666667',
                '-',
                'LMT',
                '-1514767276000'
            ],
            [
                '360',
                '-',
                'CST',
                '599529600000'
            ],
            [
                '360',
                'US',
                'C%sT',
                '631065600000'
            ],
            [
                '360',
                'Mexico',
                'C%sT'
            ]
        ],
        'America/Mexico_City': [
            [
                '396.6',
                '-',
                'LMT',
                '-1514763396000'
            ],
            [
                '420',
                '-',
                'MST',
                '-1343091600000'
            ],
            [
                '360',
                '-',
                'CST',
                '-1234828800000'
            ],
            [
                '420',
                '-',
                'MST',
                '-1220317200000'
            ],
            [
                '360',
                '-',
                'CST',
                '-1207180800000'
            ],
            [
                '420',
                '-',
                'MST',
                '-1191369600000'
            ],
            [
                '360',
                'Mexico',
                'C%sT',
                '1001815200000'
            ],
            [
                '360',
                '-',
                'CST',
                '1014163200000'
            ],
            [
                '360',
                'Mexico',
                'C%sT'
            ]
        ],
        'America/Ojinaga': [
            [
                '417.6666666666667',
                '-',
                'LMT',
                '-1514764660000'
            ],
            [
                '420',
                '-',
                'MST',
                '-1343091600000'
            ],
            [
                '360',
                '-',
                'CST',
                '-1234828800000'
            ],
            [
                '420',
                '-',
                'MST',
                '-1220317200000'
            ],
            [
                '360',
                '-',
                'CST',
                '-1207180800000'
            ],
            [
                '420',
                '-',
                'MST',
                '-1191369600000'
            ],
            [
                '360',
                '-',
                'CST',
                '851990400000'
            ],
            [
                '360',
                'Mexico',
                'C%sT',
                '915062400000'
            ],
            [
                '360',
                '-',
                'CST',
                '891399600000'
            ],
            [
                '420',
                'Mexico',
                'M%sT',
                '1293753600000'
            ],
            [
                '420',
                'US',
                'M%sT'
            ]
        ],
        'America/Chihuahua': [
            [
                '424.3333333333333',
                '-',
                'LMT',
                '-1514765060000'
            ],
            [
                '420',
                '-',
                'MST',
                '-1343091600000'
            ],
            [
                '360',
                '-',
                'CST',
                '-1234828800000'
            ],
            [
                '420',
                '-',
                'MST',
                '-1220317200000'
            ],
            [
                '360',
                '-',
                'CST',
                '-1207180800000'
            ],
            [
                '420',
                '-',
                'MST',
                '-1191369600000'
            ],
            [
                '360',
                '-',
                'CST',
                '851990400000'
            ],
            [
                '360',
                'Mexico',
                'C%sT',
                '915062400000'
            ],
            [
                '360',
                '-',
                'CST',
                '891399600000'
            ],
            [
                '420',
                'Mexico',
                'M%sT'
            ]
        ],
        'America/Hermosillo': [
            [
                '443.8666666666667',
                '-',
                'LMT',
                '-1514766232000'
            ],
            [
                '420',
                '-',
                'MST',
                '-1343091600000'
            ],
            [
                '360',
                '-',
                'CST',
                '-1234828800000'
            ],
            [
                '420',
                '-',
                'MST',
                '-1220317200000'
            ],
            [
                '360',
                '-',
                'CST',
                '-1207180800000'
            ],
            [
                '420',
                '-',
                'MST',
                '-1191369600000'
            ],
            [
                '360',
                '-',
                'CST',
                '-873849600000'
            ],
            [
                '420',
                '-',
                'MST',
                '-661564800000'
            ],
            [
                '480',
                '-',
                'PST',
                '31449600000'
            ],
            [
                '420',
                'Mexico',
                'M%sT',
                '946598400000'
            ],
            [
                '420',
                '-',
                'MST'
            ]
        ],
        'America/Mazatlan': [
            [
                '425.6666666666667',
                '-',
                'LMT',
                '-1514765140000'
            ],
            [
                '420',
                '-',
                'MST',
                '-1343091600000'
            ],
            [
                '360',
                '-',
                'CST',
                '-1234828800000'
            ],
            [
                '420',
                '-',
                'MST',
                '-1220317200000'
            ],
            [
                '360',
                '-',
                'CST',
                '-1207180800000'
            ],
            [
                '420',
                '-',
                'MST',
                '-1191369600000'
            ],
            [
                '360',
                '-',
                'CST',
                '-873849600000'
            ],
            [
                '420',
                '-',
                'MST',
                '-661564800000'
            ],
            [
                '480',
                '-',
                'PST',
                '31449600000'
            ],
            [
                '420',
                'Mexico',
                'M%sT'
            ]
        ],
        'America/Bahia_Banderas': [
            [
                '421',
                '-',
                'LMT',
                '-1514764860000'
            ],
            [
                '420',
                '-',
                'MST',
                '-1343091600000'
            ],
            [
                '360',
                '-',
                'CST',
                '-1234828800000'
            ],
            [
                '420',
                '-',
                'MST',
                '-1220317200000'
            ],
            [
                '360',
                '-',
                'CST',
                '-1207180800000'
            ],
            [
                '420',
                '-',
                'MST',
                '-1191369600000'
            ],
            [
                '360',
                '-',
                'CST',
                '-873849600000'
            ],
            [
                '420',
                '-',
                'MST',
                '-661564800000'
            ],
            [
                '480',
                '-',
                'PST',
                '31449600000'
            ],
            [
                '420',
                'Mexico',
                'M%sT',
                '1270346400000'
            ],
            [
                '360',
                'Mexico',
                'C%sT'
            ]
        ],
        'America/Tijuana': [
            [
                '468.06666666666666',
                '-',
                'LMT',
                '-1514764084000'
            ],
            [
                '420',
                '-',
                'MST',
                '-1420156800000'
            ],
            [
                '480',
                '-',
                'PST',
                '-1343091600000'
            ],
            [
                '420',
                '-',
                'MST',
                '-1234828800000'
            ],
            [
                '480',
                '-',
                'PST',
                '-1222992000000'
            ],
            [
                '480',
                '1:00',
                'PDT',
                '-1207267200000'
            ],
            [
                '480',
                '-',
                'PST',
                '-873849600000'
            ],
            [
                '480',
                '1:00',
                'PWT',
                '-769395600000'
            ],
            [
                '480',
                '1:00',
                'PPT',
                '-761702400000'
            ],
            [
                '480',
                '-',
                'PST',
                '-686102400000'
            ],
            [
                '480',
                '1:00',
                'PDT',
                '-661564800000'
            ],
            [
                '480',
                '-',
                'PST',
                '-473472000000'
            ],
            [
                '480',
                'CA',
                'P%sT',
                '-252547200000'
            ],
            [
                '480',
                '-',
                'PST',
                '220838400000'
            ],
            [
                '480',
                'US',
                'P%sT',
                '851990400000'
            ],
            [
                '480',
                'Mexico',
                'P%sT',
                '1009756800000'
            ],
            [
                '480',
                'US',
                'P%sT',
                '1014163200000'
            ],
            [
                '480',
                'Mexico',
                'P%sT',
                '1293753600000'
            ],
            [
                '480',
                'US',
                'P%sT'
            ]
        ],
        'America/Santa_Isabel': [
            [
                '459.4666666666667',
                '-',
                'LMT',
                '-1514763568000'
            ],
            [
                '420',
                '-',
                'MST',
                '-1420156800000'
            ],
            [
                '480',
                '-',
                'PST',
                '-1343091600000'
            ],
            [
                '420',
                '-',
                'MST',
                '-1234828800000'
            ],
            [
                '480',
                '-',
                'PST',
                '-1222992000000'
            ],
            [
                '480',
                '1:00',
                'PDT',
                '-1207267200000'
            ],
            [
                '480',
                '-',
                'PST',
                '-873849600000'
            ],
            [
                '480',
                '1:00',
                'PWT',
                '-769395600000'
            ],
            [
                '480',
                '1:00',
                'PPT',
                '-761702400000'
            ],
            [
                '480',
                '-',
                'PST',
                '-686102400000'
            ],
            [
                '480',
                '1:00',
                'PDT',
                '-661564800000'
            ],
            [
                '480',
                '-',
                'PST',
                '-473472000000'
            ],
            [
                '480',
                'CA',
                'P%sT',
                '-252547200000'
            ],
            [
                '480',
                '-',
                'PST',
                '220838400000'
            ],
            [
                '480',
                'US',
                'P%sT',
                '851990400000'
            ],
            [
                '480',
                'Mexico',
                'P%sT',
                '1009756800000'
            ],
            [
                '480',
                'US',
                'P%sT',
                '1014163200000'
            ],
            [
                '480',
                'Mexico',
                'P%sT'
            ]
        ],
        'America/Antigua': [
            [
                '247.2',
                '-',
                'LMT',
                '-1825113600000'
            ],
            [
                '300',
                '-',
                'EST',
                '-568166400000'
            ],
            [
                '240',
                '-',
                'AST'
            ]
        ],
        'America/Nassau': [
            [
                '309.5',
                '-',
                'LMT',
                '-1825113600000'
            ],
            [
                '300',
                'Bahamas',
                'E%sT',
                '220838400000'
            ],
            [
                '300',
                'US',
                'E%sT'
            ]
        ],
        'America/Barbados': [
            [
                '238.48333333333335',
                '-',
                'LMT',
                '-1420156800000'
            ],
            [
                '238.48333333333335',
                '-',
                'BMT',
                '-1167696000000'
            ],
            [
                '240',
                'Barb',
                'A%sT'
            ]
        ],
        'America/Belize': [
            [
                '352.8',
                '-',
                'LMT',
                '-1822521600000'
            ],
            [
                '360',
                'Belize',
                'C%sT'
            ]
        ],
        'Atlantic/Bermuda': [
            [
                '259.3',
                '-',
                'LMT',
                '-1262296800000'
            ],
            [
                '240',
                '-',
                'AST',
                '136346400000'
            ],
            [
                '240',
                'Canada',
                'A%sT',
                '220838400000'
            ],
            [
                '240',
                'US',
                'A%sT'
            ]
        ],
        'America/Cayman': [
            [
                '325.5333333333333',
                '-',
                'LMT',
                '-2493072000000'
            ],
            [
                '307.18333333333334',
                '-',
                'KMT',
                '-1827705600000'
            ],
            [
                '300',
                '-',
                'EST'
            ]
        ],
        'America/Costa_Rica': [
            [
                '336.2166666666667',
                '-',
                'LMT',
                '-2493072000000'
            ],
            [
                '336.2166666666667',
                '-',
                'SJMT',
                '-1545091200000'
            ],
            [
                '360',
                'CR',
                'C%sT'
            ]
        ],
        'America/Havana': [
            [
                '329.4666666666667',
                '-',
                'LMT',
                '-2493072000000'
            ],
            [
                '329.6',
                '-',
                'HMT',
                '-1402833600000'
            ],
            [
                '300',
                'Cuba',
                'C%sT'
            ]
        ],
        'America/Santo_Domingo': [
            [
                '279.6',
                '-',
                'LMT',
                '-2493072000000'
            ],
            [
                '280',
                '-',
                'SDMT',
                '-1159790400000'
            ],
            [
                '300',
                'DR',
                'E%sT',
                '152064000000'
            ],
            [
                '240',
                '-',
                'AST',
                '972784800000'
            ],
            [
                '300',
                'US',
                'E%sT',
                '975805200000'
            ],
            [
                '240',
                '-',
                'AST'
            ]
        ],
        'America/El_Salvador': [
            [
                '356.8',
                '-',
                'LMT',
                '-1514851200000'
            ],
            [
                '360',
                'Salv',
                'C%sT'
            ]
        ],
        'America/Guatemala': [
            [
                '362.06666666666666',
                '-',
                'LMT',
                '-1617062400000'
            ],
            [
                '360',
                'Guat',
                'C%sT'
            ]
        ],
        'America/Port-au-Prince': [
            [
                '289.3333333333333',
                '-',
                'LMT',
                '-2493072000000'
            ],
            [
                '289',
                '-',
                'PPMT',
                '-1670500800000'
            ],
            [
                '300',
                'Haiti',
                'E%sT'
            ]
        ],
        'America/Tegucigalpa': [
            [
                '348.8666666666667',
                '-',
                'LMT',
                '-1538524800000'
            ],
            [
                '360',
                'Hond',
                'C%sT'
            ]
        ],
        'America/Jamaica': [
            [
                '307.18333333333334',
                '-',
                'LMT',
                '-2493072000000'
            ],
            [
                '307.18333333333334',
                '-',
                'KMT',
                '-1827705600000'
            ],
            [
                '300',
                '-',
                'EST',
                '157680000000'
            ],
            [
                '300',
                'US',
                'E%sT',
                '473299200000'
            ],
            [
                '300',
                '-',
                'EST'
            ]
        ],
        'America/Martinique': [
            [
                '244.33333333333334',
                '-',
                'LMT',
                '-2493072000000'
            ],
            [
                '244.33333333333334',
                '-',
                'FFMT',
                '-1851552000000'
            ],
            [
                '240',
                '-',
                'AST',
                '323827200000'
            ],
            [
                '240',
                '1:00',
                'ADT',
                '338947200000'
            ],
            [
                '240',
                '-',
                'AST'
            ]
        ],
        'America/Managua': [
            [
                '345.1333333333333',
                '-',
                'LMT',
                '-2493072000000'
            ],
            [
                '345.2',
                '-',
                'MMT',
                '-1121126400000'
            ],
            [
                '360',
                '-',
                'CST',
                '105062400000'
            ],
            [
                '300',
                '-',
                'EST',
                '161740800000'
            ],
            [
                '360',
                'Nic',
                'C%sT',
                '694238400000'
            ],
            [
                '300',
                '-',
                'EST',
                '717292800000'
            ],
            [
                '360',
                '-',
                'CST',
                '757296000000'
            ],
            [
                '300',
                '-',
                'EST',
                '883526400000'
            ],
            [
                '360',
                'Nic',
                'C%sT'
            ]
        ],
        'America/Panama': [
            [
                '318.1333333333333',
                '-',
                'LMT',
                '-2493072000000'
            ],
            [
                '319.6',
                '-',
                'CMT',
                '-1946937600000'
            ],
            [
                '300',
                '-',
                'EST'
            ]
        ],
        'America/Puerto_Rico': [
            [
                '264.4166666666667',
                '-',
                'LMT',
                '-2233051200000'
            ],
            [
                '240',
                '-',
                'AST',
                '-873072000000'
            ],
            [
                '240',
                'US',
                'A%sT',
                '-725932800000'
            ],
            [
                '240',
                '-',
                'AST'
            ]
        ],
        'America/Miquelon': [
            [
                '224.66666666666666',
                '-',
                'LMT',
                '-1850342400000'
            ],
            [
                '240',
                '-',
                'AST',
                '325987200000'
            ],
            [
                '180',
                '-',
                'PMST',
                '567907200000'
            ],
            [
                '180',
                'Canada',
                'PM%sT'
            ]
        ],
        'America/Grand_Turk': [
            [
                '284.5333333333333',
                '-',
                'LMT',
                '-2493072000000'
            ],
            [
                '307.18333333333334',
                '-',
                'KMT',
                '-1827705600000'
            ],
            [
                '300',
                '-',
                'EST',
                '315446400000'
            ],
            [
                '300',
                'US',
                'E%sT',
                '1414893600000'
            ],
            [
                '240',
                '-',
                'AST'
            ]
        ],
        'US/Pacific-New': 'America/Los_Angeles',
        'America/Argentina/Buenos_Aires': [
            [
                '233.8',
                '-',
                'LMT',
                '-2372112000000'
            ],
            [
                '256.8',
                '-',
                'CMT',
                '-1567468800000'
            ],
            [
                '240',
                '-',
                'ART',
                '-1233446400000'
            ],
            [
                '240',
                'Arg',
                'AR%sT',
                '-7603200000'
            ],
            [
                '180',
                'Arg',
                'AR%sT',
                '938908800000'
            ],
            [
                '240',
                'Arg',
                'AR%sT',
                '952041600000'
            ],
            [
                '180',
                'Arg',
                'AR%sT'
            ]
        ],
        'America/Argentina/Cordoba': [
            [
                '256.8',
                '-',
                'LMT',
                '-2372112000000'
            ],
            [
                '256.8',
                '-',
                'CMT',
                '-1567468800000'
            ],
            [
                '240',
                '-',
                'ART',
                '-1233446400000'
            ],
            [
                '240',
                'Arg',
                'AR%sT',
                '-7603200000'
            ],
            [
                '180',
                'Arg',
                'AR%sT',
                '667958400000'
            ],
            [
                '240',
                '-',
                'WART',
                '687916800000'
            ],
            [
                '180',
                'Arg',
                'AR%sT',
                '938908800000'
            ],
            [
                '240',
                'Arg',
                'AR%sT',
                '952041600000'
            ],
            [
                '180',
                'Arg',
                'AR%sT'
            ]
        ],
        'America/Argentina/Salta': [
            [
                '261.66666666666663',
                '-',
                'LMT',
                '-2372112000000'
            ],
            [
                '256.8',
                '-',
                'CMT',
                '-1567468800000'
            ],
            [
                '240',
                '-',
                'ART',
                '-1233446400000'
            ],
            [
                '240',
                'Arg',
                'AR%sT',
                '-7603200000'
            ],
            [
                '180',
                'Arg',
                'AR%sT',
                '667958400000'
            ],
            [
                '240',
                '-',
                'WART',
                '687916800000'
            ],
            [
                '180',
                'Arg',
                'AR%sT',
                '938908800000'
            ],
            [
                '240',
                'Arg',
                'AR%sT',
                '952041600000'
            ],
            [
                '180',
                'Arg',
                'AR%sT',
                '1224288000000'
            ],
            [
                '180',
                '-',
                'ART'
            ]
        ],
        'America/Argentina/Tucuman': [
            [
                '260.8666666666667',
                '-',
                'LMT',
                '-2372112000000'
            ],
            [
                '256.8',
                '-',
                'CMT',
                '-1567468800000'
            ],
            [
                '240',
                '-',
                'ART',
                '-1233446400000'
            ],
            [
                '240',
                'Arg',
                'AR%sT',
                '-7603200000'
            ],
            [
                '180',
                'Arg',
                'AR%sT',
                '667958400000'
            ],
            [
                '240',
                '-',
                'WART',
                '687916800000'
            ],
            [
                '180',
                'Arg',
                'AR%sT',
                '938908800000'
            ],
            [
                '240',
                'Arg',
                'AR%sT',
                '952041600000'
            ],
            [
                '180',
                '-',
                'ART',
                '1086048000000'
            ],
            [
                '240',
                '-',
                'WART',
                '1087084800000'
            ],
            [
                '180',
                'Arg',
                'AR%sT'
            ]
        ],
        'America/Argentina/La_Rioja': [
            [
                '267.4',
                '-',
                'LMT',
                '-2372112000000'
            ],
            [
                '256.8',
                '-',
                'CMT',
                '-1567468800000'
            ],
            [
                '240',
                '-',
                'ART',
                '-1233446400000'
            ],
            [
                '240',
                'Arg',
                'AR%sT',
                '-7603200000'
            ],
            [
                '180',
                'Arg',
                'AR%sT',
                '667785600000'
            ],
            [
                '240',
                '-',
                'WART',
                '673574400000'
            ],
            [
                '180',
                'Arg',
                'AR%sT',
                '938908800000'
            ],
            [
                '240',
                'Arg',
                'AR%sT',
                '952041600000'
            ],
            [
                '180',
                '-',
                'ART',
                '1086048000000'
            ],
            [
                '240',
                '-',
                'WART',
                '1087689600000'
            ],
            [
                '180',
                'Arg',
                'AR%sT',
                '1224288000000'
            ],
            [
                '180',
                '-',
                'ART'
            ]
        ],
        'America/Argentina/San_Juan': [
            [
                '274.06666666666666',
                '-',
                'LMT',
                '-2372112000000'
            ],
            [
                '256.8',
                '-',
                'CMT',
                '-1567468800000'
            ],
            [
                '240',
                '-',
                'ART',
                '-1233446400000'
            ],
            [
                '240',
                'Arg',
                'AR%sT',
                '-7603200000'
            ],
            [
                '180',
                'Arg',
                'AR%sT',
                '667785600000'
            ],
            [
                '240',
                '-',
                'WART',
                '673574400000'
            ],
            [
                '180',
                'Arg',
                'AR%sT',
                '938908800000'
            ],
            [
                '240',
                'Arg',
                'AR%sT',
                '952041600000'
            ],
            [
                '180',
                '-',
                'ART',
                '1085961600000'
            ],
            [
                '240',
                '-',
                'WART',
                '1090713600000'
            ],
            [
                '180',
                'Arg',
                'AR%sT',
                '1224288000000'
            ],
            [
                '180',
                '-',
                'ART'
            ]
        ],
        'America/Argentina/Jujuy': [
            [
                '261.2',
                '-',
                'LMT',
                '-2372112000000'
            ],
            [
                '256.8',
                '-',
                'CMT',
                '-1567468800000'
            ],
            [
                '240',
                '-',
                'ART',
                '-1233446400000'
            ],
            [
                '240',
                'Arg',
                'AR%sT',
                '-7603200000'
            ],
            [
                '180',
                'Arg',
                'AR%sT',
                '636508800000'
            ],
            [
                '240',
                '-',
                'WART',
                '657072000000'
            ],
            [
                '240',
                '1:00',
                'WARST',
                '669168000000'
            ],
            [
                '240',
                '-',
                'WART',
                '686707200000'
            ],
            [
                '180',
                '1:00',
                'ARST',
                '725760000000'
            ],
            [
                '180',
                'Arg',
                'AR%sT',
                '938908800000'
            ],
            [
                '240',
                'Arg',
                'AR%sT',
                '952041600000'
            ],
            [
                '180',
                'Arg',
                'AR%sT',
                '1224288000000'
            ],
            [
                '180',
                '-',
                'ART'
            ]
        ],
        'America/Argentina/Catamarca': [
            [
                '263.1333333333333',
                '-',
                'LMT',
                '-2372112000000'
            ],
            [
                '256.8',
                '-',
                'CMT',
                '-1567468800000'
            ],
            [
                '240',
                '-',
                'ART',
                '-1233446400000'
            ],
            [
                '240',
                'Arg',
                'AR%sT',
                '-7603200000'
            ],
            [
                '180',
                'Arg',
                'AR%sT',
                '667958400000'
            ],
            [
                '240',
                '-',
                'WART',
                '687916800000'
            ],
            [
                '180',
                'Arg',
                'AR%sT',
                '938908800000'
            ],
            [
                '240',
                'Arg',
                'AR%sT',
                '952041600000'
            ],
            [
                '180',
                '-',
                'ART',
                '1086048000000'
            ],
            [
                '240',
                '-',
                'WART',
                '1087689600000'
            ],
            [
                '180',
                'Arg',
                'AR%sT',
                '1224288000000'
            ],
            [
                '180',
                '-',
                'ART'
            ]
        ],
        'America/Argentina/Mendoza': [
            [
                '275.2666666666667',
                '-',
                'LMT',
                '-2372112000000'
            ],
            [
                '256.8',
                '-',
                'CMT',
                '-1567468800000'
            ],
            [
                '240',
                '-',
                'ART',
                '-1233446400000'
            ],
            [
                '240',
                'Arg',
                'AR%sT',
                '-7603200000'
            ],
            [
                '180',
                'Arg',
                'AR%sT',
                '636508800000'
            ],
            [
                '240',
                '-',
                'WART',
                '655948800000'
            ],
            [
                '240',
                '1:00',
                'WARST',
                '667785600000'
            ],
            [
                '240',
                '-',
                'WART',
                '687484800000'
            ],
            [
                '240',
                '1:00',
                'WARST',
                '699408000000'
            ],
            [
                '240',
                '-',
                'WART',
                '719366400000'
            ],
            [
                '180',
                'Arg',
                'AR%sT',
                '938908800000'
            ],
            [
                '240',
                'Arg',
                'AR%sT',
                '952041600000'
            ],
            [
                '180',
                '-',
                'ART',
                '1085270400000'
            ],
            [
                '240',
                '-',
                'WART',
                '1096156800000'
            ],
            [
                '180',
                'Arg',
                'AR%sT',
                '1224288000000'
            ],
            [
                '180',
                '-',
                'ART'
            ]
        ],
        'America/Argentina/San_Luis': [
            [
                '265.4',
                '-',
                'LMT',
                '-2372112000000'
            ],
            [
                '256.8',
                '-',
                'CMT',
                '-1567468800000'
            ],
            [
                '240',
                '-',
                'ART',
                '-1233446400000'
            ],
            [
                '240',
                'Arg',
                'AR%sT',
                '-7603200000'
            ],
            [
                '180',
                'Arg',
                'AR%sT',
                '662601600000'
            ],
            [
                '180',
                '1:00',
                'ARST',
                '637372800000'
            ],
            [
                '240',
                '-',
                'WART',
                '655948800000'
            ],
            [
                '240',
                '1:00',
                'WARST',
                '667785600000'
            ],
            [
                '240',
                '-',
                'WART',
                '675734400000'
            ],
            [
                '180',
                '-',
                'ART',
                '938908800000'
            ],
            [
                '240',
                '1:00',
                'WARST',
                '952041600000'
            ],
            [
                '180',
                '-',
                'ART',
                '1085961600000'
            ],
            [
                '240',
                '-',
                'WART',
                '1090713600000'
            ],
            [
                '180',
                'Arg',
                'AR%sT',
                '1200873600000'
            ],
            [
                '240',
                'SanLuis',
                'WAR%sT',
                '1255219200000'
            ],
            [
                '180',
                '-',
                'ART'
            ]
        ],
        'America/Argentina/Rio_Gallegos': [
            [
                '276.8666666666667',
                '-',
                'LMT',
                '-2372112000000'
            ],
            [
                '256.8',
                '-',
                'CMT',
                '-1567468800000'
            ],
            [
                '240',
                '-',
                'ART',
                '-1233446400000'
            ],
            [
                '240',
                'Arg',
                'AR%sT',
                '-7603200000'
            ],
            [
                '180',
                'Arg',
                'AR%sT',
                '938908800000'
            ],
            [
                '240',
                'Arg',
                'AR%sT',
                '952041600000'
            ],
            [
                '180',
                '-',
                'ART',
                '1086048000000'
            ],
            [
                '240',
                '-',
                'WART',
                '1087689600000'
            ],
            [
                '180',
                'Arg',
                'AR%sT',
                '1224288000000'
            ],
            [
                '180',
                '-',
                'ART'
            ]
        ],
        'America/Argentina/Ushuaia': [
            [
                '273.2',
                '-',
                'LMT',
                '-2372112000000'
            ],
            [
                '256.8',
                '-',
                'CMT',
                '-1567468800000'
            ],
            [
                '240',
                '-',
                'ART',
                '-1233446400000'
            ],
            [
                '240',
                'Arg',
                'AR%sT',
                '-7603200000'
            ],
            [
                '180',
                'Arg',
                'AR%sT',
                '938908800000'
            ],
            [
                '240',
                'Arg',
                'AR%sT',
                '952041600000'
            ],
            [
                '180',
                '-',
                'ART',
                '1085875200000'
            ],
            [
                '240',
                '-',
                'WART',
                '1087689600000'
            ],
            [
                '180',
                'Arg',
                'AR%sT',
                '1224288000000'
            ],
            [
                '180',
                '-',
                'ART'
            ]
        ],
        'America/Aruba': 'America/Curacao',
        'America/La_Paz': [
            [
                '272.6',
                '-',
                'LMT',
                '-2493072000000'
            ],
            [
                '272.6',
                '-',
                'CMT',
                '-1205971200000'
            ],
            [
                '272.6',
                '1:00',
                'BOST',
                '-1192320000000'
            ],
            [
                '240',
                '-',
                'BOT'
            ]
        ],
        'America/Noronha': [
            [
                '129.66666666666669',
                '-',
                'LMT',
                '-1735776000000'
            ],
            [
                '120',
                'Brazil',
                'FN%sT',
                '653529600000'
            ],
            [
                '120',
                '-',
                'FNT',
                '938649600000'
            ],
            [
                '120',
                'Brazil',
                'FN%sT',
                '971568000000'
            ],
            [
                '120',
                '-',
                'FNT',
                '1000339200000'
            ],
            [
                '120',
                'Brazil',
                'FN%sT',
                '1033430400000'
            ],
            [
                '120',
                '-',
                'FNT'
            ]
        ],
        'America/Belem': [
            [
                '193.93333333333334',
                '-',
                'LMT',
                '-1735776000000'
            ],
            [
                '180',
                'Brazil',
                'BR%sT',
                '590025600000'
            ],
            [
                '180',
                '-',
                'BRT'
            ]
        ],
        'America/Santarem': [
            [
                '218.8',
                '-',
                'LMT',
                '-1735776000000'
            ],
            [
                '240',
                'Brazil',
                'AM%sT',
                '590025600000'
            ],
            [
                '240',
                '-',
                'AMT',
                '1214265600000'
            ],
            [
                '180',
                '-',
                'BRT'
            ]
        ],
        'America/Fortaleza': [
            [
                '154',
                '-',
                'LMT',
                '-1735776000000'
            ],
            [
                '180',
                'Brazil',
                'BR%sT',
                '653529600000'
            ],
            [
                '180',
                '-',
                'BRT',
                '938649600000'
            ],
            [
                '180',
                'Brazil',
                'BR%sT',
                '972172800000'
            ],
            [
                '180',
                '-',
                'BRT',
                '1000339200000'
            ],
            [
                '180',
                'Brazil',
                'BR%sT',
                '1033430400000'
            ],
            [
                '180',
                '-',
                'BRT'
            ]
        ],
        'America/Recife': [
            [
                '139.6',
                '-',
                'LMT',
                '-1735776000000'
            ],
            [
                '180',
                'Brazil',
                'BR%sT',
                '653529600000'
            ],
            [
                '180',
                '-',
                'BRT',
                '938649600000'
            ],
            [
                '180',
                'Brazil',
                'BR%sT',
                '971568000000'
            ],
            [
                '180',
                '-',
                'BRT',
                '1000339200000'
            ],
            [
                '180',
                'Brazil',
                'BR%sT',
                '1033430400000'
            ],
            [
                '180',
                '-',
                'BRT'
            ]
        ],
        'America/Araguaina': [
            [
                '192.8',
                '-',
                'LMT',
                '-1735776000000'
            ],
            [
                '180',
                'Brazil',
                'BR%sT',
                '653529600000'
            ],
            [
                '180',
                '-',
                'BRT',
                '811036800000'
            ],
            [
                '180',
                'Brazil',
                'BR%sT',
                '1064361600000'
            ],
            [
                '180',
                '-',
                'BRT',
                '1350777600000'
            ],
            [
                '180',
                'Brazil',
                'BR%sT',
                '1377993600000'
            ],
            [
                '180',
                '-',
                'BRT'
            ]
        ],
        'America/Maceio': [
            [
                '142.86666666666665',
                '-',
                'LMT',
                '-1735776000000'
            ],
            [
                '180',
                'Brazil',
                'BR%sT',
                '653529600000'
            ],
            [
                '180',
                '-',
                'BRT',
                '813542400000'
            ],
            [
                '180',
                'Brazil',
                'BR%sT',
                '841795200000'
            ],
            [
                '180',
                '-',
                'BRT',
                '938649600000'
            ],
            [
                '180',
                'Brazil',
                'BR%sT',
                '972172800000'
            ],
            [
                '180',
                '-',
                'BRT',
                '1000339200000'
            ],
            [
                '180',
                'Brazil',
                'BR%sT',
                '1033430400000'
            ],
            [
                '180',
                '-',
                'BRT'
            ]
        ],
        'America/Bahia': [
            [
                '154.06666666666666',
                '-',
                'LMT',
                '-1735776000000'
            ],
            [
                '180',
                'Brazil',
                'BR%sT',
                '1064361600000'
            ],
            [
                '180',
                '-',
                'BRT',
                '1318723200000'
            ],
            [
                '180',
                'Brazil',
                'BR%sT',
                '1350777600000'
            ],
            [
                '180',
                '-',
                'BRT'
            ]
        ],
        'America/Sao_Paulo': [
            [
                '186.46666666666667',
                '-',
                'LMT',
                '-1735776000000'
            ],
            [
                '180',
                'Brazil',
                'BR%sT',
                '-195436800000'
            ],
            [
                '180',
                '1:00',
                'BRST',
                '-157852800000'
            ],
            [
                '180',
                'Brazil',
                'BR%sT'
            ]
        ],
        'America/Campo_Grande': [
            [
                '218.46666666666667',
                '-',
                'LMT',
                '-1735776000000'
            ],
            [
                '240',
                'Brazil',
                'AM%sT'
            ]
        ],
        'America/Cuiaba': [
            [
                '224.33333333333334',
                '-',
                'LMT',
                '-1735776000000'
            ],
            [
                '240',
                'Brazil',
                'AM%sT',
                '1064361600000'
            ],
            [
                '240',
                '-',
                'AMT',
                '1096588800000'
            ],
            [
                '240',
                'Brazil',
                'AM%sT'
            ]
        ],
        'America/Porto_Velho': [
            [
                '255.6',
                '-',
                'LMT',
                '-1735776000000'
            ],
            [
                '240',
                'Brazil',
                'AM%sT',
                '590025600000'
            ],
            [
                '240',
                '-',
                'AMT'
            ]
        ],
        'America/Boa_Vista': [
            [
                '242.66666666666666',
                '-',
                'LMT',
                '-1735776000000'
            ],
            [
                '240',
                'Brazil',
                'AM%sT',
                '590025600000'
            ],
            [
                '240',
                '-',
                'AMT',
                '938649600000'
            ],
            [
                '240',
                'Brazil',
                'AM%sT',
                '971568000000'
            ],
            [
                '240',
                '-',
                'AMT'
            ]
        ],
        'America/Manaus': [
            [
                '240.06666666666666',
                '-',
                'LMT',
                '-1735776000000'
            ],
            [
                '240',
                'Brazil',
                'AM%sT',
                '590025600000'
            ],
            [
                '240',
                '-',
                'AMT',
                '749174400000'
            ],
            [
                '240',
                'Brazil',
                'AM%sT',
                '780192000000'
            ],
            [
                '240',
                '-',
                'AMT'
            ]
        ],
        'America/Eirunepe': [
            [
                '279.4666666666667',
                '-',
                'LMT',
                '-1735776000000'
            ],
            [
                '300',
                'Brazil',
                'AC%sT',
                '590025600000'
            ],
            [
                '300',
                '-',
                'ACT',
                '749174400000'
            ],
            [
                '300',
                'Brazil',
                'AC%sT',
                '780192000000'
            ],
            [
                '300',
                '-',
                'ACT',
                '1214265600000'
            ],
            [
                '240',
                '-',
                'AMT',
                '1384041600000'
            ],
            [
                '300',
                '-',
                'ACT'
            ]
        ],
        'America/Rio_Branco': [
            [
                '271.2',
                '-',
                'LMT',
                '-1735776000000'
            ],
            [
                '300',
                'Brazil',
                'AC%sT',
                '590025600000'
            ],
            [
                '300',
                '-',
                'ACT',
                '1214265600000'
            ],
            [
                '240',
                '-',
                'AMT',
                '1384041600000'
            ],
            [
                '300',
                '-',
                'ACT'
            ]
        ],
        'America/Santiago': [
            [
                '282.7666666666667',
                '-',
                'LMT',
                '-2493072000000'
            ],
            [
                '282.7666666666667',
                '-',
                'SMT',
                '-1862006400000'
            ],
            [
                '300',
                '-',
                'CLT',
                '-1688428800000'
            ],
            [
                '282.7666666666667',
                '-',
                'SMT',
                '-1620000000000'
            ],
            [
                '240',
                '-',
                'CLT',
                '-1593820800000'
            ],
            [
                '282.7666666666667',
                '-',
                'SMT',
                '-1336003200000'
            ],
            [
                '300',
                'Chile',
                'CL%sT',
                '-713664000000'
            ],
            [
                '240',
                'Chile',
                'CL%sT'
            ]
        ],
        'Pacific/Easter': [
            [
                '437.7333333333333',
                '-',
                'LMT',
                '-2493072000000'
            ],
            [
                '437.4666666666667',
                '-',
                'EMT',
                '-1178150400000'
            ],
            [
                '420',
                'Chile',
                'EAS%sT',
                '384901200000'
            ],
            [
                '360',
                'Chile',
                'EAS%sT'
            ]
        ],
        'America/Bogota': [
            [
                '296.2666666666667',
                '-',
                'LMT',
                '-2707689600000'
            ],
            [
                '296.2666666666667',
                '-',
                'BMT',
                '-1739059200000'
            ],
            [
                '300',
                'CO',
                'CO%sT'
            ]
        ],
        'America/Curacao': [
            [
                '275.7833333333333',
                '-',
                'LMT',
                '-1826755200000'
            ],
            [
                '270',
                '-',
                'ANT',
                '-126316800000'
            ],
            [
                '240',
                '-',
                'AST'
            ]
        ],
        'America/Lower_Princes': 'America/Curacao',
        'America/Kralendijk': 'America/Curacao',
        'America/Guayaquil': [
            [
                '319.3333333333333',
                '-',
                'LMT',
                '-2493072000000'
            ],
            [
                '314',
                '-',
                'QMT',
                '-1199318400000'
            ],
            [
                '300',
                '-',
                'ECT'
            ]
        ],
        'Pacific/Galapagos': [
            [
                '358.4',
                '-',
                'LMT',
                '-1199318400000'
            ],
            [
                '300',
                '-',
                'ECT',
                '536371200000'
            ],
            [
                '360',
                '-',
                'GALT'
            ]
        ],
        'Atlantic/Stanley': [
            [
                '231.4',
                '-',
                'LMT',
                '-2493072000000'
            ],
            [
                '231.4',
                '-',
                'SMT',
                '-1824249600000'
            ],
            [
                '240',
                'Falk',
                'FK%sT',
                '420595200000'
            ],
            [
                '180',
                'Falk',
                'FK%sT',
                '495590400000'
            ],
            [
                '240',
                'Falk',
                'FK%sT',
                '1283652000000'
            ],
            [
                '180',
                '-',
                'FKST'
            ]
        ],
        'America/Cayenne': [
            [
                '209.33333333333334',
                '-',
                'LMT',
                '-1846281600000'
            ],
            [
                '240',
                '-',
                'GFT',
                '-71107200000'
            ],
            [
                '180',
                '-',
                'GFT'
            ]
        ],
        'America/Guyana': [
            [
                '232.66666666666666',
                '-',
                'LMT',
                '-1730592000000'
            ],
            [
                '225',
                '-',
                'GBGT',
                '-113702400000'
            ],
            [
                '225',
                '-',
                'GYT',
                '175996800000'
            ],
            [
                '180',
                '-',
                'GYT',
                '694137600000'
            ],
            [
                '240',
                '-',
                'GYT'
            ]
        ],
        'America/Asuncion': [
            [
                '230.66666666666666',
                '-',
                'LMT',
                '-2493072000000'
            ],
            [
                '230.66666666666666',
                '-',
                'AMT',
                '-1206403200000'
            ],
            [
                '240',
                '-',
                'PYT',
                '86745600000'
            ],
            [
                '180',
                '-',
                'PYT',
                '134006400000'
            ],
            [
                '240',
                'Para',
                'PY%sT'
            ]
        ],
        'America/Lima': [
            [
                '308.2',
                '-',
                'LMT',
                '-2493072000000'
            ],
            [
                '308.6',
                '-',
                'LMT',
                '-1938556800000'
            ],
            [
                '300',
                'Peru',
                'PE%sT'
            ]
        ],
        'Atlantic/South_Georgia': [
            [
                '146.13333333333335',
                '-',
                'LMT',
                '-2493072000000'
            ],
            [
                '120',
                '-',
                'GST'
            ]
        ],
        'America/Paramaribo': [
            [
                '220.66666666666666',
                '-',
                'LMT',
                '-1830470400000'
            ],
            [
                '220.86666666666665',
                '-',
                'PMT',
                '-1073088000000'
            ],
            [
                '220.6',
                '-',
                'PMT',
                '-765331200000'
            ],
            [
                '210',
                '-',
                'NEGT',
                '185673600000'
            ],
            [
                '210',
                '-',
                'SRT',
                '465436800000'
            ],
            [
                '180',
                '-',
                'SRT'
            ]
        ],
        'America/Port_of_Spain': [
            [
                '246.06666666666666',
                '-',
                'LMT',
                '-1825113600000'
            ],
            [
                '240',
                '-',
                'AST'
            ]
        ],
        'America/Anguilla': 'America/Port_of_Spain',
        'America/Dominica': 'America/Port_of_Spain',
        'America/Grenada': 'America/Port_of_Spain',
        'America/Guadeloupe': 'America/Port_of_Spain',
        'America/Marigot': 'America/Port_of_Spain',
        'America/Montserrat': 'America/Port_of_Spain',
        'America/St_Barthelemy': 'America/Port_of_Spain',
        'America/St_Kitts': 'America/Port_of_Spain',
        'America/St_Lucia': 'America/Port_of_Spain',
        'America/St_Thomas': 'America/Port_of_Spain',
        'America/St_Vincent': 'America/Port_of_Spain',
        'America/Tortola': 'America/Port_of_Spain',
        'America/Montevideo': [
            [
                '224.73333333333335',
                '-',
                'LMT',
                '-2256681600000'
            ],
            [
                '224.73333333333335',
                '-',
                'MMT',
                '-1567468800000'
            ],
            [
                '210',
                'Uruguay',
                'UY%sT',
                '-853632000000'
            ],
            [
                '180',
                'Uruguay',
                'UY%sT'
            ]
        ],
        'America/Caracas': [
            [
                '267.7333333333333',
                '-',
                'LMT',
                '-2493072000000'
            ],
            [
                '267.6666666666667',
                '-',
                'CMT',
                '-1826755200000'
            ],
            [
                '270',
                '-',
                'VET',
                '-126316800000'
            ],
            [
                '240',
                '-',
                'VET',
                '1197169200000'
            ],
            [
                '270',
                '-',
                'VET'
            ]
        ]
    };
    kendo.timezone.rules = {
        'Algeria': [
            [
                '1916',
                'only',
                '-',
                'Jun',
                '14',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1916',
                '1919',
                '-',
                'Oct',
                'Sun>=1',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1917',
                'only',
                '-',
                'Mar',
                '24',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1918',
                'only',
                '-',
                'Mar',
                '9',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1919',
                'only',
                '-',
                'Mar',
                '1',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1920',
                'only',
                '-',
                'Feb',
                '14',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1920',
                'only',
                '-',
                'Oct',
                '23',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1921',
                'only',
                '-',
                'Mar',
                '14',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1921',
                'only',
                '-',
                'Jun',
                '21',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1939',
                'only',
                '-',
                'Sep',
                '11',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1939',
                'only',
                '-',
                'Nov',
                '19',
                [
                    '1',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1944',
                '1945',
                '-',
                'Apr',
                'Mon>=1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1944',
                'only',
                '-',
                'Oct',
                '8',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1945',
                'only',
                '-',
                'Sep',
                '16',
                [
                    '1',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1971',
                'only',
                '-',
                'Apr',
                '25',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1971',
                'only',
                '-',
                'Sep',
                '26',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1977',
                'only',
                '-',
                'May',
                '6',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1977',
                'only',
                '-',
                'Oct',
                '21',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1978',
                'only',
                '-',
                'Mar',
                '24',
                [
                    '1',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1978',
                'only',
                '-',
                'Sep',
                '22',
                [
                    '3',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1980',
                'only',
                '-',
                'Apr',
                '25',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1980',
                'only',
                '-',
                'Oct',
                '31',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ]
        ],
        'Egypt': [
            [
                '1940',
                'only',
                '-',
                'Jul',
                '15',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1940',
                'only',
                '-',
                'Oct',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1941',
                'only',
                '-',
                'Apr',
                '15',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1941',
                'only',
                '-',
                'Sep',
                '16',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1942',
                '1944',
                '-',
                'Apr',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1942',
                'only',
                '-',
                'Oct',
                '27',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1943',
                '1945',
                '-',
                'Nov',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1945',
                'only',
                '-',
                'Apr',
                '16',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1957',
                'only',
                '-',
                'May',
                '10',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1957',
                '1958',
                '-',
                'Oct',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1958',
                'only',
                '-',
                'May',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1959',
                '1981',
                '-',
                'May',
                '1',
                [
                    '1',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1959',
                '1965',
                '-',
                'Sep',
                '30',
                [
                    '3',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1966',
                '1994',
                '-',
                'Oct',
                '1',
                [
                    '3',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1982',
                'only',
                '-',
                'Jul',
                '25',
                [
                    '1',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1983',
                'only',
                '-',
                'Jul',
                '12',
                [
                    '1',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1984',
                '1988',
                '-',
                'May',
                '1',
                [
                    '1',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1989',
                'only',
                '-',
                'May',
                '6',
                [
                    '1',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1990',
                '1994',
                '-',
                'May',
                '1',
                [
                    '1',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1995',
                '2010',
                '-',
                'Apr',
                'lastFri',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1995',
                '2005',
                '-',
                'Sep',
                'lastThu',
                [
                    '24',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2006',
                'only',
                '-',
                'Sep',
                '21',
                [
                    '24',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2007',
                'only',
                '-',
                'Sep',
                'Thu>=1',
                [
                    '24',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2008',
                'only',
                '-',
                'Aug',
                'lastThu',
                [
                    '24',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2009',
                'only',
                '-',
                'Aug',
                '20',
                [
                    '24',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2010',
                'only',
                '-',
                'Aug',
                '10',
                [
                    '24',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2010',
                'only',
                '-',
                'Sep',
                '9',
                [
                    '24',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2010',
                'only',
                '-',
                'Sep',
                'lastThu',
                [
                    '24',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2014',
                'only',
                '-',
                'May',
                '15',
                [
                    '24',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2014',
                'only',
                '-',
                'Jun',
                '26',
                [
                    '24',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2014',
                'only',
                '-',
                'Jul',
                '31',
                [
                    '24',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2014',
                'max',
                '-',
                'Sep',
                'lastThu',
                [
                    '24',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2015',
                '2019',
                '-',
                'Apr',
                'lastFri',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '2015',
                'only',
                '-',
                'Jun',
                '11',
                [
                    '24',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2015',
                'only',
                '-',
                'Jul',
                '23',
                [
                    '24',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2016',
                'only',
                '-',
                'Jun',
                '2',
                [
                    '24',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2016',
                'only',
                '-',
                'Jul',
                '7',
                [
                    '24',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2017',
                'only',
                '-',
                'May',
                '25',
                [
                    '24',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2017',
                'only',
                '-',
                'Jun',
                '29',
                [
                    '24',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2018',
                'only',
                '-',
                'May',
                '10',
                [
                    '24',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2018',
                'only',
                '-',
                'Jun',
                '14',
                [
                    '24',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2019',
                'only',
                '-',
                'May',
                '2',
                [
                    '24',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2019',
                'only',
                '-',
                'Jun',
                '6',
                [
                    '24',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2020',
                'only',
                '-',
                'May',
                '28',
                [
                    '24',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2021',
                'only',
                '-',
                'May',
                '13',
                [
                    '24',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2022',
                'only',
                '-',
                'May',
                '5',
                [
                    '24',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2023',
                'max',
                '-',
                'Apr',
                'lastFri',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ]
        ],
        'Ghana': [
            [
                '1920',
                '1942',
                '-',
                'Sep',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '20',
                'GHST'
            ],
            [
                '1920',
                '1942',
                '-',
                'Dec',
                '31',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'GMT'
            ]
        ],
        'Libya': [
            [
                '1951',
                'only',
                '-',
                'Oct',
                '14',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1952',
                'only',
                '-',
                'Jan',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1953',
                'only',
                '-',
                'Oct',
                '9',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1954',
                'only',
                '-',
                'Jan',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1955',
                'only',
                '-',
                'Sep',
                '30',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1956',
                'only',
                '-',
                'Jan',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1982',
                '1984',
                '-',
                'Apr',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1982',
                '1985',
                '-',
                'Oct',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1985',
                'only',
                '-',
                'Apr',
                '6',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1986',
                'only',
                '-',
                'Apr',
                '4',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1986',
                'only',
                '-',
                'Oct',
                '3',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1987',
                '1989',
                '-',
                'Apr',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1987',
                '1989',
                '-',
                'Oct',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1997',
                'only',
                '-',
                'Apr',
                '4',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1997',
                'only',
                '-',
                'Oct',
                '4',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2013',
                'only',
                '-',
                'Mar',
                'lastFri',
                [
                    '1',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2013',
                'only',
                '-',
                'Oct',
                'lastFri',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ]
        ],
        'Mauritius': [
            [
                '1982',
                'only',
                '-',
                'Oct',
                '10',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1983',
                'only',
                '-',
                'Mar',
                '21',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2008',
                'only',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2009',
                'only',
                '-',
                'Mar',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ]
        ],
        'Morocco': [
            [
                '1939',
                'only',
                '-',
                'Sep',
                '12',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1939',
                'only',
                '-',
                'Nov',
                '19',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1940',
                'only',
                '-',
                'Feb',
                '25',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1945',
                'only',
                '-',
                'Nov',
                '18',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1950',
                'only',
                '-',
                'Jun',
                '11',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1950',
                'only',
                '-',
                'Oct',
                '29',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1967',
                'only',
                '-',
                'Jun',
                '3',
                [
                    '12',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1967',
                'only',
                '-',
                'Oct',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1974',
                'only',
                '-',
                'Jun',
                '24',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1974',
                'only',
                '-',
                'Sep',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1976',
                '1977',
                '-',
                'May',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1976',
                'only',
                '-',
                'Aug',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1977',
                'only',
                '-',
                'Sep',
                '28',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1978',
                'only',
                '-',
                'Jun',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1978',
                'only',
                '-',
                'Aug',
                '4',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2008',
                'only',
                '-',
                'Jun',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2008',
                'only',
                '-',
                'Sep',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2009',
                'only',
                '-',
                'Jun',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2009',
                'only',
                '-',
                'Aug',
                '21',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2010',
                'only',
                '-',
                'May',
                '2',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2010',
                'only',
                '-',
                'Aug',
                '8',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2011',
                'only',
                '-',
                'Apr',
                '3',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2011',
                'only',
                '-',
                'Jul',
                '31',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2012',
                '2013',
                '-',
                'Apr',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2012',
                'only',
                '-',
                'Sep',
                '30',
                [
                    '3',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2012',
                'only',
                '-',
                'Jul',
                '20',
                [
                    '3',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2012',
                'only',
                '-',
                'Aug',
                '20',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2013',
                'only',
                '-',
                'Jul',
                '7',
                [
                    '3',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2013',
                'only',
                '-',
                'Aug',
                '10',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2013',
                'max',
                '-',
                'Oct',
                'lastSun',
                [
                    '3',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2014',
                '2022',
                '-',
                'Mar',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2014',
                'only',
                '-',
                'Jun',
                '28',
                [
                    '3',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2014',
                'only',
                '-',
                'Aug',
                '2',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2015',
                'only',
                '-',
                'Jun',
                '13',
                [
                    '3',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2015',
                'only',
                '-',
                'Jul',
                '18',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2016',
                'only',
                '-',
                'Jun',
                '4',
                [
                    '3',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2016',
                'only',
                '-',
                'Jul',
                '9',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2017',
                'only',
                '-',
                'May',
                '20',
                [
                    '3',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2017',
                'only',
                '-',
                'Jul',
                '1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2018',
                'only',
                '-',
                'May',
                '12',
                [
                    '3',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2018',
                'only',
                '-',
                'Jun',
                '16',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2019',
                'only',
                '-',
                'May',
                '4',
                [
                    '3',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2019',
                'only',
                '-',
                'Jun',
                '8',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2020',
                'only',
                '-',
                'Apr',
                '18',
                [
                    '3',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2020',
                'only',
                '-',
                'May',
                '30',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2021',
                'only',
                '-',
                'Apr',
                '10',
                [
                    '3',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2021',
                'only',
                '-',
                'May',
                '15',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2022',
                'only',
                '-',
                'Apr',
                '2',
                [
                    '3',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2022',
                'only',
                '-',
                'May',
                '7',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2023',
                'only',
                '-',
                'Apr',
                '22',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2024',
                'only',
                '-',
                'Apr',
                '13',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2025',
                'only',
                '-',
                'Apr',
                '5',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2026',
                'max',
                '-',
                'Mar',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2035',
                'only',
                '-',
                'Oct',
                '27',
                [
                    '3',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2036',
                'only',
                '-',
                'Oct',
                '18',
                [
                    '3',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2037',
                'only',
                '-',
                'Oct',
                '10',
                [
                    '3',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ]
        ],
        'Namibia': [
            [
                '1994',
                'max',
                '-',
                'Sep',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1995',
                'max',
                '-',
                'Apr',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ]
        ],
        'SA': [
            [
                '1942',
                '1943',
                '-',
                'Sep',
                'Sun>=15',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                '-'
            ],
            [
                '1943',
                '1944',
                '-',
                'Mar',
                'Sun>=15',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ]
        ],
        'Sudan': [
            [
                '1970',
                'only',
                '-',
                'May',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1970',
                '1985',
                '-',
                'Oct',
                '15',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1971',
                'only',
                '-',
                'Apr',
                '30',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1972',
                '1985',
                '-',
                'Apr',
                'lastSun',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ]
        ],
        'Tunisia': [
            [
                '1939',
                'only',
                '-',
                'Apr',
                '15',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1939',
                'only',
                '-',
                'Nov',
                '18',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1940',
                'only',
                '-',
                'Feb',
                '25',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1941',
                'only',
                '-',
                'Oct',
                '6',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1942',
                'only',
                '-',
                'Mar',
                '9',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1942',
                'only',
                '-',
                'Nov',
                '2',
                [
                    '3',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1943',
                'only',
                '-',
                'Mar',
                '29',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1943',
                'only',
                '-',
                'Apr',
                '17',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1943',
                'only',
                '-',
                'Apr',
                '25',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1943',
                'only',
                '-',
                'Oct',
                '4',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1944',
                '1945',
                '-',
                'Apr',
                'Mon>=1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1944',
                'only',
                '-',
                'Oct',
                '8',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1945',
                'only',
                '-',
                'Sep',
                '16',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1977',
                'only',
                '-',
                'Apr',
                '30',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1977',
                'only',
                '-',
                'Sep',
                '24',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1978',
                'only',
                '-',
                'May',
                '1',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1978',
                'only',
                '-',
                'Oct',
                '1',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1988',
                'only',
                '-',
                'Jun',
                '1',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1988',
                '1990',
                '-',
                'Sep',
                'lastSun',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1989',
                'only',
                '-',
                'Mar',
                '26',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1990',
                'only',
                '-',
                'May',
                '1',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '2005',
                'only',
                '-',
                'May',
                '1',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '2005',
                'only',
                '-',
                'Sep',
                '30',
                [
                    '1',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '2006',
                '2008',
                '-',
                'Mar',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '2006',
                '2008',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ]
        ],
        'ArgAQ': [
            [
                '1964',
                '1966',
                '-',
                'Mar',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1964',
                '1966',
                '-',
                'Oct',
                '15',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1967',
                'only',
                '-',
                'Apr',
                '2',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1967',
                '1968',
                '-',
                'Oct',
                'Sun>=1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1968',
                '1969',
                '-',
                'Apr',
                'Sun>=1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1974',
                'only',
                '-',
                'Jan',
                '23',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1974',
                'only',
                '-',
                'May',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ]
        ],
        'ChileAQ': [
            [
                '1972',
                '1986',
                '-',
                'Mar',
                'Sun>=9',
                [
                    '3',
                    '0',
                    '0',
                    'u'
                ],
                '0',
                '-'
            ],
            [
                '1974',
                '1987',
                '-',
                'Oct',
                'Sun>=9',
                [
                    '4',
                    '0',
                    '0',
                    'u'
                ],
                '60',
                'S'
            ],
            [
                '1987',
                'only',
                '-',
                'Apr',
                '12',
                [
                    '3',
                    '0',
                    '0',
                    'u'
                ],
                '0',
                '-'
            ],
            [
                '1988',
                '1989',
                '-',
                'Mar',
                'Sun>=9',
                [
                    '3',
                    '0',
                    '0',
                    'u'
                ],
                '0',
                '-'
            ],
            [
                '1988',
                'only',
                '-',
                'Oct',
                'Sun>=1',
                [
                    '4',
                    '0',
                    '0',
                    'u'
                ],
                '60',
                'S'
            ],
            [
                '1989',
                'only',
                '-',
                'Oct',
                'Sun>=9',
                [
                    '4',
                    '0',
                    '0',
                    'u'
                ],
                '60',
                'S'
            ],
            [
                '1990',
                'only',
                '-',
                'Mar',
                '18',
                [
                    '3',
                    '0',
                    '0',
                    'u'
                ],
                '0',
                '-'
            ],
            [
                '1990',
                'only',
                '-',
                'Sep',
                '16',
                [
                    '4',
                    '0',
                    '0',
                    'u'
                ],
                '60',
                'S'
            ],
            [
                '1991',
                '1996',
                '-',
                'Mar',
                'Sun>=9',
                [
                    '3',
                    '0',
                    '0',
                    'u'
                ],
                '0',
                '-'
            ],
            [
                '1991',
                '1997',
                '-',
                'Oct',
                'Sun>=9',
                [
                    '4',
                    '0',
                    '0',
                    'u'
                ],
                '60',
                'S'
            ],
            [
                '1997',
                'only',
                '-',
                'Mar',
                '30',
                [
                    '3',
                    '0',
                    '0',
                    'u'
                ],
                '0',
                '-'
            ],
            [
                '1998',
                'only',
                '-',
                'Mar',
                'Sun>=9',
                [
                    '3',
                    '0',
                    '0',
                    'u'
                ],
                '0',
                '-'
            ],
            [
                '1998',
                'only',
                '-',
                'Sep',
                '27',
                [
                    '4',
                    '0',
                    '0',
                    'u'
                ],
                '60',
                'S'
            ],
            [
                '1999',
                'only',
                '-',
                'Apr',
                '4',
                [
                    '3',
                    '0',
                    '0',
                    'u'
                ],
                '0',
                '-'
            ],
            [
                '1999',
                '2010',
                '-',
                'Oct',
                'Sun>=9',
                [
                    '4',
                    '0',
                    '0',
                    'u'
                ],
                '60',
                'S'
            ],
            [
                '2000',
                '2007',
                '-',
                'Mar',
                'Sun>=9',
                [
                    '3',
                    '0',
                    '0',
                    'u'
                ],
                '0',
                '-'
            ],
            [
                '2008',
                'only',
                '-',
                'Mar',
                '30',
                [
                    '3',
                    '0',
                    '0',
                    'u'
                ],
                '0',
                '-'
            ],
            [
                '2009',
                'only',
                '-',
                'Mar',
                'Sun>=9',
                [
                    '3',
                    '0',
                    '0',
                    'u'
                ],
                '0',
                '-'
            ],
            [
                '2010',
                'only',
                '-',
                'Apr',
                'Sun>=1',
                [
                    '3',
                    '0',
                    '0',
                    'u'
                ],
                '0',
                '-'
            ],
            [
                '2011',
                'only',
                '-',
                'May',
                'Sun>=2',
                [
                    '3',
                    '0',
                    '0',
                    'u'
                ],
                '0',
                '-'
            ],
            [
                '2011',
                'only',
                '-',
                'Aug',
                'Sun>=16',
                [
                    '4',
                    '0',
                    '0',
                    'u'
                ],
                '60',
                'S'
            ],
            [
                '2012',
                'max',
                '-',
                'Apr',
                'Sun>=23',
                [
                    '3',
                    '0',
                    '0',
                    'u'
                ],
                '0',
                '-'
            ],
            [
                '2012',
                'max',
                '-',
                'Sep',
                'Sun>=2',
                [
                    '4',
                    '0',
                    '0',
                    'u'
                ],
                '60',
                'S'
            ]
        ],
        'Troll': [
            [
                '2005',
                'max',
                '-',
                'Mar',
                'lastSun',
                [
                    '1',
                    '0',
                    '0',
                    'u'
                ],
                '120',
                'CEST'
            ],
            [
                '2004',
                'max',
                '-',
                'Oct',
                'lastSun',
                [
                    '1',
                    '0',
                    '0',
                    'u'
                ],
                '0',
                'UTC'
            ]
        ],
        'EUAsia': [
            [
                '1981',
                'max',
                '-',
                'Mar',
                'lastSun',
                [
                    '1',
                    '0',
                    '0',
                    'u'
                ],
                '60',
                'S'
            ],
            [
                '1979',
                '1995',
                '-',
                'Sep',
                'lastSun',
                [
                    '1',
                    '0',
                    '0',
                    'u'
                ],
                '0',
                '-'
            ],
            [
                '1996',
                'max',
                '-',
                'Oct',
                'lastSun',
                [
                    '1',
                    '0',
                    '0',
                    'u'
                ],
                '0',
                '-'
            ]
        ],
        'E-EurAsia': [
            [
                '1981',
                'max',
                '-',
                'Mar',
                'lastSun',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1979',
                '1995',
                '-',
                'Sep',
                'lastSun',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1996',
                'max',
                '-',
                'Oct',
                'lastSun',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ]
        ],
        'RussiaAsia': [
            [
                '1981',
                '1984',
                '-',
                'Apr',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1981',
                '1983',
                '-',
                'Oct',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1984',
                '1991',
                '-',
                'Sep',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1985',
                '1991',
                '-',
                'Mar',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1992',
                'only',
                '-',
                'Mar',
                'lastSat',
                [
                    '23',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1992',
                'only',
                '-',
                'Sep',
                'lastSat',
                [
                    '23',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1993',
                'max',
                '-',
                'Mar',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1993',
                '1995',
                '-',
                'Sep',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1996',
                'max',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ]
        ],
        'Azer': [
            [
                '1997',
                'max',
                '-',
                'Mar',
                'lastSun',
                [
                    '4',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1997',
                'max',
                '-',
                'Oct',
                'lastSun',
                [
                    '5',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ]
        ],
        'Dhaka': [
            [
                '2009',
                'only',
                '-',
                'Jun',
                '19',
                [
                    '23',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2009',
                'only',
                '-',
                'Dec',
                '31',
                [
                    '24',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ]
        ],
        'Shang': [
            [
                '1940',
                'only',
                '-',
                'Jun',
                '3',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1940',
                '1941',
                '-',
                'Oct',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1941',
                'only',
                '-',
                'Mar',
                '16',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ]
        ],
        'PRC': [
            [
                '1986',
                'only',
                '-',
                'May',
                '4',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1986',
                '1991',
                '-',
                'Sep',
                'Sun>=11',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1987',
                '1991',
                '-',
                'Apr',
                'Sun>=10',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ]
        ],
        'HK': [
            [
                '1941',
                'only',
                '-',
                'Apr',
                '1',
                [
                    '3',
                    '30',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1941',
                'only',
                '-',
                'Sep',
                '30',
                [
                    '3',
                    '30',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1946',
                'only',
                '-',
                'Apr',
                '20',
                [
                    '3',
                    '30',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1946',
                'only',
                '-',
                'Dec',
                '1',
                [
                    '3',
                    '30',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1947',
                'only',
                '-',
                'Apr',
                '13',
                [
                    '3',
                    '30',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1947',
                'only',
                '-',
                'Dec',
                '30',
                [
                    '3',
                    '30',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1948',
                'only',
                '-',
                'May',
                '2',
                [
                    '3',
                    '30',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1948',
                '1951',
                '-',
                'Oct',
                'lastSun',
                [
                    '3',
                    '30',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1952',
                'only',
                '-',
                'Oct',
                '25',
                [
                    '3',
                    '30',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1949',
                '1953',
                '-',
                'Apr',
                'Sun>=1',
                [
                    '3',
                    '30',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1953',
                'only',
                '-',
                'Nov',
                '1',
                [
                    '3',
                    '30',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1954',
                '1964',
                '-',
                'Mar',
                'Sun>=18',
                [
                    '3',
                    '30',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1954',
                'only',
                '-',
                'Oct',
                '31',
                [
                    '3',
                    '30',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1955',
                '1964',
                '-',
                'Nov',
                'Sun>=1',
                [
                    '3',
                    '30',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1965',
                '1976',
                '-',
                'Apr',
                'Sun>=16',
                [
                    '3',
                    '30',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1965',
                '1976',
                '-',
                'Oct',
                'Sun>=16',
                [
                    '3',
                    '30',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1973',
                'only',
                '-',
                'Dec',
                '30',
                [
                    '3',
                    '30',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1979',
                'only',
                '-',
                'May',
                'Sun>=8',
                [
                    '3',
                    '30',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1979',
                'only',
                '-',
                'Oct',
                'Sun>=16',
                [
                    '3',
                    '30',
                    '0'
                ],
                '0',
                '-'
            ]
        ],
        'Taiwan': [
            [
                '1946',
                'only',
                '-',
                'May',
                '15',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1946',
                'only',
                '-',
                'Oct',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1947',
                'only',
                '-',
                'Apr',
                '15',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1947',
                'only',
                '-',
                'Nov',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1948',
                '1951',
                '-',
                'May',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1948',
                '1951',
                '-',
                'Oct',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1952',
                'only',
                '-',
                'Mar',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1952',
                '1954',
                '-',
                'Nov',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1953',
                '1959',
                '-',
                'Apr',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1955',
                '1961',
                '-',
                'Oct',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1960',
                '1961',
                '-',
                'Jun',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1974',
                '1975',
                '-',
                'Apr',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1974',
                '1975',
                '-',
                'Oct',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1979',
                'only',
                '-',
                'Jul',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1979',
                'only',
                '-',
                'Oct',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ]
        ],
        'Macau': [
            [
                '1961',
                '1962',
                '-',
                'Mar',
                'Sun>=16',
                [
                    '3',
                    '30',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1961',
                '1964',
                '-',
                'Nov',
                'Sun>=1',
                [
                    '3',
                    '30',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1963',
                'only',
                '-',
                'Mar',
                'Sun>=16',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1964',
                'only',
                '-',
                'Mar',
                'Sun>=16',
                [
                    '3',
                    '30',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1965',
                'only',
                '-',
                'Mar',
                'Sun>=16',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1965',
                'only',
                '-',
                'Oct',
                '31',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1966',
                '1971',
                '-',
                'Apr',
                'Sun>=16',
                [
                    '3',
                    '30',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1966',
                '1971',
                '-',
                'Oct',
                'Sun>=16',
                [
                    '3',
                    '30',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1972',
                '1974',
                '-',
                'Apr',
                'Sun>=15',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1972',
                '1973',
                '-',
                'Oct',
                'Sun>=15',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1974',
                '1977',
                '-',
                'Oct',
                'Sun>=15',
                [
                    '3',
                    '30',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1975',
                '1977',
                '-',
                'Apr',
                'Sun>=15',
                [
                    '3',
                    '30',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1978',
                '1980',
                '-',
                'Apr',
                'Sun>=15',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1978',
                '1980',
                '-',
                'Oct',
                'Sun>=15',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ]
        ],
        'Cyprus': [
            [
                '1975',
                'only',
                '-',
                'Apr',
                '13',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1975',
                'only',
                '-',
                'Oct',
                '12',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1976',
                'only',
                '-',
                'May',
                '15',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1976',
                'only',
                '-',
                'Oct',
                '11',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1977',
                '1980',
                '-',
                'Apr',
                'Sun>=1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1977',
                'only',
                '-',
                'Sep',
                '25',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1978',
                'only',
                '-',
                'Oct',
                '2',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1979',
                '1997',
                '-',
                'Sep',
                'lastSun',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1981',
                '1998',
                '-',
                'Mar',
                'lastSun',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ]
        ],
        'Iran': [
            [
                '1978',
                '1980',
                '-',
                'Mar',
                '21',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1978',
                'only',
                '-',
                'Oct',
                '21',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1979',
                'only',
                '-',
                'Sep',
                '19',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1980',
                'only',
                '-',
                'Sep',
                '23',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1991',
                'only',
                '-',
                'May',
                '3',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1992',
                '1995',
                '-',
                'Mar',
                '22',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1991',
                '1995',
                '-',
                'Sep',
                '22',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1996',
                'only',
                '-',
                'Mar',
                '21',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1996',
                'only',
                '-',
                'Sep',
                '21',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1997',
                '1999',
                '-',
                'Mar',
                '22',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1997',
                '1999',
                '-',
                'Sep',
                '22',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '2000',
                'only',
                '-',
                'Mar',
                '21',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '2000',
                'only',
                '-',
                'Sep',
                '21',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '2001',
                '2003',
                '-',
                'Mar',
                '22',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '2001',
                '2003',
                '-',
                'Sep',
                '22',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '2004',
                'only',
                '-',
                'Mar',
                '21',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '2004',
                'only',
                '-',
                'Sep',
                '21',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '2005',
                'only',
                '-',
                'Mar',
                '22',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '2005',
                'only',
                '-',
                'Sep',
                '22',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '2008',
                'only',
                '-',
                'Mar',
                '21',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '2008',
                'only',
                '-',
                'Sep',
                '21',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '2009',
                '2011',
                '-',
                'Mar',
                '22',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '2009',
                '2011',
                '-',
                'Sep',
                '22',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '2012',
                'only',
                '-',
                'Mar',
                '21',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '2012',
                'only',
                '-',
                'Sep',
                '21',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '2013',
                '2015',
                '-',
                'Mar',
                '22',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '2013',
                '2015',
                '-',
                'Sep',
                '22',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '2016',
                'only',
                '-',
                'Mar',
                '21',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '2016',
                'only',
                '-',
                'Sep',
                '21',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '2017',
                '2019',
                '-',
                'Mar',
                '22',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '2017',
                '2019',
                '-',
                'Sep',
                '22',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '2020',
                'only',
                '-',
                'Mar',
                '21',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '2020',
                'only',
                '-',
                'Sep',
                '21',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '2021',
                '2023',
                '-',
                'Mar',
                '22',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '2021',
                '2023',
                '-',
                'Sep',
                '22',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '2024',
                'only',
                '-',
                'Mar',
                '21',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '2024',
                'only',
                '-',
                'Sep',
                '21',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '2025',
                '2027',
                '-',
                'Mar',
                '22',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '2025',
                '2027',
                '-',
                'Sep',
                '22',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '2028',
                '2029',
                '-',
                'Mar',
                '21',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '2028',
                '2029',
                '-',
                'Sep',
                '21',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '2030',
                '2031',
                '-',
                'Mar',
                '22',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '2030',
                '2031',
                '-',
                'Sep',
                '22',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '2032',
                '2033',
                '-',
                'Mar',
                '21',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '2032',
                '2033',
                '-',
                'Sep',
                '21',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '2034',
                '2035',
                '-',
                'Mar',
                '22',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '2034',
                '2035',
                '-',
                'Sep',
                '22',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '2036',
                '2037',
                '-',
                'Mar',
                '21',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '2036',
                '2037',
                '-',
                'Sep',
                '21',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ]
        ],
        'Iraq': [
            [
                '1982',
                'only',
                '-',
                'May',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1982',
                '1984',
                '-',
                'Oct',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1983',
                'only',
                '-',
                'Mar',
                '31',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1984',
                '1985',
                '-',
                'Apr',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1985',
                '1990',
                '-',
                'Sep',
                'lastSun',
                [
                    '1',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '1986',
                '1990',
                '-',
                'Mar',
                'lastSun',
                [
                    '1',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'D'
            ],
            [
                '1991',
                '2007',
                '-',
                'Apr',
                '1',
                [
                    '3',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'D'
            ],
            [
                '1991',
                '2007',
                '-',
                'Oct',
                '1',
                [
                    '3',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ]
        ],
        'Zion': [
            [
                '1940',
                'only',
                '-',
                'Jun',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1942',
                '1944',
                '-',
                'Nov',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1943',
                'only',
                '-',
                'Apr',
                '1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1944',
                'only',
                '-',
                'Apr',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1945',
                'only',
                '-',
                'Apr',
                '16',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1945',
                'only',
                '-',
                'Nov',
                '1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1946',
                'only',
                '-',
                'Apr',
                '16',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1946',
                'only',
                '-',
                'Nov',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1948',
                'only',
                '-',
                'May',
                '23',
                [
                    '0',
                    '0',
                    '0'
                ],
                '120',
                'DD'
            ],
            [
                '1948',
                'only',
                '-',
                'Sep',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1948',
                '1949',
                '-',
                'Nov',
                '1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1949',
                'only',
                '-',
                'May',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1950',
                'only',
                '-',
                'Apr',
                '16',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1950',
                'only',
                '-',
                'Sep',
                '15',
                [
                    '3',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1951',
                'only',
                '-',
                'Apr',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1951',
                'only',
                '-',
                'Nov',
                '11',
                [
                    '3',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1952',
                'only',
                '-',
                'Apr',
                '20',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1952',
                'only',
                '-',
                'Oct',
                '19',
                [
                    '3',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1953',
                'only',
                '-',
                'Apr',
                '12',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1953',
                'only',
                '-',
                'Sep',
                '13',
                [
                    '3',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1954',
                'only',
                '-',
                'Jun',
                '13',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1954',
                'only',
                '-',
                'Sep',
                '12',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1955',
                'only',
                '-',
                'Jun',
                '11',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1955',
                'only',
                '-',
                'Sep',
                '11',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1956',
                'only',
                '-',
                'Jun',
                '3',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1956',
                'only',
                '-',
                'Sep',
                '30',
                [
                    '3',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1957',
                'only',
                '-',
                'Apr',
                '29',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1957',
                'only',
                '-',
                'Sep',
                '22',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1974',
                'only',
                '-',
                'Jul',
                '7',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1974',
                'only',
                '-',
                'Oct',
                '13',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1975',
                'only',
                '-',
                'Apr',
                '20',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1975',
                'only',
                '-',
                'Aug',
                '31',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1985',
                'only',
                '-',
                'Apr',
                '14',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1985',
                'only',
                '-',
                'Sep',
                '15',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1986',
                'only',
                '-',
                'May',
                '18',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1986',
                'only',
                '-',
                'Sep',
                '7',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1987',
                'only',
                '-',
                'Apr',
                '15',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1987',
                'only',
                '-',
                'Sep',
                '13',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1988',
                'only',
                '-',
                'Apr',
                '10',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1988',
                'only',
                '-',
                'Sep',
                '4',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1989',
                'only',
                '-',
                'Apr',
                '30',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1989',
                'only',
                '-',
                'Sep',
                '3',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1990',
                'only',
                '-',
                'Mar',
                '25',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1990',
                'only',
                '-',
                'Aug',
                '26',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1991',
                'only',
                '-',
                'Mar',
                '24',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1991',
                'only',
                '-',
                'Sep',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1992',
                'only',
                '-',
                'Mar',
                '29',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1992',
                'only',
                '-',
                'Sep',
                '6',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1993',
                'only',
                '-',
                'Apr',
                '2',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1993',
                'only',
                '-',
                'Sep',
                '5',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1994',
                'only',
                '-',
                'Apr',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1994',
                'only',
                '-',
                'Aug',
                '28',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1995',
                'only',
                '-',
                'Mar',
                '31',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1995',
                'only',
                '-',
                'Sep',
                '3',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1996',
                'only',
                '-',
                'Mar',
                '15',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1996',
                'only',
                '-',
                'Sep',
                '16',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1997',
                'only',
                '-',
                'Mar',
                '21',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1997',
                'only',
                '-',
                'Sep',
                '14',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1998',
                'only',
                '-',
                'Mar',
                '20',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1998',
                'only',
                '-',
                'Sep',
                '6',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1999',
                'only',
                '-',
                'Apr',
                '2',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1999',
                'only',
                '-',
                'Sep',
                '3',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '2000',
                'only',
                '-',
                'Apr',
                '14',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '2000',
                'only',
                '-',
                'Oct',
                '6',
                [
                    '1',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '2001',
                'only',
                '-',
                'Apr',
                '9',
                [
                    '1',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '2001',
                'only',
                '-',
                'Sep',
                '24',
                [
                    '1',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '2002',
                'only',
                '-',
                'Mar',
                '29',
                [
                    '1',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '2002',
                'only',
                '-',
                'Oct',
                '7',
                [
                    '1',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '2003',
                'only',
                '-',
                'Mar',
                '28',
                [
                    '1',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '2003',
                'only',
                '-',
                'Oct',
                '3',
                [
                    '1',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '2004',
                'only',
                '-',
                'Apr',
                '7',
                [
                    '1',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '2004',
                'only',
                '-',
                'Sep',
                '22',
                [
                    '1',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '2005',
                'only',
                '-',
                'Apr',
                '1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '2005',
                'only',
                '-',
                'Oct',
                '9',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '2006',
                '2010',
                '-',
                'Mar',
                'Fri>=26',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '2006',
                'only',
                '-',
                'Oct',
                '1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '2007',
                'only',
                '-',
                'Sep',
                '16',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '2008',
                'only',
                '-',
                'Oct',
                '5',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '2009',
                'only',
                '-',
                'Sep',
                '27',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '2010',
                'only',
                '-',
                'Sep',
                '12',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '2011',
                'only',
                '-',
                'Apr',
                '1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '2011',
                'only',
                '-',
                'Oct',
                '2',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '2012',
                'only',
                '-',
                'Mar',
                'Fri>=26',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '2012',
                'only',
                '-',
                'Sep',
                '23',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '2013',
                'max',
                '-',
                'Mar',
                'Fri>=23',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '2013',
                'max',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ]
        ],
        'Japan': [
            [
                '1948',
                'only',
                '-',
                'May',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1948',
                '1951',
                '-',
                'Sep',
                'Sat>=8',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1949',
                'only',
                '-',
                'Apr',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1950',
                '1951',
                '-',
                'May',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ]
        ],
        'Jordan': [
            [
                '1973',
                'only',
                '-',
                'Jun',
                '6',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1973',
                '1975',
                '-',
                'Oct',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1974',
                '1977',
                '-',
                'May',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1976',
                'only',
                '-',
                'Nov',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1977',
                'only',
                '-',
                'Oct',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1978',
                'only',
                '-',
                'Apr',
                '30',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1978',
                'only',
                '-',
                'Sep',
                '30',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1985',
                'only',
                '-',
                'Apr',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1985',
                'only',
                '-',
                'Oct',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1986',
                '1988',
                '-',
                'Apr',
                'Fri>=1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1986',
                '1990',
                '-',
                'Oct',
                'Fri>=1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1989',
                'only',
                '-',
                'May',
                '8',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1990',
                'only',
                '-',
                'Apr',
                '27',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1991',
                'only',
                '-',
                'Apr',
                '17',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1991',
                'only',
                '-',
                'Sep',
                '27',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1992',
                'only',
                '-',
                'Apr',
                '10',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1992',
                '1993',
                '-',
                'Oct',
                'Fri>=1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1993',
                '1998',
                '-',
                'Apr',
                'Fri>=1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1994',
                'only',
                '-',
                'Sep',
                'Fri>=15',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1995',
                '1998',
                '-',
                'Sep',
                'Fri>=15',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1999',
                'only',
                '-',
                'Jul',
                '1',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1999',
                '2002',
                '-',
                'Sep',
                'lastFri',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '2000',
                '2001',
                '-',
                'Mar',
                'lastThu',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '2002',
                '2012',
                '-',
                'Mar',
                'lastThu',
                [
                    '24',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2003',
                'only',
                '-',
                'Oct',
                '24',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '2004',
                'only',
                '-',
                'Oct',
                '15',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '2005',
                'only',
                '-',
                'Sep',
                'lastFri',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '2006',
                '2011',
                '-',
                'Oct',
                'lastFri',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '2013',
                'only',
                '-',
                'Dec',
                '20',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2014',
                'max',
                '-',
                'Mar',
                'lastThu',
                [
                    '24',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2014',
                'max',
                '-',
                'Oct',
                'lastFri',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ]
        ],
        'Kyrgyz': [
            [
                '1992',
                '1996',
                '-',
                'Apr',
                'Sun>=7',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1992',
                '1996',
                '-',
                'Sep',
                'lastSun',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1997',
                '2005',
                '-',
                'Mar',
                'lastSun',
                [
                    '2',
                    '30',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1997',
                '2004',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '30',
                    '0'
                ],
                '0',
                '-'
            ]
        ],
        'ROK': [
            [
                '1960',
                'only',
                '-',
                'May',
                '15',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1960',
                'only',
                '-',
                'Sep',
                '13',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1987',
                '1988',
                '-',
                'May',
                'Sun>=8',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1987',
                '1988',
                '-',
                'Oct',
                'Sun>=8',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ]
        ],
        'Lebanon': [
            [
                '1920',
                'only',
                '-',
                'Mar',
                '28',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1920',
                'only',
                '-',
                'Oct',
                '25',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1921',
                'only',
                '-',
                'Apr',
                '3',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1921',
                'only',
                '-',
                'Oct',
                '3',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1922',
                'only',
                '-',
                'Mar',
                '26',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1922',
                'only',
                '-',
                'Oct',
                '8',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1923',
                'only',
                '-',
                'Apr',
                '22',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1923',
                'only',
                '-',
                'Sep',
                '16',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1957',
                '1961',
                '-',
                'May',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1957',
                '1961',
                '-',
                'Oct',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1972',
                'only',
                '-',
                'Jun',
                '22',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1972',
                '1977',
                '-',
                'Oct',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1973',
                '1977',
                '-',
                'May',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1978',
                'only',
                '-',
                'Apr',
                '30',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1978',
                'only',
                '-',
                'Sep',
                '30',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1984',
                '1987',
                '-',
                'May',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1984',
                '1991',
                '-',
                'Oct',
                '16',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1988',
                'only',
                '-',
                'Jun',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1989',
                'only',
                '-',
                'May',
                '10',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1990',
                '1992',
                '-',
                'May',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1992',
                'only',
                '-',
                'Oct',
                '4',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1993',
                'max',
                '-',
                'Mar',
                'lastSun',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1993',
                '1998',
                '-',
                'Sep',
                'lastSun',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1999',
                'max',
                '-',
                'Oct',
                'lastSun',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ]
        ],
        'NBorneo': [
            [
                '1935',
                '1941',
                '-',
                'Sep',
                '14',
                [
                    '0',
                    '0',
                    '0'
                ],
                '20',
                'TS',
                ''
            ],
            [
                '1935',
                '1941',
                '-',
                'Dec',
                '14',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ]
        ],
        'Mongol': [
            [
                '1983',
                '1984',
                '-',
                'Apr',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1983',
                'only',
                '-',
                'Oct',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1985',
                '1998',
                '-',
                'Mar',
                'lastSun',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1984',
                '1998',
                '-',
                'Sep',
                'lastSun',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2001',
                'only',
                '-',
                'Apr',
                'lastSat',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2001',
                '2006',
                '-',
                'Sep',
                'lastSat',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2002',
                '2006',
                '-',
                'Mar',
                'lastSat',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ]
        ],
        'Pakistan': [
            [
                '2002',
                'only',
                '-',
                'Apr',
                'Sun>=2',
                [
                    '0',
                    '1',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2002',
                'only',
                '-',
                'Oct',
                'Sun>=2',
                [
                    '0',
                    '1',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2008',
                'only',
                '-',
                'Jun',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2008',
                '2009',
                '-',
                'Nov',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2009',
                'only',
                '-',
                'Apr',
                '15',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ]
        ],
        'EgyptAsia': [
            [
                '1957',
                'only',
                '-',
                'May',
                '10',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1957',
                '1958',
                '-',
                'Oct',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1958',
                'only',
                '-',
                'May',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1959',
                '1967',
                '-',
                'May',
                '1',
                [
                    '1',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1959',
                '1965',
                '-',
                'Sep',
                '30',
                [
                    '3',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1966',
                'only',
                '-',
                'Oct',
                '1',
                [
                    '3',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ]
        ],
        'Palestine': [
            [
                '1999',
                '2005',
                '-',
                'Apr',
                'Fri>=15',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1999',
                '2003',
                '-',
                'Oct',
                'Fri>=15',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2004',
                'only',
                '-',
                'Oct',
                '1',
                [
                    '1',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2005',
                'only',
                '-',
                'Oct',
                '4',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2006',
                '2007',
                '-',
                'Apr',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2006',
                'only',
                '-',
                'Sep',
                '22',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2007',
                'only',
                '-',
                'Sep',
                'Thu>=8',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2008',
                '2009',
                '-',
                'Mar',
                'lastFri',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2008',
                'only',
                '-',
                'Sep',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2009',
                'only',
                '-',
                'Sep',
                'Fri>=1',
                [
                    '1',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2010',
                'only',
                '-',
                'Mar',
                '26',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2010',
                'only',
                '-',
                'Aug',
                '11',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2011',
                'only',
                '-',
                'Apr',
                '1',
                [
                    '0',
                    '1',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2011',
                'only',
                '-',
                'Aug',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2011',
                'only',
                '-',
                'Aug',
                '30',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2011',
                'only',
                '-',
                'Sep',
                '30',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2012',
                'max',
                '-',
                'Mar',
                'lastThu',
                [
                    '24',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2012',
                'only',
                '-',
                'Sep',
                '21',
                [
                    '1',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2013',
                'max',
                '-',
                'Sep',
                'Fri>=21',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ]
        ],
        'Phil': [
            [
                '1936',
                'only',
                '-',
                'Nov',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1937',
                'only',
                '-',
                'Feb',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1954',
                'only',
                '-',
                'Apr',
                '12',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1954',
                'only',
                '-',
                'Jul',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1978',
                'only',
                '-',
                'Mar',
                '22',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1978',
                'only',
                '-',
                'Sep',
                '21',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ]
        ],
        'Syria': [
            [
                '1920',
                '1923',
                '-',
                'Apr',
                'Sun>=15',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1920',
                '1923',
                '-',
                'Oct',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1962',
                'only',
                '-',
                'Apr',
                '29',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1962',
                'only',
                '-',
                'Oct',
                '1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1963',
                '1965',
                '-',
                'May',
                '1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1963',
                'only',
                '-',
                'Sep',
                '30',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1964',
                'only',
                '-',
                'Oct',
                '1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1965',
                'only',
                '-',
                'Sep',
                '30',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1966',
                'only',
                '-',
                'Apr',
                '24',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1966',
                '1976',
                '-',
                'Oct',
                '1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1967',
                '1978',
                '-',
                'May',
                '1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1977',
                '1978',
                '-',
                'Sep',
                '1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1983',
                '1984',
                '-',
                'Apr',
                '9',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1983',
                '1984',
                '-',
                'Oct',
                '1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1986',
                'only',
                '-',
                'Feb',
                '16',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1986',
                'only',
                '-',
                'Oct',
                '9',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1987',
                'only',
                '-',
                'Mar',
                '1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1987',
                '1988',
                '-',
                'Oct',
                '31',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1988',
                'only',
                '-',
                'Mar',
                '15',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1989',
                'only',
                '-',
                'Mar',
                '31',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1989',
                'only',
                '-',
                'Oct',
                '1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1990',
                'only',
                '-',
                'Apr',
                '1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1990',
                'only',
                '-',
                'Sep',
                '30',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1991',
                'only',
                '-',
                'Apr',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1991',
                '1992',
                '-',
                'Oct',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1992',
                'only',
                '-',
                'Apr',
                '8',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1993',
                'only',
                '-',
                'Mar',
                '26',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1993',
                'only',
                '-',
                'Sep',
                '25',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1994',
                '1996',
                '-',
                'Apr',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1994',
                '2005',
                '-',
                'Oct',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1997',
                '1998',
                '-',
                'Mar',
                'lastMon',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1999',
                '2006',
                '-',
                'Apr',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2006',
                'only',
                '-',
                'Sep',
                '22',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2007',
                'only',
                '-',
                'Mar',
                'lastFri',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2007',
                'only',
                '-',
                'Nov',
                'Fri>=1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2008',
                'only',
                '-',
                'Apr',
                'Fri>=1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2008',
                'only',
                '-',
                'Nov',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2009',
                'only',
                '-',
                'Mar',
                'lastFri',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2010',
                '2011',
                '-',
                'Apr',
                'Fri>=1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2012',
                'max',
                '-',
                'Mar',
                'lastFri',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2009',
                'max',
                '-',
                'Oct',
                'lastFri',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ]
        ],
        'Aus': [
            [
                '1917',
                'only',
                '-',
                'Jan',
                '1',
                [
                    '0',
                    '1',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1917',
                'only',
                '-',
                'Mar',
                '25',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1942',
                'only',
                '-',
                'Jan',
                '1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1942',
                'only',
                '-',
                'Mar',
                '29',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1942',
                'only',
                '-',
                'Sep',
                '27',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1943',
                '1944',
                '-',
                'Mar',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1943',
                'only',
                '-',
                'Oct',
                '3',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ]
        ],
        'AW': [
            [
                '1974',
                'only',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'D'
            ],
            [
                '1975',
                'only',
                '-',
                'Mar',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '1983',
                'only',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'D'
            ],
            [
                '1984',
                'only',
                '-',
                'Mar',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '1991',
                'only',
                '-',
                'Nov',
                '17',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'D'
            ],
            [
                '1992',
                'only',
                '-',
                'Mar',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '2006',
                'only',
                '-',
                'Dec',
                '3',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'D'
            ],
            [
                '2007',
                '2009',
                '-',
                'Mar',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '2007',
                '2008',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'D'
            ]
        ],
        'AQ': [
            [
                '1971',
                'only',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'D'
            ],
            [
                '1972',
                'only',
                '-',
                'Feb',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '1989',
                '1991',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'D'
            ],
            [
                '1990',
                '1992',
                '-',
                'Mar',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ]
        ],
        'Holiday': [
            [
                '1992',
                '1993',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'D'
            ],
            [
                '1993',
                '1994',
                '-',
                'Mar',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ]
        ],
        'AS': [
            [
                '1971',
                '1985',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'D'
            ],
            [
                '1986',
                'only',
                '-',
                'Oct',
                '19',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'D'
            ],
            [
                '1987',
                '2007',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'D'
            ],
            [
                '1972',
                'only',
                '-',
                'Feb',
                '27',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '1973',
                '1985',
                '-',
                'Mar',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '1986',
                '1990',
                '-',
                'Mar',
                'Sun>=15',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '1991',
                'only',
                '-',
                'Mar',
                '3',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '1992',
                'only',
                '-',
                'Mar',
                '22',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '1993',
                'only',
                '-',
                'Mar',
                '7',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '1994',
                'only',
                '-',
                'Mar',
                '20',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '1995',
                '2005',
                '-',
                'Mar',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '2006',
                'only',
                '-',
                'Apr',
                '2',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '2007',
                'only',
                '-',
                'Mar',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '2008',
                'max',
                '-',
                'Apr',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '2008',
                'max',
                '-',
                'Oct',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'D'
            ]
        ],
        'AT': [
            [
                '1967',
                'only',
                '-',
                'Oct',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'D'
            ],
            [
                '1968',
                'only',
                '-',
                'Mar',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '1968',
                '1985',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'D'
            ],
            [
                '1969',
                '1971',
                '-',
                'Mar',
                'Sun>=8',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '1972',
                'only',
                '-',
                'Feb',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '1973',
                '1981',
                '-',
                'Mar',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '1982',
                '1983',
                '-',
                'Mar',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '1984',
                '1986',
                '-',
                'Mar',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '1986',
                'only',
                '-',
                'Oct',
                'Sun>=15',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'D'
            ],
            [
                '1987',
                '1990',
                '-',
                'Mar',
                'Sun>=15',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '1987',
                'only',
                '-',
                'Oct',
                'Sun>=22',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'D'
            ],
            [
                '1988',
                '1990',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'D'
            ],
            [
                '1991',
                '1999',
                '-',
                'Oct',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'D'
            ],
            [
                '1991',
                '2005',
                '-',
                'Mar',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '2000',
                'only',
                '-',
                'Aug',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'D'
            ],
            [
                '2001',
                'max',
                '-',
                'Oct',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'D'
            ],
            [
                '2006',
                'only',
                '-',
                'Apr',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '2007',
                'only',
                '-',
                'Mar',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '2008',
                'max',
                '-',
                'Apr',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ]
        ],
        'AV': [
            [
                '1971',
                '1985',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'D'
            ],
            [
                '1972',
                'only',
                '-',
                'Feb',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '1973',
                '1985',
                '-',
                'Mar',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '1986',
                '1990',
                '-',
                'Mar',
                'Sun>=15',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '1986',
                '1987',
                '-',
                'Oct',
                'Sun>=15',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'D'
            ],
            [
                '1988',
                '1999',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'D'
            ],
            [
                '1991',
                '1994',
                '-',
                'Mar',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '1995',
                '2005',
                '-',
                'Mar',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '2000',
                'only',
                '-',
                'Aug',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'D'
            ],
            [
                '2001',
                '2007',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'D'
            ],
            [
                '2006',
                'only',
                '-',
                'Apr',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '2007',
                'only',
                '-',
                'Mar',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '2008',
                'max',
                '-',
                'Apr',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '2008',
                'max',
                '-',
                'Oct',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'D'
            ]
        ],
        'AN': [
            [
                '1971',
                '1985',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'D'
            ],
            [
                '1972',
                'only',
                '-',
                'Feb',
                '27',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '1973',
                '1981',
                '-',
                'Mar',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '1982',
                'only',
                '-',
                'Apr',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '1983',
                '1985',
                '-',
                'Mar',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '1986',
                '1989',
                '-',
                'Mar',
                'Sun>=15',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '1986',
                'only',
                '-',
                'Oct',
                '19',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'D'
            ],
            [
                '1987',
                '1999',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'D'
            ],
            [
                '1990',
                '1995',
                '-',
                'Mar',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '1996',
                '2005',
                '-',
                'Mar',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '2000',
                'only',
                '-',
                'Aug',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'D'
            ],
            [
                '2001',
                '2007',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'D'
            ],
            [
                '2006',
                'only',
                '-',
                'Apr',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '2007',
                'only',
                '-',
                'Mar',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '2008',
                'max',
                '-',
                'Apr',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '2008',
                'max',
                '-',
                'Oct',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'D'
            ]
        ],
        'LH': [
            [
                '1981',
                '1984',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1982',
                '1985',
                '-',
                'Mar',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1985',
                'only',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '30',
                'D'
            ],
            [
                '1986',
                '1989',
                '-',
                'Mar',
                'Sun>=15',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1986',
                'only',
                '-',
                'Oct',
                '19',
                [
                    '2',
                    '0',
                    '0'
                ],
                '30',
                'D'
            ],
            [
                '1987',
                '1999',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '30',
                'D'
            ],
            [
                '1990',
                '1995',
                '-',
                'Mar',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1996',
                '2005',
                '-',
                'Mar',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '2000',
                'only',
                '-',
                'Aug',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '30',
                'D'
            ],
            [
                '2001',
                '2007',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '30',
                'D'
            ],
            [
                '2006',
                'only',
                '-',
                'Apr',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '2007',
                'only',
                '-',
                'Mar',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '2008',
                'max',
                '-',
                'Apr',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '2008',
                'max',
                '-',
                'Oct',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '30',
                'D'
            ]
        ],
        'Fiji': [
            [
                '1998',
                '1999',
                '-',
                'Nov',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1999',
                '2000',
                '-',
                'Feb',
                'lastSun',
                [
                    '3',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2009',
                'only',
                '-',
                'Nov',
                '29',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2010',
                'only',
                '-',
                'Mar',
                'lastSun',
                [
                    '3',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2010',
                'max',
                '-',
                'Oct',
                'Sun>=21',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2011',
                'only',
                '-',
                'Mar',
                'Sun>=1',
                [
                    '3',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2012',
                '2013',
                '-',
                'Jan',
                'Sun>=18',
                [
                    '3',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2014',
                'max',
                '-',
                'Jan',
                'Sun>=18',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ]
        ],
        'NC': [
            [
                '1977',
                '1978',
                '-',
                'Dec',
                'Sun>=1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1978',
                '1979',
                '-',
                'Feb',
                '27',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1996',
                'only',
                '-',
                'Dec',
                '1',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1997',
                'only',
                '-',
                'Mar',
                '2',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ]
        ],
        'NZ': [
            [
                '1927',
                'only',
                '-',
                'Nov',
                '6',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1928',
                'only',
                '-',
                'Mar',
                '4',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'M'
            ],
            [
                '1928',
                '1933',
                '-',
                'Oct',
                'Sun>=8',
                [
                    '2',
                    '0',
                    '0'
                ],
                '30',
                'S'
            ],
            [
                '1929',
                '1933',
                '-',
                'Mar',
                'Sun>=15',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'M'
            ],
            [
                '1934',
                '1940',
                '-',
                'Apr',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'M'
            ],
            [
                '1934',
                '1940',
                '-',
                'Sep',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '30',
                'S'
            ],
            [
                '1946',
                'only',
                '-',
                'Jan',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1974',
                'only',
                '-',
                'Nov',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'D'
            ],
            [
                '1975',
                'only',
                '-',
                'Feb',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '1975',
                '1988',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'D'
            ],
            [
                '1976',
                '1989',
                '-',
                'Mar',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '1989',
                'only',
                '-',
                'Oct',
                'Sun>=8',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'D'
            ],
            [
                '1990',
                '2006',
                '-',
                'Oct',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'D'
            ],
            [
                '1990',
                '2007',
                '-',
                'Mar',
                'Sun>=15',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '2007',
                'max',
                '-',
                'Sep',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'D'
            ],
            [
                '2008',
                'max',
                '-',
                'Apr',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ]
        ],
        'Chatham': [
            [
                '1974',
                'only',
                '-',
                'Nov',
                'Sun>=1',
                [
                    '2',
                    '45',
                    '0',
                    's'
                ],
                '60',
                'D'
            ],
            [
                '1975',
                'only',
                '-',
                'Feb',
                'lastSun',
                [
                    '2',
                    '45',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '1975',
                '1988',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '45',
                    '0',
                    's'
                ],
                '60',
                'D'
            ],
            [
                '1976',
                '1989',
                '-',
                'Mar',
                'Sun>=1',
                [
                    '2',
                    '45',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '1989',
                'only',
                '-',
                'Oct',
                'Sun>=8',
                [
                    '2',
                    '45',
                    '0',
                    's'
                ],
                '60',
                'D'
            ],
            [
                '1990',
                '2006',
                '-',
                'Oct',
                'Sun>=1',
                [
                    '2',
                    '45',
                    '0',
                    's'
                ],
                '60',
                'D'
            ],
            [
                '1990',
                '2007',
                '-',
                'Mar',
                'Sun>=15',
                [
                    '2',
                    '45',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '2007',
                'max',
                '-',
                'Sep',
                'lastSun',
                [
                    '2',
                    '45',
                    '0',
                    's'
                ],
                '60',
                'D'
            ],
            [
                '2008',
                'max',
                '-',
                'Apr',
                'Sun>=1',
                [
                    '2',
                    '45',
                    '0',
                    's'
                ],
                '0',
                'S'
            ]
        ],
        'Cook': [
            [
                '1978',
                'only',
                '-',
                'Nov',
                '12',
                [
                    '0',
                    '0',
                    '0'
                ],
                '30',
                'HS'
            ],
            [
                '1979',
                '1991',
                '-',
                'Mar',
                'Sun>=1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1979',
                '1990',
                '-',
                'Oct',
                'lastSun',
                [
                    '0',
                    '0',
                    '0'
                ],
                '30',
                'HS'
            ]
        ],
        'WS': [
            [
                '2010',
                'only',
                '-',
                'Sep',
                'lastSun',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '2011',
                'only',
                '-',
                'Apr',
                'Sat>=1',
                [
                    '4',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '2011',
                'only',
                '-',
                'Sep',
                'lastSat',
                [
                    '3',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '2012',
                'max',
                '-',
                'Apr',
                'Sun>=1',
                [
                    '4',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '2012',
                'max',
                '-',
                'Sep',
                'lastSun',
                [
                    '3',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ]
        ],
        'Tonga': [
            [
                '1999',
                'only',
                '-',
                'Oct',
                '7',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '2000',
                'only',
                '-',
                'Mar',
                '19',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '2000',
                '2001',
                '-',
                'Nov',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2001',
                '2002',
                '-',
                'Jan',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ]
        ],
        'Vanuatu': [
            [
                '1983',
                'only',
                '-',
                'Sep',
                '25',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1984',
                '1991',
                '-',
                'Mar',
                'Sun>=23',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1984',
                'only',
                '-',
                'Oct',
                '23',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1985',
                '1991',
                '-',
                'Sep',
                'Sun>=23',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1992',
                '1993',
                '-',
                'Jan',
                'Sun>=23',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1992',
                'only',
                '-',
                'Oct',
                'Sun>=23',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ]
        ],
        'GB-Eire': [
            [
                '1916',
                'only',
                '-',
                'May',
                '21',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'BST'
            ],
            [
                '1916',
                'only',
                '-',
                'Oct',
                '1',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'GMT'
            ],
            [
                '1917',
                'only',
                '-',
                'Apr',
                '8',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'BST'
            ],
            [
                '1917',
                'only',
                '-',
                'Sep',
                '17',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'GMT'
            ],
            [
                '1918',
                'only',
                '-',
                'Mar',
                '24',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'BST'
            ],
            [
                '1918',
                'only',
                '-',
                'Sep',
                '30',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'GMT'
            ],
            [
                '1919',
                'only',
                '-',
                'Mar',
                '30',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'BST'
            ],
            [
                '1919',
                'only',
                '-',
                'Sep',
                '29',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'GMT'
            ],
            [
                '1920',
                'only',
                '-',
                'Mar',
                '28',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'BST'
            ],
            [
                '1920',
                'only',
                '-',
                'Oct',
                '25',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'GMT'
            ],
            [
                '1921',
                'only',
                '-',
                'Apr',
                '3',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'BST'
            ],
            [
                '1921',
                'only',
                '-',
                'Oct',
                '3',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'GMT'
            ],
            [
                '1922',
                'only',
                '-',
                'Mar',
                '26',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'BST'
            ],
            [
                '1922',
                'only',
                '-',
                'Oct',
                '8',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'GMT'
            ],
            [
                '1923',
                'only',
                '-',
                'Apr',
                'Sun>=16',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'BST'
            ],
            [
                '1923',
                '1924',
                '-',
                'Sep',
                'Sun>=16',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'GMT'
            ],
            [
                '1924',
                'only',
                '-',
                'Apr',
                'Sun>=9',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'BST'
            ],
            [
                '1925',
                '1926',
                '-',
                'Apr',
                'Sun>=16',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'BST'
            ],
            [
                '1925',
                '1938',
                '-',
                'Oct',
                'Sun>=2',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'GMT'
            ],
            [
                '1927',
                'only',
                '-',
                'Apr',
                'Sun>=9',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'BST'
            ],
            [
                '1928',
                '1929',
                '-',
                'Apr',
                'Sun>=16',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'BST'
            ],
            [
                '1930',
                'only',
                '-',
                'Apr',
                'Sun>=9',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'BST'
            ],
            [
                '1931',
                '1932',
                '-',
                'Apr',
                'Sun>=16',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'BST'
            ],
            [
                '1933',
                'only',
                '-',
                'Apr',
                'Sun>=9',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'BST'
            ],
            [
                '1934',
                'only',
                '-',
                'Apr',
                'Sun>=16',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'BST'
            ],
            [
                '1935',
                'only',
                '-',
                'Apr',
                'Sun>=9',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'BST'
            ],
            [
                '1936',
                '1937',
                '-',
                'Apr',
                'Sun>=16',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'BST'
            ],
            [
                '1938',
                'only',
                '-',
                'Apr',
                'Sun>=9',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'BST'
            ],
            [
                '1939',
                'only',
                '-',
                'Apr',
                'Sun>=16',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'BST'
            ],
            [
                '1939',
                'only',
                '-',
                'Nov',
                'Sun>=16',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'GMT'
            ],
            [
                '1940',
                'only',
                '-',
                'Feb',
                'Sun>=23',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'BST'
            ],
            [
                '1941',
                'only',
                '-',
                'May',
                'Sun>=2',
                [
                    '1',
                    '0',
                    '0',
                    's'
                ],
                '120',
                'BDST'
            ],
            [
                '1941',
                '1943',
                '-',
                'Aug',
                'Sun>=9',
                [
                    '1',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'BST'
            ],
            [
                '1942',
                '1944',
                '-',
                'Apr',
                'Sun>=2',
                [
                    '1',
                    '0',
                    '0',
                    's'
                ],
                '120',
                'BDST'
            ],
            [
                '1944',
                'only',
                '-',
                'Sep',
                'Sun>=16',
                [
                    '1',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'BST'
            ],
            [
                '1945',
                'only',
                '-',
                'Apr',
                'Mon>=2',
                [
                    '1',
                    '0',
                    '0',
                    's'
                ],
                '120',
                'BDST'
            ],
            [
                '1945',
                'only',
                '-',
                'Jul',
                'Sun>=9',
                [
                    '1',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'BST'
            ],
            [
                '1945',
                '1946',
                '-',
                'Oct',
                'Sun>=2',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'GMT'
            ],
            [
                '1946',
                'only',
                '-',
                'Apr',
                'Sun>=9',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'BST'
            ],
            [
                '1947',
                'only',
                '-',
                'Mar',
                '16',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'BST'
            ],
            [
                '1947',
                'only',
                '-',
                'Apr',
                '13',
                [
                    '1',
                    '0',
                    '0',
                    's'
                ],
                '120',
                'BDST'
            ],
            [
                '1947',
                'only',
                '-',
                'Aug',
                '10',
                [
                    '1',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'BST'
            ],
            [
                '1947',
                'only',
                '-',
                'Nov',
                '2',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'GMT'
            ],
            [
                '1948',
                'only',
                '-',
                'Mar',
                '14',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'BST'
            ],
            [
                '1948',
                'only',
                '-',
                'Oct',
                '31',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'GMT'
            ],
            [
                '1949',
                'only',
                '-',
                'Apr',
                '3',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'BST'
            ],
            [
                '1949',
                'only',
                '-',
                'Oct',
                '30',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'GMT'
            ],
            [
                '1950',
                '1952',
                '-',
                'Apr',
                'Sun>=14',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'BST'
            ],
            [
                '1950',
                '1952',
                '-',
                'Oct',
                'Sun>=21',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'GMT'
            ],
            [
                '1953',
                'only',
                '-',
                'Apr',
                'Sun>=16',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'BST'
            ],
            [
                '1953',
                '1960',
                '-',
                'Oct',
                'Sun>=2',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'GMT'
            ],
            [
                '1954',
                'only',
                '-',
                'Apr',
                'Sun>=9',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'BST'
            ],
            [
                '1955',
                '1956',
                '-',
                'Apr',
                'Sun>=16',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'BST'
            ],
            [
                '1957',
                'only',
                '-',
                'Apr',
                'Sun>=9',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'BST'
            ],
            [
                '1958',
                '1959',
                '-',
                'Apr',
                'Sun>=16',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'BST'
            ],
            [
                '1960',
                'only',
                '-',
                'Apr',
                'Sun>=9',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'BST'
            ],
            [
                '1961',
                '1963',
                '-',
                'Mar',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'BST'
            ],
            [
                '1961',
                '1968',
                '-',
                'Oct',
                'Sun>=23',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'GMT'
            ],
            [
                '1964',
                '1967',
                '-',
                'Mar',
                'Sun>=19',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'BST'
            ],
            [
                '1968',
                'only',
                '-',
                'Feb',
                '18',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'BST'
            ],
            [
                '1972',
                '1980',
                '-',
                'Mar',
                'Sun>=16',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'BST'
            ],
            [
                '1972',
                '1980',
                '-',
                'Oct',
                'Sun>=23',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'GMT'
            ],
            [
                '1981',
                '1995',
                '-',
                'Mar',
                'lastSun',
                [
                    '1',
                    '0',
                    '0',
                    'u'
                ],
                '60',
                'BST'
            ],
            [
                '1981',
                '1989',
                '-',
                'Oct',
                'Sun>=23',
                [
                    '1',
                    '0',
                    '0',
                    'u'
                ],
                '0',
                'GMT'
            ],
            [
                '1990',
                '1995',
                '-',
                'Oct',
                'Sun>=22',
                [
                    '1',
                    '0',
                    '0',
                    'u'
                ],
                '0',
                'GMT'
            ]
        ],
        'EU': [
            [
                '1977',
                '1980',
                '-',
                'Apr',
                'Sun>=1',
                [
                    '1',
                    '0',
                    '0',
                    'u'
                ],
                '60',
                'S'
            ],
            [
                '1977',
                'only',
                '-',
                'Sep',
                'lastSun',
                [
                    '1',
                    '0',
                    '0',
                    'u'
                ],
                '0',
                '-'
            ],
            [
                '1978',
                'only',
                '-',
                'Oct',
                '1',
                [
                    '1',
                    '0',
                    '0',
                    'u'
                ],
                '0',
                '-'
            ],
            [
                '1979',
                '1995',
                '-',
                'Sep',
                'lastSun',
                [
                    '1',
                    '0',
                    '0',
                    'u'
                ],
                '0',
                '-'
            ],
            [
                '1981',
                'max',
                '-',
                'Mar',
                'lastSun',
                [
                    '1',
                    '0',
                    '0',
                    'u'
                ],
                '60',
                'S'
            ],
            [
                '1996',
                'max',
                '-',
                'Oct',
                'lastSun',
                [
                    '1',
                    '0',
                    '0',
                    'u'
                ],
                '0',
                '-'
            ]
        ],
        'W-Eur': [
            [
                '1977',
                '1980',
                '-',
                'Apr',
                'Sun>=1',
                [
                    '1',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1977',
                'only',
                '-',
                'Sep',
                'lastSun',
                [
                    '1',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1978',
                'only',
                '-',
                'Oct',
                '1',
                [
                    '1',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1979',
                '1995',
                '-',
                'Sep',
                'lastSun',
                [
                    '1',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1981',
                'max',
                '-',
                'Mar',
                'lastSun',
                [
                    '1',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1996',
                'max',
                '-',
                'Oct',
                'lastSun',
                [
                    '1',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ]
        ],
        'C-Eur': [
            [
                '1916',
                'only',
                '-',
                'Apr',
                '30',
                [
                    '23',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1916',
                'only',
                '-',
                'Oct',
                '1',
                [
                    '1',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1917',
                '1918',
                '-',
                'Apr',
                'Mon>=15',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1917',
                '1918',
                '-',
                'Sep',
                'Mon>=15',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1940',
                'only',
                '-',
                'Apr',
                '1',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1942',
                'only',
                '-',
                'Nov',
                '2',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1943',
                'only',
                '-',
                'Mar',
                '29',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1943',
                'only',
                '-',
                'Oct',
                '4',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1944',
                '1945',
                '-',
                'Apr',
                'Mon>=1',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1944',
                'only',
                '-',
                'Oct',
                '2',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1945',
                'only',
                '-',
                'Sep',
                '16',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1977',
                '1980',
                '-',
                'Apr',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1977',
                'only',
                '-',
                'Sep',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1978',
                'only',
                '-',
                'Oct',
                '1',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1979',
                '1995',
                '-',
                'Sep',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1981',
                'max',
                '-',
                'Mar',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1996',
                'max',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ]
        ],
        'E-Eur': [
            [
                '1977',
                '1980',
                '-',
                'Apr',
                'Sun>=1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1977',
                'only',
                '-',
                'Sep',
                'lastSun',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1978',
                'only',
                '-',
                'Oct',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1979',
                '1995',
                '-',
                'Sep',
                'lastSun',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1981',
                'max',
                '-',
                'Mar',
                'lastSun',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1996',
                'max',
                '-',
                'Oct',
                'lastSun',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ]
        ],
        'Russia': [
            [
                '1917',
                'only',
                '-',
                'Jul',
                '1',
                [
                    '23',
                    '0',
                    '0'
                ],
                '60',
                'MST',
                ''
            ],
            [
                '1917',
                'only',
                '-',
                'Dec',
                '28',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'MMT',
                ''
            ],
            [
                '1918',
                'only',
                '-',
                'May',
                '31',
                [
                    '22',
                    '0',
                    '0'
                ],
                '120',
                'MDST',
                ''
            ],
            [
                '1918',
                'only',
                '-',
                'Sep',
                '16',
                [
                    '1',
                    '0',
                    '0'
                ],
                '60',
                'MST'
            ],
            [
                '1919',
                'only',
                '-',
                'May',
                '31',
                [
                    '23',
                    '0',
                    '0'
                ],
                '120',
                'MDST'
            ],
            [
                '1919',
                'only',
                '-',
                'Jul',
                '1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'MSD'
            ],
            [
                '1919',
                'only',
                '-',
                'Aug',
                '16',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'MSK'
            ],
            [
                '1921',
                'only',
                '-',
                'Feb',
                '14',
                [
                    '23',
                    '0',
                    '0'
                ],
                '60',
                'MSD'
            ],
            [
                '1921',
                'only',
                '-',
                'Mar',
                '20',
                [
                    '23',
                    '0',
                    '0'
                ],
                '120',
                'MSM',
                ''
            ],
            [
                '1921',
                'only',
                '-',
                'Sep',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'MSD'
            ],
            [
                '1921',
                'only',
                '-',
                'Oct',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1981',
                '1984',
                '-',
                'Apr',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1981',
                '1983',
                '-',
                'Oct',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1984',
                '1991',
                '-',
                'Sep',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1985',
                '1991',
                '-',
                'Mar',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1992',
                'only',
                '-',
                'Mar',
                'lastSat',
                [
                    '23',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1992',
                'only',
                '-',
                'Sep',
                'lastSat',
                [
                    '23',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1993',
                '2010',
                '-',
                'Mar',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1993',
                '1995',
                '-',
                'Sep',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1996',
                '2010',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ]
        ],
        'Albania': [
            [
                '1940',
                'only',
                '-',
                'Jun',
                '16',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1942',
                'only',
                '-',
                'Nov',
                '2',
                [
                    '3',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1943',
                'only',
                '-',
                'Mar',
                '29',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1943',
                'only',
                '-',
                'Apr',
                '10',
                [
                    '3',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1974',
                'only',
                '-',
                'May',
                '4',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1974',
                'only',
                '-',
                'Oct',
                '2',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1975',
                'only',
                '-',
                'May',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1975',
                'only',
                '-',
                'Oct',
                '2',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1976',
                'only',
                '-',
                'May',
                '2',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1976',
                'only',
                '-',
                'Oct',
                '3',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1977',
                'only',
                '-',
                'May',
                '8',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1977',
                'only',
                '-',
                'Oct',
                '2',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1978',
                'only',
                '-',
                'May',
                '6',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1978',
                'only',
                '-',
                'Oct',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1979',
                'only',
                '-',
                'May',
                '5',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1979',
                'only',
                '-',
                'Sep',
                '30',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1980',
                'only',
                '-',
                'May',
                '3',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1980',
                'only',
                '-',
                'Oct',
                '4',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1981',
                'only',
                '-',
                'Apr',
                '26',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1981',
                'only',
                '-',
                'Sep',
                '27',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1982',
                'only',
                '-',
                'May',
                '2',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1982',
                'only',
                '-',
                'Oct',
                '3',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1983',
                'only',
                '-',
                'Apr',
                '18',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1983',
                'only',
                '-',
                'Oct',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1984',
                'only',
                '-',
                'Apr',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ]
        ],
        'Austria': [
            [
                '1920',
                'only',
                '-',
                'Apr',
                '5',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1920',
                'only',
                '-',
                'Sep',
                '13',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1946',
                'only',
                '-',
                'Apr',
                '14',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1946',
                '1948',
                '-',
                'Oct',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1947',
                'only',
                '-',
                'Apr',
                '6',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1948',
                'only',
                '-',
                'Apr',
                '18',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1980',
                'only',
                '-',
                'Apr',
                '6',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1980',
                'only',
                '-',
                'Sep',
                '28',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ]
        ],
        'Belgium': [
            [
                '1918',
                'only',
                '-',
                'Mar',
                '9',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1918',
                '1919',
                '-',
                'Oct',
                'Sat>=1',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1919',
                'only',
                '-',
                'Mar',
                '1',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1920',
                'only',
                '-',
                'Feb',
                '14',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1920',
                'only',
                '-',
                'Oct',
                '23',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1921',
                'only',
                '-',
                'Mar',
                '14',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1921',
                'only',
                '-',
                'Oct',
                '25',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1922',
                'only',
                '-',
                'Mar',
                '25',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1922',
                '1927',
                '-',
                'Oct',
                'Sat>=1',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1923',
                'only',
                '-',
                'Apr',
                '21',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1924',
                'only',
                '-',
                'Mar',
                '29',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1925',
                'only',
                '-',
                'Apr',
                '4',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1926',
                'only',
                '-',
                'Apr',
                '17',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1927',
                'only',
                '-',
                'Apr',
                '9',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1928',
                'only',
                '-',
                'Apr',
                '14',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1928',
                '1938',
                '-',
                'Oct',
                'Sun>=2',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1929',
                'only',
                '-',
                'Apr',
                '21',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1930',
                'only',
                '-',
                'Apr',
                '13',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1931',
                'only',
                '-',
                'Apr',
                '19',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1932',
                'only',
                '-',
                'Apr',
                '3',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1933',
                'only',
                '-',
                'Mar',
                '26',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1934',
                'only',
                '-',
                'Apr',
                '8',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1935',
                'only',
                '-',
                'Mar',
                '31',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1936',
                'only',
                '-',
                'Apr',
                '19',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1937',
                'only',
                '-',
                'Apr',
                '4',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1938',
                'only',
                '-',
                'Mar',
                '27',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1939',
                'only',
                '-',
                'Apr',
                '16',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1939',
                'only',
                '-',
                'Nov',
                '19',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1940',
                'only',
                '-',
                'Feb',
                '25',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1944',
                'only',
                '-',
                'Sep',
                '17',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1945',
                'only',
                '-',
                'Apr',
                '2',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1945',
                'only',
                '-',
                'Sep',
                '16',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1946',
                'only',
                '-',
                'May',
                '19',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1946',
                'only',
                '-',
                'Oct',
                '7',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ]
        ],
        'Bulg': [
            [
                '1979',
                'only',
                '-',
                'Mar',
                '31',
                [
                    '23',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1979',
                'only',
                '-',
                'Oct',
                '1',
                [
                    '1',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1980',
                '1982',
                '-',
                'Apr',
                'Sat>=1',
                [
                    '23',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1980',
                'only',
                '-',
                'Sep',
                '29',
                [
                    '1',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1981',
                'only',
                '-',
                'Sep',
                '27',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ]
        ],
        'Czech': [
            [
                '1945',
                'only',
                '-',
                'Apr',
                '8',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1945',
                'only',
                '-',
                'Nov',
                '18',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1946',
                'only',
                '-',
                'May',
                '6',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1946',
                '1949',
                '-',
                'Oct',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1947',
                'only',
                '-',
                'Apr',
                '20',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1948',
                'only',
                '-',
                'Apr',
                '18',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1949',
                'only',
                '-',
                'Apr',
                '9',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ]
        ],
        'Denmark': [
            [
                '1916',
                'only',
                '-',
                'May',
                '14',
                [
                    '23',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1916',
                'only',
                '-',
                'Sep',
                '30',
                [
                    '23',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1940',
                'only',
                '-',
                'May',
                '15',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1945',
                'only',
                '-',
                'Apr',
                '2',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1945',
                'only',
                '-',
                'Aug',
                '15',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1946',
                'only',
                '-',
                'May',
                '1',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1946',
                'only',
                '-',
                'Sep',
                '1',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1947',
                'only',
                '-',
                'May',
                '4',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1947',
                'only',
                '-',
                'Aug',
                '10',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1948',
                'only',
                '-',
                'May',
                '9',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1948',
                'only',
                '-',
                'Aug',
                '8',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ]
        ],
        'Thule': [
            [
                '1991',
                '1992',
                '-',
                'Mar',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1991',
                '1992',
                '-',
                'Sep',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1993',
                '2006',
                '-',
                'Apr',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1993',
                '2006',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '2007',
                'max',
                '-',
                'Mar',
                'Sun>=8',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '2007',
                'max',
                '-',
                'Nov',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ]
        ],
        'Finland': [
            [
                '1942',
                'only',
                '-',
                'Apr',
                '2',
                [
                    '24',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1942',
                'only',
                '-',
                'Oct',
                '4',
                [
                    '1',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1981',
                '1982',
                '-',
                'Mar',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1981',
                '1982',
                '-',
                'Sep',
                'lastSun',
                [
                    '3',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ]
        ],
        'France': [
            [
                '1916',
                'only',
                '-',
                'Jun',
                '14',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1916',
                '1919',
                '-',
                'Oct',
                'Sun>=1',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1917',
                'only',
                '-',
                'Mar',
                '24',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1918',
                'only',
                '-',
                'Mar',
                '9',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1919',
                'only',
                '-',
                'Mar',
                '1',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1920',
                'only',
                '-',
                'Feb',
                '14',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1920',
                'only',
                '-',
                'Oct',
                '23',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1921',
                'only',
                '-',
                'Mar',
                '14',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1921',
                'only',
                '-',
                'Oct',
                '25',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1922',
                'only',
                '-',
                'Mar',
                '25',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1922',
                '1938',
                '-',
                'Oct',
                'Sat>=1',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1923',
                'only',
                '-',
                'May',
                '26',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1924',
                'only',
                '-',
                'Mar',
                '29',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1925',
                'only',
                '-',
                'Apr',
                '4',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1926',
                'only',
                '-',
                'Apr',
                '17',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1927',
                'only',
                '-',
                'Apr',
                '9',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1928',
                'only',
                '-',
                'Apr',
                '14',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1929',
                'only',
                '-',
                'Apr',
                '20',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1930',
                'only',
                '-',
                'Apr',
                '12',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1931',
                'only',
                '-',
                'Apr',
                '18',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1932',
                'only',
                '-',
                'Apr',
                '2',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1933',
                'only',
                '-',
                'Mar',
                '25',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1934',
                'only',
                '-',
                'Apr',
                '7',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1935',
                'only',
                '-',
                'Mar',
                '30',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1936',
                'only',
                '-',
                'Apr',
                '18',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1937',
                'only',
                '-',
                'Apr',
                '3',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1938',
                'only',
                '-',
                'Mar',
                '26',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1939',
                'only',
                '-',
                'Apr',
                '15',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1939',
                'only',
                '-',
                'Nov',
                '18',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1940',
                'only',
                '-',
                'Feb',
                '25',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1941',
                'only',
                '-',
                'May',
                '5',
                [
                    '0',
                    '0',
                    '0'
                ],
                '120',
                'M',
                ''
            ],
            [
                '1941',
                'only',
                '-',
                'Oct',
                '6',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1942',
                'only',
                '-',
                'Mar',
                '9',
                [
                    '0',
                    '0',
                    '0'
                ],
                '120',
                'M'
            ],
            [
                '1942',
                'only',
                '-',
                'Nov',
                '2',
                [
                    '3',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1943',
                'only',
                '-',
                'Mar',
                '29',
                [
                    '2',
                    '0',
                    '0'
                ],
                '120',
                'M'
            ],
            [
                '1943',
                'only',
                '-',
                'Oct',
                '4',
                [
                    '3',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1944',
                'only',
                '-',
                'Apr',
                '3',
                [
                    '2',
                    '0',
                    '0'
                ],
                '120',
                'M'
            ],
            [
                '1944',
                'only',
                '-',
                'Oct',
                '8',
                [
                    '1',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1945',
                'only',
                '-',
                'Apr',
                '2',
                [
                    '2',
                    '0',
                    '0'
                ],
                '120',
                'M'
            ],
            [
                '1945',
                'only',
                '-',
                'Sep',
                '16',
                [
                    '3',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1976',
                'only',
                '-',
                'Mar',
                '28',
                [
                    '1',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1976',
                'only',
                '-',
                'Sep',
                '26',
                [
                    '1',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ]
        ],
        'Germany': [
            [
                '1946',
                'only',
                '-',
                'Apr',
                '14',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1946',
                'only',
                '-',
                'Oct',
                '7',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1947',
                '1949',
                '-',
                'Oct',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1947',
                'only',
                '-',
                'Apr',
                '6',
                [
                    '3',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1947',
                'only',
                '-',
                'May',
                '11',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '120',
                'M'
            ],
            [
                '1947',
                'only',
                '-',
                'Jun',
                '29',
                [
                    '3',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1948',
                'only',
                '-',
                'Apr',
                '18',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1949',
                'only',
                '-',
                'Apr',
                '10',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ]
        ],
        'SovietZone': [
            [
                '1945',
                'only',
                '-',
                'May',
                '24',
                [
                    '2',
                    '0',
                    '0'
                ],
                '120',
                'M',
                ''
            ],
            [
                '1945',
                'only',
                '-',
                'Sep',
                '24',
                [
                    '3',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1945',
                'only',
                '-',
                'Nov',
                '18',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ]
        ],
        'Greece': [
            [
                '1932',
                'only',
                '-',
                'Jul',
                '7',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1932',
                'only',
                '-',
                'Sep',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1941',
                'only',
                '-',
                'Apr',
                '7',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1942',
                'only',
                '-',
                'Nov',
                '2',
                [
                    '3',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1943',
                'only',
                '-',
                'Mar',
                '30',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1943',
                'only',
                '-',
                'Oct',
                '4',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1952',
                'only',
                '-',
                'Jul',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1952',
                'only',
                '-',
                'Nov',
                '2',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1975',
                'only',
                '-',
                'Apr',
                '12',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1975',
                'only',
                '-',
                'Nov',
                '26',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1976',
                'only',
                '-',
                'Apr',
                '11',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1976',
                'only',
                '-',
                'Oct',
                '10',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1977',
                '1978',
                '-',
                'Apr',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1977',
                'only',
                '-',
                'Sep',
                '26',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1978',
                'only',
                '-',
                'Sep',
                '24',
                [
                    '4',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1979',
                'only',
                '-',
                'Apr',
                '1',
                [
                    '9',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1979',
                'only',
                '-',
                'Sep',
                '29',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1980',
                'only',
                '-',
                'Apr',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1980',
                'only',
                '-',
                'Sep',
                '28',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ]
        ],
        'Hungary': [
            [
                '1918',
                'only',
                '-',
                'Apr',
                '1',
                [
                    '3',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1918',
                'only',
                '-',
                'Sep',
                '16',
                [
                    '3',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1919',
                'only',
                '-',
                'Apr',
                '15',
                [
                    '3',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1919',
                'only',
                '-',
                'Nov',
                '24',
                [
                    '3',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1945',
                'only',
                '-',
                'May',
                '1',
                [
                    '23',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1945',
                'only',
                '-',
                'Nov',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1946',
                'only',
                '-',
                'Mar',
                '31',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1946',
                '1949',
                '-',
                'Oct',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1947',
                '1949',
                '-',
                'Apr',
                'Sun>=4',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1950',
                'only',
                '-',
                'Apr',
                '17',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1950',
                'only',
                '-',
                'Oct',
                '23',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1954',
                '1955',
                '-',
                'May',
                '23',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1954',
                '1955',
                '-',
                'Oct',
                '3',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1956',
                'only',
                '-',
                'Jun',
                'Sun>=1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1956',
                'only',
                '-',
                'Sep',
                'lastSun',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1957',
                'only',
                '-',
                'Jun',
                'Sun>=1',
                [
                    '1',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1957',
                'only',
                '-',
                'Sep',
                'lastSun',
                [
                    '3',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1980',
                'only',
                '-',
                'Apr',
                '6',
                [
                    '1',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ]
        ],
        'Iceland': [
            [
                '1917',
                '1918',
                '-',
                'Feb',
                '19',
                [
                    '23',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1917',
                'only',
                '-',
                'Oct',
                '21',
                [
                    '1',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1918',
                'only',
                '-',
                'Nov',
                '16',
                [
                    '1',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1939',
                'only',
                '-',
                'Apr',
                '29',
                [
                    '23',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1939',
                'only',
                '-',
                'Nov',
                '29',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1940',
                'only',
                '-',
                'Feb',
                '25',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1940',
                'only',
                '-',
                'Nov',
                '3',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1941',
                'only',
                '-',
                'Mar',
                '2',
                [
                    '1',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1941',
                'only',
                '-',
                'Nov',
                '2',
                [
                    '1',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1942',
                'only',
                '-',
                'Mar',
                '8',
                [
                    '1',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1942',
                'only',
                '-',
                'Oct',
                '25',
                [
                    '1',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1943',
                '1946',
                '-',
                'Mar',
                'Sun>=1',
                [
                    '1',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1943',
                '1948',
                '-',
                'Oct',
                'Sun>=22',
                [
                    '1',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1947',
                '1967',
                '-',
                'Apr',
                'Sun>=1',
                [
                    '1',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1949',
                'only',
                '-',
                'Oct',
                '30',
                [
                    '1',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1950',
                '1966',
                '-',
                'Oct',
                'Sun>=22',
                [
                    '1',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1967',
                'only',
                '-',
                'Oct',
                '29',
                [
                    '1',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ]
        ],
        'Italy': [
            [
                '1916',
                'only',
                '-',
                'Jun',
                '3',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1916',
                'only',
                '-',
                'Oct',
                '1',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1917',
                'only',
                '-',
                'Apr',
                '1',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1917',
                'only',
                '-',
                'Sep',
                '30',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1918',
                'only',
                '-',
                'Mar',
                '10',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1918',
                '1919',
                '-',
                'Oct',
                'Sun>=1',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1919',
                'only',
                '-',
                'Mar',
                '2',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1920',
                'only',
                '-',
                'Mar',
                '21',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1920',
                'only',
                '-',
                'Sep',
                '19',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1940',
                'only',
                '-',
                'Jun',
                '15',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1944',
                'only',
                '-',
                'Sep',
                '17',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1945',
                'only',
                '-',
                'Apr',
                '2',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1945',
                'only',
                '-',
                'Sep',
                '15',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1946',
                'only',
                '-',
                'Mar',
                '17',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1946',
                'only',
                '-',
                'Oct',
                '6',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1947',
                'only',
                '-',
                'Mar',
                '16',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1947',
                'only',
                '-',
                'Oct',
                '5',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1948',
                'only',
                '-',
                'Feb',
                '29',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1948',
                'only',
                '-',
                'Oct',
                '3',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1966',
                '1968',
                '-',
                'May',
                'Sun>=22',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1966',
                '1969',
                '-',
                'Sep',
                'Sun>=22',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1969',
                'only',
                '-',
                'Jun',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1970',
                'only',
                '-',
                'May',
                '31',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1970',
                'only',
                '-',
                'Sep',
                'lastSun',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1971',
                '1972',
                '-',
                'May',
                'Sun>=22',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1971',
                'only',
                '-',
                'Sep',
                'lastSun',
                [
                    '1',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1972',
                'only',
                '-',
                'Oct',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1973',
                'only',
                '-',
                'Jun',
                '3',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1973',
                '1974',
                '-',
                'Sep',
                'lastSun',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1974',
                'only',
                '-',
                'May',
                '26',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1975',
                'only',
                '-',
                'Jun',
                '1',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1975',
                '1977',
                '-',
                'Sep',
                'lastSun',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1976',
                'only',
                '-',
                'May',
                '30',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1977',
                '1979',
                '-',
                'May',
                'Sun>=22',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1978',
                'only',
                '-',
                'Oct',
                '1',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1979',
                'only',
                '-',
                'Sep',
                '30',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ]
        ],
        'Latvia': [
            [
                '1989',
                '1996',
                '-',
                'Mar',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1989',
                '1996',
                '-',
                'Sep',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ]
        ],
        'Lux': [
            [
                '1916',
                'only',
                '-',
                'May',
                '14',
                [
                    '23',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1916',
                'only',
                '-',
                'Oct',
                '1',
                [
                    '1',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1917',
                'only',
                '-',
                'Apr',
                '28',
                [
                    '23',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1917',
                'only',
                '-',
                'Sep',
                '17',
                [
                    '1',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1918',
                'only',
                '-',
                'Apr',
                'Mon>=15',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1918',
                'only',
                '-',
                'Sep',
                'Mon>=15',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1919',
                'only',
                '-',
                'Mar',
                '1',
                [
                    '23',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1919',
                'only',
                '-',
                'Oct',
                '5',
                [
                    '3',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1920',
                'only',
                '-',
                'Feb',
                '14',
                [
                    '23',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1920',
                'only',
                '-',
                'Oct',
                '24',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1921',
                'only',
                '-',
                'Mar',
                '14',
                [
                    '23',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1921',
                'only',
                '-',
                'Oct',
                '26',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1922',
                'only',
                '-',
                'Mar',
                '25',
                [
                    '23',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1922',
                'only',
                '-',
                'Oct',
                'Sun>=2',
                [
                    '1',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1923',
                'only',
                '-',
                'Apr',
                '21',
                [
                    '23',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1923',
                'only',
                '-',
                'Oct',
                'Sun>=2',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1924',
                'only',
                '-',
                'Mar',
                '29',
                [
                    '23',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1924',
                '1928',
                '-',
                'Oct',
                'Sun>=2',
                [
                    '1',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1925',
                'only',
                '-',
                'Apr',
                '5',
                [
                    '23',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1926',
                'only',
                '-',
                'Apr',
                '17',
                [
                    '23',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1927',
                'only',
                '-',
                'Apr',
                '9',
                [
                    '23',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1928',
                'only',
                '-',
                'Apr',
                '14',
                [
                    '23',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1929',
                'only',
                '-',
                'Apr',
                '20',
                [
                    '23',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ]
        ],
        'Malta': [
            [
                '1973',
                'only',
                '-',
                'Mar',
                '31',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1973',
                'only',
                '-',
                'Sep',
                '29',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1974',
                'only',
                '-',
                'Apr',
                '21',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1974',
                'only',
                '-',
                'Sep',
                '16',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1975',
                '1979',
                '-',
                'Apr',
                'Sun>=15',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1975',
                '1980',
                '-',
                'Sep',
                'Sun>=15',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1980',
                'only',
                '-',
                'Mar',
                '31',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ]
        ],
        'Neth': [
            [
                '1916',
                'only',
                '-',
                'May',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'NST',
                ''
            ],
            [
                '1916',
                'only',
                '-',
                'Oct',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'AMT',
                ''
            ],
            [
                '1917',
                'only',
                '-',
                'Apr',
                '16',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'NST'
            ],
            [
                '1917',
                'only',
                '-',
                'Sep',
                '17',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'AMT'
            ],
            [
                '1918',
                '1921',
                '-',
                'Apr',
                'Mon>=1',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'NST'
            ],
            [
                '1918',
                '1921',
                '-',
                'Sep',
                'lastMon',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'AMT'
            ],
            [
                '1922',
                'only',
                '-',
                'Mar',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'NST'
            ],
            [
                '1922',
                '1936',
                '-',
                'Oct',
                'Sun>=2',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'AMT'
            ],
            [
                '1923',
                'only',
                '-',
                'Jun',
                'Fri>=1',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'NST'
            ],
            [
                '1924',
                'only',
                '-',
                'Mar',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'NST'
            ],
            [
                '1925',
                'only',
                '-',
                'Jun',
                'Fri>=1',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'NST'
            ],
            [
                '1926',
                '1931',
                '-',
                'May',
                '15',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'NST'
            ],
            [
                '1932',
                'only',
                '-',
                'May',
                '22',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'NST'
            ],
            [
                '1933',
                '1936',
                '-',
                'May',
                '15',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'NST'
            ],
            [
                '1937',
                'only',
                '-',
                'May',
                '22',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'NST'
            ],
            [
                '1937',
                'only',
                '-',
                'Jul',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1937',
                '1939',
                '-',
                'Oct',
                'Sun>=2',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1938',
                '1939',
                '-',
                'May',
                '15',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1945',
                'only',
                '-',
                'Apr',
                '2',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1945',
                'only',
                '-',
                'Sep',
                '16',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ]
        ],
        'Norway': [
            [
                '1916',
                'only',
                '-',
                'May',
                '22',
                [
                    '1',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1916',
                'only',
                '-',
                'Sep',
                '30',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1945',
                'only',
                '-',
                'Apr',
                '2',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1945',
                'only',
                '-',
                'Oct',
                '1',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1959',
                '1964',
                '-',
                'Mar',
                'Sun>=15',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1959',
                '1965',
                '-',
                'Sep',
                'Sun>=15',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1965',
                'only',
                '-',
                'Apr',
                '25',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ]
        ],
        'Poland': [
            [
                '1918',
                '1919',
                '-',
                'Sep',
                '16',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1919',
                'only',
                '-',
                'Apr',
                '15',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1944',
                'only',
                '-',
                'Apr',
                '3',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1944',
                'only',
                '-',
                'Oct',
                '4',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1945',
                'only',
                '-',
                'Apr',
                '29',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1945',
                'only',
                '-',
                'Nov',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1946',
                'only',
                '-',
                'Apr',
                '14',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1946',
                'only',
                '-',
                'Oct',
                '7',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1947',
                'only',
                '-',
                'May',
                '4',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1947',
                '1949',
                '-',
                'Oct',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1948',
                'only',
                '-',
                'Apr',
                '18',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1949',
                'only',
                '-',
                'Apr',
                '10',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1957',
                'only',
                '-',
                'Jun',
                '2',
                [
                    '1',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1957',
                '1958',
                '-',
                'Sep',
                'lastSun',
                [
                    '1',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1958',
                'only',
                '-',
                'Mar',
                '30',
                [
                    '1',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1959',
                'only',
                '-',
                'May',
                '31',
                [
                    '1',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1959',
                '1961',
                '-',
                'Oct',
                'Sun>=1',
                [
                    '1',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1960',
                'only',
                '-',
                'Apr',
                '3',
                [
                    '1',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1961',
                '1964',
                '-',
                'May',
                'lastSun',
                [
                    '1',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1962',
                '1964',
                '-',
                'Sep',
                'lastSun',
                [
                    '1',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ]
        ],
        'Port': [
            [
                '1916',
                'only',
                '-',
                'Jun',
                '17',
                [
                    '23',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1916',
                'only',
                '-',
                'Nov',
                '1',
                [
                    '1',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1917',
                'only',
                '-',
                'Feb',
                '28',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1917',
                '1921',
                '-',
                'Oct',
                '14',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1918',
                'only',
                '-',
                'Mar',
                '1',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1919',
                'only',
                '-',
                'Feb',
                '28',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1920',
                'only',
                '-',
                'Feb',
                '29',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1921',
                'only',
                '-',
                'Feb',
                '28',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1924',
                'only',
                '-',
                'Apr',
                '16',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1924',
                'only',
                '-',
                'Oct',
                '14',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1926',
                'only',
                '-',
                'Apr',
                '17',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1926',
                '1929',
                '-',
                'Oct',
                'Sat>=1',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1927',
                'only',
                '-',
                'Apr',
                '9',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1928',
                'only',
                '-',
                'Apr',
                '14',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1929',
                'only',
                '-',
                'Apr',
                '20',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1931',
                'only',
                '-',
                'Apr',
                '18',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1931',
                '1932',
                '-',
                'Oct',
                'Sat>=1',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1932',
                'only',
                '-',
                'Apr',
                '2',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1934',
                'only',
                '-',
                'Apr',
                '7',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1934',
                '1938',
                '-',
                'Oct',
                'Sat>=1',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1935',
                'only',
                '-',
                'Mar',
                '30',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1936',
                'only',
                '-',
                'Apr',
                '18',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1937',
                'only',
                '-',
                'Apr',
                '3',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1938',
                'only',
                '-',
                'Mar',
                '26',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1939',
                'only',
                '-',
                'Apr',
                '15',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1939',
                'only',
                '-',
                'Nov',
                '18',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1940',
                'only',
                '-',
                'Feb',
                '24',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1940',
                '1941',
                '-',
                'Oct',
                '5',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1941',
                'only',
                '-',
                'Apr',
                '5',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1942',
                '1945',
                '-',
                'Mar',
                'Sat>=8',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1942',
                'only',
                '-',
                'Apr',
                '25',
                [
                    '22',
                    '0',
                    '0',
                    's'
                ],
                '120',
                'M',
                ''
            ],
            [
                '1942',
                'only',
                '-',
                'Aug',
                '15',
                [
                    '22',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1942',
                '1945',
                '-',
                'Oct',
                'Sat>=24',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1943',
                'only',
                '-',
                'Apr',
                '17',
                [
                    '22',
                    '0',
                    '0',
                    's'
                ],
                '120',
                'M'
            ],
            [
                '1943',
                '1945',
                '-',
                'Aug',
                'Sat>=25',
                [
                    '22',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1944',
                '1945',
                '-',
                'Apr',
                'Sat>=21',
                [
                    '22',
                    '0',
                    '0',
                    's'
                ],
                '120',
                'M'
            ],
            [
                '1946',
                'only',
                '-',
                'Apr',
                'Sat>=1',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1946',
                'only',
                '-',
                'Oct',
                'Sat>=1',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1947',
                '1949',
                '-',
                'Apr',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1947',
                '1949',
                '-',
                'Oct',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1951',
                '1965',
                '-',
                'Apr',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1951',
                '1965',
                '-',
                'Oct',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1977',
                'only',
                '-',
                'Mar',
                '27',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1977',
                'only',
                '-',
                'Sep',
                '25',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1978',
                '1979',
                '-',
                'Apr',
                'Sun>=1',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1978',
                'only',
                '-',
                'Oct',
                '1',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1979',
                '1982',
                '-',
                'Sep',
                'lastSun',
                [
                    '1',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1980',
                'only',
                '-',
                'Mar',
                'lastSun',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1981',
                '1982',
                '-',
                'Mar',
                'lastSun',
                [
                    '1',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1983',
                'only',
                '-',
                'Mar',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ]
        ],
        'Romania': [
            [
                '1932',
                'only',
                '-',
                'May',
                '21',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1932',
                '1939',
                '-',
                'Oct',
                'Sun>=1',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1933',
                '1939',
                '-',
                'Apr',
                'Sun>=2',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1979',
                'only',
                '-',
                'May',
                '27',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1979',
                'only',
                '-',
                'Sep',
                'lastSun',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1980',
                'only',
                '-',
                'Apr',
                '5',
                [
                    '23',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1980',
                'only',
                '-',
                'Sep',
                'lastSun',
                [
                    '1',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1991',
                '1993',
                '-',
                'Mar',
                'lastSun',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1991',
                '1993',
                '-',
                'Sep',
                'lastSun',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ]
        ],
        'Spain': [
            [
                '1917',
                'only',
                '-',
                'May',
                '5',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1917',
                '1919',
                '-',
                'Oct',
                '6',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1918',
                'only',
                '-',
                'Apr',
                '15',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1919',
                'only',
                '-',
                'Apr',
                '5',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1924',
                'only',
                '-',
                'Apr',
                '16',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1924',
                'only',
                '-',
                'Oct',
                '4',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1926',
                'only',
                '-',
                'Apr',
                '17',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1926',
                '1929',
                '-',
                'Oct',
                'Sat>=1',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1927',
                'only',
                '-',
                'Apr',
                '9',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1928',
                'only',
                '-',
                'Apr',
                '14',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1929',
                'only',
                '-',
                'Apr',
                '20',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1937',
                'only',
                '-',
                'May',
                '22',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1937',
                '1939',
                '-',
                'Oct',
                'Sat>=1',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1938',
                'only',
                '-',
                'Mar',
                '22',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1939',
                'only',
                '-',
                'Apr',
                '15',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1940',
                'only',
                '-',
                'Mar',
                '16',
                [
                    '23',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1942',
                'only',
                '-',
                'May',
                '2',
                [
                    '22',
                    '0',
                    '0',
                    's'
                ],
                '120',
                'M',
                ''
            ],
            [
                '1942',
                'only',
                '-',
                'Sep',
                '1',
                [
                    '22',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1943',
                '1946',
                '-',
                'Apr',
                'Sat>=13',
                [
                    '22',
                    '0',
                    '0',
                    's'
                ],
                '120',
                'M'
            ],
            [
                '1943',
                'only',
                '-',
                'Oct',
                '3',
                [
                    '22',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1944',
                'only',
                '-',
                'Oct',
                '10',
                [
                    '22',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1945',
                'only',
                '-',
                'Sep',
                '30',
                [
                    '1',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1946',
                'only',
                '-',
                'Sep',
                '30',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1949',
                'only',
                '-',
                'Apr',
                '30',
                [
                    '23',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1949',
                'only',
                '-',
                'Sep',
                '30',
                [
                    '1',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1974',
                '1975',
                '-',
                'Apr',
                'Sat>=13',
                [
                    '23',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1974',
                '1975',
                '-',
                'Oct',
                'Sun>=1',
                [
                    '1',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1976',
                'only',
                '-',
                'Mar',
                '27',
                [
                    '23',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1976',
                '1977',
                '-',
                'Sep',
                'lastSun',
                [
                    '1',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1977',
                '1978',
                '-',
                'Apr',
                '2',
                [
                    '23',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1978',
                'only',
                '-',
                'Oct',
                '1',
                [
                    '1',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ]
        ],
        'SpainAfrica': [
            [
                '1967',
                'only',
                '-',
                'Jun',
                '3',
                [
                    '12',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1967',
                'only',
                '-',
                'Oct',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1974',
                'only',
                '-',
                'Jun',
                '24',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1974',
                'only',
                '-',
                'Sep',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1976',
                '1977',
                '-',
                'May',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1976',
                'only',
                '-',
                'Aug',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1977',
                'only',
                '-',
                'Sep',
                '28',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1978',
                'only',
                '-',
                'Jun',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1978',
                'only',
                '-',
                'Aug',
                '4',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ]
        ],
        'Swiss': [
            [
                '1941',
                '1942',
                '-',
                'May',
                'Mon>=1',
                [
                    '1',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1941',
                '1942',
                '-',
                'Oct',
                'Mon>=1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ]
        ],
        'Turkey': [
            [
                '1916',
                'only',
                '-',
                'May',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1916',
                'only',
                '-',
                'Oct',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1920',
                'only',
                '-',
                'Mar',
                '28',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1920',
                'only',
                '-',
                'Oct',
                '25',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1921',
                'only',
                '-',
                'Apr',
                '3',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1921',
                'only',
                '-',
                'Oct',
                '3',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1922',
                'only',
                '-',
                'Mar',
                '26',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1922',
                'only',
                '-',
                'Oct',
                '8',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1924',
                'only',
                '-',
                'May',
                '13',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1924',
                '1925',
                '-',
                'Oct',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1925',
                'only',
                '-',
                'May',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1940',
                'only',
                '-',
                'Jun',
                '30',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1940',
                'only',
                '-',
                'Oct',
                '5',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1940',
                'only',
                '-',
                'Dec',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1941',
                'only',
                '-',
                'Sep',
                '21',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1942',
                'only',
                '-',
                'Apr',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1942',
                'only',
                '-',
                'Nov',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1945',
                'only',
                '-',
                'Apr',
                '2',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1945',
                'only',
                '-',
                'Oct',
                '8',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1946',
                'only',
                '-',
                'Jun',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1946',
                'only',
                '-',
                'Oct',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1947',
                '1948',
                '-',
                'Apr',
                'Sun>=16',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1947',
                '1950',
                '-',
                'Oct',
                'Sun>=2',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1949',
                'only',
                '-',
                'Apr',
                '10',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1950',
                'only',
                '-',
                'Apr',
                '19',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1951',
                'only',
                '-',
                'Apr',
                '22',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1951',
                'only',
                '-',
                'Oct',
                '8',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1962',
                'only',
                '-',
                'Jul',
                '15',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1962',
                'only',
                '-',
                'Oct',
                '8',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1964',
                'only',
                '-',
                'May',
                '15',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1964',
                'only',
                '-',
                'Oct',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1970',
                '1972',
                '-',
                'May',
                'Sun>=2',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1970',
                '1972',
                '-',
                'Oct',
                'Sun>=2',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1973',
                'only',
                '-',
                'Jun',
                '3',
                [
                    '1',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1973',
                'only',
                '-',
                'Nov',
                '4',
                [
                    '3',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1974',
                'only',
                '-',
                'Mar',
                '31',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1974',
                'only',
                '-',
                'Nov',
                '3',
                [
                    '5',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1975',
                'only',
                '-',
                'Mar',
                '30',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1975',
                '1976',
                '-',
                'Oct',
                'lastSun',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1976',
                'only',
                '-',
                'Jun',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1977',
                '1978',
                '-',
                'Apr',
                'Sun>=1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1977',
                'only',
                '-',
                'Oct',
                '16',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1979',
                '1980',
                '-',
                'Apr',
                'Sun>=1',
                [
                    '3',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1979',
                '1982',
                '-',
                'Oct',
                'Mon>=11',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1981',
                '1982',
                '-',
                'Mar',
                'lastSun',
                [
                    '3',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1983',
                'only',
                '-',
                'Jul',
                '31',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1983',
                'only',
                '-',
                'Oct',
                '2',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1985',
                'only',
                '-',
                'Apr',
                '20',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1985',
                'only',
                '-',
                'Sep',
                '28',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1986',
                '1990',
                '-',
                'Mar',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1986',
                '1990',
                '-',
                'Sep',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1991',
                '2006',
                '-',
                'Mar',
                'lastSun',
                [
                    '1',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'S'
            ],
            [
                '1991',
                '1995',
                '-',
                'Sep',
                'lastSun',
                [
                    '1',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1996',
                '2006',
                '-',
                'Oct',
                'lastSun',
                [
                    '1',
                    '0',
                    '0',
                    's'
                ],
                '0',
                '-'
            ]
        ],
        'US': [
            [
                '1918',
                '1919',
                '-',
                'Mar',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1918',
                '1919',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1942',
                'only',
                '-',
                'Feb',
                '9',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'W',
                ''
            ],
            [
                '1945',
                'only',
                '-',
                'Aug',
                '14',
                [
                    '23',
                    '0',
                    '0',
                    'u'
                ],
                '60',
                'P',
                ''
            ],
            [
                '1945',
                'only',
                '-',
                'Sep',
                '30',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1967',
                '2006',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1967',
                '1973',
                '-',
                'Apr',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1974',
                'only',
                '-',
                'Jan',
                '6',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1975',
                'only',
                '-',
                'Feb',
                '23',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1976',
                '1986',
                '-',
                'Apr',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1987',
                '2006',
                '-',
                'Apr',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '2007',
                'max',
                '-',
                'Mar',
                'Sun>=8',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '2007',
                'max',
                '-',
                'Nov',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ]
        ],
        'NYC': [
            [
                '1920',
                'only',
                '-',
                'Mar',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1920',
                'only',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1921',
                '1966',
                '-',
                'Apr',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1921',
                '1954',
                '-',
                'Sep',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1955',
                '1966',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ]
        ],
        'Chicago': [
            [
                '1920',
                'only',
                '-',
                'Jun',
                '13',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1920',
                '1921',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1921',
                'only',
                '-',
                'Mar',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1922',
                '1966',
                '-',
                'Apr',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1922',
                '1954',
                '-',
                'Sep',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1955',
                '1966',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ]
        ],
        'Denver': [
            [
                '1920',
                '1921',
                '-',
                'Mar',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1920',
                'only',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1921',
                'only',
                '-',
                'May',
                '22',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1965',
                '1966',
                '-',
                'Apr',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1965',
                '1966',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ]
        ],
        'CA': [
            [
                '1948',
                'only',
                '-',
                'Mar',
                '14',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1949',
                'only',
                '-',
                'Jan',
                '1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1950',
                '1966',
                '-',
                'Apr',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1950',
                '1961',
                '-',
                'Sep',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1962',
                '1966',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ]
        ],
        'Indianapolis': [
            [
                '1941',
                'only',
                '-',
                'Jun',
                '22',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1941',
                '1954',
                '-',
                'Sep',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1946',
                '1954',
                '-',
                'Apr',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ]
        ],
        'Marengo': [
            [
                '1951',
                'only',
                '-',
                'Apr',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1951',
                'only',
                '-',
                'Sep',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1954',
                '1960',
                '-',
                'Apr',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1954',
                '1960',
                '-',
                'Sep',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ]
        ],
        'Vincennes': [
            [
                '1946',
                'only',
                '-',
                'Apr',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1946',
                'only',
                '-',
                'Sep',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1953',
                '1954',
                '-',
                'Apr',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1953',
                '1959',
                '-',
                'Sep',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1955',
                'only',
                '-',
                'May',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1956',
                '1963',
                '-',
                'Apr',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1960',
                'only',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1961',
                'only',
                '-',
                'Sep',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1962',
                '1963',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ]
        ],
        'Perry': [
            [
                '1946',
                'only',
                '-',
                'Apr',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1946',
                'only',
                '-',
                'Sep',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1953',
                '1954',
                '-',
                'Apr',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1953',
                '1959',
                '-',
                'Sep',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1955',
                'only',
                '-',
                'May',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1956',
                '1963',
                '-',
                'Apr',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1960',
                'only',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1961',
                'only',
                '-',
                'Sep',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1962',
                '1963',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ]
        ],
        'Pike': [
            [
                '1955',
                'only',
                '-',
                'May',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1955',
                '1960',
                '-',
                'Sep',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1956',
                '1964',
                '-',
                'Apr',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1961',
                '1964',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ]
        ],
        'Starke': [
            [
                '1947',
                '1961',
                '-',
                'Apr',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1947',
                '1954',
                '-',
                'Sep',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1955',
                '1956',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1957',
                '1958',
                '-',
                'Sep',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1959',
                '1961',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ]
        ],
        'Pulaski': [
            [
                '1946',
                '1960',
                '-',
                'Apr',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1946',
                '1954',
                '-',
                'Sep',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1955',
                '1956',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1957',
                '1960',
                '-',
                'Sep',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ]
        ],
        'Louisville': [
            [
                '1921',
                'only',
                '-',
                'May',
                '1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1921',
                'only',
                '-',
                'Sep',
                '1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1941',
                '1961',
                '-',
                'Apr',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1941',
                'only',
                '-',
                'Sep',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1946',
                'only',
                '-',
                'Jun',
                '2',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1950',
                '1955',
                '-',
                'Sep',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1956',
                '1960',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ]
        ],
        'Detroit': [
            [
                '1948',
                'only',
                '-',
                'Apr',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1948',
                'only',
                '-',
                'Sep',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1967',
                'only',
                '-',
                'Jun',
                '14',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1967',
                'only',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ]
        ],
        'Menominee': [
            [
                '1946',
                'only',
                '-',
                'Apr',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1946',
                'only',
                '-',
                'Sep',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1966',
                'only',
                '-',
                'Apr',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1966',
                'only',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ]
        ],
        'Canada': [
            [
                '1918',
                'only',
                '-',
                'Apr',
                '14',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1918',
                'only',
                '-',
                'Oct',
                '27',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1942',
                'only',
                '-',
                'Feb',
                '9',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'W',
                ''
            ],
            [
                '1945',
                'only',
                '-',
                'Aug',
                '14',
                [
                    '23',
                    '0',
                    '0',
                    'u'
                ],
                '60',
                'P',
                ''
            ],
            [
                '1945',
                'only',
                '-',
                'Sep',
                '30',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1974',
                '1986',
                '-',
                'Apr',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1974',
                '2006',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1987',
                '2006',
                '-',
                'Apr',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '2007',
                'max',
                '-',
                'Mar',
                'Sun>=8',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '2007',
                'max',
                '-',
                'Nov',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ]
        ],
        'StJohns': [
            [
                '1917',
                'only',
                '-',
                'Apr',
                '8',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1917',
                'only',
                '-',
                'Sep',
                '17',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1919',
                'only',
                '-',
                'May',
                '5',
                [
                    '23',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1919',
                'only',
                '-',
                'Aug',
                '12',
                [
                    '23',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1920',
                '1935',
                '-',
                'May',
                'Sun>=1',
                [
                    '23',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1920',
                '1935',
                '-',
                'Oct',
                'lastSun',
                [
                    '23',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1936',
                '1941',
                '-',
                'May',
                'Mon>=9',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1936',
                '1941',
                '-',
                'Oct',
                'Mon>=2',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1946',
                '1950',
                '-',
                'May',
                'Sun>=8',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1946',
                '1950',
                '-',
                'Oct',
                'Sun>=2',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1951',
                '1986',
                '-',
                'Apr',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1951',
                '1959',
                '-',
                'Sep',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1960',
                '1986',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1987',
                'only',
                '-',
                'Apr',
                'Sun>=1',
                [
                    '0',
                    '1',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1987',
                '2006',
                '-',
                'Oct',
                'lastSun',
                [
                    '0',
                    '1',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1988',
                'only',
                '-',
                'Apr',
                'Sun>=1',
                [
                    '0',
                    '1',
                    '0'
                ],
                '120',
                'DD'
            ],
            [
                '1989',
                '2006',
                '-',
                'Apr',
                'Sun>=1',
                [
                    '0',
                    '1',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '2007',
                '2011',
                '-',
                'Mar',
                'Sun>=8',
                [
                    '0',
                    '1',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '2007',
                '2010',
                '-',
                'Nov',
                'Sun>=1',
                [
                    '0',
                    '1',
                    '0'
                ],
                '0',
                'S'
            ]
        ],
        'Halifax': [
            [
                '1916',
                'only',
                '-',
                'Apr',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1916',
                'only',
                '-',
                'Oct',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1920',
                'only',
                '-',
                'May',
                '9',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1920',
                'only',
                '-',
                'Aug',
                '29',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1921',
                'only',
                '-',
                'May',
                '6',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1921',
                '1922',
                '-',
                'Sep',
                '5',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1922',
                'only',
                '-',
                'Apr',
                '30',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1923',
                '1925',
                '-',
                'May',
                'Sun>=1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1923',
                'only',
                '-',
                'Sep',
                '4',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1924',
                'only',
                '-',
                'Sep',
                '15',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1925',
                'only',
                '-',
                'Sep',
                '28',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1926',
                'only',
                '-',
                'May',
                '16',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1926',
                'only',
                '-',
                'Sep',
                '13',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1927',
                'only',
                '-',
                'May',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1927',
                'only',
                '-',
                'Sep',
                '26',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1928',
                '1931',
                '-',
                'May',
                'Sun>=8',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1928',
                'only',
                '-',
                'Sep',
                '9',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1929',
                'only',
                '-',
                'Sep',
                '3',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1930',
                'only',
                '-',
                'Sep',
                '15',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1931',
                '1932',
                '-',
                'Sep',
                'Mon>=24',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1932',
                'only',
                '-',
                'May',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1933',
                'only',
                '-',
                'Apr',
                '30',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1933',
                'only',
                '-',
                'Oct',
                '2',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1934',
                'only',
                '-',
                'May',
                '20',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1934',
                'only',
                '-',
                'Sep',
                '16',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1935',
                'only',
                '-',
                'Jun',
                '2',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1935',
                'only',
                '-',
                'Sep',
                '30',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1936',
                'only',
                '-',
                'Jun',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1936',
                'only',
                '-',
                'Sep',
                '14',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1937',
                '1938',
                '-',
                'May',
                'Sun>=1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1937',
                '1941',
                '-',
                'Sep',
                'Mon>=24',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1939',
                'only',
                '-',
                'May',
                '28',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1940',
                '1941',
                '-',
                'May',
                'Sun>=1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1946',
                '1949',
                '-',
                'Apr',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1946',
                '1949',
                '-',
                'Sep',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1951',
                '1954',
                '-',
                'Apr',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1951',
                '1954',
                '-',
                'Sep',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1956',
                '1959',
                '-',
                'Apr',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1956',
                '1959',
                '-',
                'Sep',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1962',
                '1973',
                '-',
                'Apr',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1962',
                '1973',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ]
        ],
        'Moncton': [
            [
                '1933',
                '1935',
                '-',
                'Jun',
                'Sun>=8',
                [
                    '1',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1933',
                '1935',
                '-',
                'Sep',
                'Sun>=8',
                [
                    '1',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1936',
                '1938',
                '-',
                'Jun',
                'Sun>=1',
                [
                    '1',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1936',
                '1938',
                '-',
                'Sep',
                'Sun>=1',
                [
                    '1',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1939',
                'only',
                '-',
                'May',
                '27',
                [
                    '1',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1939',
                '1941',
                '-',
                'Sep',
                'Sat>=21',
                [
                    '1',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1940',
                'only',
                '-',
                'May',
                '19',
                [
                    '1',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1941',
                'only',
                '-',
                'May',
                '4',
                [
                    '1',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1946',
                '1972',
                '-',
                'Apr',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1946',
                '1956',
                '-',
                'Sep',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1957',
                '1972',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1993',
                '2006',
                '-',
                'Apr',
                'Sun>=1',
                [
                    '0',
                    '1',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1993',
                '2006',
                '-',
                'Oct',
                'lastSun',
                [
                    '0',
                    '1',
                    '0'
                ],
                '0',
                'S'
            ]
        ],
        'Mont': [
            [
                '1917',
                'only',
                '-',
                'Mar',
                '25',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1917',
                'only',
                '-',
                'Apr',
                '24',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1919',
                'only',
                '-',
                'Mar',
                '31',
                [
                    '2',
                    '30',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1919',
                'only',
                '-',
                'Oct',
                '25',
                [
                    '2',
                    '30',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1920',
                'only',
                '-',
                'May',
                '2',
                [
                    '2',
                    '30',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1920',
                '1922',
                '-',
                'Oct',
                'Sun>=1',
                [
                    '2',
                    '30',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1921',
                'only',
                '-',
                'May',
                '1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1922',
                'only',
                '-',
                'Apr',
                '30',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1924',
                'only',
                '-',
                'May',
                '17',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1924',
                '1926',
                '-',
                'Sep',
                'lastSun',
                [
                    '2',
                    '30',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1925',
                '1926',
                '-',
                'May',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1927',
                '1937',
                '-',
                'Apr',
                'lastSat',
                [
                    '24',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1927',
                '1937',
                '-',
                'Sep',
                'lastSat',
                [
                    '24',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1938',
                '1940',
                '-',
                'Apr',
                'lastSun',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1938',
                '1939',
                '-',
                'Sep',
                'lastSun',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1946',
                '1973',
                '-',
                'Apr',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1945',
                '1948',
                '-',
                'Sep',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1949',
                '1950',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1951',
                '1956',
                '-',
                'Sep',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1957',
                '1973',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ]
        ],
        'Toronto': [
            [
                '1919',
                'only',
                '-',
                'Mar',
                '30',
                [
                    '23',
                    '30',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1919',
                'only',
                '-',
                'Oct',
                '26',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1920',
                'only',
                '-',
                'May',
                '2',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1920',
                'only',
                '-',
                'Sep',
                '26',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1921',
                'only',
                '-',
                'May',
                '15',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1921',
                'only',
                '-',
                'Sep',
                '15',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1922',
                '1923',
                '-',
                'May',
                'Sun>=8',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1922',
                '1926',
                '-',
                'Sep',
                'Sun>=15',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1924',
                '1927',
                '-',
                'May',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1927',
                '1932',
                '-',
                'Sep',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1928',
                '1931',
                '-',
                'Apr',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1932',
                'only',
                '-',
                'May',
                '1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1933',
                '1940',
                '-',
                'Apr',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1933',
                'only',
                '-',
                'Oct',
                '1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1934',
                '1939',
                '-',
                'Sep',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1945',
                '1946',
                '-',
                'Sep',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1946',
                'only',
                '-',
                'Apr',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1947',
                '1949',
                '-',
                'Apr',
                'lastSun',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1947',
                '1948',
                '-',
                'Sep',
                'lastSun',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1949',
                'only',
                '-',
                'Nov',
                'lastSun',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1950',
                '1973',
                '-',
                'Apr',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1950',
                'only',
                '-',
                'Nov',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1951',
                '1956',
                '-',
                'Sep',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1957',
                '1973',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ]
        ],
        'Winn': [
            [
                '1916',
                'only',
                '-',
                'Apr',
                '23',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1916',
                'only',
                '-',
                'Sep',
                '17',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1918',
                'only',
                '-',
                'Apr',
                '14',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1918',
                'only',
                '-',
                'Oct',
                '27',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1937',
                'only',
                '-',
                'May',
                '16',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1937',
                'only',
                '-',
                'Sep',
                '26',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1942',
                'only',
                '-',
                'Feb',
                '9',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'W',
                ''
            ],
            [
                '1945',
                'only',
                '-',
                'Aug',
                '14',
                [
                    '23',
                    '0',
                    '0',
                    'u'
                ],
                '60',
                'P',
                ''
            ],
            [
                '1945',
                'only',
                '-',
                'Sep',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1946',
                'only',
                '-',
                'May',
                '12',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1946',
                'only',
                '-',
                'Oct',
                '13',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1947',
                '1949',
                '-',
                'Apr',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1947',
                '1949',
                '-',
                'Sep',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1950',
                'only',
                '-',
                'May',
                '1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1950',
                'only',
                '-',
                'Sep',
                '30',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1951',
                '1960',
                '-',
                'Apr',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1951',
                '1958',
                '-',
                'Sep',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1959',
                'only',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1960',
                'only',
                '-',
                'Sep',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1963',
                'only',
                '-',
                'Apr',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1963',
                'only',
                '-',
                'Sep',
                '22',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1966',
                '1986',
                '-',
                'Apr',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'D'
            ],
            [
                '1966',
                '2005',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '1987',
                '2005',
                '-',
                'Apr',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'D'
            ]
        ],
        'Regina': [
            [
                '1918',
                'only',
                '-',
                'Apr',
                '14',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1918',
                'only',
                '-',
                'Oct',
                '27',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1930',
                '1934',
                '-',
                'May',
                'Sun>=1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1930',
                '1934',
                '-',
                'Oct',
                'Sun>=1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1937',
                '1941',
                '-',
                'Apr',
                'Sun>=8',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1937',
                'only',
                '-',
                'Oct',
                'Sun>=8',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1938',
                'only',
                '-',
                'Oct',
                'Sun>=1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1939',
                '1941',
                '-',
                'Oct',
                'Sun>=8',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1942',
                'only',
                '-',
                'Feb',
                '9',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'W',
                ''
            ],
            [
                '1945',
                'only',
                '-',
                'Aug',
                '14',
                [
                    '23',
                    '0',
                    '0',
                    'u'
                ],
                '60',
                'P',
                ''
            ],
            [
                '1945',
                'only',
                '-',
                'Sep',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1946',
                'only',
                '-',
                'Apr',
                'Sun>=8',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1946',
                'only',
                '-',
                'Oct',
                'Sun>=8',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1947',
                '1957',
                '-',
                'Apr',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1947',
                '1957',
                '-',
                'Sep',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1959',
                'only',
                '-',
                'Apr',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1959',
                'only',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ]
        ],
        'Swift': [
            [
                '1957',
                'only',
                '-',
                'Apr',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1957',
                'only',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1959',
                '1961',
                '-',
                'Apr',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1959',
                'only',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1960',
                '1961',
                '-',
                'Sep',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ]
        ],
        'Edm': [
            [
                '1918',
                '1919',
                '-',
                'Apr',
                'Sun>=8',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1918',
                'only',
                '-',
                'Oct',
                '27',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1919',
                'only',
                '-',
                'May',
                '27',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1920',
                '1923',
                '-',
                'Apr',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1920',
                'only',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1921',
                '1923',
                '-',
                'Sep',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1942',
                'only',
                '-',
                'Feb',
                '9',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'W',
                ''
            ],
            [
                '1945',
                'only',
                '-',
                'Aug',
                '14',
                [
                    '23',
                    '0',
                    '0',
                    'u'
                ],
                '60',
                'P',
                ''
            ],
            [
                '1945',
                'only',
                '-',
                'Sep',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1947',
                'only',
                '-',
                'Apr',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1947',
                'only',
                '-',
                'Sep',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1967',
                'only',
                '-',
                'Apr',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1967',
                'only',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1969',
                'only',
                '-',
                'Apr',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1969',
                'only',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1972',
                '1986',
                '-',
                'Apr',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1972',
                '2006',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ]
        ],
        'Vanc': [
            [
                '1918',
                'only',
                '-',
                'Apr',
                '14',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1918',
                'only',
                '-',
                'Oct',
                '27',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1942',
                'only',
                '-',
                'Feb',
                '9',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'W',
                ''
            ],
            [
                '1945',
                'only',
                '-',
                'Aug',
                '14',
                [
                    '23',
                    '0',
                    '0',
                    'u'
                ],
                '60',
                'P',
                ''
            ],
            [
                '1945',
                'only',
                '-',
                'Sep',
                '30',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1946',
                '1986',
                '-',
                'Apr',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1946',
                'only',
                '-',
                'Oct',
                '13',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1947',
                '1961',
                '-',
                'Sep',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1962',
                '2006',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ]
        ],
        'NT_YK': [
            [
                '1918',
                'only',
                '-',
                'Apr',
                '14',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1918',
                'only',
                '-',
                'Oct',
                '27',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1919',
                'only',
                '-',
                'May',
                '25',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1919',
                'only',
                '-',
                'Nov',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1942',
                'only',
                '-',
                'Feb',
                '9',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'W',
                ''
            ],
            [
                '1945',
                'only',
                '-',
                'Aug',
                '14',
                [
                    '23',
                    '0',
                    '0',
                    'u'
                ],
                '60',
                'P',
                ''
            ],
            [
                '1945',
                'only',
                '-',
                'Sep',
                '30',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1965',
                'only',
                '-',
                'Apr',
                'lastSun',
                [
                    '0',
                    '0',
                    '0'
                ],
                '120',
                'DD'
            ],
            [
                '1965',
                'only',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1980',
                '1986',
                '-',
                'Apr',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1980',
                '2006',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1987',
                '2006',
                '-',
                'Apr',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ]
        ],
        'Mexico': [
            [
                '1939',
                'only',
                '-',
                'Feb',
                '5',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1939',
                'only',
                '-',
                'Jun',
                '25',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1940',
                'only',
                '-',
                'Dec',
                '9',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1941',
                'only',
                '-',
                'Apr',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1943',
                'only',
                '-',
                'Dec',
                '16',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'W',
                ''
            ],
            [
                '1944',
                'only',
                '-',
                'May',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1950',
                'only',
                '-',
                'Feb',
                '12',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1950',
                'only',
                '-',
                'Jul',
                '30',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1996',
                '2000',
                '-',
                'Apr',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1996',
                '2000',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '2001',
                'only',
                '-',
                'May',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '2001',
                'only',
                '-',
                'Sep',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '2002',
                'max',
                '-',
                'Apr',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '2002',
                'max',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ]
        ],
        'Bahamas': [
            [
                '1964',
                '1975',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1964',
                '1975',
                '-',
                'Apr',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ]
        ],
        'Barb': [
            [
                '1977',
                'only',
                '-',
                'Jun',
                '12',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1977',
                '1978',
                '-',
                'Oct',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1978',
                '1980',
                '-',
                'Apr',
                'Sun>=15',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1979',
                'only',
                '-',
                'Sep',
                '30',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1980',
                'only',
                '-',
                'Sep',
                '25',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ]
        ],
        'Belize': [
            [
                '1918',
                '1942',
                '-',
                'Oct',
                'Sun>=2',
                [
                    '0',
                    '0',
                    '0'
                ],
                '30',
                'HD'
            ],
            [
                '1919',
                '1943',
                '-',
                'Feb',
                'Sun>=9',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1973',
                'only',
                '-',
                'Dec',
                '5',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1974',
                'only',
                '-',
                'Feb',
                '9',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1982',
                'only',
                '-',
                'Dec',
                '18',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1983',
                'only',
                '-',
                'Feb',
                '12',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ]
        ],
        'CR': [
            [
                '1979',
                '1980',
                '-',
                'Feb',
                'lastSun',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1979',
                '1980',
                '-',
                'Jun',
                'Sun>=1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1991',
                '1992',
                '-',
                'Jan',
                'Sat>=15',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1991',
                'only',
                '-',
                'Jul',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1992',
                'only',
                '-',
                'Mar',
                '15',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ]
        ],
        'Cuba': [
            [
                '1928',
                'only',
                '-',
                'Jun',
                '10',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1928',
                'only',
                '-',
                'Oct',
                '10',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1940',
                '1942',
                '-',
                'Jun',
                'Sun>=1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1940',
                '1942',
                '-',
                'Sep',
                'Sun>=1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1945',
                '1946',
                '-',
                'Jun',
                'Sun>=1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1945',
                '1946',
                '-',
                'Sep',
                'Sun>=1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1965',
                'only',
                '-',
                'Jun',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1965',
                'only',
                '-',
                'Sep',
                '30',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1966',
                'only',
                '-',
                'May',
                '29',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1966',
                'only',
                '-',
                'Oct',
                '2',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1967',
                'only',
                '-',
                'Apr',
                '8',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1967',
                '1968',
                '-',
                'Sep',
                'Sun>=8',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1968',
                'only',
                '-',
                'Apr',
                '14',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1969',
                '1977',
                '-',
                'Apr',
                'lastSun',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1969',
                '1971',
                '-',
                'Oct',
                'lastSun',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1972',
                '1974',
                '-',
                'Oct',
                '8',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1975',
                '1977',
                '-',
                'Oct',
                'lastSun',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1978',
                'only',
                '-',
                'May',
                '7',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1978',
                '1990',
                '-',
                'Oct',
                'Sun>=8',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1979',
                '1980',
                '-',
                'Mar',
                'Sun>=15',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1981',
                '1985',
                '-',
                'May',
                'Sun>=5',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1986',
                '1989',
                '-',
                'Mar',
                'Sun>=14',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1990',
                '1997',
                '-',
                'Apr',
                'Sun>=1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1991',
                '1995',
                '-',
                'Oct',
                'Sun>=8',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '1996',
                'only',
                '-',
                'Oct',
                '6',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '1997',
                'only',
                '-',
                'Oct',
                '12',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '1998',
                '1999',
                '-',
                'Mar',
                'lastSun',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'D'
            ],
            [
                '1998',
                '2003',
                '-',
                'Oct',
                'lastSun',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '2000',
                '2003',
                '-',
                'Apr',
                'Sun>=1',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'D'
            ],
            [
                '2004',
                'only',
                '-',
                'Mar',
                'lastSun',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'D'
            ],
            [
                '2006',
                '2010',
                '-',
                'Oct',
                'lastSun',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '2007',
                'only',
                '-',
                'Mar',
                'Sun>=8',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'D'
            ],
            [
                '2008',
                'only',
                '-',
                'Mar',
                'Sun>=15',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'D'
            ],
            [
                '2009',
                '2010',
                '-',
                'Mar',
                'Sun>=8',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'D'
            ],
            [
                '2011',
                'only',
                '-',
                'Mar',
                'Sun>=15',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'D'
            ],
            [
                '2011',
                'only',
                '-',
                'Nov',
                '13',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '2012',
                'only',
                '-',
                'Apr',
                '1',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'D'
            ],
            [
                '2012',
                'max',
                '-',
                'Nov',
                'Sun>=1',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '2013',
                'max',
                '-',
                'Mar',
                'Sun>=8',
                [
                    '0',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'D'
            ]
        ],
        'DR': [
            [
                '1966',
                'only',
                '-',
                'Oct',
                '30',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1967',
                'only',
                '-',
                'Feb',
                '28',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1969',
                '1973',
                '-',
                'Oct',
                'lastSun',
                [
                    '0',
                    '0',
                    '0'
                ],
                '30',
                'HD'
            ],
            [
                '1970',
                'only',
                '-',
                'Feb',
                '21',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1971',
                'only',
                '-',
                'Jan',
                '20',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1972',
                '1974',
                '-',
                'Jan',
                '21',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ]
        ],
        'Salv': [
            [
                '1987',
                '1988',
                '-',
                'May',
                'Sun>=1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1987',
                '1988',
                '-',
                'Sep',
                'lastSun',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ]
        ],
        'Guat': [
            [
                '1973',
                'only',
                '-',
                'Nov',
                '25',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1974',
                'only',
                '-',
                'Feb',
                '24',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1983',
                'only',
                '-',
                'May',
                '21',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1983',
                'only',
                '-',
                'Sep',
                '22',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1991',
                'only',
                '-',
                'Mar',
                '23',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1991',
                'only',
                '-',
                'Sep',
                '7',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '2006',
                'only',
                '-',
                'Apr',
                '30',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '2006',
                'only',
                '-',
                'Oct',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ]
        ],
        'Haiti': [
            [
                '1983',
                'only',
                '-',
                'May',
                '8',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1984',
                '1987',
                '-',
                'Apr',
                'lastSun',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1983',
                '1987',
                '-',
                'Oct',
                'lastSun',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1988',
                '1997',
                '-',
                'Apr',
                'Sun>=1',
                [
                    '1',
                    '0',
                    '0',
                    's'
                ],
                '60',
                'D'
            ],
            [
                '1988',
                '1997',
                '-',
                'Oct',
                'lastSun',
                [
                    '1',
                    '0',
                    '0',
                    's'
                ],
                '0',
                'S'
            ],
            [
                '2005',
                '2006',
                '-',
                'Apr',
                'Sun>=1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '2005',
                '2006',
                '-',
                'Oct',
                'lastSun',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '2012',
                'max',
                '-',
                'Mar',
                'Sun>=8',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '2012',
                'max',
                '-',
                'Nov',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ]
        ],
        'Hond': [
            [
                '1987',
                '1988',
                '-',
                'May',
                'Sun>=1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1987',
                '1988',
                '-',
                'Sep',
                'lastSun',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '2006',
                'only',
                '-',
                'May',
                'Sun>=1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '2006',
                'only',
                '-',
                'Aug',
                'Mon>=1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ]
        ],
        'Nic': [
            [
                '1979',
                '1980',
                '-',
                'Mar',
                'Sun>=16',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1979',
                '1980',
                '-',
                'Jun',
                'Mon>=23',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '2005',
                'only',
                '-',
                'Apr',
                '10',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '2005',
                'only',
                '-',
                'Oct',
                'Sun>=1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '2006',
                'only',
                '-',
                'Apr',
                '30',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '2006',
                'only',
                '-',
                'Oct',
                'Sun>=1',
                [
                    '1',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ]
        ],
        'Arg': [
            [
                '1930',
                'only',
                '-',
                'Dec',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1931',
                'only',
                '-',
                'Apr',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1931',
                'only',
                '-',
                'Oct',
                '15',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1932',
                '1940',
                '-',
                'Mar',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1932',
                '1939',
                '-',
                'Nov',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1940',
                'only',
                '-',
                'Jul',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1941',
                'only',
                '-',
                'Jun',
                '15',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1941',
                'only',
                '-',
                'Oct',
                '15',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1943',
                'only',
                '-',
                'Aug',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1943',
                'only',
                '-',
                'Oct',
                '15',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1946',
                'only',
                '-',
                'Mar',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1946',
                'only',
                '-',
                'Oct',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1963',
                'only',
                '-',
                'Oct',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1963',
                'only',
                '-',
                'Dec',
                '15',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1964',
                '1966',
                '-',
                'Mar',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1964',
                '1966',
                '-',
                'Oct',
                '15',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1967',
                'only',
                '-',
                'Apr',
                '2',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1967',
                '1968',
                '-',
                'Oct',
                'Sun>=1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1968',
                '1969',
                '-',
                'Apr',
                'Sun>=1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1974',
                'only',
                '-',
                'Jan',
                '23',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1974',
                'only',
                '-',
                'May',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1988',
                'only',
                '-',
                'Dec',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1989',
                '1993',
                '-',
                'Mar',
                'Sun>=1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1989',
                '1992',
                '-',
                'Oct',
                'Sun>=15',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1999',
                'only',
                '-',
                'Oct',
                'Sun>=1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2000',
                'only',
                '-',
                'Mar',
                '3',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2007',
                'only',
                '-',
                'Dec',
                '30',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2008',
                '2009',
                '-',
                'Mar',
                'Sun>=15',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2008',
                'only',
                '-',
                'Oct',
                'Sun>=15',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ]
        ],
        'SanLuis': [
            [
                '2008',
                '2009',
                '-',
                'Mar',
                'Sun>=8',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2007',
                '2008',
                '-',
                'Oct',
                'Sun>=8',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ]
        ],
        'Brazil': [
            [
                '1931',
                'only',
                '-',
                'Oct',
                '3',
                [
                    '11',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1932',
                '1933',
                '-',
                'Apr',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1932',
                'only',
                '-',
                'Oct',
                '3',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1949',
                '1952',
                '-',
                'Dec',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1950',
                'only',
                '-',
                'Apr',
                '16',
                [
                    '1',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1951',
                '1952',
                '-',
                'Apr',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1953',
                'only',
                '-',
                'Mar',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1963',
                'only',
                '-',
                'Dec',
                '9',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1964',
                'only',
                '-',
                'Mar',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1965',
                'only',
                '-',
                'Jan',
                '31',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1965',
                'only',
                '-',
                'Mar',
                '31',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1965',
                'only',
                '-',
                'Dec',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1966',
                '1968',
                '-',
                'Mar',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1966',
                '1967',
                '-',
                'Nov',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1985',
                'only',
                '-',
                'Nov',
                '2',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1986',
                'only',
                '-',
                'Mar',
                '15',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1986',
                'only',
                '-',
                'Oct',
                '25',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1987',
                'only',
                '-',
                'Feb',
                '14',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1987',
                'only',
                '-',
                'Oct',
                '25',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1988',
                'only',
                '-',
                'Feb',
                '7',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1988',
                'only',
                '-',
                'Oct',
                '16',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1989',
                'only',
                '-',
                'Jan',
                '29',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1989',
                'only',
                '-',
                'Oct',
                '15',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1990',
                'only',
                '-',
                'Feb',
                '11',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1990',
                'only',
                '-',
                'Oct',
                '21',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1991',
                'only',
                '-',
                'Feb',
                '17',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1991',
                'only',
                '-',
                'Oct',
                '20',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1992',
                'only',
                '-',
                'Feb',
                '9',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1992',
                'only',
                '-',
                'Oct',
                '25',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1993',
                'only',
                '-',
                'Jan',
                '31',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1993',
                '1995',
                '-',
                'Oct',
                'Sun>=11',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1994',
                '1995',
                '-',
                'Feb',
                'Sun>=15',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1996',
                'only',
                '-',
                'Feb',
                '11',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1996',
                'only',
                '-',
                'Oct',
                '6',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1997',
                'only',
                '-',
                'Feb',
                '16',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1997',
                'only',
                '-',
                'Oct',
                '6',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1998',
                'only',
                '-',
                'Mar',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1998',
                'only',
                '-',
                'Oct',
                '11',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1999',
                'only',
                '-',
                'Feb',
                '21',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1999',
                'only',
                '-',
                'Oct',
                '3',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2000',
                'only',
                '-',
                'Feb',
                '27',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2000',
                '2001',
                '-',
                'Oct',
                'Sun>=8',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2001',
                '2006',
                '-',
                'Feb',
                'Sun>=15',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2002',
                'only',
                '-',
                'Nov',
                '3',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2003',
                'only',
                '-',
                'Oct',
                '19',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2004',
                'only',
                '-',
                'Nov',
                '2',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2005',
                'only',
                '-',
                'Oct',
                '16',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2006',
                'only',
                '-',
                'Nov',
                '5',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2007',
                'only',
                '-',
                'Feb',
                '25',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2007',
                'only',
                '-',
                'Oct',
                'Sun>=8',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2008',
                'max',
                '-',
                'Oct',
                'Sun>=15',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2008',
                '2011',
                '-',
                'Feb',
                'Sun>=15',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2012',
                'only',
                '-',
                'Feb',
                'Sun>=22',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2013',
                '2014',
                '-',
                'Feb',
                'Sun>=15',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2015',
                'only',
                '-',
                'Feb',
                'Sun>=22',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2016',
                '2022',
                '-',
                'Feb',
                'Sun>=15',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2023',
                'only',
                '-',
                'Feb',
                'Sun>=22',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2024',
                '2025',
                '-',
                'Feb',
                'Sun>=15',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2026',
                'only',
                '-',
                'Feb',
                'Sun>=22',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2027',
                '2033',
                '-',
                'Feb',
                'Sun>=15',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2034',
                'only',
                '-',
                'Feb',
                'Sun>=22',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2035',
                '2036',
                '-',
                'Feb',
                'Sun>=15',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2037',
                'only',
                '-',
                'Feb',
                'Sun>=22',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2038',
                'max',
                '-',
                'Feb',
                'Sun>=15',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ]
        ],
        'Chile': [
            [
                '1927',
                '1932',
                '-',
                'Sep',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1928',
                '1932',
                '-',
                'Apr',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1942',
                'only',
                '-',
                'Jun',
                '1',
                [
                    '4',
                    '0',
                    '0',
                    'u'
                ],
                '0',
                '-'
            ],
            [
                '1942',
                'only',
                '-',
                'Aug',
                '1',
                [
                    '5',
                    '0',
                    '0',
                    'u'
                ],
                '60',
                'S'
            ],
            [
                '1946',
                'only',
                '-',
                'Jul',
                '15',
                [
                    '4',
                    '0',
                    '0',
                    'u'
                ],
                '60',
                'S'
            ],
            [
                '1946',
                'only',
                '-',
                'Sep',
                '1',
                [
                    '3',
                    '0',
                    '0',
                    'u'
                ],
                '0',
                '-'
            ],
            [
                '1947',
                'only',
                '-',
                'Apr',
                '1',
                [
                    '4',
                    '0',
                    '0',
                    'u'
                ],
                '0',
                '-'
            ],
            [
                '1968',
                'only',
                '-',
                'Nov',
                '3',
                [
                    '4',
                    '0',
                    '0',
                    'u'
                ],
                '60',
                'S'
            ],
            [
                '1969',
                'only',
                '-',
                'Mar',
                '30',
                [
                    '3',
                    '0',
                    '0',
                    'u'
                ],
                '0',
                '-'
            ],
            [
                '1969',
                'only',
                '-',
                'Nov',
                '23',
                [
                    '4',
                    '0',
                    '0',
                    'u'
                ],
                '60',
                'S'
            ],
            [
                '1970',
                'only',
                '-',
                'Mar',
                '29',
                [
                    '3',
                    '0',
                    '0',
                    'u'
                ],
                '0',
                '-'
            ],
            [
                '1971',
                'only',
                '-',
                'Mar',
                '14',
                [
                    '3',
                    '0',
                    '0',
                    'u'
                ],
                '0',
                '-'
            ],
            [
                '1970',
                '1972',
                '-',
                'Oct',
                'Sun>=9',
                [
                    '4',
                    '0',
                    '0',
                    'u'
                ],
                '60',
                'S'
            ],
            [
                '1972',
                '1986',
                '-',
                'Mar',
                'Sun>=9',
                [
                    '3',
                    '0',
                    '0',
                    'u'
                ],
                '0',
                '-'
            ],
            [
                '1973',
                'only',
                '-',
                'Sep',
                '30',
                [
                    '4',
                    '0',
                    '0',
                    'u'
                ],
                '60',
                'S'
            ],
            [
                '1974',
                '1987',
                '-',
                'Oct',
                'Sun>=9',
                [
                    '4',
                    '0',
                    '0',
                    'u'
                ],
                '60',
                'S'
            ],
            [
                '1987',
                'only',
                '-',
                'Apr',
                '12',
                [
                    '3',
                    '0',
                    '0',
                    'u'
                ],
                '0',
                '-'
            ],
            [
                '1988',
                '1989',
                '-',
                'Mar',
                'Sun>=9',
                [
                    '3',
                    '0',
                    '0',
                    'u'
                ],
                '0',
                '-'
            ],
            [
                '1988',
                'only',
                '-',
                'Oct',
                'Sun>=1',
                [
                    '4',
                    '0',
                    '0',
                    'u'
                ],
                '60',
                'S'
            ],
            [
                '1989',
                'only',
                '-',
                'Oct',
                'Sun>=9',
                [
                    '4',
                    '0',
                    '0',
                    'u'
                ],
                '60',
                'S'
            ],
            [
                '1990',
                'only',
                '-',
                'Mar',
                '18',
                [
                    '3',
                    '0',
                    '0',
                    'u'
                ],
                '0',
                '-'
            ],
            [
                '1990',
                'only',
                '-',
                'Sep',
                '16',
                [
                    '4',
                    '0',
                    '0',
                    'u'
                ],
                '60',
                'S'
            ],
            [
                '1991',
                '1996',
                '-',
                'Mar',
                'Sun>=9',
                [
                    '3',
                    '0',
                    '0',
                    'u'
                ],
                '0',
                '-'
            ],
            [
                '1991',
                '1997',
                '-',
                'Oct',
                'Sun>=9',
                [
                    '4',
                    '0',
                    '0',
                    'u'
                ],
                '60',
                'S'
            ],
            [
                '1997',
                'only',
                '-',
                'Mar',
                '30',
                [
                    '3',
                    '0',
                    '0',
                    'u'
                ],
                '0',
                '-'
            ],
            [
                '1998',
                'only',
                '-',
                'Mar',
                'Sun>=9',
                [
                    '3',
                    '0',
                    '0',
                    'u'
                ],
                '0',
                '-'
            ],
            [
                '1998',
                'only',
                '-',
                'Sep',
                '27',
                [
                    '4',
                    '0',
                    '0',
                    'u'
                ],
                '60',
                'S'
            ],
            [
                '1999',
                'only',
                '-',
                'Apr',
                '4',
                [
                    '3',
                    '0',
                    '0',
                    'u'
                ],
                '0',
                '-'
            ],
            [
                '1999',
                '2010',
                '-',
                'Oct',
                'Sun>=9',
                [
                    '4',
                    '0',
                    '0',
                    'u'
                ],
                '60',
                'S'
            ],
            [
                '2000',
                '2007',
                '-',
                'Mar',
                'Sun>=9',
                [
                    '3',
                    '0',
                    '0',
                    'u'
                ],
                '0',
                '-'
            ],
            [
                '2008',
                'only',
                '-',
                'Mar',
                '30',
                [
                    '3',
                    '0',
                    '0',
                    'u'
                ],
                '0',
                '-'
            ],
            [
                '2009',
                'only',
                '-',
                'Mar',
                'Sun>=9',
                [
                    '3',
                    '0',
                    '0',
                    'u'
                ],
                '0',
                '-'
            ],
            [
                '2010',
                'only',
                '-',
                'Apr',
                'Sun>=1',
                [
                    '3',
                    '0',
                    '0',
                    'u'
                ],
                '0',
                '-'
            ],
            [
                '2011',
                'only',
                '-',
                'May',
                'Sun>=2',
                [
                    '3',
                    '0',
                    '0',
                    'u'
                ],
                '0',
                '-'
            ],
            [
                '2011',
                'only',
                '-',
                'Aug',
                'Sun>=16',
                [
                    '4',
                    '0',
                    '0',
                    'u'
                ],
                '60',
                'S'
            ],
            [
                '2012',
                'max',
                '-',
                'Apr',
                'Sun>=23',
                [
                    '3',
                    '0',
                    '0',
                    'u'
                ],
                '0',
                '-'
            ],
            [
                '2012',
                'max',
                '-',
                'Sep',
                'Sun>=2',
                [
                    '4',
                    '0',
                    '0',
                    'u'
                ],
                '60',
                'S'
            ]
        ],
        'CO': [
            [
                '1992',
                'only',
                '-',
                'May',
                '3',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1993',
                'only',
                '-',
                'Apr',
                '4',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ]
        ],
        'Falk': [
            [
                '1937',
                '1938',
                '-',
                'Sep',
                'lastSun',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1938',
                '1942',
                '-',
                'Mar',
                'Sun>=19',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1939',
                'only',
                '-',
                'Oct',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1940',
                '1942',
                '-',
                'Sep',
                'lastSun',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1943',
                'only',
                '-',
                'Jan',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1983',
                'only',
                '-',
                'Sep',
                'lastSun',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1984',
                '1985',
                '-',
                'Apr',
                'lastSun',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1984',
                'only',
                '-',
                'Sep',
                '16',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1985',
                '2000',
                '-',
                'Sep',
                'Sun>=9',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1986',
                '2000',
                '-',
                'Apr',
                'Sun>=16',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2001',
                '2010',
                '-',
                'Apr',
                'Sun>=15',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2001',
                '2010',
                '-',
                'Sep',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ]
        ],
        'Para': [
            [
                '1975',
                '1988',
                '-',
                'Oct',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1975',
                '1978',
                '-',
                'Mar',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1979',
                '1991',
                '-',
                'Apr',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1989',
                'only',
                '-',
                'Oct',
                '22',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1990',
                'only',
                '-',
                'Oct',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1991',
                'only',
                '-',
                'Oct',
                '6',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1992',
                'only',
                '-',
                'Mar',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1992',
                'only',
                '-',
                'Oct',
                '5',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1993',
                'only',
                '-',
                'Mar',
                '31',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1993',
                '1995',
                '-',
                'Oct',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1994',
                '1995',
                '-',
                'Feb',
                'lastSun',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1996',
                'only',
                '-',
                'Mar',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1996',
                '2001',
                '-',
                'Oct',
                'Sun>=1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1997',
                'only',
                '-',
                'Feb',
                'lastSun',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1998',
                '2001',
                '-',
                'Mar',
                'Sun>=1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2002',
                '2004',
                '-',
                'Apr',
                'Sun>=1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2002',
                '2003',
                '-',
                'Sep',
                'Sun>=1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2004',
                '2009',
                '-',
                'Oct',
                'Sun>=15',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2005',
                '2009',
                '-',
                'Mar',
                'Sun>=8',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2010',
                'max',
                '-',
                'Oct',
                'Sun>=1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2010',
                '2012',
                '-',
                'Apr',
                'Sun>=8',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2013',
                'max',
                '-',
                'Mar',
                'Sun>=22',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ]
        ],
        'Peru': [
            [
                '1938',
                'only',
                '-',
                'Jan',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1938',
                'only',
                '-',
                'Apr',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1938',
                '1939',
                '-',
                'Sep',
                'lastSun',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1939',
                '1940',
                '-',
                'Mar',
                'Sun>=24',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1986',
                '1987',
                '-',
                'Jan',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1986',
                '1987',
                '-',
                'Apr',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1990',
                'only',
                '-',
                'Jan',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1990',
                'only',
                '-',
                'Apr',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1994',
                'only',
                '-',
                'Jan',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1994',
                'only',
                '-',
                'Apr',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ]
        ],
        'Uruguay': [
            [
                '1923',
                'only',
                '-',
                'Oct',
                '2',
                [
                    '0',
                    '0',
                    '0'
                ],
                '30',
                'HS'
            ],
            [
                '1924',
                '1926',
                '-',
                'Apr',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1924',
                '1925',
                '-',
                'Oct',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '30',
                'HS'
            ],
            [
                '1933',
                '1935',
                '-',
                'Oct',
                'lastSun',
                [
                    '0',
                    '0',
                    '0'
                ],
                '30',
                'HS'
            ],
            [
                '1934',
                '1936',
                '-',
                'Mar',
                'Sat>=25',
                [
                    '23',
                    '30',
                    '0',
                    's'
                ],
                '0',
                '-'
            ],
            [
                '1936',
                'only',
                '-',
                'Nov',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '30',
                'HS'
            ],
            [
                '1937',
                '1941',
                '-',
                'Mar',
                'lastSun',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1937',
                '1940',
                '-',
                'Oct',
                'lastSun',
                [
                    '0',
                    '0',
                    '0'
                ],
                '30',
                'HS'
            ],
            [
                '1941',
                'only',
                '-',
                'Aug',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '30',
                'HS'
            ],
            [
                '1942',
                'only',
                '-',
                'Jan',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1942',
                'only',
                '-',
                'Dec',
                '14',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1943',
                'only',
                '-',
                'Mar',
                '14',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1959',
                'only',
                '-',
                'May',
                '24',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1959',
                'only',
                '-',
                'Nov',
                '15',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1960',
                'only',
                '-',
                'Jan',
                '17',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1960',
                'only',
                '-',
                'Mar',
                '6',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1965',
                '1967',
                '-',
                'Apr',
                'Sun>=1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1965',
                'only',
                '-',
                'Sep',
                '26',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1966',
                '1967',
                '-',
                'Oct',
                '31',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1968',
                '1970',
                '-',
                'May',
                '27',
                [
                    '0',
                    '0',
                    '0'
                ],
                '30',
                'HS'
            ],
            [
                '1968',
                '1970',
                '-',
                'Dec',
                '2',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1972',
                'only',
                '-',
                'Apr',
                '24',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1972',
                'only',
                '-',
                'Aug',
                '15',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1974',
                'only',
                '-',
                'Mar',
                '10',
                [
                    '0',
                    '0',
                    '0'
                ],
                '30',
                'HS'
            ],
            [
                '1974',
                'only',
                '-',
                'Dec',
                '22',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1976',
                'only',
                '-',
                'Oct',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1977',
                'only',
                '-',
                'Dec',
                '4',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1978',
                'only',
                '-',
                'Apr',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1979',
                'only',
                '-',
                'Oct',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1980',
                'only',
                '-',
                'May',
                '1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1987',
                'only',
                '-',
                'Dec',
                '14',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1988',
                'only',
                '-',
                'Mar',
                '14',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1988',
                'only',
                '-',
                'Dec',
                '11',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1989',
                'only',
                '-',
                'Mar',
                '12',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1989',
                'only',
                '-',
                'Oct',
                '29',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1990',
                '1992',
                '-',
                'Mar',
                'Sun>=1',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '1990',
                '1991',
                '-',
                'Oct',
                'Sun>=21',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1992',
                'only',
                '-',
                'Oct',
                '18',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '1993',
                'only',
                '-',
                'Feb',
                '28',
                [
                    '0',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2004',
                'only',
                '-',
                'Sep',
                '19',
                [
                    '0',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2005',
                'only',
                '-',
                'Mar',
                '27',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2005',
                'only',
                '-',
                'Oct',
                '9',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2006',
                'only',
                '-',
                'Mar',
                '12',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ],
            [
                '2006',
                'max',
                '-',
                'Oct',
                'Sun>=1',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'S'
            ],
            [
                '2007',
                'max',
                '-',
                'Mar',
                'Sun>=8',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                '-'
            ]
        ],
        'SystemV': [
            [
                'NaN',
                '1973',
                '-',
                'Apr',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                'NaN',
                '1973',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1974',
                'only',
                '-',
                'Jan',
                '6',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1974',
                'only',
                '-',
                'Nov',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1975',
                'only',
                '-',
                'Feb',
                '23',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1975',
                'only',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ],
            [
                '1976',
                'max',
                '-',
                'Apr',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '60',
                'D'
            ],
            [
                '1976',
                'max',
                '-',
                'Oct',
                'lastSun',
                [
                    '2',
                    '0',
                    '0'
                ],
                '0',
                'S'
            ]
        ]
    };
    kendo.timezone.zones_titles = [
        {
            'name': '(GMT) Casablanca',
            'other_zone': 'Morocco Standard Time'
        },
        {
            'name': '(GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London',
            'other_zone': 'GMT Standard Time'
        },
        {
            'name': '(GMT) Monrovia, Reykjavik',
            'other_zone': 'Greenwich Standard Time'
        },
        {
            'name': '(GMT+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna',
            'other_zone': 'W. Europe Standard Time'
        },
        {
            'name': '(GMT+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague',
            'other_zone': 'Central Europe Standard Time'
        },
        {
            'name': '(GMT+01:00) Brussels, Copenhagen, Madrid, Paris',
            'other_zone': 'Romance Standard Time'
        },
        {
            'name': '(GMT+01:00) Sarajevo, Skopje, Warsaw, Zagreb',
            'other_zone': 'Central European Standard Time'
        },
        {
            'name': '(GMT+01:00) West Central Africa',
            'other_zone': 'W. Central Africa Standard Time'
        },
        {
            'name': '(GMT+02:00) Amman',
            'other_zone': 'Jordan Standard Time'
        },
        {
            'name': '(GMT+02:00) Athens, Bucharest, Istanbul',
            'other_zone': 'GTB Standard Time'
        },
        {
            'name': '(GMT+02:00) Beirut',
            'other_zone': 'Middle East Standard Time'
        },
        {
            'name': '(GMT+02:00) Cairo',
            'other_zone': 'Egypt Standard Time'
        },
        {
            'name': '(GMT+02:00) Harare, Pretoria',
            'other_zone': 'South Africa Standard Time'
        },
        {
            'name': '(GMT+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius',
            'other_zone': 'FLE Standard Time'
        },
        {
            'name': '(GMT+02:00) Jerusalem',
            'other_zone': 'Israel Standard Time'
        },
        {
            'name': '(GMT+02:00) Minsk',
            'other_zone': 'E. Europe Standard Time'
        },
        {
            'name': '(GMT+02:00) Windhoek',
            'other_zone': 'Namibia Standard Time'
        },
        {
            'name': '(GMT+03:00) Baghdad',
            'other_zone': 'Arabic Standard Time'
        },
        {
            'name': '(GMT+03:00) Kuwait, Riyadh',
            'other_zone': 'Arab Standard Time'
        },
        {
            'name': '(GMT+03:00) Moscow, St. Petersburg, Volgograd',
            'other_zone': 'Russian Standard Time'
        },
        {
            'name': '(GMT+03:00) Nairobi',
            'other_zone': 'E. Africa Standard Time'
        },
        {
            'name': '(GMT+03:00) Tbilisi',
            'other_zone': 'Georgian Standard Time'
        },
        {
            'name': '(GMT+03:30) Tehran',
            'other_zone': 'Iran Standard Time'
        },
        {
            'name': '(GMT+04:00) Abu Dhabi, Muscat',
            'other_zone': 'Arabian Standard Time'
        },
        {
            'name': '(GMT+04:00) Baku',
            'other_zone': 'Azerbaijan Standard Time'
        },
        {
            'name': '(GMT+04:00) Port Louis',
            'other_zone': 'Mauritius Standard Time'
        },
        {
            'name': '(GMT+04:00) Yerevan',
            'other_zone': 'Caucasus Standard Time'
        },
        {
            'name': '(GMT+04:30) Kabul',
            'other_zone': 'Afghanistan Standard Time'
        },
        {
            'name': '(GMT+05:00) Ekaterinburg',
            'other_zone': 'Ekaterinburg Standard Time'
        },
        {
            'name': '(GMT+05:00) Islamabad, Karachi',
            'other_zone': 'Pakistan Standard Time'
        },
        {
            'name': '(GMT+05:00) Tashkent',
            'other_zone': 'West Asia Standard Time'
        },
        {
            'name': '(GMT+05:30) Chennai, Kolkata, Mumbai, New Delhi',
            'other_zone': 'India Standard Time'
        },
        {
            'name': '(GMT+05:30) Sri Jayawardenepura',
            'other_zone': 'Sri Lanka Standard Time'
        },
        {
            'name': '(GMT+05:45) Kathmandu',
            'other_zone': 'Nepal Standard Time'
        },
        {
            'name': '(GMT+06:00) Almaty, Novosibirsk',
            'other_zone': 'N. Central Asia Standard Time'
        },
        {
            'name': '(GMT+06:00) Astana, Dhaka',
            'other_zone': 'Central Asia Standard Time'
        },
        {
            'name': '(GMT+06:30) Yangon (Rangoon)',
            'other_zone': 'Myanmar Standard Time'
        },
        {
            'name': '(GMT+07:00) Bangkok, Hanoi, Jakarta',
            'other_zone': 'SE Asia Standard Time'
        },
        {
            'name': '(GMT+07:00) Krasnoyarsk',
            'other_zone': 'North Asia Standard Time'
        },
        {
            'name': '(GMT+08:00) Beijing, Chongqing, Hong Kong, Urumqi',
            'other_zone': 'China Standard Time'
        },
        {
            'name': '(GMT+08:00) Irkutsk, Ulaan Bataar',
            'other_zone': 'North Asia East Standard Time'
        },
        {
            'name': '(GMT+08:00) Kuala Lumpur, Singapore',
            'other_zone': 'Singapore Standard Time'
        },
        {
            'name': '(GMT+08:00) Perth',
            'other_zone': 'W. Australia Standard Time'
        },
        {
            'name': '(GMT+08:00) Taipei',
            'other_zone': 'Taipei Standard Time'
        },
        {
            'name': '(GMT+09:00) Osaka, Sapporo, Tokyo',
            'other_zone': 'Tokyo Standard Time'
        },
        {
            'name': '(GMT+09:00) Seoul',
            'other_zone': 'Korea Standard Time'
        },
        {
            'name': '(GMT+09:00) Yakutsk',
            'other_zone': 'Yakutsk Standard Time'
        },
        {
            'name': '(GMT+09:30) Adelaide',
            'other_zone': 'Cen. Australia Standard Time'
        },
        {
            'name': '(GMT+09:30) Darwin',
            'other_zone': 'AUS Central Standard Time'
        },
        {
            'name': '(GMT+10:00) Brisbane',
            'other_zone': 'E. Australia Standard Time'
        },
        {
            'name': '(GMT+10:00) Canberra, Melbourne, Sydney',
            'other_zone': 'AUS Eastern Standard Time'
        },
        {
            'name': '(GMT+10:00) Guam, Port Moresby',
            'other_zone': 'West Pacific Standard Time'
        },
        {
            'name': '(GMT+10:00) Hobart',
            'other_zone': 'Tasmania Standard Time'
        },
        {
            'name': '(GMT+10:00) Vladivostok',
            'other_zone': 'Vladivostok Standard Time'
        },
        {
            'name': '(GMT+11:00) Magadan, Solomon Is., New Caledonia',
            'other_zone': 'Central Pacific Standard Time'
        },
        {
            'name': '(GMT+12:00) Auckland, Wellington',
            'other_zone': 'New Zealand Standard Time'
        },
        {
            'name': '(GMT+12:00) Fiji, Kamchatka, Marshall Is.',
            'other_zone': 'Fiji Standard Time'
        },
        {
            'name': '(GMT+13:00) Nuku\'alofa',
            'other_zone': 'Tonga Standard Time'
        },
        {
            'name': '(GMT-01:00) Azores',
            'other_zone': 'Azores Standard Time'
        },
        {
            'name': '(GMT-01:00) Cape Verde Is.',
            'other_zone': 'Cape Verde Standard Time'
        },
        {
            'name': '(GMT-03:00) Brasilia',
            'other_zone': 'E. South America Standard Time'
        },
        {
            'name': '(GMT-03:00) Buenos Aires',
            'other_zone': 'Argentina Standard Time'
        },
        {
            'name': '(GMT-03:00) Georgetown',
            'other_zone': 'SA Eastern Standard Time'
        },
        {
            'name': '(GMT-03:00) Greenland',
            'other_zone': 'Greenland Standard Time'
        },
        {
            'name': '(GMT-03:00) Montevideo',
            'other_zone': 'Montevideo Standard Time'
        },
        {
            'name': '(GMT-03:30) Newfoundland',
            'other_zone': 'Newfoundland Standard Time'
        },
        {
            'name': '(GMT-04:00) Atlantic Time (Canada)',
            'other_zone': 'Atlantic Standard Time'
        },
        {
            'name': '(GMT-04:00) La Paz',
            'other_zone': 'SA Western Standard Time'
        },
        {
            'name': '(GMT-04:00) Manaus',
            'other_zone': 'Central Brazilian Standard Time'
        },
        {
            'name': '(GMT-04:00) Santiago',
            'other_zone': 'Pacific SA Standard Time'
        },
        {
            'name': '(GMT-04:30) Caracas',
            'other_zone': 'Venezuela Standard Time'
        },
        {
            'name': '(GMT-05:00) Bogota, Lima, Quito, Rio Branco',
            'other_zone': 'SA Pacific Standard Time'
        },
        {
            'name': '(GMT-05:00) Eastern Time (US & Canada)',
            'other_zone': 'Eastern Standard Time'
        },
        {
            'name': '(GMT-05:00) Indiana (East)',
            'other_zone': 'US Eastern Standard Time'
        },
        {
            'name': '(GMT-06:00) Central America',
            'other_zone': 'Central America Standard Time'
        },
        {
            'name': '(GMT-06:00) Central Time (US & Canada)',
            'other_zone': 'Central Standard Time'
        },
        {
            'name': '(GMT-06:00) Guadalajara, Mexico City, Monterrey',
            'other_zone': 'Central Standard Time (Mexico)'
        },
        {
            'name': '(GMT-06:00) Saskatchewan',
            'other_zone': 'Canada Central Standard Time'
        },
        {
            'name': '(GMT-07:00) Arizona',
            'other_zone': 'US Mountain Standard Time'
        },
        {
            'name': '(GMT-07:00) Chihuahua, La Paz, Mazatlan',
            'other_zone': 'Mountain Standard Time (Mexico)'
        },
        {
            'name': '(GMT-07:00) Mountain Time (US & Canada)',
            'other_zone': 'Mountain Standard Time'
        },
        {
            'name': '(GMT-08:00) Pacific Time (US & Canada)',
            'other_zone': 'Pacific Standard Time'
        },
        {
            'name': '(GMT-08:00) Tijuana, Baja California',
            'other_zone': 'Pacific Standard Time (Mexico)'
        },
        {
            'name': '(GMT-09:00) Alaska',
            'other_zone': 'Alaskan Standard Time'
        },
        {
            'name': '(GMT-10:00) Hawaii',
            'other_zone': 'Hawaiian Standard Time'
        },
        {
            'name': '(GMT-11:00) Midway Island, Samoa',
            'other_zone': 'Samoa Standard Time'
        },
        {
            'name': '(GMT-12:00) International Date Line West',
            'other_zone': 'Dateline Standard Time'
        }
    ];
    kendo.timezone.windows_zones = [
        {
            'other_zone': 'Dateline Standard Time',
            'zone': 'Etc/GMT+12',
            'territory': 'GMT+12'
        },
        {
            'other_zone': 'UTC-11',
            'zone': 'Etc/GMT+11',
            'territory': 'GMT+11'
        },
        {
            'other_zone': 'UTC-11',
            'zone': 'Pacific/Pago_Pago',
            'territory': 'Pago Pago'
        },
        {
            'other_zone': 'UTC-11',
            'zone': 'Pacific/Niue',
            'territory': 'Niue'
        },
        {
            'other_zone': 'UTC-11',
            'zone': 'Pacific/Midway',
            'territory': 'Midway'
        },
        {
            'other_zone': 'Hawaiian Standard Time',
            'zone': 'Pacific/Honolulu',
            'territory': 'Honolulu'
        },
        {
            'other_zone': 'Hawaiian Standard Time',
            'zone': 'Pacific/Rarotonga',
            'territory': 'Rarotonga'
        },
        {
            'other_zone': 'Hawaiian Standard Time',
            'zone': 'Pacific/Tahiti',
            'territory': 'Tahiti'
        },
        {
            'other_zone': 'Hawaiian Standard Time',
            'zone': 'Pacific/Johnston',
            'territory': 'Johnston'
        },
        {
            'other_zone': 'Hawaiian Standard Time',
            'zone': 'Etc/GMT+10',
            'territory': 'GMT+10'
        },
        {
            'other_zone': 'Alaskan Standard Time',
            'zone': 'America/Anchorage',
            'territory': 'Anchorage'
        },
        {
            'other_zone': 'Alaskan Standard Time',
            'zone': 'America/Juneau',
            'territory': 'Juneau'
        },
        {
            'other_zone': 'Alaskan Standard Time',
            'zone': 'America/Nome',
            'territory': 'Nome'
        },
        {
            'other_zone': 'Alaskan Standard Time',
            'zone': 'America/Sitka',
            'territory': 'Sitka'
        },
        {
            'other_zone': 'Alaskan Standard Time',
            'zone': 'America/Yakutat',
            'territory': 'Yakutat'
        },
        {
            'other_zone': 'Pacific Standard Time (Mexico)',
            'zone': 'America/Santa_Isabel',
            'territory': 'Santa Isabel'
        },
        {
            'other_zone': 'Pacific Standard Time',
            'zone': 'America/Los_Angeles',
            'territory': 'Los Angeles'
        },
        {
            'other_zone': 'Pacific Standard Time',
            'zone': 'America/Vancouver',
            'territory': 'Vancouver'
        },
        {
            'other_zone': 'Pacific Standard Time',
            'zone': 'America/Dawson',
            'territory': 'Dawson'
        },
        {
            'other_zone': 'Pacific Standard Time',
            'zone': 'America/Whitehorse',
            'territory': 'Whitehorse'
        },
        {
            'other_zone': 'Pacific Standard Time',
            'zone': 'America/Tijuana',
            'territory': 'Tijuana'
        },
        {
            'other_zone': 'US Mountain Standard Time',
            'zone': 'America/Phoenix',
            'territory': 'Phoenix'
        },
        {
            'other_zone': 'US Mountain Standard Time',
            'zone': 'America/Dawson_Creek',
            'territory': 'Dawson Creek'
        },
        {
            'other_zone': 'US Mountain Standard Time',
            'zone': 'America/Creston',
            'territory': 'Creston'
        },
        {
            'other_zone': 'US Mountain Standard Time',
            'zone': 'America/Hermosillo',
            'territory': 'Hermosillo'
        },
        {
            'other_zone': 'US Mountain Standard Time',
            'zone': 'Etc/GMT+7',
            'territory': 'GMT+7'
        },
        {
            'other_zone': 'Mountain Standard Time (Mexico)',
            'zone': 'America/Chihuahua',
            'territory': 'Chihuahua'
        },
        {
            'other_zone': 'Mountain Standard Time (Mexico)',
            'zone': 'America/Mazatlan',
            'territory': 'Mazatlan'
        },
        {
            'other_zone': 'Mountain Standard Time',
            'zone': 'America/Denver',
            'territory': 'Denver'
        },
        {
            'other_zone': 'Mountain Standard Time',
            'zone': 'America/Edmonton',
            'territory': 'Edmonton'
        },
        {
            'other_zone': 'Mountain Standard Time',
            'zone': 'America/Cambridge_Bay',
            'territory': 'Cambridge Bay'
        },
        {
            'other_zone': 'Mountain Standard Time',
            'zone': 'America/Inuvik',
            'territory': 'Inuvik'
        },
        {
            'other_zone': 'Mountain Standard Time',
            'zone': 'America/Yellowknife',
            'territory': 'Yellowknife'
        },
        {
            'other_zone': 'Mountain Standard Time',
            'zone': 'America/Ojinaga',
            'territory': 'Ojinaga'
        },
        {
            'other_zone': 'Mountain Standard Time',
            'zone': 'America/Boise',
            'territory': 'Boise'
        },
        {
            'other_zone': 'Mountain Standard Time',
            'zone': 'America/Shiprock',
            'territory': 'Shiprock'
        },
        {
            'other_zone': 'Central America Standard Time',
            'zone': 'America/Guatemala',
            'territory': 'Guatemala'
        },
        {
            'other_zone': 'Central America Standard Time',
            'zone': 'America/Belize',
            'territory': 'Belize'
        },
        {
            'other_zone': 'Central America Standard Time',
            'zone': 'America/Costa_Rica',
            'territory': 'Costa Rica'
        },
        {
            'other_zone': 'Central America Standard Time',
            'zone': 'Pacific/Galapagos',
            'territory': 'Galapagos'
        },
        {
            'other_zone': 'Central America Standard Time',
            'zone': 'America/Tegucigalpa',
            'territory': 'Tegucigalpa'
        },
        {
            'other_zone': 'Central America Standard Time',
            'zone': 'America/Managua',
            'territory': 'Managua'
        },
        {
            'other_zone': 'Central America Standard Time',
            'zone': 'America/El_Salvador',
            'territory': 'El Salvador'
        },
        {
            'other_zone': 'Central America Standard Time',
            'zone': 'Etc/GMT+6',
            'territory': 'GMT+6'
        },
        {
            'other_zone': 'Central Standard Time',
            'zone': 'America/Chicago',
            'territory': 'Chicago'
        },
        {
            'other_zone': 'Central Standard Time',
            'zone': 'America/Winnipeg',
            'territory': 'Winnipeg'
        },
        {
            'other_zone': 'Central Standard Time',
            'zone': 'America/Rainy_River',
            'territory': 'Rainy River'
        },
        {
            'other_zone': 'Central Standard Time',
            'zone': 'America/Rankin_Inlet',
            'territory': 'Rankin Inlet'
        },
        {
            'other_zone': 'Central Standard Time',
            'zone': 'America/Resolute',
            'territory': 'Resolute'
        },
        {
            'other_zone': 'Central Standard Time',
            'zone': 'America/Matamoros',
            'territory': 'Matamoros'
        },
        {
            'other_zone': 'Central Standard Time',
            'zone': 'America/Indiana/Knox',
            'territory': 'Indiana'
        },
        {
            'other_zone': 'Central Standard Time',
            'zone': 'America/Indiana/Tell_City',
            'territory': 'Indiana'
        },
        {
            'other_zone': 'Central Standard Time',
            'zone': 'America/Menominee',
            'territory': 'Menominee'
        },
        {
            'other_zone': 'Central Standard Time',
            'zone': 'America/North_Dakota/Beulah',
            'territory': 'North Dakota'
        },
        {
            'other_zone': 'Central Standard Time',
            'zone': 'America/North_Dakota/Center',
            'territory': 'North Dakota'
        },
        {
            'other_zone': 'Central Standard Time',
            'zone': 'America/North_Dakota/New_Salem',
            'territory': 'North Dakota'
        },
        {
            'other_zone': 'Central Standard Time (Mexico)',
            'zone': 'America/Mexico_City',
            'territory': 'Mexico City'
        },
        {
            'other_zone': 'Central Standard Time (Mexico)',
            'zone': 'America/Bahia_Banderas',
            'territory': 'Bahia Banderas'
        },
        {
            'other_zone': 'Central Standard Time (Mexico)',
            'zone': 'America/Cancun',
            'territory': 'Cancun'
        },
        {
            'other_zone': 'Central Standard Time (Mexico)',
            'zone': 'America/Merida',
            'territory': 'Merida'
        },
        {
            'other_zone': 'Central Standard Time (Mexico)',
            'zone': 'America/Monterrey',
            'territory': 'Monterrey'
        },
        {
            'other_zone': 'Canada Central Standard Time',
            'zone': 'America/Regina',
            'territory': 'Regina'
        },
        {
            'other_zone': 'Canada Central Standard Time',
            'zone': 'America/Swift_Current',
            'territory': 'Swift Current'
        },
        {
            'other_zone': 'SA Pacific Standard Time',
            'zone': 'America/Bogota',
            'territory': 'Bogota'
        },
        {
            'other_zone': 'SA Pacific Standard Time',
            'zone': 'America/Coral_Harbour',
            'territory': 'Coral Harbour'
        },
        {
            'other_zone': 'SA Pacific Standard Time',
            'zone': 'America/Guayaquil',
            'territory': 'Guayaquil'
        },
        {
            'other_zone': 'SA Pacific Standard Time',
            'zone': 'America/Port-au-Prince',
            'territory': 'Port-au-Prince'
        },
        {
            'other_zone': 'SA Pacific Standard Time',
            'zone': 'America/Jamaica',
            'territory': 'Jamaica'
        },
        {
            'other_zone': 'SA Pacific Standard Time',
            'zone': 'America/Cayman',
            'territory': 'Cayman'
        },
        {
            'other_zone': 'SA Pacific Standard Time',
            'zone': 'America/Panama',
            'territory': 'Panama'
        },
        {
            'other_zone': 'SA Pacific Standard Time',
            'zone': 'America/Lima',
            'territory': 'Lima'
        },
        {
            'other_zone': 'SA Pacific Standard Time',
            'zone': 'Etc/GMT+5',
            'territory': 'GMT+5'
        },
        {
            'other_zone': 'Eastern Standard Time',
            'zone': 'America/New_York',
            'territory': 'New York'
        },
        {
            'other_zone': 'Eastern Standard Time',
            'zone': 'America/Nassau',
            'territory': 'Nassau'
        },
        {
            'other_zone': 'Eastern Standard Time',
            'zone': 'America/Toronto',
            'territory': 'Toronto'
        },
        {
            'other_zone': 'Eastern Standard Time',
            'zone': 'America/Iqaluit',
            'territory': 'Iqaluit'
        },
        {
            'other_zone': 'Eastern Standard Time',
            'zone': 'America/Montreal',
            'territory': 'Montreal'
        },
        {
            'other_zone': 'Eastern Standard Time',
            'zone': 'America/Nipigon',
            'territory': 'Nipigon'
        },
        {
            'other_zone': 'Eastern Standard Time',
            'zone': 'America/Pangnirtung',
            'territory': 'Pangnirtung'
        },
        {
            'other_zone': 'Eastern Standard Time',
            'zone': 'America/Thunder_Bay',
            'territory': 'Thunder Bay'
        },
        {
            'other_zone': 'Eastern Standard Time',
            'zone': 'America/Grand_Turk',
            'territory': 'Grand Turk'
        },
        {
            'other_zone': 'Eastern Standard Time',
            'zone': 'America/Detroit',
            'territory': 'Detroit'
        },
        {
            'other_zone': 'Eastern Standard Time',
            'zone': 'America/Indiana/Petersburg',
            'territory': 'Indiana'
        },
        {
            'other_zone': 'Eastern Standard Time',
            'zone': 'America/Indiana/Vincennes',
            'territory': 'Indiana'
        },
        {
            'other_zone': 'Eastern Standard Time',
            'zone': 'America/Indiana/Winamac',
            'territory': 'Indiana'
        },
        {
            'other_zone': 'Eastern Standard Time',
            'zone': 'America/Kentucky/Monticello',
            'territory': 'Kentucky'
        },
        {
            'other_zone': 'Eastern Standard Time',
            'zone': 'America/Louisville',
            'territory': 'Louisville'
        },
        {
            'other_zone': 'US Eastern Standard Time',
            'zone': 'America/Indianapolis',
            'territory': 'Indianapolis'
        },
        {
            'other_zone': 'US Eastern Standard Time',
            'zone': 'America/Indiana/Marengo',
            'territory': 'Indiana'
        },
        {
            'other_zone': 'US Eastern Standard Time',
            'zone': 'America/Indiana/Vevay',
            'territory': 'Indiana'
        },
        {
            'other_zone': 'Venezuela Standard Time',
            'zone': 'America/Caracas',
            'territory': 'Caracas'
        },
        {
            'other_zone': 'Paraguay Standard Time',
            'zone': 'America/Asuncion',
            'territory': 'Asuncion'
        },
        {
            'other_zone': 'Atlantic Standard Time',
            'zone': 'America/Halifax',
            'territory': 'Halifax'
        },
        {
            'other_zone': 'Atlantic Standard Time',
            'zone': 'Atlantic/Bermuda',
            'territory': 'Bermuda'
        },
        {
            'other_zone': 'Atlantic Standard Time',
            'zone': 'America/Glace_Bay',
            'territory': 'Glace Bay'
        },
        {
            'other_zone': 'Atlantic Standard Time',
            'zone': 'America/Goose_Bay',
            'territory': 'Goose Bay'
        },
        {
            'other_zone': 'Atlantic Standard Time',
            'zone': 'America/Moncton',
            'territory': 'Moncton'
        },
        {
            'other_zone': 'Atlantic Standard Time',
            'zone': 'America/Thule',
            'territory': 'Thule'
        },
        {
            'other_zone': 'Central Brazilian Standard Time',
            'zone': 'America/Cuiaba',
            'territory': 'Cuiaba'
        },
        {
            'other_zone': 'Central Brazilian Standard Time',
            'zone': 'America/Campo_Grande',
            'territory': 'Campo Grande'
        },
        {
            'other_zone': 'SA Western Standard Time',
            'zone': 'America/La_Paz',
            'territory': 'La Paz'
        },
        {
            'other_zone': 'SA Western Standard Time',
            'zone': 'America/Antigua',
            'territory': 'Antigua'
        },
        {
            'other_zone': 'SA Western Standard Time',
            'zone': 'America/Anguilla',
            'territory': 'Anguilla'
        },
        {
            'other_zone': 'SA Western Standard Time',
            'zone': 'America/Aruba',
            'territory': 'Aruba'
        },
        {
            'other_zone': 'SA Western Standard Time',
            'zone': 'America/Barbados',
            'territory': 'Barbados'
        },
        {
            'other_zone': 'SA Western Standard Time',
            'zone': 'America/St_Barthelemy',
            'territory': 'St Barthelemy'
        },
        {
            'other_zone': 'SA Western Standard Time',
            'zone': 'America/Kralendijk',
            'territory': 'Kralendijk'
        },
        {
            'other_zone': 'SA Western Standard Time',
            'zone': 'America/Manaus',
            'territory': 'Manaus'
        },
        {
            'other_zone': 'SA Western Standard Time',
            'zone': 'America/Boa_Vista',
            'territory': 'Boa Vista'
        },
        {
            'other_zone': 'SA Western Standard Time',
            'zone': 'America/Eirunepe',
            'territory': 'Eirunepe'
        },
        {
            'other_zone': 'SA Western Standard Time',
            'zone': 'America/Porto_Velho',
            'territory': 'Porto Velho'
        },
        {
            'other_zone': 'SA Western Standard Time',
            'zone': 'America/Rio_Branco',
            'territory': 'Rio Branco'
        },
        {
            'other_zone': 'SA Western Standard Time',
            'zone': 'America/Blanc-Sablon',
            'territory': 'Blanc-Sablon'
        },
        {
            'other_zone': 'SA Western Standard Time',
            'zone': 'America/Curacao',
            'territory': 'Curacao'
        },
        {
            'other_zone': 'SA Western Standard Time',
            'zone': 'America/Dominica',
            'territory': 'Dominica'
        },
        {
            'other_zone': 'SA Western Standard Time',
            'zone': 'America/Santo_Domingo',
            'territory': 'Santo Domingo'
        },
        {
            'other_zone': 'SA Western Standard Time',
            'zone': 'America/Grenada',
            'territory': 'Grenada'
        },
        {
            'other_zone': 'SA Western Standard Time',
            'zone': 'America/Guadeloupe',
            'territory': 'Guadeloupe'
        },
        {
            'other_zone': 'SA Western Standard Time',
            'zone': 'America/Guyana',
            'territory': 'Guyana'
        },
        {
            'other_zone': 'SA Western Standard Time',
            'zone': 'America/St_Kitts',
            'territory': 'St Kitts'
        },
        {
            'other_zone': 'SA Western Standard Time',
            'zone': 'America/St_Lucia',
            'territory': 'St Lucia'
        },
        {
            'other_zone': 'SA Western Standard Time',
            'zone': 'America/Marigot',
            'territory': 'Marigot'
        },
        {
            'other_zone': 'SA Western Standard Time',
            'zone': 'America/Martinique',
            'territory': 'Martinique'
        },
        {
            'other_zone': 'SA Western Standard Time',
            'zone': 'America/Montserrat',
            'territory': 'Montserrat'
        },
        {
            'other_zone': 'SA Western Standard Time',
            'zone': 'America/Puerto_Rico',
            'territory': 'Puerto Rico'
        },
        {
            'other_zone': 'SA Western Standard Time',
            'zone': 'America/Lower_Princes',
            'territory': 'Lower Princes'
        },
        {
            'other_zone': 'SA Western Standard Time',
            'zone': 'America/Port_of_Spain',
            'territory': 'Port of Spain'
        },
        {
            'other_zone': 'SA Western Standard Time',
            'zone': 'America/St_Vincent',
            'territory': 'St Vincent'
        },
        {
            'other_zone': 'SA Western Standard Time',
            'zone': 'America/Tortola',
            'territory': 'Tortola'
        },
        {
            'other_zone': 'SA Western Standard Time',
            'zone': 'America/St_Thomas',
            'territory': 'St Thomas'
        },
        {
            'other_zone': 'SA Western Standard Time',
            'zone': 'Etc/GMT+4',
            'territory': 'GMT+4'
        },
        {
            'other_zone': 'Pacific SA Standard Time',
            'zone': 'America/Santiago',
            'territory': 'Santiago'
        },
        {
            'other_zone': 'Pacific SA Standard Time',
            'zone': 'Antarctica/Palmer',
            'territory': 'Palmer'
        },
        {
            'other_zone': 'Newfoundland Standard Time',
            'zone': 'America/St_Johns',
            'territory': 'St Johns'
        },
        {
            'other_zone': 'E. South America Standard Time',
            'zone': 'America/Sao_Paulo',
            'territory': 'Sao Paulo'
        },
        {
            'other_zone': 'E. South America Standard Time',
            'zone': 'America/Araguaina',
            'territory': 'Araguaina'
        },
        {
            'other_zone': 'Argentina Standard Time',
            'zone': 'America/Buenos_Aires',
            'territory': 'Buenos Aires'
        },
        {
            'other_zone': 'Argentina Standard Time',
            'zone': 'America/Argentina/La_Rioja',
            'territory': 'Argentina'
        },
        {
            'other_zone': 'Argentina Standard Time',
            'zone': 'America/Argentina/Rio_Gallegos',
            'territory': 'Argentina'
        },
        {
            'other_zone': 'Argentina Standard Time',
            'zone': 'America/Argentina/Salta',
            'territory': 'Argentina'
        },
        {
            'other_zone': 'Argentina Standard Time',
            'zone': 'America/Argentina/San_Juan',
            'territory': 'Argentina'
        },
        {
            'other_zone': 'Argentina Standard Time',
            'zone': 'America/Argentina/San_Luis',
            'territory': 'Argentina'
        },
        {
            'other_zone': 'Argentina Standard Time',
            'zone': 'America/Argentina/Tucuman',
            'territory': 'Argentina'
        },
        {
            'other_zone': 'Argentina Standard Time',
            'zone': 'America/Argentina/Ushuaia',
            'territory': 'Argentina'
        },
        {
            'other_zone': 'Argentina Standard Time',
            'zone': 'America/Catamarca',
            'territory': 'Catamarca'
        },
        {
            'other_zone': 'Argentina Standard Time',
            'zone': 'America/Cordoba',
            'territory': 'Cordoba'
        },
        {
            'other_zone': 'Argentina Standard Time',
            'zone': 'America/Jujuy',
            'territory': 'Jujuy'
        },
        {
            'other_zone': 'Argentina Standard Time',
            'zone': 'America/Mendoza',
            'territory': 'Mendoza'
        },
        {
            'other_zone': 'SA Eastern Standard Time',
            'zone': 'America/Cayenne',
            'territory': 'Cayenne'
        },
        {
            'other_zone': 'SA Eastern Standard Time',
            'zone': 'Antarctica/Rothera',
            'territory': 'Rothera'
        },
        {
            'other_zone': 'SA Eastern Standard Time',
            'zone': 'America/Fortaleza',
            'territory': 'Fortaleza'
        },
        {
            'other_zone': 'SA Eastern Standard Time',
            'zone': 'America/Belem',
            'territory': 'Belem'
        },
        {
            'other_zone': 'SA Eastern Standard Time',
            'zone': 'America/Maceio',
            'territory': 'Maceio'
        },
        {
            'other_zone': 'SA Eastern Standard Time',
            'zone': 'America/Recife',
            'territory': 'Recife'
        },
        {
            'other_zone': 'SA Eastern Standard Time',
            'zone': 'America/Santarem',
            'territory': 'Santarem'
        },
        {
            'other_zone': 'SA Eastern Standard Time',
            'zone': 'Atlantic/Stanley',
            'territory': 'Stanley'
        },
        {
            'other_zone': 'SA Eastern Standard Time',
            'zone': 'America/Paramaribo',
            'territory': 'Paramaribo'
        },
        {
            'other_zone': 'SA Eastern Standard Time',
            'zone': 'Etc/GMT+3',
            'territory': 'GMT+3'
        },
        {
            'other_zone': 'Greenland Standard Time',
            'zone': 'America/Godthab',
            'territory': 'Godthab'
        },
        {
            'other_zone': 'Montevideo Standard Time',
            'zone': 'America/Montevideo',
            'territory': 'Montevideo'
        },
        {
            'other_zone': 'Bahia Standard Time',
            'zone': 'America/Bahia',
            'territory': 'Bahia'
        },
        {
            'other_zone': 'UTC-02',
            'zone': 'Etc/GMT+2',
            'territory': 'GMT+2'
        },
        {
            'other_zone': 'UTC-02',
            'zone': 'America/Noronha',
            'territory': 'Noronha'
        },
        {
            'other_zone': 'UTC-02',
            'zone': 'Atlantic/South_Georgia',
            'territory': 'South Georgia'
        },
        {
            'other_zone': 'Azores Standard Time',
            'zone': 'Atlantic/Azores',
            'territory': 'Azores'
        },
        {
            'other_zone': 'Azores Standard Time',
            'zone': 'America/Scoresbysund',
            'territory': 'Scoresbysund'
        },
        {
            'other_zone': 'Cape Verde Standard Time',
            'zone': 'Atlantic/Cape_Verde',
            'territory': 'Cape Verde'
        },
        {
            'other_zone': 'Cape Verde Standard Time',
            'zone': 'Etc/GMT+1',
            'territory': 'GMT+1'
        },
        {
            'other_zone': 'Morocco Standard Time',
            'zone': 'Africa/Casablanca',
            'territory': 'Casablanca'
        },
        {
            'other_zone': 'UTC',
            'zone': 'Etc/GMT',
            'territory': 'GMT'
        },
        {
            'other_zone': 'UTC',
            'zone': 'America/Danmarkshavn',
            'territory': 'Danmarkshavn'
        },
        {
            'other_zone': 'GMT Standard Time',
            'zone': 'Europe/London',
            'territory': 'London'
        },
        {
            'other_zone': 'GMT Standard Time',
            'zone': 'Atlantic/Canary',
            'territory': 'Canary'
        },
        {
            'other_zone': 'GMT Standard Time',
            'zone': 'Atlantic/Faeroe',
            'territory': 'Faeroe'
        },
        {
            'other_zone': 'GMT Standard Time',
            'zone': 'Europe/Guernsey',
            'territory': 'Guernsey'
        },
        {
            'other_zone': 'GMT Standard Time',
            'zone': 'Europe/Dublin',
            'territory': 'Dublin'
        },
        {
            'other_zone': 'GMT Standard Time',
            'zone': 'Europe/Isle_of_Man',
            'territory': 'Isle of Man'
        },
        {
            'other_zone': 'GMT Standard Time',
            'zone': 'Europe/Jersey',
            'territory': 'Jersey'
        },
        {
            'other_zone': 'GMT Standard Time',
            'zone': 'Europe/Lisbon',
            'territory': 'Lisbon'
        },
        {
            'other_zone': 'GMT Standard Time',
            'zone': 'Atlantic/Madeira',
            'territory': 'Madeira'
        },
        {
            'other_zone': 'Greenwich Standard Time',
            'zone': 'Atlantic/Reykjavik',
            'territory': 'Reykjavik'
        },
        {
            'other_zone': 'Greenwich Standard Time',
            'zone': 'Africa/Ouagadougou',
            'territory': 'Ouagadougou'
        },
        {
            'other_zone': 'Greenwich Standard Time',
            'zone': 'Africa/Abidjan',
            'territory': 'Abidjan'
        },
        {
            'other_zone': 'Greenwich Standard Time',
            'zone': 'Africa/El_Aaiun',
            'territory': 'El Aaiun'
        },
        {
            'other_zone': 'Greenwich Standard Time',
            'zone': 'Africa/Accra',
            'territory': 'Accra'
        },
        {
            'other_zone': 'Greenwich Standard Time',
            'zone': 'Africa/Banjul',
            'territory': 'Banjul'
        },
        {
            'other_zone': 'Greenwich Standard Time',
            'zone': 'Africa/Conakry',
            'territory': 'Conakry'
        },
        {
            'other_zone': 'Greenwich Standard Time',
            'zone': 'Africa/Bissau',
            'territory': 'Bissau'
        },
        {
            'other_zone': 'Greenwich Standard Time',
            'zone': 'Africa/Monrovia',
            'territory': 'Monrovia'
        },
        {
            'other_zone': 'Greenwich Standard Time',
            'zone': 'Africa/Bamako',
            'territory': 'Bamako'
        },
        {
            'other_zone': 'Greenwich Standard Time',
            'zone': 'Africa/Nouakchott',
            'territory': 'Nouakchott'
        },
        {
            'other_zone': 'Greenwich Standard Time',
            'zone': 'Atlantic/St_Helena',
            'territory': 'St Helena'
        },
        {
            'other_zone': 'Greenwich Standard Time',
            'zone': 'Africa/Freetown',
            'territory': 'Freetown'
        },
        {
            'other_zone': 'Greenwich Standard Time',
            'zone': 'Africa/Dakar',
            'territory': 'Dakar'
        },
        {
            'other_zone': 'Greenwich Standard Time',
            'zone': 'Africa/Sao_Tome',
            'territory': 'Sao Tome'
        },
        {
            'other_zone': 'Greenwich Standard Time',
            'zone': 'Africa/Lome',
            'territory': 'Lome'
        },
        {
            'other_zone': 'W. Europe Standard Time',
            'zone': 'Europe/Berlin',
            'territory': 'Berlin'
        },
        {
            'other_zone': 'W. Europe Standard Time',
            'zone': 'Europe/Andorra',
            'territory': 'Andorra'
        },
        {
            'other_zone': 'W. Europe Standard Time',
            'zone': 'Europe/Vienna',
            'territory': 'Vienna'
        },
        {
            'other_zone': 'W. Europe Standard Time',
            'zone': 'Europe/Zurich',
            'territory': 'Zurich'
        },
        {
            'other_zone': 'W. Europe Standard Time',
            'zone': 'Europe/Busingen',
            'territory': 'Busingen'
        },
        {
            'other_zone': 'W. Europe Standard Time',
            'zone': 'Europe/Gibraltar',
            'territory': 'Gibraltar'
        },
        {
            'other_zone': 'W. Europe Standard Time',
            'zone': 'Europe/Rome',
            'territory': 'Rome'
        },
        {
            'other_zone': 'W. Europe Standard Time',
            'zone': 'Europe/Vaduz',
            'territory': 'Vaduz'
        },
        {
            'other_zone': 'W. Europe Standard Time',
            'zone': 'Europe/Luxembourg',
            'territory': 'Luxembourg'
        },
        {
            'other_zone': 'W. Europe Standard Time',
            'zone': 'Africa/Tripoli',
            'territory': 'Tripoli'
        },
        {
            'other_zone': 'W. Europe Standard Time',
            'zone': 'Europe/Monaco',
            'territory': 'Monaco'
        },
        {
            'other_zone': 'W. Europe Standard Time',
            'zone': 'Europe/Malta',
            'territory': 'Malta'
        },
        {
            'other_zone': 'W. Europe Standard Time',
            'zone': 'Europe/Amsterdam',
            'territory': 'Amsterdam'
        },
        {
            'other_zone': 'W. Europe Standard Time',
            'zone': 'Europe/Oslo',
            'territory': 'Oslo'
        },
        {
            'other_zone': 'W. Europe Standard Time',
            'zone': 'Europe/Stockholm',
            'territory': 'Stockholm'
        },
        {
            'other_zone': 'W. Europe Standard Time',
            'zone': 'Arctic/Longyearbyen',
            'territory': 'Longyearbyen'
        },
        {
            'other_zone': 'W. Europe Standard Time',
            'zone': 'Europe/San_Marino',
            'territory': 'San Marino'
        },
        {
            'other_zone': 'W. Europe Standard Time',
            'zone': 'Europe/Vatican',
            'territory': 'Vatican'
        },
        {
            'other_zone': 'Central Europe Standard Time',
            'zone': 'Europe/Budapest',
            'territory': 'Budapest'
        },
        {
            'other_zone': 'Central Europe Standard Time',
            'zone': 'Europe/Tirane',
            'territory': 'Tirane'
        },
        {
            'other_zone': 'Central Europe Standard Time',
            'zone': 'Europe/Prague',
            'territory': 'Prague'
        },
        {
            'other_zone': 'Central Europe Standard Time',
            'zone': 'Europe/Podgorica',
            'territory': 'Podgorica'
        },
        {
            'other_zone': 'Central Europe Standard Time',
            'zone': 'Europe/Belgrade',
            'territory': 'Belgrade'
        },
        {
            'other_zone': 'Central Europe Standard Time',
            'zone': 'Europe/Ljubljana',
            'territory': 'Ljubljana'
        },
        {
            'other_zone': 'Central Europe Standard Time',
            'zone': 'Europe/Bratislava',
            'territory': 'Bratislava'
        },
        {
            'other_zone': 'Romance Standard Time',
            'zone': 'Europe/Paris',
            'territory': 'Paris'
        },
        {
            'other_zone': 'Romance Standard Time',
            'zone': 'Europe/Brussels',
            'territory': 'Brussels'
        },
        {
            'other_zone': 'Romance Standard Time',
            'zone': 'Europe/Copenhagen',
            'territory': 'Copenhagen'
        },
        {
            'other_zone': 'Romance Standard Time',
            'zone': 'Europe/Madrid',
            'territory': 'Madrid'
        },
        {
            'other_zone': 'Romance Standard Time',
            'zone': 'Africa/Ceuta',
            'territory': 'Ceuta'
        },
        {
            'other_zone': 'Central European Standard Time',
            'zone': 'Europe/Warsaw',
            'territory': 'Warsaw'
        },
        {
            'other_zone': 'Central European Standard Time',
            'zone': 'Europe/Sarajevo',
            'territory': 'Sarajevo'
        },
        {
            'other_zone': 'Central European Standard Time',
            'zone': 'Europe/Zagreb',
            'territory': 'Zagreb'
        },
        {
            'other_zone': 'Central European Standard Time',
            'zone': 'Europe/Skopje',
            'territory': 'Skopje'
        },
        {
            'other_zone': 'W. Central Africa Standard Time',
            'zone': 'Africa/Lagos',
            'territory': 'Lagos'
        },
        {
            'other_zone': 'W. Central Africa Standard Time',
            'zone': 'Africa/Luanda',
            'territory': 'Luanda'
        },
        {
            'other_zone': 'W. Central Africa Standard Time',
            'zone': 'Africa/Porto-Novo',
            'territory': 'Porto-Novo'
        },
        {
            'other_zone': 'W. Central Africa Standard Time',
            'zone': 'Africa/Kinshasa',
            'territory': 'Kinshasa'
        },
        {
            'other_zone': 'W. Central Africa Standard Time',
            'zone': 'Africa/Bangui',
            'territory': 'Bangui'
        },
        {
            'other_zone': 'W. Central Africa Standard Time',
            'zone': 'Africa/Brazzaville',
            'territory': 'Brazzaville'
        },
        {
            'other_zone': 'W. Central Africa Standard Time',
            'zone': 'Africa/Douala',
            'territory': 'Douala'
        },
        {
            'other_zone': 'W. Central Africa Standard Time',
            'zone': 'Africa/Algiers',
            'territory': 'Algiers'
        },
        {
            'other_zone': 'W. Central Africa Standard Time',
            'zone': 'Africa/Libreville',
            'territory': 'Libreville'
        },
        {
            'other_zone': 'W. Central Africa Standard Time',
            'zone': 'Africa/Malabo',
            'territory': 'Malabo'
        },
        {
            'other_zone': 'W. Central Africa Standard Time',
            'zone': 'Africa/Niamey',
            'territory': 'Niamey'
        },
        {
            'other_zone': 'W. Central Africa Standard Time',
            'zone': 'Africa/Ndjamena',
            'territory': 'Ndjamena'
        },
        {
            'other_zone': 'W. Central Africa Standard Time',
            'zone': 'Africa/Tunis',
            'territory': 'Tunis'
        },
        {
            'other_zone': 'W. Central Africa Standard Time',
            'zone': 'Etc/GMT-1',
            'territory': 'GMT-1'
        },
        {
            'other_zone': 'Namibia Standard Time',
            'zone': 'Africa/Windhoek',
            'territory': 'Windhoek'
        },
        {
            'other_zone': 'GTB Standard Time',
            'zone': 'Europe/Bucharest',
            'territory': 'Bucharest'
        },
        {
            'other_zone': 'GTB Standard Time',
            'zone': 'Europe/Athens',
            'territory': 'Athens'
        },
        {
            'other_zone': 'GTB Standard Time',
            'zone': 'Europe/Chisinau',
            'territory': 'Chisinau'
        },
        {
            'other_zone': 'Middle East Standard Time',
            'zone': 'Asia/Beirut',
            'territory': 'Beirut'
        },
        {
            'other_zone': 'Egypt Standard Time',
            'zone': 'Africa/Cairo',
            'territory': 'Cairo'
        },
        {
            'other_zone': 'Egypt Standard Time',
            'zone': 'Asia/Gaza',
            'territory': 'Gaza'
        },
        {
            'other_zone': 'Egypt Standard Time',
            'zone': 'Asia/Hebron',
            'territory': 'Hebron'
        },
        {
            'other_zone': 'Syria Standard Time',
            'zone': 'Asia/Damascus',
            'territory': 'Damascus'
        },
        {
            'other_zone': 'E. Europe Standard Time',
            'zone': 'Asia/Nicosia',
            'territory': 'Nicosia'
        },
        {
            'other_zone': 'South Africa Standard Time',
            'zone': 'Africa/Johannesburg',
            'territory': 'Johannesburg'
        },
        {
            'other_zone': 'South Africa Standard Time',
            'zone': 'Africa/Bujumbura',
            'territory': 'Bujumbura'
        },
        {
            'other_zone': 'South Africa Standard Time',
            'zone': 'Africa/Gaborone',
            'territory': 'Gaborone'
        },
        {
            'other_zone': 'South Africa Standard Time',
            'zone': 'Africa/Lubumbashi',
            'territory': 'Lubumbashi'
        },
        {
            'other_zone': 'South Africa Standard Time',
            'zone': 'Africa/Maseru',
            'territory': 'Maseru'
        },
        {
            'other_zone': 'South Africa Standard Time',
            'zone': 'Africa/Blantyre',
            'territory': 'Blantyre'
        },
        {
            'other_zone': 'South Africa Standard Time',
            'zone': 'Africa/Maputo',
            'territory': 'Maputo'
        },
        {
            'other_zone': 'South Africa Standard Time',
            'zone': 'Africa/Kigali',
            'territory': 'Kigali'
        },
        {
            'other_zone': 'South Africa Standard Time',
            'zone': 'Africa/Mbabane',
            'territory': 'Mbabane'
        },
        {
            'other_zone': 'South Africa Standard Time',
            'zone': 'Africa/Lusaka',
            'territory': 'Lusaka'
        },
        {
            'other_zone': 'South Africa Standard Time',
            'zone': 'Africa/Harare',
            'territory': 'Harare'
        },
        {
            'other_zone': 'South Africa Standard Time',
            'zone': 'Etc/GMT-2',
            'territory': 'GMT-2'
        },
        {
            'other_zone': 'FLE Standard Time',
            'zone': 'Europe/Kiev',
            'territory': 'Kiev'
        },
        {
            'other_zone': 'FLE Standard Time',
            'zone': 'Europe/Mariehamn',
            'territory': 'Mariehamn'
        },
        {
            'other_zone': 'FLE Standard Time',
            'zone': 'Europe/Sofia',
            'territory': 'Sofia'
        },
        {
            'other_zone': 'FLE Standard Time',
            'zone': 'Europe/Tallinn',
            'territory': 'Tallinn'
        },
        {
            'other_zone': 'FLE Standard Time',
            'zone': 'Europe/Helsinki',
            'territory': 'Helsinki'
        },
        {
            'other_zone': 'FLE Standard Time',
            'zone': 'Europe/Vilnius',
            'territory': 'Vilnius'
        },
        {
            'other_zone': 'FLE Standard Time',
            'zone': 'Europe/Riga',
            'territory': 'Riga'
        },
        {
            'other_zone': 'FLE Standard Time',
            'zone': 'Europe/Simferopol',
            'territory': 'Simferopol'
        },
        {
            'other_zone': 'FLE Standard Time',
            'zone': 'Europe/Uzhgorod',
            'territory': 'Uzhgorod'
        },
        {
            'other_zone': 'FLE Standard Time',
            'zone': 'Europe/Zaporozhye',
            'territory': 'Zaporozhye'
        },
        {
            'other_zone': 'Turkey Standard Time',
            'zone': 'Europe/Istanbul',
            'territory': 'Istanbul'
        },
        {
            'other_zone': 'Israel Standard Time',
            'zone': 'Asia/Jerusalem',
            'territory': 'Jerusalem'
        },
        {
            'other_zone': 'Jordan Standard Time',
            'zone': 'Asia/Amman',
            'territory': 'Amman'
        },
        {
            'other_zone': 'Arabic Standard Time',
            'zone': 'Asia/Baghdad',
            'territory': 'Baghdad'
        },
        {
            'other_zone': 'Kaliningrad Standard Time',
            'zone': 'Europe/Kaliningrad',
            'territory': 'Kaliningrad'
        },
        {
            'other_zone': 'Kaliningrad Standard Time',
            'zone': 'Europe/Minsk',
            'territory': 'Minsk'
        },
        {
            'other_zone': 'Arab Standard Time',
            'zone': 'Asia/Riyadh',
            'territory': 'Riyadh'
        },
        {
            'other_zone': 'Arab Standard Time',
            'zone': 'Asia/Bahrain',
            'territory': 'Bahrain'
        },
        {
            'other_zone': 'Arab Standard Time',
            'zone': 'Asia/Kuwait',
            'territory': 'Kuwait'
        },
        {
            'other_zone': 'Arab Standard Time',
            'zone': 'Asia/Qatar',
            'territory': 'Qatar'
        },
        {
            'other_zone': 'Arab Standard Time',
            'zone': 'Asia/Aden',
            'territory': 'Aden'
        },
        {
            'other_zone': 'E. Africa Standard Time',
            'zone': 'Africa/Nairobi',
            'territory': 'Nairobi'
        },
        {
            'other_zone': 'E. Africa Standard Time',
            'zone': 'Antarctica/Syowa',
            'territory': 'Syowa'
        },
        {
            'other_zone': 'E. Africa Standard Time',
            'zone': 'Africa/Djibouti',
            'territory': 'Djibouti'
        },
        {
            'other_zone': 'E. Africa Standard Time',
            'zone': 'Africa/Asmera',
            'territory': 'Asmera'
        },
        {
            'other_zone': 'E. Africa Standard Time',
            'zone': 'Africa/Addis_Ababa',
            'territory': 'Addis Ababa'
        },
        {
            'other_zone': 'E. Africa Standard Time',
            'zone': 'Indian/Comoro',
            'territory': 'Comoro'
        },
        {
            'other_zone': 'E. Africa Standard Time',
            'zone': 'Indian/Antananarivo',
            'territory': 'Antananarivo'
        },
        {
            'other_zone': 'E. Africa Standard Time',
            'zone': 'Africa/Khartoum',
            'territory': 'Khartoum'
        },
        {
            'other_zone': 'E. Africa Standard Time',
            'zone': 'Africa/Mogadishu',
            'territory': 'Mogadishu'
        },
        {
            'other_zone': 'E. Africa Standard Time',
            'zone': 'Africa/Juba',
            'territory': 'Juba'
        },
        {
            'other_zone': 'E. Africa Standard Time',
            'zone': 'Africa/Dar_es_Salaam',
            'territory': 'Dar es Salaam'
        },
        {
            'other_zone': 'E. Africa Standard Time',
            'zone': 'Africa/Kampala',
            'territory': 'Kampala'
        },
        {
            'other_zone': 'E. Africa Standard Time',
            'zone': 'Indian/Mayotte',
            'territory': 'Mayotte'
        },
        {
            'other_zone': 'E. Africa Standard Time',
            'zone': 'Etc/GMT-3',
            'territory': 'GMT-3'
        },
        {
            'other_zone': 'Iran Standard Time',
            'zone': 'Asia/Tehran',
            'territory': 'Tehran'
        },
        {
            'other_zone': 'Arabian Standard Time',
            'zone': 'Asia/Dubai',
            'territory': 'Dubai'
        },
        {
            'other_zone': 'Arabian Standard Time',
            'zone': 'Asia/Muscat',
            'territory': 'Muscat'
        },
        {
            'other_zone': 'Arabian Standard Time',
            'zone': 'Etc/GMT-4',
            'territory': 'GMT-4'
        },
        {
            'other_zone': 'Azerbaijan Standard Time',
            'zone': 'Asia/Baku',
            'territory': 'Baku'
        },
        {
            'other_zone': 'Russian Standard Time',
            'zone': 'Europe/Moscow',
            'territory': 'Moscow'
        },
        {
            'other_zone': 'Russian Standard Time',
            'zone': 'Europe/Samara',
            'territory': 'Samara'
        },
        {
            'other_zone': 'Russian Standard Time',
            'zone': 'Europe/Volgograd',
            'territory': 'Volgograd'
        },
        {
            'other_zone': 'Mauritius Standard Time',
            'zone': 'Indian/Mauritius',
            'territory': 'Mauritius'
        },
        {
            'other_zone': 'Mauritius Standard Time',
            'zone': 'Indian/Reunion',
            'territory': 'Reunion'
        },
        {
            'other_zone': 'Mauritius Standard Time',
            'zone': 'Indian/Mahe',
            'territory': 'Mahe'
        },
        {
            'other_zone': 'Georgian Standard Time',
            'zone': 'Asia/Tbilisi',
            'territory': 'Tbilisi'
        },
        {
            'other_zone': 'Caucasus Standard Time',
            'zone': 'Asia/Yerevan',
            'territory': 'Yerevan'
        },
        {
            'other_zone': 'Afghanistan Standard Time',
            'zone': 'Asia/Kabul',
            'territory': 'Kabul'
        },
        {
            'other_zone': 'Pakistan Standard Time',
            'zone': 'Asia/Karachi',
            'territory': 'Karachi'
        },
        {
            'other_zone': 'West Asia Standard Time',
            'zone': 'Asia/Tashkent',
            'territory': 'Tashkent'
        },
        {
            'other_zone': 'West Asia Standard Time',
            'zone': 'Antarctica/Mawson',
            'territory': 'Mawson'
        },
        {
            'other_zone': 'West Asia Standard Time',
            'zone': 'Asia/Oral',
            'territory': 'Oral'
        },
        {
            'other_zone': 'West Asia Standard Time',
            'zone': 'Asia/Aqtau',
            'territory': 'Aqtau'
        },
        {
            'other_zone': 'West Asia Standard Time',
            'zone': 'Asia/Aqtobe',
            'territory': 'Aqtobe'
        },
        {
            'other_zone': 'West Asia Standard Time',
            'zone': 'Indian/Maldives',
            'territory': 'Maldives'
        },
        {
            'other_zone': 'West Asia Standard Time',
            'zone': 'Indian/Kerguelen',
            'territory': 'Kerguelen'
        },
        {
            'other_zone': 'West Asia Standard Time',
            'zone': 'Asia/Dushanbe',
            'territory': 'Dushanbe'
        },
        {
            'other_zone': 'West Asia Standard Time',
            'zone': 'Asia/Ashgabat',
            'territory': 'Ashgabat'
        },
        {
            'other_zone': 'West Asia Standard Time',
            'zone': 'Asia/Samarkand',
            'territory': 'Samarkand'
        },
        {
            'other_zone': 'West Asia Standard Time',
            'zone': 'Etc/GMT-5',
            'territory': 'GMT-5'
        },
        {
            'other_zone': 'India Standard Time',
            'zone': 'Asia/Calcutta',
            'territory': 'Calcutta'
        },
        {
            'other_zone': 'Sri Lanka Standard Time',
            'zone': 'Asia/Colombo',
            'territory': 'Colombo'
        },
        {
            'other_zone': 'Nepal Standard Time',
            'zone': 'Asia/Katmandu',
            'territory': 'Katmandu'
        },
        {
            'other_zone': 'Central Asia Standard Time',
            'zone': 'Asia/Almaty',
            'territory': 'Almaty'
        },
        {
            'other_zone': 'Central Asia Standard Time',
            'zone': 'Antarctica/Vostok',
            'territory': 'Vostok'
        },
        {
            'other_zone': 'Central Asia Standard Time',
            'zone': 'Indian/Chagos',
            'territory': 'Chagos'
        },
        {
            'other_zone': 'Central Asia Standard Time',
            'zone': 'Asia/Bishkek',
            'territory': 'Bishkek'
        },
        {
            'other_zone': 'Central Asia Standard Time',
            'zone': 'Asia/Qyzylorda',
            'territory': 'Qyzylorda'
        },
        {
            'other_zone': 'Central Asia Standard Time',
            'zone': 'Etc/GMT-6',
            'territory': 'GMT-6'
        },
        {
            'other_zone': 'Bangladesh Standard Time',
            'zone': 'Asia/Dhaka',
            'territory': 'Dhaka'
        },
        {
            'other_zone': 'Bangladesh Standard Time',
            'zone': 'Asia/Thimphu',
            'territory': 'Thimphu'
        },
        {
            'other_zone': 'Ekaterinburg Standard Time',
            'zone': 'Asia/Yekaterinburg',
            'territory': 'Yekaterinburg'
        },
        {
            'other_zone': 'Myanmar Standard Time',
            'zone': 'Asia/Rangoon',
            'territory': 'Rangoon'
        },
        {
            'other_zone': 'Myanmar Standard Time',
            'zone': 'Indian/Cocos',
            'territory': 'Cocos'
        },
        {
            'other_zone': 'SE Asia Standard Time',
            'zone': 'Asia/Bangkok',
            'territory': 'Bangkok'
        },
        {
            'other_zone': 'SE Asia Standard Time',
            'zone': 'Antarctica/Davis',
            'territory': 'Davis'
        },
        {
            'other_zone': 'SE Asia Standard Time',
            'zone': 'Indian/Christmas',
            'territory': 'Christmas'
        },
        {
            'other_zone': 'SE Asia Standard Time',
            'zone': 'Asia/Jakarta',
            'territory': 'Jakarta'
        },
        {
            'other_zone': 'SE Asia Standard Time',
            'zone': 'Asia/Pontianak',
            'territory': 'Pontianak'
        },
        {
            'other_zone': 'SE Asia Standard Time',
            'zone': 'Asia/Phnom_Penh',
            'territory': 'Phnom Penh'
        },
        {
            'other_zone': 'SE Asia Standard Time',
            'zone': 'Asia/Vientiane',
            'territory': 'Vientiane'
        },
        {
            'other_zone': 'SE Asia Standard Time',
            'zone': 'Asia/Hovd',
            'territory': 'Hovd'
        },
        {
            'other_zone': 'SE Asia Standard Time',
            'zone': 'Asia/Saigon',
            'territory': 'Saigon'
        },
        {
            'other_zone': 'SE Asia Standard Time',
            'zone': 'Etc/GMT-7',
            'territory': 'GMT-7'
        },
        {
            'other_zone': 'N. Central Asia Standard Time',
            'zone': 'Asia/Novosibirsk',
            'territory': 'Novosibirsk'
        },
        {
            'other_zone': 'N. Central Asia Standard Time',
            'zone': 'Asia/Novokuznetsk',
            'territory': 'Novokuznetsk'
        },
        {
            'other_zone': 'N. Central Asia Standard Time',
            'zone': 'Asia/Omsk',
            'territory': 'Omsk'
        },
        {
            'other_zone': 'China Standard Time',
            'zone': 'Asia/Shanghai',
            'territory': 'Shanghai'
        },
        {
            'other_zone': 'China Standard Time',
            'zone': 'Asia/Chongqing',
            'territory': 'Chongqing'
        },
        {
            'other_zone': 'China Standard Time',
            'zone': 'Asia/Harbin',
            'territory': 'Harbin'
        },
        {
            'other_zone': 'China Standard Time',
            'zone': 'Asia/Kashgar',
            'territory': 'Kashgar'
        },
        {
            'other_zone': 'China Standard Time',
            'zone': 'Asia/Urumqi',
            'territory': 'Urumqi'
        },
        {
            'other_zone': 'China Standard Time',
            'zone': 'Asia/Hong_Kong',
            'territory': 'Hong Kong'
        },
        {
            'other_zone': 'China Standard Time',
            'zone': 'Asia/Macau',
            'territory': 'Macau'
        },
        {
            'other_zone': 'North Asia Standard Time',
            'zone': 'Asia/Krasnoyarsk',
            'territory': 'Krasnoyarsk'
        },
        {
            'other_zone': 'Singapore Standard Time',
            'zone': 'Asia/Singapore',
            'territory': 'Singapore'
        },
        {
            'other_zone': 'Singapore Standard Time',
            'zone': 'Asia/Brunei',
            'territory': 'Brunei'
        },
        {
            'other_zone': 'Singapore Standard Time',
            'zone': 'Asia/Makassar',
            'territory': 'Makassar'
        },
        {
            'other_zone': 'Singapore Standard Time',
            'zone': 'Asia/Kuala_Lumpur',
            'territory': 'Kuala Lumpur'
        },
        {
            'other_zone': 'Singapore Standard Time',
            'zone': 'Asia/Kuching',
            'territory': 'Kuching'
        },
        {
            'other_zone': 'Singapore Standard Time',
            'zone': 'Asia/Manila',
            'territory': 'Manila'
        },
        {
            'other_zone': 'Singapore Standard Time',
            'zone': 'Etc/GMT-8',
            'territory': 'GMT-8'
        },
        {
            'other_zone': 'W. Australia Standard Time',
            'zone': 'Australia/Perth',
            'territory': 'Perth'
        },
        {
            'other_zone': 'W. Australia Standard Time',
            'zone': 'Antarctica/Casey',
            'territory': 'Casey'
        },
        {
            'other_zone': 'Taipei Standard Time',
            'zone': 'Asia/Taipei',
            'territory': 'Taipei'
        },
        {
            'other_zone': 'Ulaanbaatar Standard Time',
            'zone': 'Asia/Ulaanbaatar',
            'territory': 'Ulaanbaatar'
        },
        {
            'other_zone': 'Ulaanbaatar Standard Time',
            'zone': 'Asia/Choibalsan',
            'territory': 'Choibalsan'
        },
        {
            'other_zone': 'North Asia East Standard Time',
            'zone': 'Asia/Irkutsk',
            'territory': 'Irkutsk'
        },
        {
            'other_zone': 'Tokyo Standard Time',
            'zone': 'Asia/Tokyo',
            'territory': 'Tokyo'
        },
        {
            'other_zone': 'Tokyo Standard Time',
            'zone': 'Asia/Jayapura',
            'territory': 'Jayapura'
        },
        {
            'other_zone': 'Tokyo Standard Time',
            'zone': 'Pacific/Palau',
            'territory': 'Palau'
        },
        {
            'other_zone': 'Tokyo Standard Time',
            'zone': 'Asia/Dili',
            'territory': 'Dili'
        },
        {
            'other_zone': 'Tokyo Standard Time',
            'zone': 'Etc/GMT-9',
            'territory': 'GMT-9'
        },
        {
            'other_zone': 'Korea Standard Time',
            'zone': 'Asia/Seoul',
            'territory': 'Seoul'
        },
        {
            'other_zone': 'Korea Standard Time',
            'zone': 'Asia/Pyongyang',
            'territory': 'Pyongyang'
        },
        {
            'other_zone': 'Cen. Australia Standard Time',
            'zone': 'Australia/Adelaide',
            'territory': 'Adelaide'
        },
        {
            'other_zone': 'Cen. Australia Standard Time',
            'zone': 'Australia/Broken_Hill',
            'territory': 'Broken Hill'
        },
        {
            'other_zone': 'AUS Central Standard Time',
            'zone': 'Australia/Darwin',
            'territory': 'Darwin'
        },
        {
            'other_zone': 'E. Australia Standard Time',
            'zone': 'Australia/Brisbane',
            'territory': 'Brisbane'
        },
        {
            'other_zone': 'E. Australia Standard Time',
            'zone': 'Australia/Lindeman',
            'territory': 'Lindeman'
        },
        {
            'other_zone': 'AUS Eastern Standard Time',
            'zone': 'Australia/Sydney',
            'territory': 'Sydney'
        },
        {
            'other_zone': 'AUS Eastern Standard Time',
            'zone': 'Australia/Melbourne',
            'territory': 'Melbourne'
        },
        {
            'other_zone': 'West Pacific Standard Time',
            'zone': 'Pacific/Port_Moresby',
            'territory': 'Port Moresby'
        },
        {
            'other_zone': 'West Pacific Standard Time',
            'zone': 'Antarctica/DumontDUrville',
            'territory': 'DumontDUrville'
        },
        {
            'other_zone': 'West Pacific Standard Time',
            'zone': 'Pacific/Truk',
            'territory': 'Truk'
        },
        {
            'other_zone': 'West Pacific Standard Time',
            'zone': 'Pacific/Guam',
            'territory': 'Guam'
        },
        {
            'other_zone': 'West Pacific Standard Time',
            'zone': 'Pacific/Saipan',
            'territory': 'Saipan'
        },
        {
            'other_zone': 'West Pacific Standard Time',
            'zone': 'Etc/GMT-10',
            'territory': 'GMT-10'
        },
        {
            'other_zone': 'Tasmania Standard Time',
            'zone': 'Australia/Hobart',
            'territory': 'Hobart'
        },
        {
            'other_zone': 'Tasmania Standard Time',
            'zone': 'Australia/Currie',
            'territory': 'Currie'
        },
        {
            'other_zone': 'Yakutsk Standard Time',
            'zone': 'Asia/Yakutsk',
            'territory': 'Yakutsk'
        },
        {
            'other_zone': 'Yakutsk Standard Time',
            'zone': 'Asia/Khandyga',
            'territory': 'Khandyga'
        },
        {
            'other_zone': 'Central Pacific Standard Time',
            'zone': 'Pacific/Guadalcanal',
            'territory': 'Guadalcanal'
        },
        {
            'other_zone': 'Central Pacific Standard Time',
            'zone': 'Antarctica/Macquarie',
            'territory': 'Macquarie'
        },
        {
            'other_zone': 'Central Pacific Standard Time',
            'zone': 'Pacific/Ponape',
            'territory': 'Ponape'
        },
        {
            'other_zone': 'Central Pacific Standard Time',
            'zone': 'Pacific/Kosrae',
            'territory': 'Kosrae'
        },
        {
            'other_zone': 'Central Pacific Standard Time',
            'zone': 'Pacific/Noumea',
            'territory': 'Noumea'
        },
        {
            'other_zone': 'Central Pacific Standard Time',
            'zone': 'Pacific/Efate',
            'territory': 'Efate'
        },
        {
            'other_zone': 'Central Pacific Standard Time',
            'zone': 'Etc/GMT-11',
            'territory': 'GMT-11'
        },
        {
            'other_zone': 'Vladivostok Standard Time',
            'zone': 'Asia/Vladivostok',
            'territory': 'Vladivostok'
        },
        {
            'other_zone': 'Vladivostok Standard Time',
            'zone': 'Asia/Sakhalin',
            'territory': 'Sakhalin'
        },
        {
            'other_zone': 'Vladivostok Standard Time',
            'zone': 'Asia/Ust-Nera',
            'territory': 'Ust-Nera'
        },
        {
            'other_zone': 'New Zealand Standard Time',
            'zone': 'Pacific/Auckland',
            'territory': 'Auckland'
        },
        {
            'other_zone': 'New Zealand Standard Time',
            'zone': 'Antarctica/South_Pole',
            'territory': 'South Pole'
        },
        {
            'other_zone': 'New Zealand Standard Time',
            'zone': 'Antarctica/McMurdo',
            'territory': 'McMurdo'
        },
        {
            'other_zone': 'UTC+12',
            'zone': 'Etc/GMT-12',
            'territory': 'GMT-12'
        },
        {
            'other_zone': 'UTC+12',
            'zone': 'Pacific/Tarawa',
            'territory': 'Tarawa'
        },
        {
            'other_zone': 'UTC+12',
            'zone': 'Pacific/Majuro',
            'territory': 'Majuro'
        },
        {
            'other_zone': 'UTC+12',
            'zone': 'Pacific/Kwajalein',
            'territory': 'Kwajalein'
        },
        {
            'other_zone': 'UTC+12',
            'zone': 'Pacific/Nauru',
            'territory': 'Nauru'
        },
        {
            'other_zone': 'UTC+12',
            'zone': 'Pacific/Funafuti',
            'territory': 'Funafuti'
        },
        {
            'other_zone': 'UTC+12',
            'zone': 'Pacific/Wake',
            'territory': 'Wake'
        },
        {
            'other_zone': 'UTC+12',
            'zone': 'Pacific/Wallis',
            'territory': 'Wallis'
        },
        {
            'other_zone': 'Fiji Standard Time',
            'zone': 'Pacific/Fiji',
            'territory': 'Fiji'
        },
        {
            'other_zone': 'Magadan Standard Time',
            'zone': 'Asia/Magadan',
            'territory': 'Magadan'
        },
        {
            'other_zone': 'Magadan Standard Time',
            'zone': 'Asia/Anadyr',
            'territory': 'Anadyr'
        },
        {
            'other_zone': 'Magadan Standard Time',
            'zone': 'Asia/Kamchatka',
            'territory': 'Kamchatka'
        },
        {
            'other_zone': 'Tonga Standard Time',
            'zone': 'Pacific/Tongatapu',
            'territory': 'Tongatapu'
        },
        {
            'other_zone': 'Tonga Standard Time',
            'zone': 'Pacific/Enderbury',
            'territory': 'Enderbury'
        },
        {
            'other_zone': 'Tonga Standard Time',
            'zone': 'Pacific/Fakaofo',
            'territory': 'Fakaofo'
        },
        {
            'other_zone': 'Tonga Standard Time',
            'zone': 'Etc/GMT-13',
            'territory': 'GMT-13'
        },
        {
            'other_zone': 'Samoa Standard Time',
            'zone': 'Pacific/Apia',
            'territory': 'Apia'
        }
    ];
    return kendo;
}, typeof define == 'function' && define.amd ? define : function (a1, a2, a3) {
    (a3 || a2)();
}));
/** 
 * Kendo UI v2016.2.714 (http://www.telerik.com/kendo-ui)                                                                                                                                               
 * Copyright 2016 Telerik AD. All rights reserved.                                                                                                                                                      
 *                                                                                                                                                                                                      
 * Kendo UI commercial licenses may be obtained at                                                                                                                                                      
 * http://www.telerik.com/purchase/license-agreement/kendo-ui-complete                                                                                                                                  
 * If you do not own a commercial license, this file shall be governed by the trial license terms.                                                                                                      
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       

*/
(function (f, define) {
    define('kendo.scheduler.recurrence', [
        'kendo.dropdownlist',
        'kendo.datepicker',
        'kendo.numerictextbox'
    ], f);
}(function () {
    var __meta__ = {
        id: 'scheduler.recurrence',
        name: 'Recurrence',
        category: 'web',
        depends: [
            'dropdownlist',
            'datepicker',
            'numerictextbox'
        ],
        hidden: true
    };
    (function ($, undefined) {
        var kendo = window.kendo, timezone = kendo.timezone, Class = kendo.Class, ui = kendo.ui, Widget = ui.Widget, DropDownList = ui.DropDownList, kendoDate = kendo.date, setTime = kendoDate.setTime, setDayOfWeek = kendoDate.setDayOfWeek, adjustDST = kendoDate.adjustDST, firstDayOfMonth = kendoDate.firstDayOfMonth, getMilliseconds = kendoDate.getMilliseconds, DAYS_IN_LEAPYEAR = [
                0,
                31,
                60,
                91,
                121,
                152,
                182,
                213,
                244,
                274,
                305,
                335,
                366
            ], DAYS_IN_YEAR = [
                0,
                31,
                59,
                90,
                120,
                151,
                181,
                212,
                243,
                273,
                304,
                334,
                365
            ], MONTHS = [
                31,
                28,
                30,
                31,
                30,
                31,
                30,
                31,
                30,
                31,
                30,
                31
            ], WEEK_DAYS = {
                0: 'SU',
                1: 'MO',
                2: 'TU',
                3: 'WE',
                4: 'TH',
                5: 'FR',
                6: 'SA'
            }, WEEK_DAYS_IDX = {
                'SU': 0,
                'MO': 1,
                'TU': 2,
                'WE': 3,
                'TH': 4,
                'FR': 5,
                'SA': 6
            }, DATE_FORMATS = [
                'yyyy-MM-ddTHH:mm:ss.fffzzz',
                'yyyy-MM-ddTHH:mm:sszzz',
                'yyyy-MM-ddTHH:mm:ss',
                'yyyy-MM-ddTHH:mm',
                'yyyy-MM-ddTHH',
                'yyyy-MM-dd',
                'yyyyMMddTHHmmssfffzzz',
                'yyyyMMddTHHmmsszzz',
                'yyyyMMddTHHmmss',
                'yyyyMMddTHHmm',
                'yyyyMMddTHH',
                'yyyyMMdd'
            ], RULE_NAMES = [
                'months',
                'weeks',
                'yearDays',
                'monthDays',
                'weekDays',
                'hours',
                'minutes',
                'seconds'
            ], RULE_NAMES_LENGTH = RULE_NAMES.length, RECURRENCE_DATE_FORMAT = 'yyyyMMddTHHmmssZ', limitation = {
                months: function (date, end, rule) {
                    var monthRules = rule.months, months = ruleValues(monthRules, date.getMonth() + 1), changed = false;
                    if (months !== null) {
                        if (months.length) {
                            date.setMonth(months[0] - 1, 1);
                        } else {
                            date.setFullYear(date.getFullYear() + 1, monthRules[0] - 1, 1);
                        }
                        changed = true;
                    }
                    return changed;
                },
                monthDays: function (date, end, rule) {
                    var monthLength, month, days, changed = false, hours = date.getHours(), normalize = function (monthDay) {
                            if (monthDay < 0) {
                                monthDay = monthLength + monthDay;
                            }
                            return monthDay;
                        };
                    while (date <= end) {
                        month = date.getMonth();
                        monthLength = getMonthLength(date);
                        days = ruleValues(rule.monthDays, date.getDate(), normalize);
                        if (days === null) {
                            return changed;
                        }
                        changed = true;
                        if (days.length) {
                            date.setMonth(month, days.sort(numberSortPredicate)[0]);
                            adjustDST(date, hours);
                            if (month === date.getMonth()) {
                                break;
                            }
                        } else {
                            date.setMonth(month + 1, 1);
                        }
                    }
                    return changed;
                },
                yearDays: function (date, end, rule) {
                    var year, yearDays, changed = false, hours = date.getHours(), normalize = function (yearDay) {
                            if (yearDay < 0) {
                                yearDay = year + yearDay;
                            }
                            return yearDay;
                        };
                    while (date < end) {
                        year = leapYear(date) ? 366 : 365;
                        yearDays = ruleValues(rule.yearDays, dayInYear(date), normalize);
                        if (yearDays === null) {
                            return changed;
                        }
                        changed = true;
                        year = date.getFullYear();
                        if (yearDays.length) {
                            date.setFullYear(year, 0, yearDays.sort(numberSortPredicate)[0]);
                            adjustDST(date, hours);
                            break;
                        } else {
                            date.setFullYear(year + 1, 0, 1);
                        }
                    }
                    return changed;
                },
                weeks: function (date, end, rule) {
                    var weekStart = rule.weekStart, year, weeks, day, changed = false, hours = date.getHours(), normalize = function (week) {
                            if (week < 0) {
                                week = 53 + week;
                            }
                            return week;
                        };
                    while (date < end) {
                        weeks = ruleValues(rule.weeks, weekInYear(date, weekStart), normalize);
                        if (weeks === null) {
                            return changed;
                        }
                        changed = true;
                        year = date.getFullYear();
                        if (weeks.length) {
                            day = weeks.sort(numberSortPredicate)[0] * 7 - 1;
                            date.setFullYear(year, 0, day);
                            setDayOfWeek(date, weekStart, -1);
                            adjustDST(date, hours);
                            break;
                        } else {
                            date.setFullYear(year + 1, 0, 1);
                        }
                    }
                    return changed;
                },
                weekDays: function (date, end, rule) {
                    var weekDays = rule.weekDays;
                    var weekStart = rule.weekStart;
                    var weekDayRules = ruleWeekValues(weekDays, date, weekStart);
                    var hours = date.getHours();
                    var weekDayRule, day;
                    if (weekDayRules === null) {
                        return false;
                    }
                    weekDayRule = weekDayRules[0];
                    if (!weekDayRule) {
                        weekDayRule = weekDays[0];
                        setDayOfWeek(date, weekStart);
                    }
                    day = weekDayRule.day;
                    if (weekDayRule.offset) {
                        while (date <= end && !isInWeek(date, weekDayRule, weekStart)) {
                            if (weekInMonth(date, weekStart) === numberOfWeeks(date, weekStart)) {
                                date.setMonth(date.getMonth() + 1, 1);
                                adjustDST(date, hours);
                            } else {
                                date.setDate(date.getDate() + 7);
                                adjustDST(date, hours);
                                setDayOfWeek(date, weekStart, -1);
                            }
                        }
                    }
                    if (date.getDay() !== day) {
                        setDayOfWeek(date, day);
                    }
                    return true;
                },
                hours: function (date, end, rule) {
                    var hourRules = rule.hours, startTime = rule._startTime, startHours = startTime.getHours(), hours = ruleValues(hourRules, startHours), changed = false;
                    if (hours !== null) {
                        changed = true;
                        date.setHours(startHours);
                        adjustDST(date, startHours);
                        if (hours.length) {
                            hours = hours[0];
                            date.setHours(hours);
                        } else {
                            hours = date.getHours();
                            date.setDate(date.getDate() + 1);
                            adjustDST(date, hours);
                            hours = hourRules[0];
                            date.setHours(hours);
                            adjustDST(date, hours);
                        }
                        if (rule.minutes) {
                            date.setMinutes(0);
                        }
                        startTime.setHours(hours, date.getMinutes());
                    }
                    return changed;
                },
                minutes: function (date, end, rule) {
                    var minuteRules = rule.minutes, currentMinutes = date.getMinutes(), minutes = ruleValues(minuteRules, currentMinutes), hours = rule._startTime.getHours(), changed = false;
                    if (minutes !== null) {
                        changed = true;
                        if (minutes.length) {
                            minutes = minutes[0];
                        } else {
                            hours += 1;
                            minutes = minuteRules[0];
                        }
                        if (rule.seconds) {
                            date.setSeconds(0);
                        }
                        date.setHours(hours, minutes);
                        hours = hours % 24;
                        adjustDST(date, hours);
                        rule._startTime.setHours(hours, minutes, date.getSeconds());
                    }
                    return changed;
                },
                seconds: function (date, end, rule) {
                    var secondRules = rule.seconds, hours = rule._startTime.getHours(), seconds = ruleValues(secondRules, date.getSeconds()), minutes = date.getMinutes(), changed = false;
                    if (seconds !== null) {
                        changed = true;
                        if (seconds.length) {
                            date.setSeconds(seconds[0]);
                        } else {
                            minutes += 1;
                            date.setMinutes(minutes, secondRules[0]);
                            if (minutes > 59) {
                                minutes = minutes % 60;
                                hours = (hours + 1) % 24;
                            }
                        }
                        rule._startTime.setHours(hours, minutes, date.getSeconds());
                    }
                    return changed;
                }
            }, BaseFrequency = Class.extend({
                next: function (date, rule) {
                    var startTime = rule._startTime, day = startTime.getDate(), minutes, seconds;
                    if (rule.seconds) {
                        seconds = date.getSeconds() + 1;
                        date.setSeconds(seconds);
                        startTime.setSeconds(seconds);
                        startTime.setDate(day);
                    } else if (rule.minutes) {
                        minutes = date.getMinutes() + 1;
                        date.setMinutes(minutes);
                        startTime.setMinutes(minutes);
                        startTime.setDate(day);
                    } else {
                        return false;
                    }
                    return true;
                },
                normalize: function (options) {
                    var rule = options.rule;
                    if (options.idx === 4 && rule.hours) {
                        rule._startTime.setHours(0);
                        this._hour(options.date, rule);
                    }
                },
                limit: function (date, end, rule) {
                    var interval = rule.interval, ruleName, firstRule, modified, idx, day;
                    while (date <= end) {
                        modified = firstRule = undefined;
                        day = date.getDate();
                        for (idx = 0; idx < RULE_NAMES_LENGTH; idx++) {
                            ruleName = RULE_NAMES[idx];
                            if (rule[ruleName]) {
                                modified = limitation[ruleName](date, end, rule);
                                if (firstRule !== undefined && modified) {
                                    break;
                                } else {
                                    firstRule = modified;
                                }
                            }
                            if (modified) {
                                this.normalize({
                                    date: date,
                                    rule: rule,
                                    day: day,
                                    idx: idx
                                });
                            }
                        }
                        if ((interval === 1 || !this.interval(rule, date)) && idx === RULE_NAMES_LENGTH) {
                            break;
                        }
                    }
                },
                interval: function (rule, current) {
                    var start = new Date(rule._startPeriod);
                    var date = new Date(current);
                    var hours = current.getHours();
                    var weekStart = rule.weekStart;
                    var interval = rule.interval;
                    var frequency = rule.freq;
                    var modified = false;
                    var excess = 0;
                    var month = 0;
                    var day = 1;
                    var diff;
                    var startTimeHours;
                    if (frequency === 'hourly') {
                        diff = date.getTimezoneOffset() - start.getTimezoneOffset();
                        startTimeHours = rule._startTime.getHours();
                        date = date.getTime();
                        if (hours !== startTimeHours) {
                            date += (startTimeHours - hours) * kendoDate.MS_PER_HOUR;
                        }
                        date -= start;
                        if (diff) {
                            date -= diff * kendoDate.MS_PER_MINUTE;
                        }
                        diff = Math.floor(date / kendoDate.MS_PER_HOUR);
                        excess = intervalExcess(diff, interval);
                        if (excess !== 0) {
                            this._hour(current, rule, excess);
                            modified = true;
                        }
                    } else if (frequency === 'daily') {
                        kendoDate.setTime(date, -start, true);
                        diff = Math.ceil(date / kendoDate.MS_PER_DAY);
                        excess = intervalExcess(diff, interval);
                        if (excess !== 0) {
                            this._date(current, rule, excess);
                            modified = true;
                        }
                    } else if (frequency === 'weekly') {
                        diff = (current.getFullYear() - start.getFullYear()) * 52;
                        excess = weekInYear(current, weekStart) - weekInYear(start, weekStart) + diff;
                        excess = intervalExcess(excess, interval);
                        if (excess !== 0) {
                            kendoDate.setDayOfWeek(current, rule.weekStart, -1);
                            current.setDate(current.getDate() + excess * 7);
                            adjustDST(current, hours);
                            modified = true;
                        }
                    } else if (frequency === 'monthly') {
                        diff = current.getFullYear() - start.getFullYear();
                        diff = current.getMonth() - start.getMonth() + diff * 12;
                        excess = intervalExcess(diff, interval);
                        if (excess !== 0) {
                            day = rule._hasRuleValue ? 1 : current.getDate();
                            current.setFullYear(current.getFullYear(), current.getMonth() + excess, day);
                            adjustDST(current, hours);
                            modified = true;
                        }
                    } else if (frequency === 'yearly') {
                        diff = current.getFullYear() - start.getFullYear();
                        excess = intervalExcess(diff, interval);
                        if (!rule.months) {
                            month = current.getMonth();
                        }
                        if (!rule.yearDays && !rule.monthDays && !rule.weekDays) {
                            day = current.getDate();
                        }
                        if (excess !== 0) {
                            current.setFullYear(current.getFullYear() + excess, month, day);
                            adjustDST(current, hours);
                            modified = true;
                        }
                    }
                    return modified;
                },
                _hour: function (date, rule, interval) {
                    var startTime = rule._startTime, hours = startTime.getHours();
                    if (interval) {
                        hours += interval;
                    }
                    date.setHours(hours);
                    hours = hours % 24;
                    startTime.setHours(hours);
                    adjustDST(date, hours);
                },
                _date: function (date, rule, interval) {
                    var hours = date.getHours();
                    date.setDate(date.getDate() + interval);
                    if (!adjustDST(date, hours)) {
                        this._hour(date, rule);
                    }
                }
            }), HourlyFrequency = BaseFrequency.extend({
                next: function (date, rule) {
                    if (!BaseFrequency.fn.next(date, rule)) {
                        this._hour(date, rule, 1);
                    }
                },
                normalize: function (options) {
                    var rule = options.rule;
                    if (options.idx === 4) {
                        rule._startTime.setHours(0);
                        this._hour(options.date, rule);
                    }
                }
            }), DailyFrequency = BaseFrequency.extend({
                next: function (date, rule) {
                    if (!BaseFrequency.fn.next(date, rule)) {
                        this[rule.hours ? '_hour' : '_date'](date, rule, 1);
                    }
                }
            }), WeeklyFrequency = DailyFrequency.extend({
                setup: function (rule, eventStartDate) {
                    if (!rule.weekDays) {
                        rule.weekDays = [{
                                day: eventStartDate.getDay(),
                                offset: 0
                            }];
                    }
                }
            }), MonthlyFrequency = BaseFrequency.extend({
                next: function (date, rule) {
                    var day, hours;
                    if (!BaseFrequency.fn.next(date, rule)) {
                        if (rule.hours) {
                            this._hour(date, rule, 1);
                        } else if (rule.monthDays || rule.weekDays || rule.yearDays || rule.weeks) {
                            this._date(date, rule, 1);
                        } else {
                            day = date.getDate();
                            hours = date.getHours();
                            date.setMonth(date.getMonth() + 1);
                            adjustDST(date, hours);
                            while (date.getDate() !== day) {
                                date.setDate(day);
                                adjustDST(date, hours);
                            }
                            this._hour(date, rule);
                        }
                    }
                },
                normalize: function (options) {
                    var rule = options.rule, date = options.date, hours = date.getHours();
                    if (options.idx === 0 && !rule.monthDays && !rule.weekDays) {
                        date.setDate(options.day);
                        adjustDST(date, hours);
                    } else {
                        BaseFrequency.fn.normalize(options);
                    }
                },
                setup: function (rule, eventStartDate, date) {
                    if (!rule.monthDays && !rule.weekDays) {
                        date.setDate(eventStartDate.getDate());
                    }
                }
            }), YearlyFrequency = MonthlyFrequency.extend({
                next: function (date, rule) {
                    var day, hours = date.getHours();
                    if (!BaseFrequency.fn.next(date, rule)) {
                        if (rule.hours) {
                            this._hour(date, rule, 1);
                        } else if (rule.monthDays || rule.weekDays || rule.yearDays || rule.weeks) {
                            this._date(date, rule, 1);
                        } else if (rule.months) {
                            day = date.getDate();
                            date.setMonth(date.getMonth() + 1);
                            adjustDST(date, hours);
                            while (date.getDate() !== day) {
                                date.setDate(day);
                                adjustDST(date, hours);
                            }
                            this._hour(date, rule);
                        } else {
                            date.setFullYear(date.getFullYear() + 1);
                            adjustDST(date, hours);
                            this._hour(date, rule);
                        }
                    }
                },
                setup: function () {
                }
            }), frequencies = {
                'hourly': new HourlyFrequency(),
                'daily': new DailyFrequency(),
                'weekly': new WeeklyFrequency(),
                'monthly': new MonthlyFrequency(),
                'yearly': new YearlyFrequency()
            }, CLICK = 'click';
        function intervalExcess(diff, interval) {
            var excess;
            if (diff !== 0 && diff < interval) {
                excess = interval - diff;
            } else {
                excess = diff % interval;
                if (excess) {
                    excess = interval - excess;
                }
            }
            return excess;
        }
        function dayInYear(date) {
            var month = date.getMonth();
            var days = leapYear(date) ? DAYS_IN_LEAPYEAR[month] : DAYS_IN_YEAR[month];
            return days + date.getDate();
        }
        function weekInYear(date, weekStart) {
            var year, days;
            date = new Date(date.getFullYear(), date.getMonth(), date.getDate());
            adjustDST(date, 0);
            year = date.getFullYear();
            if (weekStart !== undefined) {
                setDayOfWeek(date, weekStart, -1);
                date.setDate(date.getDate() + 4);
            } else {
                date.setDate(date.getDate() + (4 - (date.getDay() || 7)));
            }
            adjustDST(date, 0);
            days = Math.floor((date.getTime() - new Date(year, 0, 1, -6)) / 86400000);
            return 1 + Math.floor(days / 7);
        }
        function weekInMonth(date, weekStart) {
            var firstWeekDay = firstDayOfMonth(date).getDay();
            var firstWeekLength = 7 - (firstWeekDay + 7 - (weekStart || 7)) || 7;
            if (firstWeekLength < 0) {
                firstWeekLength += 7;
            }
            return Math.ceil((date.getDate() - firstWeekLength) / 7) + 1;
        }
        function normalizeDayIndex(weekDay, weekStart) {
            return weekDay + (weekDay < weekStart ? 7 : 0);
        }
        function normalizeOffset(date, rule, weekStart) {
            var offset = rule.offset;
            if (!offset) {
                return weekInMonth(date, weekStart);
            }
            var lastDate = new Date(date.getFullYear(), date.getMonth() + 1, 0);
            var weeksInMonth = weekInMonth(lastDate, weekStart);
            var day = normalizeDayIndex(rule.day, weekStart);
            var skipFirst = day < normalizeDayIndex(new Date(date.getFullYear(), date.getMonth(), 1).getDay(), weekStart);
            var skipLast = day > normalizeDayIndex(lastDate.getDay(), weekStart);
            if (offset < 0) {
                offset = weeksInMonth + (offset + 1 - (skipLast ? 1 : 0));
            } else if (skipFirst) {
                offset += 1;
            }
            weeksInMonth -= skipLast ? 1 : 0;
            if (offset < (skipFirst ? 1 : 0) || offset > weeksInMonth) {
                return null;
            }
            return offset;
        }
        function numberOfWeeks(date, weekStart) {
            return weekInMonth(new Date(date.getFullYear(), date.getMonth() + 1, 0), weekStart);
        }
        function isInWeek(date, rule, weekStart) {
            return weekInMonth(date, weekStart) === normalizeOffset(date, rule, weekStart);
        }
        function ruleWeekValues(weekDays, date, weekStart) {
            var currentDay = normalizeDayIndex(date.getDay(), weekStart);
            var length = weekDays.length;
            var ruleWeekOffset;
            var weekDay, day;
            var weekNumber;
            var result = [];
            var idx = 0;
            for (; idx < length; idx++) {
                weekDay = weekDays[idx];
                weekNumber = weekInMonth(date, weekStart);
                ruleWeekOffset = normalizeOffset(date, weekDay, weekStart);
                if (ruleWeekOffset === null) {
                    continue;
                }
                if (weekNumber < ruleWeekOffset) {
                    result.push(weekDay);
                } else if (weekNumber === ruleWeekOffset) {
                    day = normalizeDayIndex(weekDay.day, weekStart);
                    if (currentDay < day) {
                        result.push(weekDay);
                    } else if (currentDay === day) {
                        return null;
                    }
                }
            }
            return result;
        }
        function ruleValues(rules, value, normalize) {
            var idx = 0, length = rules.length, availableRules = [], ruleValue;
            for (; idx < length; idx++) {
                ruleValue = rules[idx];
                if (normalize) {
                    ruleValue = normalize(ruleValue);
                }
                if (value === ruleValue) {
                    return null;
                } else if (value < ruleValue) {
                    availableRules.push(ruleValue);
                }
            }
            return availableRules;
        }
        function parseArray(list, range) {
            var idx = 0, length = list.length, value;
            for (; idx < length; idx++) {
                value = parseInt(list[idx], 10);
                if (isNaN(value) || value < range.start || value > range.end || value === 0 && range.start < 0) {
                    return null;
                }
                list[idx] = value;
            }
            return list.sort(numberSortPredicate);
        }
        function parseWeekDayList(list) {
            var idx = 0, length = list.length, value, valueLength, day;
            for (; idx < length; idx++) {
                value = list[idx];
                valueLength = value.length;
                day = value.substring(valueLength - 2).toUpperCase();
                day = WEEK_DAYS_IDX[day];
                if (day === undefined) {
                    return null;
                }
                list[idx] = {
                    offset: parseInt(value.substring(0, valueLength - 2), 10) || 0,
                    day: day
                };
            }
            return list;
        }
        function serializeWeekDayList(list) {
            var idx = 0, length = list.length, value, valueString, result = [];
            for (; idx < length; idx++) {
                value = list[idx];
                if (typeof value === 'string') {
                    valueString = value;
                } else {
                    valueString = '' + WEEK_DAYS[value.day];
                    if (value.offset) {
                        valueString = value.offset + valueString;
                    }
                }
                result.push(valueString);
            }
            return result.toString();
        }
        function getMonthLength(date) {
            var month = date.getMonth();
            if (month === 1) {
                if (new Date(date.getFullYear(), 1, 29).getMonth() === 1) {
                    return 29;
                }
                return 28;
            }
            return MONTHS[month];
        }
        function leapYear(year) {
            year = year.getFullYear();
            return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
        }
        function numberSortPredicate(a, b) {
            return a - b;
        }
        function parseExceptions(exceptions, zone) {
            var idx = 0, length, date, dates = [];
            if (exceptions) {
                exceptions = exceptions.split(exceptions.indexOf(';') !== -1 ? ';' : ',');
                length = exceptions.length;
                for (; idx < length; idx++) {
                    date = parseUTCDate(exceptions[idx], zone);
                    if (date) {
                        dates.push(date);
                    }
                }
            }
            return dates;
        }
        function isException(exceptions, date, zone) {
            var dates = $.isArray(exceptions) ? exceptions : parseExceptions(exceptions, zone), dateTime = date.getTime() - date.getMilliseconds(), idx = 0, length = dates.length;
            for (; idx < length; idx++) {
                if (dates[idx].getTime() === dateTime) {
                    return true;
                }
            }
            return false;
        }
        function toExceptionString(dates, zone) {
            var idx = 0;
            var length;
            var date;
            var result = [].concat(dates);
            for (length = result.length; idx < length; idx++) {
                date = result[idx];
                date = kendo.timezone.convert(date, zone || date.getTimezoneOffset(), 'Etc/UTC');
                result[idx] = kendo.toString(date, RECURRENCE_DATE_FORMAT);
            }
            return result.join(',');
        }
        function startPeriodByFreq(start, rule) {
            var date = new Date(start);
            switch (rule.freq) {
            case 'yearly':
                date.setFullYear(date.getFullYear(), 0, 1);
                break;
            case 'monthly':
                date.setFullYear(date.getFullYear(), date.getMonth(), 1);
                break;
            case 'weekly':
                setDayOfWeek(date, rule.weekStart, -1);
                break;
            default:
                break;
            }
            if (rule.hours) {
                date.setHours(0);
            }
            if (rule.minutes) {
                date.setMinutes(0);
            }
            if (rule.seconds) {
                date.setSeconds(0);
            }
            return date;
        }
        function endPeriodByFreq(start, rule) {
            var date = new Date(start);
            switch (rule.freq) {
            case 'yearly':
                date.setFullYear(date.getFullYear(), 11, 31);
                break;
            case 'monthly':
                date.setFullYear(date.getFullYear(), date.getMonth() + 1, 0);
                break;
            case 'weekly':
                setDayOfWeek(date, rule.weekStart, -1);
                date.setDate(date.getDate() + 6);
                break;
            default:
                break;
            }
            if (rule.hours) {
                date.setHours(23);
            }
            if (rule.minutes) {
                date.setMinutes(59);
            }
            if (rule.seconds) {
                date.setSeconds(59);
            }
            return date;
        }
        function eventsByPosition(periodEvents, start, positions) {
            var periodEventsLength = periodEvents.length;
            var events = [];
            var position;
            var event;
            for (var idx = 0, length = positions.length; idx < length; idx++) {
                position = positions[idx];
                if (position < 0) {
                    position = periodEventsLength + position;
                } else {
                    position -= 1;
                }
                event = periodEvents[position];
                if (event && event.start >= start) {
                    events.push(event);
                }
            }
            return events;
        }
        function removeExceptionDates(periodEvents, exceptionDates, zone) {
            var events = [];
            var event;
            for (var idx = 0; idx < periodEvents.length; idx++) {
                event = periodEvents[idx];
                if (!isException(exceptionDates, event.start, zone)) {
                    events.push(event);
                }
            }
            return events;
        }
        function expand(event, start, end, zone) {
            var rule = parseRule(event.recurrenceRule, zone), startTime, endTime, endDate, hours, minutes, seconds, durationMS, startPeriod, inPeriod, ruleStart, ruleEnd, useEventStart, freqName, exceptionDates, eventStartTime, eventStartMS, eventStart, count, freq, positions, currentIdx, periodEvents, events = [];
            if (!rule) {
                return [event];
            }
            positions = rule.positions;
            currentIdx = positions ? 0 : 1;
            ruleStart = rule.start;
            ruleEnd = rule.end;
            if (ruleStart || ruleEnd) {
                event = event.clone({
                    start: ruleStart ? new Date(ruleStart.value[0]) : undefined,
                    end: ruleEnd ? new Date(ruleEnd.value[0]) : undefined
                });
            }
            eventStart = event.start;
            eventStartMS = eventStart.getTime();
            eventStartTime = getMilliseconds(eventStart);
            exceptionDates = parseExceptions(event.recurrenceException, zone);
            if (!exceptionDates[0] && rule.exdates) {
                exceptionDates = rule.exdates.value;
                event.set('recurrenceException', toExceptionString(exceptionDates, zone));
            }
            startPeriod = start = new Date(start);
            end = new Date(end);
            freqName = rule.freq;
            freq = frequencies[freqName];
            count = rule.count;
            if (rule.until && rule.until < end) {
                end = new Date(rule.until);
            }
            useEventStart = freqName === 'yearly' || freqName === 'monthly' || freqName === 'weekly';
            if (start < eventStartMS || count || rule.interval > 1 || useEventStart) {
                start = new Date(eventStartMS);
            } else {
                hours = start.getHours();
                minutes = start.getMinutes();
                seconds = start.getSeconds();
                if (!rule.hours) {
                    hours = eventStart.getHours();
                }
                if (!rule.minutes) {
                    minutes = eventStart.getMinutes();
                }
                if (!rule.seconds) {
                    seconds = eventStart.getSeconds();
                }
                start.setHours(hours, minutes, seconds, eventStart.getMilliseconds());
            }
            rule._startPeriod = new Date(start);
            if (positions) {
                start = startPeriodByFreq(start, rule);
                end = endPeriodByFreq(end, rule);
                var diff = getMilliseconds(end) - getMilliseconds(start);
                if (diff < 0) {
                    hours = start.getHours();
                    end.setHours(hours, start.getMinutes(), start.getSeconds(), start.getMilliseconds());
                    kendoDate.adjustDST(end, hours);
                }
                rule._startPeriod = new Date(start);
                rule._endPeriod = endPeriodByFreq(start, rule);
            }
            durationMS = event.duration();
            rule._startTime = startTime = kendoDate.toInvariantTime(start);
            if (freq.setup) {
                freq.setup(rule, eventStart, start);
            }
            freq.limit(start, end, rule);
            while (start <= end) {
                endDate = new Date(start);
                setTime(endDate, durationMS);
                inPeriod = start >= startPeriod || endDate > startPeriod;
                if (inPeriod && !isException(exceptionDates, start, zone) || positions) {
                    startTime = kendoDate.toUtcTime(kendoDate.getDate(start)) + getMilliseconds(rule._startTime);
                    endTime = startTime + durationMS;
                    if (eventStartMS !== start.getTime() || eventStartTime !== getMilliseconds(rule._startTime)) {
                        events.push(event.toOccurrence({
                            start: new Date(start),
                            end: endDate,
                            _startTime: startTime,
                            _endTime: endTime
                        }));
                    } else {
                        event._startTime = startTime;
                        event._endTime = endTime;
                        events.push(event);
                    }
                }
                if (positions) {
                    freq.next(start, rule);
                    freq.limit(start, end, rule);
                    if (start > rule._endPeriod) {
                        periodEvents = eventsByPosition(events.slice(currentIdx), eventStart, positions);
                        periodEvents = removeExceptionDates(periodEvents, exceptionDates, zone);
                        events = events.slice(0, currentIdx).concat(periodEvents);
                        rule._endPeriod = endPeriodByFreq(start, rule);
                        currentIdx = events.length;
                    }
                    if (count && count === currentIdx) {
                        break;
                    }
                } else {
                    if (count && count === currentIdx) {
                        break;
                    }
                    currentIdx += 1;
                    freq.next(start, rule);
                    freq.limit(start, end, rule);
                }
            }
            return events;
        }
        function parseUTCDate(value, zone) {
            value = kendo.parseDate(value, DATE_FORMATS);
            if (value && zone) {
                value = timezone.convert(value, value.getTimezoneOffset(), zone);
            }
            return value;
        }
        function parseDateRule(dateRule, zone) {
            var pairs = dateRule.split(';');
            var pair;
            var property;
            var value;
            var tzid;
            var valueIdx, valueLength;
            for (var idx = 0, length = pairs.length; idx < length; idx++) {
                pair = pairs[idx].split(':');
                property = pair[0];
                value = pair[1];
                if (property.indexOf('TZID') !== -1) {
                    tzid = property.substring(property.indexOf('TZID')).split('=')[1];
                }
                if (value) {
                    value = value.split(',');
                    for (valueIdx = 0, valueLength = value.length; valueIdx < valueLength; valueIdx++) {
                        value[valueIdx] = parseUTCDate(value[valueIdx], tzid || zone);
                    }
                }
            }
            if (value) {
                return {
                    value: value,
                    tzid: tzid
                };
            }
        }
        function parseRule(recur, zone) {
            var instance = {};
            var splits, value;
            var idx = 0, length;
            var ruleValue = false;
            var rule, part, parts;
            var property, weekStart, weekDays;
            var predicate = function (a, b) {
                var day1 = a.day, day2 = b.day;
                if (day1 < weekStart) {
                    day1 += 7;
                }
                if (day2 < weekStart) {
                    day2 += 7;
                }
                return day1 - day2;
            };
            if (!recur) {
                return null;
            }
            parts = recur.split('\n');
            if (!parts[1] && (recur.indexOf('DTSTART') !== -1 || recur.indexOf('DTEND') !== -1 || recur.indexOf('EXDATE') !== -1)) {
                parts = recur.split(' ');
            }
            for (idx = 0, length = parts.length; idx < length; idx++) {
                part = $.trim(parts[idx]);
                if (part.indexOf('DTSTART') !== -1) {
                    instance.start = parseDateRule(part, zone);
                } else if (part.indexOf('DTEND') !== -1) {
                    instance.end = parseDateRule(part, zone);
                } else if (part.indexOf('EXDATE') !== -1) {
                    instance.exdates = parseDateRule(part, zone);
                } else if (part.indexOf('RRULE') !== -1) {
                    rule = part.substring(6);
                } else if ($.trim(part)) {
                    rule = part;
                }
            }
            rule = rule.split(';');
            for (idx = 0, length = rule.length; idx < length; idx++) {
                property = rule[idx];
                splits = property.split('=');
                value = $.trim(splits[1]).split(',');
                switch ($.trim(splits[0]).toUpperCase()) {
                case 'FREQ':
                    instance.freq = value[0].toLowerCase();
                    break;
                case 'UNTIL':
                    instance.until = parseUTCDate(value[0], zone);
                    break;
                case 'COUNT':
                    instance.count = parseInt(value[0], 10);
                    break;
                case 'INTERVAL':
                    instance.interval = parseInt(value[0], 10);
                    break;
                case 'BYSECOND':
                    instance.seconds = parseArray(value, {
                        start: 0,
                        end: 60
                    });
                    ruleValue = true;
                    break;
                case 'BYMINUTE':
                    instance.minutes = parseArray(value, {
                        start: 0,
                        end: 59
                    });
                    ruleValue = true;
                    break;
                case 'BYHOUR':
                    instance.hours = parseArray(value, {
                        start: 0,
                        end: 23
                    });
                    ruleValue = true;
                    break;
                case 'BYMONTHDAY':
                    instance.monthDays = parseArray(value, {
                        start: -31,
                        end: 31
                    });
                    ruleValue = true;
                    break;
                case 'BYYEARDAY':
                    instance.yearDays = parseArray(value, {
                        start: -366,
                        end: 366
                    });
                    ruleValue = true;
                    break;
                case 'BYMONTH':
                    instance.months = parseArray(value, {
                        start: 1,
                        end: 12
                    });
                    ruleValue = true;
                    break;
                case 'BYDAY':
                    instance.weekDays = weekDays = parseWeekDayList(value);
                    ruleValue = true;
                    break;
                case 'BYWEEKNO':
                    instance.weeks = parseArray(value, {
                        start: -53,
                        end: 53
                    });
                    ruleValue = true;
                    break;
                case 'BYSETPOS':
                    instance.positions = parseArray(value, {
                        start: -366,
                        end: 366
                    });
                    break;
                case 'WKST':
                    instance.weekStart = weekStart = WEEK_DAYS_IDX[value[0]];
                    break;
                }
            }
            if (instance.freq === undefined || instance.count !== undefined && instance.until) {
                return null;
            }
            if (!instance.interval) {
                instance.interval = 1;
            }
            if (weekStart === undefined) {
                instance.weekStart = weekStart = kendo.culture().calendar.firstDay;
            }
            if (weekDays) {
                instance.weekDays = weekDays.sort(predicate);
            }
            if (instance.positions && !ruleValue) {
                instance.positions = null;
            }
            instance._hasRuleValue = ruleValue;
            return instance;
        }
        function serializeDateRule(dateRule, zone) {
            var value = dateRule.value;
            var tzid = dateRule.tzid || '';
            var length = value.length;
            var idx = 0;
            var val;
            for (; idx < length; idx++) {
                val = value[idx];
                val = timezone.convert(val, tzid || zone || val.getTimezoneOffset(), 'Etc/UTC');
                value[idx] = kendo.toString(val, 'yyyyMMddTHHmmssZ');
            }
            if (tzid) {
                tzid = ';TZID=' + tzid;
            }
            return tzid + ':' + value.join(',') + ' ';
        }
        function serialize(rule, zone) {
            var weekStart = rule.weekStart;
            var ruleString = 'FREQ=' + rule.freq.toUpperCase();
            var exdates = rule.exdates || '';
            var start = rule.start || '';
            var end = rule.end || '';
            var until = rule.until;
            if (rule.interval > 1) {
                ruleString += ';INTERVAL=' + rule.interval;
            }
            if (rule.count) {
                ruleString += ';COUNT=' + rule.count;
            }
            if (until) {
                until = timezone.convert(until, zone || until.getTimezoneOffset(), 'Etc/UTC');
                ruleString += ';UNTIL=' + kendo.toString(until, 'yyyyMMddTHHmmssZ');
            }
            if (rule.months) {
                ruleString += ';BYMONTH=' + rule.months;
            }
            if (rule.weeks) {
                ruleString += ';BYWEEKNO=' + rule.weeks;
            }
            if (rule.yearDays) {
                ruleString += ';BYYEARDAY=' + rule.yearDays;
            }
            if (rule.monthDays) {
                ruleString += ';BYMONTHDAY=' + rule.monthDays;
            }
            if (rule.weekDays) {
                ruleString += ';BYDAY=' + serializeWeekDayList(rule.weekDays);
            }
            if (rule.hours) {
                ruleString += ';BYHOUR=' + rule.hours;
            }
            if (rule.minutes) {
                ruleString += ';BYMINUTE=' + rule.minutes;
            }
            if (rule.seconds) {
                ruleString += ';BYSECOND=' + rule.seconds;
            }
            if (rule.positions) {
                ruleString += ';BYSETPOS=' + rule.positions;
            }
            if (weekStart !== undefined) {
                ruleString += ';WKST=' + WEEK_DAYS[weekStart];
            }
            if (start) {
                start = 'DTSTART' + serializeDateRule(start, zone);
            }
            if (end) {
                end = 'DTEND' + serializeDateRule(end, zone);
            }
            if (exdates) {
                exdates = 'EXDATE' + serializeDateRule(exdates, zone);
            }
            if (start || end || exdates) {
                ruleString = start + end + exdates + 'RRULE:' + ruleString;
            }
            return ruleString;
        }
        kendo.recurrence = {
            rule: {
                parse: parseRule,
                serialize: serialize
            },
            expand: expand,
            dayInYear: dayInYear,
            weekInYear: weekInYear,
            weekInMonth: weekInMonth,
            numberOfWeeks: numberOfWeeks,
            isException: isException,
            toExceptionString: toExceptionString
        };
        var weekDayCheckBoxes = function (firstDay) {
            var shortNames = kendo.culture().calendar.days.namesShort, length = shortNames.length, result = '', idx = 0, values = [];
            for (; idx < length; idx++) {
                values.push(idx);
            }
            shortNames = shortNames.slice(firstDay).concat(shortNames.slice(0, firstDay));
            values = values.slice(firstDay).concat(values.slice(0, firstDay));
            for (idx = 0; idx < length; idx++) {
                result += '<label class="k-check"><input class="k-recur-weekday-checkbox" type="checkbox" value="' + values[idx] + '" /> ' + shortNames[idx] + '</label>';
            }
            return result;
        };
        var RECURRENCE_VIEW_TEMPLATE = kendo.template('# if (frequency !== "never") { #' + '<div class="k-edit-label"><label>#:messages.repeatEvery#</label></div>' + '<div class="k-edit-field"><input class="k-recur-interval"/>#:messages.interval#</div>' + '# } #' + '# if (frequency === "weekly") { #' + '<div class="k-edit-label"><label>#:messages.repeatOn#</label></div>' + '<div class="k-edit-field">#=weekDayCheckBoxes(firstWeekDay)#</div>' + '# } else if (frequency === "monthly") { #' + '<div class="k-edit-label"><label>#:messages.repeatOn#</label></div>' + '<div class="k-edit-field">' + '<ul class="k-reset">' + '<li>' + '<label><input class="k-recur-month-radio" type="radio" name="month" value="monthday" />#:messages.day#</label>' + '<input class="k-recur-monthday" />' + '</li>' + '<li>' + '<input class="k-recur-month-radio" type="radio" name="month" value="weekday" />' + '<input class="k-recur-weekday-offset" /><input class="k-recur-weekday" />' + '</li>' + '</ul>' + '</div>' + '# } else if (frequency === "yearly") { #' + '<div class="k-edit-label"><label>#:messages.repeatOn#</label></div>' + '<div class="k-edit-field">' + '<ul class="k-reset">' + '<li>' + '<input class="k-recur-year-radio" type="radio" name="year" value="monthday" />' + '<input class="k-recur-month" /><input class="k-recur-monthday" />' + '</li>' + '<li>' + '<input class="k-recur-year-radio" type="radio" name="year" value="weekday" />' + '<input class="k-recur-weekday-offset" /><input class="k-recur-weekday" />#:messages.of#<input class="k-recur-month" />' + '</li>' + '</ul>' + '</div>' + '# } #' + '# if (frequency !== "never") { #' + '<div class="k-edit-label"><label>#:end.label#</label></div>' + '<div class="k-edit-field">' + '<ul class="k-reset">' + '<li>' + '<label><input class="k-recur-end-never" type="radio" name="end" value="never" />#:end.never#</label>' + '</li>' + '<li>' + '<label><input class="k-recur-end-count" type="radio" name="end" value="count" />#:end.after#</label>' + '<input class="k-recur-count" />#:end.occurrence#' + '</li>' + '<li>' + '<label><input class="k-recur-end-until" type="radio" name="end" value="until" />#:end.on#</label>' + '<input class="k-recur-until" />' + '</li>' + '</ul>' + '</div>' + '# } #');
        var DAY_RULE = [
            {
                day: 0,
                offset: 0
            },
            {
                day: 1,
                offset: 0
            },
            {
                day: 2,
                offset: 0
            },
            {
                day: 3,
                offset: 0
            },
            {
                day: 4,
                offset: 0
            },
            {
                day: 5,
                offset: 0
            },
            {
                day: 6,
                offset: 0
            }
        ];
        var WEEKDAY_RULE = [
            {
                day: 1,
                offset: 0
            },
            {
                day: 2,
                offset: 0
            },
            {
                day: 3,
                offset: 0
            },
            {
                day: 4,
                offset: 0
            },
            {
                day: 5,
                offset: 0
            }
        ];
        var WEEKEND_RULE = [
            {
                day: 0,
                offset: 0
            },
            {
                day: 6,
                offset: 0
            }
        ];
        var BaseRecurrenceEditor = Widget.extend({
            init: function (element, options) {
                var start;
                var that = this;
                var frequencies = options && options.frequencies;
                Widget.fn.init.call(that, element, options);
                that.wrapper = that.element;
                options = that.options;
                options.start = start = options.start || kendoDate.today();
                if (frequencies) {
                    options.frequencies = frequencies;
                }
                if (typeof start === 'string') {
                    options.start = kendo.parseDate(start, 'yyyyMMddTHHmmss');
                }
                if (options.firstWeekDay === null) {
                    options.firstWeekDay = kendo.culture().calendar.firstDay;
                }
                that._namespace = '.' + options.name;
            },
            options: {
                value: '',
                start: '',
                timezone: '',
                spinners: true,
                firstWeekDay: null,
                frequencies: [
                    'never',
                    'daily',
                    'weekly',
                    'monthly',
                    'yearly'
                ],
                mobile: false,
                messages: {
                    frequencies: {
                        never: 'Never',
                        hourly: 'Hourly',
                        daily: 'Daily',
                        weekly: 'Weekly',
                        monthly: 'Monthly',
                        yearly: 'Yearly'
                    },
                    hourly: {
                        repeatEvery: 'Repeat every: ',
                        interval: ' hour(s)'
                    },
                    daily: {
                        repeatEvery: 'Repeat every: ',
                        interval: ' day(s)'
                    },
                    weekly: {
                        interval: ' week(s)',
                        repeatEvery: 'Repeat every: ',
                        repeatOn: 'Repeat on: '
                    },
                    monthly: {
                        repeatEvery: 'Repeat every: ',
                        repeatOn: 'Repeat on: ',
                        interval: ' month(s)',
                        day: 'Day '
                    },
                    yearly: {
                        repeatEvery: 'Repeat every: ',
                        repeatOn: 'Repeat on: ',
                        interval: ' year(s)',
                        of: ' of '
                    },
                    end: {
                        label: 'End:',
                        mobileLabel: 'Ends',
                        never: 'Never',
                        after: 'After ',
                        occurrence: ' occurrence(s)',
                        on: 'On '
                    },
                    offsetPositions: {
                        first: 'first',
                        second: 'second',
                        third: 'third',
                        fourth: 'fourth',
                        last: 'last'
                    },
                    weekdays: {
                        day: 'day',
                        weekday: 'weekday',
                        weekend: 'weekend day'
                    }
                }
            },
            events: ['change'],
            _initInterval: function () {
                var that = this;
                var rule = that._value;
                that._container.find('.k-recur-interval').kendoNumericTextBox({
                    spinners: that.options.spinners,
                    value: rule.interval || 1,
                    decimals: 0,
                    format: '#',
                    min: 1,
                    change: function () {
                        rule.interval = this.value();
                        that._trigger();
                    }
                });
            },
            _weekDayRule: function (clear) {
                var that = this;
                var weekday = (that._weekDay.element || that._weekDay).val();
                var offset = Number((that._weekDayOffset.element || that._weekDayOffset).val());
                var weekDays = null;
                var positions = null;
                if (!clear) {
                    if (weekday === 'day') {
                        weekDays = DAY_RULE;
                        positions = offset;
                    } else if (weekday === 'weekday') {
                        weekDays = WEEKDAY_RULE;
                        positions = offset;
                    } else if (weekday === 'weekend') {
                        weekDays = WEEKEND_RULE;
                        positions = offset;
                    } else {
                        weekDays = [{
                                offset: offset,
                                day: Number(weekday)
                            }];
                    }
                }
                that._value.weekDays = weekDays;
                that._value.positions = positions;
            },
            _weekDayView: function () {
                var that = this;
                var weekDays = that._value.weekDays;
                var positions = that._value.positions;
                var weekDayOffsetWidget = that._weekDayOffset;
                var weekDayOffset;
                var weekDayValue;
                var length;
                var method;
                if (weekDays) {
                    length = weekDays.length;
                    if (positions) {
                        if (length === 7) {
                            weekDayValue = 'day';
                            weekDayOffset = positions;
                        } else if (length === 5) {
                            weekDayValue = 'weekday';
                            weekDayOffset = positions;
                        } else if (length === 2) {
                            weekDayValue = 'weekend';
                            weekDayOffset = positions;
                        }
                    }
                    if (!weekDayValue) {
                        weekDays = weekDays[0];
                        weekDayValue = weekDays.day;
                        weekDayOffset = weekDays.offset || '';
                    }
                    method = weekDayOffsetWidget.value ? 'value' : 'val';
                    weekDayOffsetWidget[method](weekDayOffset);
                    that._weekDay[method](weekDayValue);
                }
            },
            _initWeekDay: function () {
                var that = this, data;
                var weekdayMessage = that.options.messages.weekdays;
                var offsetMessage = that.options.messages.offsetPositions;
                var weekDayInput = that._container.find('.k-recur-weekday');
                var change = function () {
                    that._weekDayRule();
                    that._trigger();
                };
                if (weekDayInput[0]) {
                    that._weekDayOffset = new DropDownList(that._container.find('.k-recur-weekday-offset'), {
                        change: change,
                        dataTextField: 'text',
                        dataValueField: 'value',
                        dataSource: [
                            {
                                text: offsetMessage.first,
                                value: '1'
                            },
                            {
                                text: offsetMessage.second,
                                value: '2'
                            },
                            {
                                text: offsetMessage.third,
                                value: '3'
                            },
                            {
                                text: offsetMessage.fourth,
                                value: '4'
                            },
                            {
                                text: offsetMessage.last,
                                value: '-1'
                            }
                        ]
                    });
                    data = [
                        {
                            text: weekdayMessage.day,
                            value: 'day'
                        },
                        {
                            text: weekdayMessage.weekday,
                            value: 'weekday'
                        },
                        {
                            text: weekdayMessage.weekend,
                            value: 'weekend'
                        }
                    ];
                    that._weekDay = new DropDownList(weekDayInput, {
                        value: that.options.start.getDay(),
                        change: change,
                        dataTextField: 'text',
                        dataValueField: 'value',
                        dataSource: data.concat($.map(kendo.culture().calendar.days.names, function (dayName, idx) {
                            return {
                                text: dayName,
                                value: idx
                            };
                        }))
                    });
                    that._weekDayView();
                }
            },
            _initWeekDays: function () {
                var that = this;
                var rule = that._value;
                var weekDays = that._container.find('.k-recur-weekday-checkbox');
                if (weekDays[0]) {
                    weekDays.on(CLICK + that._namespace, function () {
                        rule.weekDays = $.map(weekDays.filter(':checked'), function (checkbox) {
                            return {
                                day: Number(checkbox.value),
                                offset: 0
                            };
                        });
                        if (!that.options.mobile) {
                            that._trigger();
                        }
                    });
                    if (rule.weekDays) {
                        var idx, weekDay;
                        var i = 0, l = weekDays.length;
                        var length = rule.weekDays.length;
                        for (; i < l; i++) {
                            weekDay = weekDays[i];
                            for (idx = 0; idx < length; idx++) {
                                if (weekDay.value == rule.weekDays[idx].day) {
                                    weekDay.checked = true;
                                }
                            }
                        }
                    }
                }
            },
            _initMonthDay: function () {
                var that = this;
                var rule = that._value;
                var monthDayInput = that._container.find('.k-recur-monthday');
                if (monthDayInput[0]) {
                    that._monthDay = new kendo.ui.NumericTextBox(monthDayInput, {
                        spinners: that.options.spinners,
                        min: 1,
                        max: 31,
                        decimals: 0,
                        format: '#',
                        value: rule.monthDays ? rule.monthDays[0] : that.options.start.getDate(),
                        change: function () {
                            var value = this.value();
                            rule.monthDays = value ? [value] : value;
                            that._trigger();
                        }
                    });
                }
            },
            _initCount: function () {
                var that = this, input = that._container.find('.k-recur-count'), rule = that._value;
                that._count = input.kendoNumericTextBox({
                    spinners: that.options.spinners,
                    value: rule.count || 1,
                    decimals: 0,
                    format: '#',
                    min: 1,
                    change: function () {
                        rule.count = this.value();
                        that._trigger();
                    }
                }).data('kendoNumericTextBox');
            },
            _initUntil: function () {
                var that = this, input = that._container.find('.k-recur-until'), start = that.options.start, rule = that._value, until = rule.until;
                that._until = input.kendoDatePicker({
                    min: until && until < start ? until : start,
                    value: until || new Date(start.getFullYear(), start.getMonth(), start.getDate(), 23, 59, 59),
                    change: function () {
                        var date = this.value();
                        rule.until = new Date(date.getFullYear(), date.getMonth(), date.getDate(), 23, 59, 59);
                        that._trigger();
                    }
                }).data('kendoDatePicker');
            },
            _trigger: function () {
                if (!this.options.mobile) {
                    this.trigger('change');
                }
            }
        });
        var RecurrenceEditor = BaseRecurrenceEditor.extend({
            init: function (element, options) {
                var that = this;
                BaseRecurrenceEditor.fn.init.call(that, element, options);
                that._initFrequency();
                that._initContainer();
                that.value(that.options.value);
            },
            options: { name: 'RecurrenceEditor' },
            events: ['change'],
            destroy: function () {
                var that = this;
                that._frequency.destroy();
                that._container.find('input[type=radio],input[type=checkbox]').off(CLICK + that._namespace);
                kendo.destroy(that._container);
                BaseRecurrenceEditor.fn.destroy.call(that);
            },
            value: function (value) {
                var that = this;
                var timezone = that.options.timezone;
                var freq;
                if (value === undefined) {
                    if (!that._value.freq) {
                        return '';
                    }
                    return serialize(that._value, timezone);
                }
                that._value = parseRule(value, timezone) || {};
                freq = that._value.freq;
                if (freq) {
                    that._frequency.value(freq);
                } else {
                    that._frequency.select(0);
                }
                that._initView(that._frequency.value());
            },
            _initContainer: function () {
                var element = this.element, container = $('<div class="k-recur-view" />'), editContainer = element.parent('.k-edit-field');
                if (editContainer[0]) {
                    container.insertAfter(editContainer);
                } else {
                    element.append(container);
                }
                this._container = container;
            },
            _initFrequency: function () {
                var that = this, options = that.options, frequencies = options.frequencies, messages = options.messages.frequencies, ddl = $('<input />'), frequency;
                frequencies = $.map(frequencies, function (frequency) {
                    return {
                        text: messages[frequency],
                        value: frequency
                    };
                });
                frequency = frequencies[0];
                if (frequency && frequency.value === 'never') {
                    frequency.value = '';
                }
                that.element.append(ddl);
                that._frequency = new DropDownList(ddl, {
                    dataTextField: 'text',
                    dataValueField: 'value',
                    dataSource: frequencies,
                    change: function () {
                        that._value = {};
                        that._initView(that._frequency.value());
                        that.trigger('change');
                    }
                });
            },
            _initView: function (frequency) {
                var that = this;
                var rule = that._value;
                var options = that.options;
                var data = {
                    frequency: frequency || 'never',
                    weekDayCheckBoxes: weekDayCheckBoxes,
                    firstWeekDay: options.firstWeekDay,
                    messages: options.messages[frequency],
                    end: options.messages.end
                };
                kendo.destroy(that._container);
                that._container.html(RECURRENCE_VIEW_TEMPLATE(data));
                if (!frequency) {
                    that._value = {};
                    return;
                }
                rule.freq = frequency;
                if (frequency === 'weekly' && !rule.weekDays) {
                    rule.weekDays = [{
                            day: options.start.getDay(),
                            offset: 0
                        }];
                }
                that._initInterval();
                that._initWeekDays();
                that._initMonthDay();
                that._initWeekDay();
                that._initMonth();
                that._initCount();
                that._initUntil();
                that._period();
                that._end();
            },
            _initMonth: function () {
                var that = this;
                var rule = that._value;
                var month = rule.months || [that.options.start.getMonth() + 1];
                var monthInputs = that._container.find('.k-recur-month');
                var options;
                if (monthInputs[0]) {
                    options = {
                        change: function () {
                            rule.months = [Number(this.value())];
                            that.trigger('change');
                        },
                        dataTextField: 'text',
                        dataValueField: 'value',
                        dataSource: $.map(kendo.culture().calendar.months.names, function (monthName, idx) {
                            return {
                                text: monthName,
                                value: idx + 1
                            };
                        })
                    };
                    that._month1 = new DropDownList(monthInputs[0], options);
                    that._month2 = new DropDownList(monthInputs[1], options);
                    if (month) {
                        month = month[0];
                        that._month1.value(month);
                        that._month2.value(month);
                    }
                }
            },
            _end: function () {
                var that = this;
                var rule = that._value;
                var container = that._container;
                var namespace = that._namespace;
                var click = function (e) {
                    that._toggleEnd(e.currentTarget.value);
                    that.trigger('change');
                };
                var endRule;
                that._buttonNever = container.find('.k-recur-end-never').on(CLICK + namespace, click);
                that._buttonCount = container.find('.k-recur-end-count').on(CLICK + namespace, click);
                that._buttonUntil = container.find('.k-recur-end-until').on(CLICK + namespace, click);
                if (rule.count) {
                    endRule = 'count';
                } else if (rule.until) {
                    endRule = 'until';
                }
                that._toggleEnd(endRule);
            },
            _period: function () {
                var that = this;
                var rule = that._value;
                var monthly = rule.freq === 'monthly';
                var toggleRule = monthly ? that._toggleMonthDay : that._toggleYear;
                var selector = '.k-recur-' + (monthly ? 'month' : 'year') + '-radio';
                var radioButtons = that._container.find(selector);
                if (!monthly && rule.freq !== 'yearly') {
                    return;
                }
                radioButtons.on(CLICK + that._namespace, function (e) {
                    toggleRule.call(that, e.currentTarget.value);
                    that.trigger('change');
                });
                that._buttonMonthDay = radioButtons.eq(0);
                that._buttonWeekDay = radioButtons.eq(1);
                toggleRule.call(that, rule.weekDays ? 'weekday' : 'monthday');
            },
            _toggleEnd: function (endRule) {
                var that = this;
                var count, until;
                var enableCount, enableUntil;
                if (endRule === 'count') {
                    that._buttonCount.prop('checked', true);
                    enableCount = true;
                    enableUntil = false;
                    count = that._count.value();
                    until = null;
                } else if (endRule === 'until') {
                    that._buttonUntil.prop('checked', true);
                    enableCount = false;
                    enableUntil = true;
                    count = null;
                    until = that._until.value();
                } else {
                    that._buttonNever.prop('checked', true);
                    enableCount = enableUntil = false;
                    count = until = null;
                }
                that._count.enable(enableCount);
                that._until.enable(enableUntil);
                that._value.count = count;
                that._value.until = until;
            },
            _toggleMonthDay: function (monthRule) {
                var that = this;
                var enableMonthDay = false;
                var enableWeekDay = true;
                var clear = false;
                var monthDays;
                if (monthRule === 'monthday') {
                    that._buttonMonthDay.prop('checked', true);
                    monthDays = [that._monthDay.value()];
                    enableMonthDay = true;
                    enableWeekDay = false;
                    clear = true;
                } else {
                    that._buttonWeekDay.prop('checked', true);
                    monthDays = null;
                }
                that._weekDay.enable(enableWeekDay);
                that._weekDayOffset.enable(enableWeekDay);
                that._monthDay.enable(enableMonthDay);
                that._value.monthDays = monthDays;
                that._weekDayRule(clear);
            },
            _toggleYear: function (yearRule) {
                var that = this;
                var enableMonth1 = false;
                var enableMonth2 = true;
                var month;
                if (yearRule === 'monthday') {
                    enableMonth1 = true;
                    enableMonth2 = false;
                    month = that._month1.value();
                } else {
                    month = that._month2.value();
                }
                that._month1.enable(enableMonth1);
                that._month2.enable(enableMonth2);
                that._value.months = [month];
                that._toggleMonthDay(yearRule);
            }
        });
        ui.plugin(RecurrenceEditor);
        var RECURRENCE_HEADER_TEMPLATE = kendo.template('<div class="k-edit-label"><label>#:headerTitle#</label></div>' + '<div class="k-edit-field k-recur-pattern k-scheduler-toolbar"></div>' + '<div class="k-recur-view"></div>');
        var RECURRENCE_REPEAT_PATTERN_TEMPLATE = kendo.template('# if (frequency !== "never") { #' + '<div class="k-edit-label"><label>#:messages.repeatEvery#</label></div>' + '<div class="k-edit-field"><input class="k-recur-interval" pattern="\\\\d*"/>#:messages.interval#</div>' + '# } #' + '# if (frequency === "weekly") { #' + '<div class="k-edit-label"><label>#:messages.repeatOn#</label></div>' + '<div class="k-edit-field">#=weekDayCheckBoxes(firstWeekDay)#</div>' + '# } else if (frequency === "monthly") { #' + '<div class="k-edit-label"><label>#:messages.repeatBy#</label></div>' + '<div class="k-edit-field k-scheduler-toolbar k-repeat-rule"></div>' + '<div class="k-monthday-view" style="display:none">' + '<div class="k-edit-label"><label>#:messages.day#</label></div>' + '<div class="k-edit-field"><input class="k-recur-monthday" pattern="\\\\d*"/></div>' + '</div>' + '<div class="k-weekday-view" style="display:none">' + '<div class="k-edit-label"><label>#:messages.every#</label></div>' + '<div class="k-edit-field"><select class="k-recur-weekday-offset"></select></div>' + '<div class="k-edit-label"><label>#:messages.day#</label></div>' + '<div class="k-edit-field"><select class="k-recur-weekday"></select></div>' + '</div>' + '# } else if (frequency === "yearly") { #' + '<div class="k-edit-label"><label>#:messages.repeatBy#</label></div>' + '<div class="k-edit-field k-scheduler-toolbar k-repeat-rule"></div>' + '<div class="k-monthday-view" style="display:none">' + '<div class="k-edit-label"><label>#:messages.day#</label></div>' + '<div class="k-edit-field"><input class="k-recur-monthday" pattern="\\\\d*"/></div>' + '</div>' + '<div class="k-weekday-view" style="display:none">' + '<div class="k-edit-label"><label>#:messages.every#</label></div>' + '<div class="k-edit-field"><select class="k-recur-weekday-offset"></select></div>' + '<div class="k-edit-label"><label>#:messages.day#</label></div>' + '<div class="k-edit-field"><select class="k-recur-weekday"></select></div>' + '</div>' + '<div class="k-edit-label"><label>#:messages.month#</label></div>' + '<div class="k-edit-field"><select class="k-recur-month"></select></div>' + '# } #');
        var RECURRENCE_END_PATTERN_TEMPLATE = kendo.template('# if (endPattern === "count") { #' + '<div class="k-edit-label"><label>#:messages.after#</label></div>' + '<div class="k-edit-field"><input class="k-recur-count" pattern="\\\\d*" /></div>' + '# } else if (endPattern === "until") { #' + '<div class="k-edit-label"><label>#:messages.on#</label></div>' + '<div class="k-edit-field"><input type="date" class="k-recur-until" /></div>' + '# } #');
        var RECURRENCE_GROUP_BUTTON_TEMPLATE = kendo.template('<ul class="k-reset k-header k-scheduler-navigation">' + '#for (var i = 0, length = dataSource.length; i < length; i++) {#' + '<li class="k-state-default #= value === dataSource[i].value ? "k-state-selected" : "" #">' + '<a role="button" href="\\#" class="k-link" data-#=ns#value="#=dataSource[i].value#">#:dataSource[i].text#</a>' + '</li>' + '#}#' + '</ul>');
        var MobileRecurrenceEditor = BaseRecurrenceEditor.extend({
            init: function (element, options) {
                var that = this;
                BaseRecurrenceEditor.fn.init.call(that, element, options);
                options = that.options;
                that._optionTemplate = kendo.template('<option value="#:value#">#:text#</option>');
                that.value(options.value);
                that._pane = options.pane;
                that._initRepeatButton();
                that._initRepeatEnd();
                that._defaultValue = that._value;
            },
            options: {
                name: 'MobileRecurrenceEditor',
                animations: {
                    left: 'slide',
                    right: 'slide:right'
                },
                mobile: true,
                messages: {
                    cancel: 'Cancel',
                    update: 'Save',
                    endTitle: 'Repeat ends',
                    repeatTitle: 'Repeat pattern',
                    headerTitle: 'Repeat event',
                    end: {
                        patterns: {
                            never: 'Never',
                            after: 'After...',
                            on: 'On...'
                        },
                        never: 'Never',
                        after: 'End repeat after',
                        on: 'End repeat on'
                    },
                    daily: { interval: '' },
                    hourly: { interval: '' },
                    weekly: { interval: '' },
                    monthly: {
                        interval: '',
                        repeatBy: 'Repeat by: ',
                        dayOfMonth: 'Day of the month',
                        dayOfWeek: 'Day of the week',
                        repeatEvery: 'Repeat every',
                        every: 'Every',
                        day: 'Day '
                    },
                    yearly: {
                        interval: '',
                        repeatBy: 'Repeat by: ',
                        dayOfMonth: 'Day of the month',
                        dayOfWeek: 'Day of the week',
                        repeatEvery: 'Repeat every: ',
                        every: 'Every',
                        month: 'Month',
                        day: 'Day'
                    }
                }
            },
            events: ['change'],
            value: function (value) {
                var that = this;
                var timezone = that.options.timezone;
                if (value === undefined) {
                    if (!that._value.freq) {
                        return '';
                    }
                    return serialize(that._value, timezone);
                }
                that._value = parseRule(value, timezone) || {};
            },
            destroy: function () {
                this._destroyView();
                kendo.destroy(this._endFields);
                this._repeatButton.off(CLICK + this._namespace);
                BaseRecurrenceEditor.fn.destroy.call(this);
            },
            _initRepeatButton: function () {
                var that = this;
                var freq = that.options.messages.frequencies[this._value.freq || 'never'];
                that._repeatButton = $('<a href="#" class="k-button k-scheduler-recur">' + freq + '</a>').on(CLICK + that._namespace, function (e) {
                    e.preventDefault();
                    that._createView('repeat');
                    that._pane.navigate('recurrence', that.options.animations.left);
                });
                that.element.append(that._repeatButton);
            },
            _initRepeatEnd: function () {
                var that = this;
                var endLabelField = $('<div class="k-edit-label"><label>' + that.options.messages.end.mobileLabel + '</label></div>').insertAfter(that.element.parent('.k-edit-field'));
                var endEditField = $('<div class="k-edit-field"><a href="#" class="k-button k-scheduler-recur-end"></a></div>').on(CLICK + that._namespace, function (e) {
                    e.preventDefault();
                    if (!that._value.freq) {
                        return;
                    }
                    that._createView('end');
                    that._pane.navigate('recurrence', that.options.animations.left);
                }).insertAfter(endLabelField);
                that._endFields = endLabelField.add(endEditField).toggleClass('k-state-disabled', !that._value.freq);
                that._endButton = endEditField.find('.k-scheduler-recur-end').text(that._endText());
            },
            _endText: function () {
                var rule = this._value;
                var messages = this.options.messages.end;
                var text = messages.never;
                if (rule.count) {
                    text = kendo.format('{0} {1}', messages.after, rule.count);
                } else if (rule.until) {
                    text = kendo.format('{0} {1:d}', messages.on, rule.until);
                }
                return text;
            },
            _initFrequency: function () {
                var that = this;
                var frequencyMessages = that.options.messages.frequencies;
                var html = RECURRENCE_GROUP_BUTTON_TEMPLATE({
                    dataSource: $.map(this.options.frequencies, function (frequency) {
                        return {
                            text: frequencyMessages[frequency],
                            value: frequency !== 'never' ? frequency : ''
                        };
                    }),
                    value: that._value.freq || '',
                    ns: kendo.ns
                });
                that._view.element.find('.k-recur-pattern').append(html).on(CLICK + that._namespace, '.k-scheduler-navigation li', function (e) {
                    var li = $(this);
                    e.preventDefault();
                    li.addClass('k-state-selected').siblings().removeClass('k-state-selected');
                    that._value = { freq: li.children('a').attr(kendo.attr('value')) };
                    that._initRepeatView();
                });
            },
            _initEndNavigation: function () {
                var that = this;
                var endMessages = that.options.messages.end.patterns;
                var rule = that._value;
                var value = '';
                if (rule.count) {
                    value = 'count';
                } else if (rule.until) {
                    value = 'until';
                }
                var html = RECURRENCE_GROUP_BUTTON_TEMPLATE({
                    dataSource: [
                        {
                            text: endMessages.never,
                            value: ''
                        },
                        {
                            text: endMessages.after,
                            value: 'count'
                        },
                        {
                            text: endMessages.on,
                            value: 'until'
                        }
                    ],
                    value: value,
                    ns: kendo.ns
                });
                that._view.element.find('.k-recur-pattern').append(html).on(CLICK + that._namespace, '.k-scheduler-navigation li', function (e) {
                    var li = $(this);
                    var count = null;
                    var until = null;
                    e.preventDefault();
                    li.addClass('k-state-selected').siblings().removeClass('k-state-selected');
                    that._initEndView(li.children('a').attr(kendo.attr('value')));
                    if (that._count) {
                        count = that._count.value();
                        until = null;
                    } else if (that._until) {
                        count = null;
                        until = that._until.val ? kendo.parseDate(that._until.val(), 'yyyy-MM-dd') : that._until.value();
                    }
                    rule.count = count;
                    rule.until = until;
                });
            },
            _createView: function (viewType) {
                var that = this;
                var options = that.options;
                var messages = options.messages;
                var headerTitle = messages[viewType === 'repeat' ? 'repeatTitle' : 'endTitle'];
                var html = '<div data-role="view" class="k-popup-edit-form k-scheduler-edit-form k-mobile-list" id="recurrence">' + '<div data-role="header" class="k-header">' + '<a href="#" class="k-button k-scheduler-cancel">' + messages.cancel + '</a>' + messages.headerTitle + '<a href="#" class="k-button k-scheduler-update">' + messages.update + '</a>' + '</div>';
                var returnViewId = that._pane.view().id;
                that._view = that._pane.append(html + RECURRENCE_HEADER_TEMPLATE({ headerTitle: headerTitle }));
                that._view.element.on(CLICK + that._namespace, 'a.k-scheduler-cancel, a.k-scheduler-update', function (e) {
                    e.preventDefault();
                    e.stopPropagation();
                    if ($(this).hasClass('k-scheduler-update')) {
                        that.trigger('change');
                        that._defaultValue = $.extend({}, that._value);
                    } else {
                        that._value = that._defaultValue;
                    }
                    var frequency = that._value.freq;
                    that._endButton.text(that._endText());
                    that._endFields.toggleClass('k-state-disabled', !frequency);
                    that._repeatButton.text(messages.frequencies[frequency || 'never']);
                    that._pane.one('viewShow', function () {
                        that._destroyView();
                    });
                    that._pane.navigate(returnViewId, that.options.animations.right);
                });
                that._container = that._view.element.find('.k-recur-view');
                if (viewType === 'repeat') {
                    that._initFrequency();
                    that._initRepeatView();
                } else {
                    that._initEndNavigation();
                    that._initEndView();
                }
            },
            _destroyView: function () {
                if (this._view) {
                    this._view.destroy();
                    this._view.element.remove();
                }
                this._view = null;
            },
            _initRepeatView: function () {
                var that = this;
                var frequency = that._value.freq || 'never';
                var data = {
                    frequency: frequency,
                    weekDayCheckBoxes: weekDayCheckBoxes,
                    firstWeekDay: that.options.firstWeekDay,
                    messages: that.options.messages[frequency]
                };
                var html = RECURRENCE_REPEAT_PATTERN_TEMPLATE(data);
                var container = that._container;
                var rule = that._value;
                kendo.destroy(container);
                container.html(html);
                if (!html) {
                    that._value = {};
                    return;
                }
                if (frequency === 'weekly' && !rule.weekDays) {
                    rule.weekDays = [{
                            day: that.options.start.getDay(),
                            offset: 0
                        }];
                }
                that._initInterval();
                that._initMonthDay();
                that._initWeekDays();
                that._initWeekDay();
                that._initMonth();
                that._period();
            },
            _initEndView: function (endPattern) {
                var that = this;
                var rule = that._value;
                if (endPattern === undefined) {
                    if (rule.count) {
                        endPattern = 'count';
                    } else if (rule.until) {
                        endPattern = 'until';
                    }
                }
                var data = {
                    endPattern: endPattern,
                    messages: that.options.messages.end
                };
                kendo.destroy(that._container);
                that._container.html(RECURRENCE_END_PATTERN_TEMPLATE(data));
                that._initCount();
                that._initUntil();
            },
            _initWeekDay: function () {
                var that = this, data;
                var weekdayMessage = that.options.messages.weekdays;
                var offsetMessage = that.options.messages.offsetPositions;
                var weekDaySelect = that._container.find('.k-recur-weekday');
                var change = function () {
                    that._weekDayRule();
                    that.trigger('change');
                };
                if (weekDaySelect[0]) {
                    that._weekDayOffset = that._container.find('.k-recur-weekday-offset').html(that._options([
                        {
                            text: offsetMessage.first,
                            value: '1'
                        },
                        {
                            text: offsetMessage.second,
                            value: '2'
                        },
                        {
                            text: offsetMessage.third,
                            value: '3'
                        },
                        {
                            text: offsetMessage.fourth,
                            value: '4'
                        },
                        {
                            text: offsetMessage.last,
                            value: '-1'
                        }
                    ])).change(change);
                    data = [
                        {
                            text: weekdayMessage.day,
                            value: 'day'
                        },
                        {
                            text: weekdayMessage.weekday,
                            value: 'weekday'
                        },
                        {
                            text: weekdayMessage.weekend,
                            value: 'weekend'
                        }
                    ];
                    data = data.concat($.map(kendo.culture().calendar.days.names, function (dayName, idx) {
                        return {
                            text: dayName,
                            value: idx
                        };
                    }));
                    that._weekDay = weekDaySelect.html(that._options(data)).change(change).val(that.options.start.getDay());
                    that._weekDayView();
                }
            },
            _initMonth: function () {
                var that = this;
                var rule = that._value;
                var start = that.options.start;
                var month = rule.months || [start.getMonth() + 1];
                var monthSelect = that._container.find('.k-recur-month');
                var monthNames = kendo.culture().calendar.months.names;
                if (monthSelect[0]) {
                    var data = $.map(monthNames, function (monthName, idx) {
                        return {
                            text: monthName,
                            value: idx + 1
                        };
                    });
                    monthSelect.html(that._options(data)).change(function () {
                        rule.months = [Number(this.value)];
                    });
                    that._monthSelect = monthSelect;
                    if (month) {
                        monthSelect.val(month[0]);
                    }
                }
            },
            _period: function () {
                var that = this;
                var rule = that._value;
                var container = that._container;
                var messages = that.options.messages[rule.freq];
                var repeatRuleGroupButton = container.find('.k-repeat-rule');
                var weekDayView = container.find('.k-weekday-view');
                var monthDayView = container.find('.k-monthday-view');
                if (repeatRuleGroupButton[0]) {
                    var currentValue = rule.weekDays ? 'weekday' : 'monthday';
                    var html = RECURRENCE_GROUP_BUTTON_TEMPLATE({
                        value: currentValue,
                        dataSource: [
                            {
                                text: messages.dayOfMonth,
                                value: 'monthday'
                            },
                            {
                                text: messages.dayOfWeek,
                                value: 'weekday'
                            }
                        ],
                        ns: kendo.ns
                    });
                    var init = function (val) {
                        var weekDayName = that._weekDay.val();
                        var weekDayOffset = that._weekDayOffset.val();
                        var monthDay = that._monthDay.value();
                        var month = that._monthSelect ? that._monthSelect.val() : null;
                        if (val === 'monthday') {
                            rule.weekDays = null;
                            rule.monthDays = monthDay ? [monthDay] : monthDay;
                            rule.months = month ? [Number(month)] : month;
                            weekDayView.hide();
                            monthDayView.show();
                        } else {
                            rule.monthDays = null;
                            rule.months = month ? [Number(month)] : month;
                            rule.weekDays = [{
                                    offset: Number(weekDayOffset),
                                    day: Number(weekDayName)
                                }];
                            weekDayView.show();
                            monthDayView.hide();
                        }
                    };
                    repeatRuleGroupButton.append(html).on(CLICK + that._namespace, '.k-scheduler-navigation li', function (e) {
                        var li = $(this).addClass('k-state-selected');
                        e.preventDefault();
                        li.siblings().removeClass('k-state-selected');
                        var value = li.children('a').attr(kendo.attr('value'));
                        init(value);
                    });
                    init(currentValue);
                }
            },
            _initUntil: function () {
                var that = this;
                var input = that._container.find('.k-recur-until');
                var start = that.options.start;
                var rule = that._value;
                var until = rule.until;
                var min = until && until < start ? until : start;
                if (kendo.support.input.date) {
                    that._until = input.attr('min', kendo.toString(min, 'yyyy-MM-dd')).val(kendo.toString(until || start, 'yyyy-MM-dd')).on('change', function () {
                        rule.until = kendo.parseDate(this.value, 'yyyy-MM-dd');
                    });
                } else {
                    that._until = input.kendoDatePicker({
                        min: min,
                        value: until || start,
                        change: function () {
                            rule.until = this.value();
                        }
                    }).data('kendoDatePicker');
                }
            },
            _options: function (data, optionLabel) {
                var idx = 0;
                var html = '';
                var length = data.length;
                var template = this._optionTemplate;
                if (optionLabel) {
                    html += template({
                        value: '',
                        text: optionLabel
                    });
                }
                for (; idx < length; idx++) {
                    html += template(data[idx]);
                }
                return html;
            }
        });
        ui.plugin(MobileRecurrenceEditor);
    }(window.kendo.jQuery));
    return window.kendo;
}, typeof define == 'function' && define.amd ? define : function (a1, a2, a3) {
    (a3 || a2)();
}));
/** 
 * Kendo UI v2016.2.714 (http://www.telerik.com/kendo-ui)                                                                                                                                               
 * Copyright 2016 Telerik AD. All rights reserved.                                                                                                                                                      
 *                                                                                                                                                                                                      
 * Kendo UI commercial licenses may be obtained at                                                                                                                                                      
 * http://www.telerik.com/purchase/license-agreement/kendo-ui-complete                                                                                                                                  
 * If you do not own a commercial license, this file shall be governed by the trial license terms.                                                                                                      
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       

*/
(function (f, define) {
    define('util/main', ['kendo.core'], f);
}(function () {
    (function () {
        var math = Math, kendo = window.kendo, deepExtend = kendo.deepExtend;
        var DEG_TO_RAD = math.PI / 180, MAX_NUM = Number.MAX_VALUE, MIN_NUM = -Number.MAX_VALUE, UNDEFINED = 'undefined';
        function defined(value) {
            return typeof value !== UNDEFINED;
        }
        function round(value, precision) {
            var power = pow(precision);
            return math.round(value * power) / power;
        }
        function pow(p) {
            if (p) {
                return math.pow(10, p);
            } else {
                return 1;
            }
        }
        function limitValue(value, min, max) {
            return math.max(math.min(value, max), min);
        }
        function rad(degrees) {
            return degrees * DEG_TO_RAD;
        }
        function deg(radians) {
            return radians / DEG_TO_RAD;
        }
        function isNumber(val) {
            return typeof val === 'number' && !isNaN(val);
        }
        function valueOrDefault(value, defaultValue) {
            return defined(value) ? value : defaultValue;
        }
        function sqr(value) {
            return value * value;
        }
        function objectKey(object) {
            var parts = [];
            for (var key in object) {
                parts.push(key + object[key]);
            }
            return parts.sort().join('');
        }
        function hashKey(str) {
            var hash = 2166136261;
            for (var i = 0; i < str.length; ++i) {
                hash += (hash << 1) + (hash << 4) + (hash << 7) + (hash << 8) + (hash << 24);
                hash ^= str.charCodeAt(i);
            }
            return hash >>> 0;
        }
        function hashObject(object) {
            return hashKey(objectKey(object));
        }
        var now = Date.now;
        if (!now) {
            now = function () {
                return new Date().getTime();
            };
        }
        function arrayLimits(arr) {
            var length = arr.length, i, min = MAX_NUM, max = MIN_NUM;
            for (i = 0; i < length; i++) {
                max = math.max(max, arr[i]);
                min = math.min(min, arr[i]);
            }
            return {
                min: min,
                max: max
            };
        }
        function arrayMin(arr) {
            return arrayLimits(arr).min;
        }
        function arrayMax(arr) {
            return arrayLimits(arr).max;
        }
        function sparseArrayMin(arr) {
            return sparseArrayLimits(arr).min;
        }
        function sparseArrayMax(arr) {
            return sparseArrayLimits(arr).max;
        }
        function sparseArrayLimits(arr) {
            var min = MAX_NUM, max = MIN_NUM;
            for (var i = 0, length = arr.length; i < length; i++) {
                var n = arr[i];
                if (n !== null && isFinite(n)) {
                    min = math.min(min, n);
                    max = math.max(max, n);
                }
            }
            return {
                min: min === MAX_NUM ? undefined : min,
                max: max === MIN_NUM ? undefined : max
            };
        }
        function last(array) {
            if (array) {
                return array[array.length - 1];
            }
        }
        function append(first, second) {
            first.push.apply(first, second);
            return first;
        }
        function renderTemplate(text) {
            return kendo.template(text, {
                useWithBlock: false,
                paramName: 'd'
            });
        }
        function renderAttr(name, value) {
            return defined(value) && value !== null ? ' ' + name + '=\'' + value + '\' ' : '';
        }
        function renderAllAttr(attrs) {
            var output = '';
            for (var i = 0; i < attrs.length; i++) {
                output += renderAttr(attrs[i][0], attrs[i][1]);
            }
            return output;
        }
        function renderStyle(attrs) {
            var output = '';
            for (var i = 0; i < attrs.length; i++) {
                var value = attrs[i][1];
                if (defined(value)) {
                    output += attrs[i][0] + ':' + value + ';';
                }
            }
            if (output !== '') {
                return output;
            }
        }
        function renderSize(size) {
            if (typeof size !== 'string') {
                size += 'px';
            }
            return size;
        }
        function renderPos(pos) {
            var result = [];
            if (pos) {
                var parts = kendo.toHyphens(pos).split('-');
                for (var i = 0; i < parts.length; i++) {
                    result.push('k-pos-' + parts[i]);
                }
            }
            return result.join(' ');
        }
        function isTransparent(color) {
            return color === '' || color === null || color === 'none' || color === 'transparent' || !defined(color);
        }
        function arabicToRoman(n) {
            var literals = {
                1: 'i',
                10: 'x',
                100: 'c',
                2: 'ii',
                20: 'xx',
                200: 'cc',
                3: 'iii',
                30: 'xxx',
                300: 'ccc',
                4: 'iv',
                40: 'xl',
                400: 'cd',
                5: 'v',
                50: 'l',
                500: 'd',
                6: 'vi',
                60: 'lx',
                600: 'dc',
                7: 'vii',
                70: 'lxx',
                700: 'dcc',
                8: 'viii',
                80: 'lxxx',
                800: 'dccc',
                9: 'ix',
                90: 'xc',
                900: 'cm',
                1000: 'm'
            };
            var values = [
                1000,
                900,
                800,
                700,
                600,
                500,
                400,
                300,
                200,
                100,
                90,
                80,
                70,
                60,
                50,
                40,
                30,
                20,
                10,
                9,
                8,
                7,
                6,
                5,
                4,
                3,
                2,
                1
            ];
            var roman = '';
            while (n > 0) {
                if (n < values[0]) {
                    values.shift();
                } else {
                    roman += literals[values[0]];
                    n -= values[0];
                }
            }
            return roman;
        }
        function romanToArabic(r) {
            r = r.toLowerCase();
            var digits = {
                i: 1,
                v: 5,
                x: 10,
                l: 50,
                c: 100,
                d: 500,
                m: 1000
            };
            var value = 0, prev = 0;
            for (var i = 0; i < r.length; ++i) {
                var v = digits[r.charAt(i)];
                if (!v) {
                    return null;
                }
                value += v;
                if (v > prev) {
                    value -= 2 * prev;
                }
                prev = v;
            }
            return value;
        }
        function memoize(f) {
            var cache = Object.create(null);
            return function () {
                var id = '';
                for (var i = arguments.length; --i >= 0;) {
                    id += ':' + arguments[i];
                }
                if (id in cache) {
                    return cache[id];
                }
                return f.apply(this, arguments);
            };
        }
        function ucs2decode(string) {
            var output = [], counter = 0, length = string.length, value, extra;
            while (counter < length) {
                value = string.charCodeAt(counter++);
                if (value >= 55296 && value <= 56319 && counter < length) {
                    extra = string.charCodeAt(counter++);
                    if ((extra & 64512) == 56320) {
                        output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
                    } else {
                        output.push(value);
                        counter--;
                    }
                } else {
                    output.push(value);
                }
            }
            return output;
        }
        function ucs2encode(array) {
            return array.map(function (value) {
                var output = '';
                if (value > 65535) {
                    value -= 65536;
                    output += String.fromCharCode(value >>> 10 & 1023 | 55296);
                    value = 56320 | value & 1023;
                }
                output += String.fromCharCode(value);
                return output;
            }).join('');
        }
        deepExtend(kendo, {
            util: {
                MAX_NUM: MAX_NUM,
                MIN_NUM: MIN_NUM,
                append: append,
                arrayLimits: arrayLimits,
                arrayMin: arrayMin,
                arrayMax: arrayMax,
                defined: defined,
                deg: deg,
                hashKey: hashKey,
                hashObject: hashObject,
                isNumber: isNumber,
                isTransparent: isTransparent,
                last: last,
                limitValue: limitValue,
                now: now,
                objectKey: objectKey,
                round: round,
                rad: rad,
                renderAttr: renderAttr,
                renderAllAttr: renderAllAttr,
                renderPos: renderPos,
                renderSize: renderSize,
                renderStyle: renderStyle,
                renderTemplate: renderTemplate,
                sparseArrayLimits: sparseArrayLimits,
                sparseArrayMin: sparseArrayMin,
                sparseArrayMax: sparseArrayMax,
                sqr: sqr,
                valueOrDefault: valueOrDefault,
                romanToArabic: romanToArabic,
                arabicToRoman: arabicToRoman,
                memoize: memoize,
                ucs2encode: ucs2encode,
                ucs2decode: ucs2decode
            }
        });
        kendo.drawing.util = kendo.util;
        kendo.dataviz.util = kendo.util;
    }());
    return window.kendo;
}, typeof define == 'function' && define.amd ? define : function (a1, a2, a3) {
    (a3 || a2)();
}));
(function (f, define) {
    define('util/text-metrics', [
        'kendo.core',
        'util/main'
    ], f);
}(function () {
    (function ($) {
        var doc = document, kendo = window.kendo, Class = kendo.Class, util = kendo.util, defined = util.defined;
        var LRUCache = Class.extend({
            init: function (size) {
                this._size = size;
                this._length = 0;
                this._map = {};
            },
            put: function (key, value) {
                var lru = this, map = lru._map, entry = {
                        key: key,
                        value: value
                    };
                map[key] = entry;
                if (!lru._head) {
                    lru._head = lru._tail = entry;
                } else {
                    lru._tail.newer = entry;
                    entry.older = lru._tail;
                    lru._tail = entry;
                }
                if (lru._length >= lru._size) {
                    map[lru._head.key] = null;
                    lru._head = lru._head.newer;
                    lru._head.older = null;
                } else {
                    lru._length++;
                }
            },
            get: function (key) {
                var lru = this, entry = lru._map[key];
                if (entry) {
                    if (entry === lru._head && entry !== lru._tail) {
                        lru._head = entry.newer;
                        lru._head.older = null;
                    }
                    if (entry !== lru._tail) {
                        if (entry.older) {
                            entry.older.newer = entry.newer;
                            entry.newer.older = entry.older;
                        }
                        entry.older = lru._tail;
                        entry.newer = null;
                        lru._tail.newer = entry;
                        lru._tail = entry;
                    }
                    return entry.value;
                }
            }
        });
        var defaultMeasureBox = $('<div style=\'position: absolute !important; top: -4000px !important; width: auto !important; height: auto !important;' + 'padding: 0 !important; margin: 0 !important; border: 0 !important;' + 'line-height: normal !important; visibility: hidden !important; white-space: nowrap!important;\' />')[0];
        function zeroSize() {
            return {
                width: 0,
                height: 0,
                baseline: 0
            };
        }
        var TextMetrics = Class.extend({
            init: function (options) {
                this._cache = new LRUCache(1000);
                this._initOptions(options);
            },
            options: { baselineMarkerSize: 1 },
            measure: function (text, style, box) {
                if (!text) {
                    return zeroSize();
                }
                var styleKey = util.objectKey(style), cacheKey = util.hashKey(text + styleKey), cachedResult = this._cache.get(cacheKey);
                if (cachedResult) {
                    return cachedResult;
                }
                var size = zeroSize();
                var measureBox = box ? box : defaultMeasureBox;
                var baselineMarker = this._baselineMarker().cloneNode(false);
                for (var key in style) {
                    var value = style[key];
                    if (defined(value)) {
                        measureBox.style[key] = value;
                    }
                }
                $(measureBox).text(text);
                measureBox.appendChild(baselineMarker);
                doc.body.appendChild(measureBox);
                if ((text + '').length) {
                    size.width = measureBox.offsetWidth - this.options.baselineMarkerSize;
                    size.height = measureBox.offsetHeight;
                    size.baseline = baselineMarker.offsetTop + this.options.baselineMarkerSize;
                }
                if (size.width > 0 && size.height > 0) {
                    this._cache.put(cacheKey, size);
                }
                measureBox.parentNode.removeChild(measureBox);
                return size;
            },
            _baselineMarker: function () {
                return $('<div class=\'k-baseline-marker\' ' + 'style=\'display: inline-block; vertical-align: baseline;' + 'width: ' + this.options.baselineMarkerSize + 'px; height: ' + this.options.baselineMarkerSize + 'px;' + 'overflow: hidden;\' />')[0];
            }
        });
        TextMetrics.current = new TextMetrics();
        function measureText(text, style, measureBox) {
            return TextMetrics.current.measure(text, style, measureBox);
        }
        function loadFonts(fonts, callback) {
            var promises = [];
            if (fonts.length > 0 && document.fonts) {
                try {
                    promises = fonts.map(function (font) {
                        return document.fonts.load(font);
                    });
                } catch (e) {
                    kendo.logToConsole(e);
                }
                Promise.all(promises).then(callback, callback);
            } else {
                callback();
            }
        }
        kendo.util.TextMetrics = TextMetrics;
        kendo.util.LRUCache = LRUCache;
        kendo.util.loadFonts = loadFonts;
        kendo.util.measureText = measureText;
    }(window.kendo.jQuery));
}, typeof define == 'function' && define.amd ? define : function (a1, a2, a3) {
    (a3 || a2)();
}));
(function (f, define) {
    define('util/base64', ['util/main'], f);
}(function () {
    (function () {
        var kendo = window.kendo, deepExtend = kendo.deepExtend, fromCharCode = String.fromCharCode;
        var KEY_STR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
        function encodeBase64(input) {
            var output = '';
            var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
            var i = 0;
            input = encodeUTF8(input);
            while (i < input.length) {
                chr1 = input.charCodeAt(i++);
                chr2 = input.charCodeAt(i++);
                chr3 = input.charCodeAt(i++);
                enc1 = chr1 >> 2;
                enc2 = (chr1 & 3) << 4 | chr2 >> 4;
                enc3 = (chr2 & 15) << 2 | chr3 >> 6;
                enc4 = chr3 & 63;
                if (isNaN(chr2)) {
                    enc3 = enc4 = 64;
                } else if (isNaN(chr3)) {
                    enc4 = 64;
                }
                output = output + KEY_STR.charAt(enc1) + KEY_STR.charAt(enc2) + KEY_STR.charAt(enc3) + KEY_STR.charAt(enc4);
            }
            return output;
        }
        function encodeUTF8(input) {
            var output = '';
            for (var i = 0; i < input.length; i++) {
                var c = input.charCodeAt(i);
                if (c < 128) {
                    output += fromCharCode(c);
                } else if (c < 2048) {
                    output += fromCharCode(192 | c >>> 6);
                    output += fromCharCode(128 | c & 63);
                } else if (c < 65536) {
                    output += fromCharCode(224 | c >>> 12);
                    output += fromCharCode(128 | c >>> 6 & 63);
                    output += fromCharCode(128 | c & 63);
                }
            }
            return output;
        }
        deepExtend(kendo.util, {
            encodeBase64: encodeBase64,
            encodeUTF8: encodeUTF8
        });
    }());
    return window.kendo;
}, typeof define == 'function' && define.amd ? define : function (a1, a2, a3) {
    (a3 || a2)();
}));
(function (f, define) {
    define('mixins/observers', ['kendo.core'], f);
}(function () {
    (function ($) {
        var math = Math, kendo = window.kendo, deepExtend = kendo.deepExtend, inArray = $.inArray;
        var ObserversMixin = {
            observers: function () {
                this._observers = this._observers || [];
                return this._observers;
            },
            addObserver: function (element) {
                if (!this._observers) {
                    this._observers = [element];
                } else {
                    this._observers.push(element);
                }
                return this;
            },
            removeObserver: function (element) {
                var observers = this.observers();
                var index = inArray(element, observers);
                if (index != -1) {
                    observers.splice(index, 1);
                }
                return this;
            },
            trigger: function (methodName, event) {
                var observers = this._observers;
                var observer;
                var idx;
                if (observers && !this._suspended) {
                    for (idx = 0; idx < observers.length; idx++) {
                        observer = observers[idx];
                        if (observer[methodName]) {
                            observer[methodName](event);
                        }
                    }
                }
                return this;
            },
            optionsChange: function (e) {
                e = e || {};
                e.element = this;
                this.trigger('optionsChange', e);
            },
            geometryChange: function () {
                this.trigger('geometryChange', { element: this });
            },
            suspend: function () {
                this._suspended = (this._suspended || 0) + 1;
                return this;
            },
            resume: function () {
                this._suspended = math.max((this._suspended || 0) - 1, 0);
                return this;
            },
            _observerField: function (field, value) {
                if (this[field]) {
                    this[field].removeObserver(this);
                }
                this[field] = value;
                value.addObserver(this);
            }
        };
        deepExtend(kendo, { mixins: { ObserversMixin: ObserversMixin } });
    }(window.kendo.jQuery));
    return window.kendo;
}, typeof define == 'function' && define.amd ? define : function (a1, a2, a3) {
    (a3 || a2)();
}));
(function (f, define) {
    define('kendo.scheduler', [
        'kendo.dropdownlist',
        'kendo.editable',
        'kendo.multiselect',
        'kendo.window',
        'kendo.datetimepicker',
        'kendo.scheduler.recurrence',
        'kendo.scheduler.view',
        'kendo.scheduler.dayview',
        'kendo.scheduler.agendaview',
        'kendo.scheduler.monthview',
        'kendo.scheduler.timelineview',
        'kendo.mobile.actionsheet',
        'kendo.mobile.pane',
        'kendo.pdf'
    ], f);
}(function () {
    var __meta__ = {
        id: 'scheduler',
        name: 'Scheduler',
        category: 'web',
        description: 'The Scheduler is an event calendar.',
        depends: [
            'dropdownlist',
            'editable',
            'multiselect',
            'window',
            'datepicker',
            'datetimepicker',
            'scheduler.recurrence',
            'scheduler.view'
        ],
        features: [
            {
                id: 'scheduler-dayview',
                name: 'Scheduler Day View',
                description: 'Scheduler Day View',
                depends: ['scheduler.dayview']
            },
            {
                id: 'scheduler-agendaview',
                name: 'Scheduler Agenda View',
                description: 'Scheduler Agenda View',
                depends: ['scheduler.agendaview']
            },
            {
                id: 'scheduler-monthview',
                name: 'Scheduler Month View',
                description: 'Scheduler Month View',
                depends: ['scheduler.monthview']
            },
            {
                id: 'scheduler-timelineview',
                name: 'Scheduler Timeline View',
                description: 'Scheduler Timeline View',
                depends: ['scheduler.timelineview']
            },
            {
                id: 'scheduler-mobile',
                name: 'Scheduler adaptive rendering',
                description: 'Support for adaptive rendering',
                depends: [
                    'mobile.actionsheet',
                    'mobile.pane'
                ]
            },
            {
                id: 'scheduler-pdf-export',
                name: 'PDF export',
                description: 'Export the scheduler events as PDF',
                depends: [
                    'pdf',
                    'drawing'
                ]
            },
            {
                id: 'scheduler-timezones',
                name: 'Timezones',
                description: 'Allow selecting timezones different than Etc/UTC',
                depends: ['timezones']
            }
        ]
    };
    (function ($, undefined) {
        var kendo = window.kendo, date = kendo.date, input_support = kendo.support.input, MS_PER_DAY = date.MS_PER_DAY, getDate = date.getDate, getMilliseconds = kendo.date.getMilliseconds, recurrence = kendo.recurrence, keys = kendo.keys, ui = kendo.ui, Widget = ui.Widget, DataBoundWidget = ui.DataBoundWidget, STRING = 'string', Popup = ui.Popup, Calendar = ui.Calendar, DataSource = kendo.data.DataSource, isPlainObject = $.isPlainObject, extend = $.extend, proxy = $.proxy, toString = Object.prototype.toString, isArray = $.isArray, NS = '.kendoScheduler', CLICK = 'click', CHANGE = 'change', CANCEL = 'cancel', REMOVE = 'remove', SAVE = 'save', ADD = 'add', EDIT = 'edit', valueStartEndBoundRegex = /(?:value:start|value:end)(?:,|$)/, TODAY = getDate(new Date()), EXCEPTION_SEPARATOR = ',', OLD_EXCEPTION_SEPARATOR_REGEXP = /\;/g, RECURRENCE_EXCEPTION = 'recurrenceException', DELETECONFIRM = 'Are you sure you want to delete this event?', DELETERECURRING = 'Do you want to delete only this event occurrence or the whole series?', EDITRECURRING = 'Do you want to edit only this event occurrence or the whole series?', DELETERECURRINGCONFIRM = 'Are you sure you want to delete this event occurrence?', DELETESERIESCONFIRM = 'Are you sure you want to delete the whole series?', COMMANDBUTTONTMPL = '<a class="k-button #=className#" #=attr# href="\\#">#=text#</a>', VIEWBUTTONTEMPLATE = kendo.template('<li class="k-current-view" data-#=ns#name="#=view#"><a role="button" href="\\#" class="k-link">${views[view].title}</a></li>'), TOOLBARTEMPLATE = kendo.template('<div class="k-floatwrap k-header k-scheduler-toolbar">' + '# if (pdf) { #' + '<ul class="k-reset k-scheduler-tools">' + '<li><a role="button" href="\\#" class="k-button k-pdf"><span class="k-icon k-i-pdf"></span>${messages.pdf}</a></li>' + '</ul>' + '# } #' + '<ul class="k-reset k-scheduler-navigation">' + '<li class="k-state-default k-header k-nav-today"><a role="button" href="\\#" class="k-link">${messages.today}</a></li>' + '<li class="k-state-default k-header k-nav-prev"><a role="button" href="\\#" class="k-link"><span class="k-icon k-i-arrow-w"></span></a></li>' + '<li class="k-state-default k-header k-nav-next"><a role="button" href="\\#" class="k-link"><span class="k-icon k-i-arrow-e"></span></a></li>' + '<li class="k-state-default k-nav-current">' + '<a role="button" href="\\#" class="k-link">' + '<span class="k-icon k-i-calendar"></span>' + '<span class="k-sm-date-format" data-#=ns#bind="text: formattedShortDate"></span>' + '<span class="k-lg-date-format" data-#=ns#bind="text: formattedDate"></span>' + '</a>' + '</li>' + '</ul>' + '#if(viewsCount === 1){#' + '<a role="button" data-#=ns#name="#=view#" href="\\#" class="k-link k-scheduler-refresh">' + '<span class="k-icon k-i-refresh"></span>' + '</a>' + '#}else{#' + '<ul class="k-reset k-header k-scheduler-views">' + '#for(var view in views){#' + '<li class="k-state-default k-view-#= view.toLowerCase() #" data-#=ns#name="#=view#"><a role="button" href="\\#" class="k-link">${views[view].title}</a></li>' + '#}#' + '</ul>' + '#}#' + '</div>'), MOBILETOOLBARTEMPLATE = kendo.template('<div class="k-floatwrap k-header k-scheduler-toolbar">' + '<ul class="k-reset k-header k-scheduler-navigation">' + '<li class="k-state-default k-nav-today"><a role="button" href="\\#" class="k-link">${messages.today}</a></li>' + '</ul>' + '#if(viewsCount === 1){#' + '<a role="button" data-#=ns#name="#=view#" href="\\#" class="k-link k-scheduler-refresh">' + '<span class="k-icon k-i-refresh"></span>' + '</a>' + '#}else{#' + '<ul class="k-reset k-header k-scheduler-views">' + '#for(var view in views){#' + '<li class="k-state-default k-view-#= view.toLowerCase() #" data-#=ns#name="#=view#"><a role="button" href="\\#" class="k-link">${views[view].title}</a></li>' + '#}#' + '</ul>' + '#}#' + '</div>' + '<div class="k-floatwrap k-header k-scheduler-toolbar">' + '<ul class="k-reset k-header k-scheduler-navigation">' + '<li class="k-state-default k-nav-prev"><a role="button" href="\\#" class="k-link"><span class="k-icon k-i-arrow-w"></span></a></li>' + '<li class="k-state-default k-nav-current">' + '<span class="k-sm-date-format" data-#=ns#bind="text: formattedShortDate"></span>' + '<span class="k-lg-date-format" data-#=ns#bind="text: formattedDate"></span>' + '</li>' + '<li class="k-state-default k-nav-next"><a role="button" href="\\#" class="k-link"><span class="k-icon k-i-arrow-e"></span></a></li>' + '</ul>' + '</div>'), MOBILEDATERANGEEDITOR = function (container, options) {
                var attr = { name: options.field };
                var datepicker_role = !input_support.date ? kendo.attr('role') + '="datepicker" ' : '';
                var datetimepicker_role = kendo.attr('role') + '="datetimepicker" ';
                var isAllDay = options.model.isAllDay;
                var dateTimeValidate = kendo.attr('validate') + '=\'' + !isAllDay + '\'';
                var dateValidate = kendo.attr('validate') + '=\'' + isAllDay + '\'';
                appendTimezoneAttr(attr, options);
                appendDateCompareValidator(attr, options);
                $('<input type="datetime-local" required ' + kendo.attr('type') + '="date" ' + datetimepicker_role + kendo.attr('bind') + '="value:' + options.field + ',invisible:isAllDay" ' + dateTimeValidate + '/>').attr(attr).appendTo(container);
                $('<input type="date" required ' + kendo.attr('type') + '="date" ' + datepicker_role + kendo.attr('bind') + '="value:' + options.field + ',visible:isAllDay" ' + dateValidate + '/>').attr(attr).appendTo(container);
                $('<span ' + kendo.attr('for') + '="' + options.field + '" class="k-invalid-msg"/>').hide().appendTo(container);
            }, DATERANGEEDITOR = function (container, options) {
                var attr = { name: options.field }, isAllDay = options.model.isAllDay, dateTimeValidate = kendo.attr('validate') + '=\'' + !isAllDay + '\' ', dateValidate = kendo.attr('validate') + '=\'' + isAllDay + '\' ';
                appendTimezoneAttr(attr, options);
                appendDateCompareValidator(attr, options);
                $('<input type="text" required ' + kendo.attr('type') + '="date"' + ' ' + kendo.attr('role') + '="datetimepicker" ' + kendo.attr('bind') + '="value:' + options.field + ',invisible:isAllDay" ' + dateTimeValidate + '/>').attr(attr).appendTo(container);
                $('<input type="text" required ' + kendo.attr('type') + '="date"' + ' ' + kendo.attr('role') + '="datepicker" ' + kendo.attr('bind') + '="value:' + options.field + ',visible:isAllDay" ' + dateValidate + '/>').attr(attr).appendTo(container);
                $('<span ' + kendo.attr('bind') + '="text: ' + options.field + 'Timezone"></span>').appendTo(container);
                if (options.field === 'end') {
                    $('<span ' + kendo.attr('bind') + '="text: startTimezone, invisible: endTimezone"></span>').appendTo(container);
                }
                $('<span ' + kendo.attr('for') + '="' + options.field + '" class="k-invalid-msg"/>').hide().appendTo(container);
            }, RECURRENCEEDITOR = function (container, options) {
                $('<div ' + kendo.attr('bind') + '="value:' + options.field + '" />').attr({ name: options.field }).appendTo(container).kendoRecurrenceEditor({
                    start: options.model.start,
                    timezone: options.timezone,
                    messages: options.messages
                });
            }, MOBILERECURRENCEEDITOR = function (container, options) {
                $('<div ' + kendo.attr('bind') + '="value:' + options.field + '" />').attr({ name: options.field }).appendTo(container).kendoMobileRecurrenceEditor({
                    start: options.model.start,
                    timezone: options.timezone,
                    messages: options.messages,
                    pane: options.pane,
                    value: options.model[options.field]
                });
            }, MOBILETIMEZONEPOPUP = function (container, options) {
                var text = timezoneButtonText(options.model, options.messages.noTimezone);
                $('<a href="#" class="k-button k-timezone-button" data-bind="invisible:isAllDay">' + text + '</a>').click(options.click).appendTo(container);
            }, TIMEZONEPOPUP = function (container, options) {
                $('<a href="#" class="k-button" data-bind="invisible:isAllDay">' + options.messages.timezoneEditorButton + '</a>').click(options.click).appendTo(container);
            }, MOBILETIMEZONEEDITOR = function (container, options) {
                $('<div ' + kendo.attr('bind') + '="value:' + options.field + '" />').attr({ name: options.field }).toggle(options.visible).appendTo(container).kendoMobileTimezoneEditor({ optionLabel: options.noTimezone });
            }, TIMEZONEEDITOR = function (container, options) {
                $('<div ' + kendo.attr('bind') + '="value:' + options.field + '" />').attr({ name: options.field }).toggle(options.visible).appendTo(container).kendoTimezoneEditor({ optionLabel: options.noTimezone });
            };
        function timezoneButtonText(model, message) {
            message = message || '';
            if (model.startTimezone) {
                message = model.startTimezone;
                if (model.endTimezone) {
                    message += ' | ' + model.endTimezone;
                }
            }
            return message;
        }
        function appendTimezoneAttr(attrs, options) {
            var timezone = options.timezone;
            if (timezone) {
                attrs[kendo.attr('timezone')] = timezone;
            }
        }
        function appendDateCompareValidator(attrs, options) {
            var validationRules = options.model.fields[options.field].validation;
            if (validationRules) {
                var dateCompareRule = validationRules.dateCompare;
                if (dateCompareRule && isPlainObject(dateCompareRule) && dateCompareRule.message) {
                    attrs[kendo.attr('dateCompare-msg')] = dateCompareRule.message;
                }
            }
        }
        function wrapDataAccess(originalFunction, timezone) {
            return function (data) {
                data = originalFunction(data);
                convertData(data, 'apply', timezone);
                return data || [];
            };
        }
        function wrapDataSerialization(originalFunction, timezone) {
            return function (data) {
                if (data) {
                    if (toString.call(data) !== '[object Array]' && !(data instanceof kendo.data.ObservableArray)) {
                        data = [data];
                    }
                }
                convertData(data, 'remove', timezone, true);
                data = originalFunction(data);
                return data || [];
            };
        }
        function convertData(data, method, timezone, removeUid) {
            var event, idx, length;
            data = data || [];
            for (idx = 0, length = data.length; idx < length; idx++) {
                event = data[idx];
                if (removeUid) {
                    if (event.startTimezone || event.endTimezone) {
                        if (timezone) {
                            event.start = kendo.timezone.convert(event.start, event.startTimezone || event.endTimezone, timezone);
                            event.end = kendo.timezone.convert(event.end, event.endTimezone || event.startTimezone, timezone);
                            event.start = kendo.timezone[method](event.start, timezone);
                            event.end = kendo.timezone[method](event.end, timezone);
                        } else {
                            event.start = kendo.timezone[method](event.start, event.startTimezone || event.endTimezone);
                            event.end = kendo.timezone[method](event.end, event.endTimezone || event.startTimezone);
                        }
                    } else if (timezone) {
                        event.start = kendo.timezone[method](event.start, timezone);
                        event.end = kendo.timezone[method](event.end, timezone);
                    }
                } else {
                    if (event.startTimezone || event.endTimezone) {
                        event.start = kendo.timezone[method](event.start, event.startTimezone || event.endTimezone);
                        event.end = kendo.timezone[method](event.end, event.endTimezone || event.startTimezone);
                        if (timezone) {
                            event.start = kendo.timezone.convert(event.start, event.startTimezone || event.endTimezone, timezone);
                            event.end = kendo.timezone.convert(event.end, event.endTimezone || event.startTimezone, timezone);
                        }
                    } else if (timezone) {
                        event.start = kendo.timezone[method](event.start, timezone);
                        event.end = kendo.timezone[method](event.end, timezone);
                    }
                }
                if (removeUid) {
                    delete event.uid;
                }
            }
            return data;
        }
        function getOccurrenceByUid(data, uid) {
            var length = data.length, idx = 0, event;
            for (; idx < length; idx++) {
                event = data[idx];
                if (event.uid === uid) {
                    return event;
                }
            }
        }
        var SchedulerDataReader = kendo.Class.extend({
            init: function (schema, reader) {
                var timezone = schema.timezone;
                this.reader = reader;
                if (reader.model) {
                    this.model = reader.model;
                }
                this.timezone = timezone;
                this.data = wrapDataAccess($.proxy(this.data, this), timezone);
                this.serialize = wrapDataSerialization($.proxy(this.serialize, this), timezone);
            },
            errors: function (data) {
                return this.reader.errors(data);
            },
            parse: function (data) {
                return this.reader.parse(data);
            },
            data: function (data) {
                return this.reader.data(data);
            },
            total: function (data) {
                return this.reader.total(data);
            },
            groups: function (data) {
                return this.reader.groups(data);
            },
            aggregates: function (data) {
                return this.reader.aggregates(data);
            },
            serialize: function (data) {
                return this.reader.serialize(data);
            }
        });
        function applyZone(date, fromZone, toZone) {
            if (toZone) {
                date = kendo.timezone.convert(date, fromZone, toZone);
            } else {
                date = kendo.timezone.remove(date, fromZone);
            }
            return date;
        }
        function dateCompareValidator(input) {
            if (input.filter('[name=end]').length) {
                var container = input.closest('.k-scheduler-edit-form');
                var startInput = container.find('[name=start]:visible');
                var endInput = container.find('[name=end]:visible');
                if (endInput[0] && startInput[0]) {
                    var start, end;
                    var startPicker = kendo.widgetInstance(startInput, kendo.ui);
                    var endPicker = kendo.widgetInstance(endInput, kendo.ui);
                    var editable = container.data('kendoEditable');
                    var model = editable ? editable.options.model : null;
                    if (startPicker && endPicker) {
                        start = startPicker.value();
                        end = endPicker.value();
                    } else {
                        start = kendo.parseDate(startInput.val());
                        end = kendo.parseDate(endInput.val());
                    }
                    if (start && end) {
                        if (model) {
                            var timezone = startInput.attr(kendo.attr('timezone'));
                            var startTimezone = model.startTimezone;
                            var endTimezone = model.endTimezone;
                            startTimezone = startTimezone || endTimezone;
                            endTimezone = endTimezone || startTimezone;
                            if (startTimezone) {
                                start = applyZone(start, startTimezone, timezone);
                                end = applyZone(end, endTimezone, timezone);
                            }
                        }
                        return start <= end;
                    }
                }
            }
            return true;
        }
        var SchedulerEvent = kendo.data.Model.define({
            init: function (value) {
                var that = this;
                kendo.data.Model.fn.init.call(that, value);
                that._defaultId = that.defaults[that.idField];
            },
            _time: function (field) {
                var date = this[field];
                var fieldTime = '_' + field + 'Time';
                if (this[fieldTime]) {
                    return this[fieldTime] - kendo.date.toUtcTime(kendo.date.getDate(date));
                }
                return getMilliseconds(date);
            },
            _date: function (field) {
                var fieldTime = '_' + field + 'Time';
                if (this[fieldTime]) {
                    return this[fieldTime] - this._time(field);
                }
                return kendo.date.getDate(this[field]);
            },
            clone: function (options, updateUid) {
                var uid = this.uid, event = new this.constructor($.extend({}, this.toJSON(), options));
                if (!updateUid) {
                    event.uid = uid;
                }
                return event;
            },
            duration: function () {
                var end = this.end;
                var start = this.start;
                var offset = (end.getTimezoneOffset() - start.getTimezoneOffset()) * kendo.date.MS_PER_MINUTE;
                return end - start - offset;
            },
            expand: function (start, end, zone) {
                return recurrence ? recurrence.expand(this, start, end, zone) : [this];
            },
            update: function (eventInfo) {
                for (var field in eventInfo) {
                    this.set(field, eventInfo[field]);
                }
                if (this._startTime) {
                    this.set('_startTime', kendo.date.toUtcTime(this.start));
                }
                if (this._endTime) {
                    this.set('_endTime', kendo.date.toUtcTime(this.end));
                }
            },
            isMultiDay: function () {
                return this.isAllDay || this.duration() >= kendo.date.MS_PER_DAY;
            },
            isException: function () {
                return !this.isNew() && this.recurrenceId;
            },
            isOccurrence: function () {
                return this.isNew() && this.recurrenceId;
            },
            isRecurring: function () {
                return !!(this.recurrenceRule || this.recurrenceId);
            },
            isRecurrenceHead: function () {
                return !!(this.id && this.recurrenceRule);
            },
            toOccurrence: function (options) {
                options = $.extend(options, {
                    recurrenceException: null,
                    recurrenceRule: null,
                    recurrenceId: this.id || this.recurrenceId
                });
                options[this.idField] = this.defaults[this.idField];
                return this.clone(options, true);
            },
            toJSON: function () {
                var obj = kendo.data.Model.fn.toJSON.call(this);
                obj.uid = this.uid;
                delete obj._startTime;
                delete obj._endTime;
                return obj;
            },
            shouldSerialize: function (field) {
                return kendo.data.Model.fn.shouldSerialize.call(this, field) && field !== '_defaultId';
            },
            set: function (key, value) {
                var isAllDay = this.isAllDay || false;
                kendo.data.Model.fn.set.call(this, key, value);
                if (key == 'isAllDay' && value != isAllDay) {
                    var start = kendo.date.getDate(this.start);
                    var end = new Date(this.end);
                    var milliseconds = kendo.date.getMilliseconds(end);
                    if (milliseconds === 0 && value) {
                        milliseconds = MS_PER_DAY;
                    }
                    this.set('start', start);
                    if (value === true) {
                        kendo.date.setTime(end, -milliseconds);
                        if (end < start) {
                            end = start;
                        }
                    } else {
                        kendo.date.setTime(end, MS_PER_DAY - milliseconds);
                    }
                    this.set('end', end);
                }
            },
            id: 'id',
            fields: {
                id: { type: 'number' },
                title: {
                    defaultValue: '',
                    type: 'string'
                },
                start: {
                    type: 'date',
                    validation: { required: true }
                },
                startTimezone: { type: 'string' },
                end: {
                    type: 'date',
                    validation: {
                        required: true,
                        dateCompare: { value: dateCompareValidator }
                    }
                },
                endTimezone: { type: 'string' },
                recurrenceRule: {
                    defaultValue: '',
                    type: 'string'
                },
                recurrenceException: {
                    defaultValue: '',
                    type: 'string'
                },
                isAllDay: {
                    type: 'boolean',
                    defaultValue: false
                },
                description: { type: 'string' }
            }
        });
        var SchedulerDataSource = DataSource.extend({
            init: function (options) {
                DataSource.fn.init.call(this, extend(true, {}, {
                    schema: {
                        modelBase: SchedulerEvent,
                        model: SchedulerEvent
                    }
                }, options));
                this.reader = new SchedulerDataReader(this.options.schema, this.reader);
            },
            expand: function (start, end) {
                var data = this.view(), filter = {};
                if (start && end) {
                    end = new Date(end.getTime() + MS_PER_DAY - 1);
                    filter = {
                        logic: 'or',
                        filters: [
                            {
                                logic: 'and',
                                filters: [
                                    {
                                        field: 'start',
                                        operator: 'gte',
                                        value: start
                                    },
                                    {
                                        field: 'end',
                                        operator: 'gte',
                                        value: start
                                    },
                                    {
                                        field: 'start',
                                        operator: 'lte',
                                        value: end
                                    }
                                ]
                            },
                            {
                                logic: 'and',
                                filters: [
                                    {
                                        field: 'start',
                                        operator: 'lte',
                                        value: new Date(start.getTime() + MS_PER_DAY - 1)
                                    },
                                    {
                                        field: 'end',
                                        operator: 'gte',
                                        value: start
                                    }
                                ]
                            }
                        ]
                    };
                    data = new kendo.data.Query(expandAll(data, start, end, this.reader.timezone)).filter(filter).toArray();
                }
                return data;
            },
            cancelChanges: function (model) {
                if (model && model.isOccurrence()) {
                    this._removeExceptionDate(model);
                }
                DataSource.fn.cancelChanges.call(this, model);
            },
            insert: function (index, model) {
                if (!model) {
                    return;
                }
                if (!(model instanceof SchedulerEvent)) {
                    var eventInfo = model;
                    model = this._createNewModel();
                    model.accept(eventInfo);
                }
                if (!this._pushCreated && model.isRecurrenceHead() || model.recurrenceId) {
                    model = model.recurrenceId ? model : model.toOccurrence();
                    this._addExceptionDate(model);
                }
                return DataSource.fn.insert.call(this, index, model);
            },
            pushCreate: function (items) {
                this._pushCreated = true;
                DataSource.fn.pushCreate.call(this, items);
                this._pushCreated = false;
            },
            remove: function (model) {
                if (model.isRecurrenceHead()) {
                    this._removeExceptions(model);
                } else if (model.isRecurring()) {
                    this._addExceptionDate(model);
                }
                return DataSource.fn.remove.call(this, model);
            },
            _removeExceptions: function (model) {
                var data = this.data().slice(0), item = data.shift(), id = model.id;
                while (item) {
                    if (item.recurrenceId === id) {
                        DataSource.fn.remove.call(this, item);
                    }
                    item = data.shift();
                }
                model.set(RECURRENCE_EXCEPTION, '');
            },
            _removeExceptionDate: function (model) {
                if (model.recurrenceId) {
                    var head = this.get(model.recurrenceId);
                    if (head) {
                        var start = model.start;
                        var replaceRegExp = new RegExp('(\\' + EXCEPTION_SEPARATOR + '?)' + recurrence.toExceptionString(start, this.reader.timezone));
                        var recurrenceException = (head.recurrenceException || '').replace(OLD_EXCEPTION_SEPARATOR_REGEXP, EXCEPTION_SEPARATOR).replace(/\,$/, '');
                        head.set(RECURRENCE_EXCEPTION, recurrenceException.replace(replaceRegExp, ''));
                    }
                }
            },
            _addExceptionDate: function (model) {
                var start = model.start;
                var zone = this.reader.timezone;
                var head = this.get(model.recurrenceId);
                var recurrenceException = (head.recurrenceException || '').replace(OLD_EXCEPTION_SEPARATOR_REGEXP, EXCEPTION_SEPARATOR).replace(/\,$/, '');
                if (!recurrence.isException(recurrenceException, start, zone)) {
                    var newException = recurrence.toExceptionString(start, zone);
                    head.set(RECURRENCE_EXCEPTION, recurrenceException + (recurrenceException && newException ? EXCEPTION_SEPARATOR : '') + newException);
                }
            }
        });
        function expandAll(events, start, end, zone) {
            var length = events.length, data = [], idx = 0;
            for (; idx < length; idx++) {
                data = data.concat(events[idx].expand(start, end, zone));
            }
            return data;
        }
        SchedulerDataSource.create = function (options) {
            if (isArray(options) || options instanceof kendo.data.ObservableArray) {
                options = { data: options };
            }
            var dataSource = options || {}, data = dataSource.data;
            dataSource.data = data;
            if (!(dataSource instanceof SchedulerDataSource) && dataSource instanceof kendo.data.DataSource) {
                throw new Error('Incorrect DataSource type. Only SchedulerDataSource instances are supported');
            }
            return dataSource instanceof SchedulerDataSource ? dataSource : new SchedulerDataSource(dataSource);
        };
        extend(true, kendo.data, {
            SchedulerDataSource: SchedulerDataSource,
            SchedulerDataReader: SchedulerDataReader,
            SchedulerEvent: SchedulerEvent
        });
        var defaultCommands = {
            update: {
                text: 'Save',
                className: 'k-primary k-scheduler-update'
            },
            canceledit: {
                text: 'Cancel',
                className: 'k-scheduler-cancel'
            },
            destroy: {
                text: 'Delete',
                imageClass: 'k-delete',
                className: 'k-primary k-scheduler-delete',
                iconClass: 'k-icon'
            }
        };
        function trimOptions(options) {
            delete options.name;
            delete options.prefix;
            delete options.remove;
            delete options.edit;
            delete options.add;
            delete options.navigate;
            return options;
        }
        function createValidationAttributes(model, field) {
            var modelField = (model.fields || model)[field];
            var specialRules = [
                'url',
                'email',
                'number',
                'date',
                'boolean'
            ];
            var validation = modelField ? modelField.validation : {};
            var datatype = kendo.attr('type');
            var inArray = $.inArray;
            var ruleName;
            var rule;
            var attr = {};
            for (ruleName in validation) {
                rule = validation[ruleName];
                if (inArray(ruleName, specialRules) >= 0) {
                    attr[datatype] = ruleName;
                } else if (!kendo.isFunction(rule)) {
                    attr[ruleName] = isPlainObject(rule) ? rule.value || ruleName : rule;
                }
                attr[kendo.attr(ruleName + '-msg')] = rule.message;
            }
            return attr;
        }
        function dropDownResourceEditor(resource, model) {
            var attr = createValidationAttributes(model, resource.field);
            return function (container) {
                $(kendo.format('<select data-{0}bind="value:{1}">', kendo.ns, resource.field)).appendTo(container).attr(attr).kendoDropDownList({
                    dataTextField: resource.dataTextField,
                    dataValueField: resource.dataValueField,
                    dataSource: resource.dataSource,
                    valuePrimitive: resource.valuePrimitive,
                    optionLabel: 'None',
                    template: kendo.format('<span class="k-scheduler-mark" style="background-color:#= data.{0}?{0}:"none" #"></span>#={1}#', resource.dataColorField, resource.dataTextField)
                });
            };
        }
        function descriptionEditor(options) {
            var attr = createValidationAttributes(options.model, options.field);
            return function (container) {
                $('<textarea name="description" class="k-textbox"/>').attr(attr).appendTo(container);
            };
        }
        function multiSelectResourceEditor(resource, model) {
            var attr = createValidationAttributes(model, resource.field);
            return function (container) {
                $(kendo.format('<select data-{0}bind="value:{1}">', kendo.ns, resource.field)).appendTo(container).attr(attr).kendoMultiSelect({
                    dataTextField: resource.dataTextField,
                    dataValueField: resource.dataValueField,
                    dataSource: resource.dataSource,
                    valuePrimitive: resource.valuePrimitive,
                    itemTemplate: kendo.format('<span class="k-scheduler-mark" style="background-color:#= data.{0}?{0}:"none" #"></span>#={1}#', resource.dataColorField, resource.dataTextField),
                    tagTemplate: kendo.format('<span class="k-scheduler-mark" style="background-color:#= data.{0}?{0}:"none" #"></span>#={1}#', resource.dataColorField, resource.dataTextField)
                });
            };
        }
        function multiSelectResourceEditorMobile(resource, model) {
            var attr = createValidationAttributes(model, resource.field);
            return function (container) {
                var options = '';
                var view = resource.dataSource.view();
                for (var idx = 0, length = view.length; idx < length; idx++) {
                    options += kendo.format('<option value="{0}">{1}</option>', kendo.getter(resource.dataValueField)(view[idx]), kendo.getter(resource.dataTextField)(view[idx]));
                }
                $(kendo.format('<select data-{0}bind="value:{1}" multiple="multiple" data-{0}value-primitive="{3}">{2}</select>', kendo.ns, resource.field, options, resource.valuePrimitive)).appendTo(container).attr(attr);
            };
        }
        function moveEventRange(event, distance) {
            var duration = event.end.getTime() - event.start.getTime();
            var start = new Date(event.start.getTime());
            kendo.date.setTime(start, distance);
            var end = new Date(start.getTime());
            kendo.date.setTime(end, duration, true);
            return {
                start: start,
                end: end
            };
        }
        var editors = {
            mobile: {
                dateRange: MOBILEDATERANGEEDITOR,
                timezonePopUp: MOBILETIMEZONEPOPUP,
                timezone: MOBILETIMEZONEEDITOR,
                recurrence: MOBILERECURRENCEEDITOR,
                description: descriptionEditor,
                multipleResources: multiSelectResourceEditorMobile,
                resources: dropDownResourceEditor
            },
            desktop: {
                dateRange: DATERANGEEDITOR,
                timezonePopUp: TIMEZONEPOPUP,
                timezone: TIMEZONEEDITOR,
                recurrence: RECURRENCEEDITOR,
                description: descriptionEditor,
                multipleResources: multiSelectResourceEditor,
                resources: dropDownResourceEditor
            }
        };
        var Editor = kendo.Observable.extend({
            init: function (element, options) {
                kendo.Observable.fn.init.call(this);
                this.element = element;
                this.options = extend(true, {}, this.options, options);
                this.createButton = this.options.createButton;
                this.toggleDateValidationHandler = proxy(this._toggleDateValidation, this);
            },
            _toggleDateValidation: function (e) {
                if (e.field == 'isAllDay') {
                    var container = this.container, isAllDay = this.editable.options.model.isAllDay, bindAttribute = kendo.attr('bind'), element, isDateTimeInput, shouldValidate;
                    container.find('[' + bindAttribute + '*=end],[' + bindAttribute + '*=start]').each(function () {
                        element = $(this);
                        if (valueStartEndBoundRegex.test(element.attr(bindAttribute))) {
                            isDateTimeInput = element.is('[' + kendo.attr('role') + '=datetimepicker],[type*=datetime]');
                            shouldValidate = isAllDay !== isDateTimeInput;
                            element.attr(kendo.attr('validate'), shouldValidate);
                        }
                    });
                }
            },
            fields: function (editors, model) {
                var that = this;
                var messages = that.options.messages;
                var timezone = that.options.timezone;
                var click = function (e) {
                    e.preventDefault();
                    that._initTimezoneEditor(model, this);
                };
                var fields = [
                    {
                        field: 'title',
                        title: messages.editor.title
                    },
                    {
                        field: 'start',
                        title: messages.editor.start,
                        editor: editors.dateRange,
                        timezone: timezone
                    },
                    {
                        field: 'end',
                        title: messages.editor.end,
                        editor: editors.dateRange,
                        timezone: timezone
                    },
                    {
                        field: 'isAllDay',
                        title: messages.editor.allDayEvent
                    }
                ];
                if (kendo.timezone.windows_zones) {
                    fields.push({
                        field: 'timezone',
                        title: messages.editor.timezone,
                        editor: editors.timezonePopUp,
                        click: click,
                        messages: messages.editor,
                        model: model
                    });
                    fields.push({
                        field: 'startTimezone',
                        title: messages.editor.startTimezone,
                        editor: editors.timezone,
                        noTimezone: messages.editor.noTimezone
                    });
                    fields.push({
                        field: 'endTimezone',
                        title: messages.editor.endTimezone,
                        editor: editors.timezone,
                        noTimezone: messages.editor.noTimezone
                    });
                }
                if (!model.recurrenceId) {
                    fields.push({
                        field: 'recurrenceRule',
                        title: messages.editor.repeat,
                        editor: editors.recurrence,
                        timezone: timezone,
                        messages: messages.recurrenceEditor,
                        pane: this.pane
                    });
                }
                if ('description' in model) {
                    fields.push({
                        field: 'description',
                        title: messages.editor.description,
                        editor: editors.description({
                            model: model,
                            field: 'description'
                        })
                    });
                }
                for (var resourceIndex = 0; resourceIndex < this.options.resources.length; resourceIndex++) {
                    var resource = this.options.resources[resourceIndex];
                    fields.push({
                        field: resource.field,
                        title: resource.title,
                        editor: resource.multiple ? editors.multipleResources(resource, model) : editors.resources(resource, model)
                    });
                }
                return fields;
            },
            end: function () {
                return this.editable.end();
            },
            _buildEditTemplate: function (model, fields, editableFields) {
                var messages = this.options.messages;
                var settings = extend({}, kendo.Template, this.options.templateSettings);
                var paramName = settings.paramName;
                var template = this.options.editable.template;
                var html = '';
                if (template) {
                    if (typeof template === STRING) {
                        template = window.unescape(template);
                    }
                    html += kendo.template(template, settings)(model);
                } else {
                    for (var idx = 0, length = fields.length; idx < length; idx++) {
                        var field = fields[idx];
                        if (field.field === 'startTimezone') {
                            html += '<div class="k-popup-edit-form k-scheduler-edit-form k-scheduler-timezones" style="display:none">';
                            html += '<div class="k-edit-form-container">';
                            html += '<div class="k-edit-label"></div>';
                            html += '<div class="k-edit-field"><label class="k-check"><input class="k-timezone-toggle" type="checkbox" />' + messages.editor.separateTimezones + '</label></div>';
                        }
                        html += '<div class="k-edit-label"><label for="' + field.field + '">' + (field.title || field.field || '') + '</label></div>';
                        if (!model.editable || model.editable(field.field)) {
                            editableFields.push(field);
                            html += '<div ' + kendo.attr('container-for') + '="' + field.field + '" class="k-edit-field"></div>';
                        } else {
                            var tmpl = '#:';
                            if (field.field) {
                                field = kendo.expr(field.field, paramName);
                                tmpl += field + '==null?\'\':' + field;
                            } else {
                                tmpl += '\'\'';
                            }
                            tmpl += '#';
                            tmpl = kendo.template(tmpl, settings);
                            html += '<div class="k-edit-field">' + tmpl(model) + '</div>';
                        }
                        if (field.field === 'endTimezone') {
                            html += this._createEndTimezoneButton();
                        }
                    }
                }
                return html;
            },
            _createEndTimezoneButton: function () {
                return '</div></div>';
            },
            _revertTimezones: function (model) {
                model.set('startTimezone', this._startTimezone);
                model.set('endTimezone', this._endTimezone);
                delete this._startTimezone;
                delete this._endTimezone;
            }
        });
        var MobileEditor = Editor.extend({
            init: function () {
                Editor.fn.init.apply(this, arguments);
                this.pane = kendo.mobile.ui.Pane.wrap(this.element);
                this.pane.element.parent().css('height', this.options.height);
                this.view = this.pane.view();
                this._actionSheetButtonTemplate = kendo.template('<li><a #=attr# class="k-button #=className#" href="\\#">#:text#</a></li>');
                this._actionSheetPopupOptions = $(document.documentElement).hasClass('km-root') ? { modal: false } : {
                    align: 'bottom center',
                    position: 'bottom center',
                    effect: 'slideIn:up'
                };
            },
            options: {
                animations: {
                    left: 'slide',
                    right: 'slide:right'
                }
            },
            destroy: function () {
                this.close();
                this.unbind();
                this.pane.destroy();
            },
            _initTimezoneEditor: function (model) {
                var that = this;
                var pane = that.pane;
                var messages = that.options.messages;
                var timezoneView = that.timezoneView;
                var container = that.container.find('.k-scheduler-timezones');
                var checkbox = container.find('.k-timezone-toggle');
                var endTimezoneRow = container.find('.k-edit-label:last').add(container.find('.k-edit-field:last'));
                var startTimezoneChange = function (e) {
                    if (e.field === 'startTimezone') {
                        var value = model.startTimezone;
                        checkbox.prop('disabled', !value);
                        if (!value) {
                            endTimezoneRow.hide();
                            model.set('endTimezone', '');
                            checkbox.prop('checked', false);
                        }
                    }
                };
                that._startTimezone = model.startTimezone || '';
                that._endTimezone = model.endTimezone || '';
                if (!timezoneView) {
                    var html = '<div data-role="view" class="k-popup-edit-form k-scheduler-edit-form k-mobile-list">' + '<div data-role="header" class="k-header"><a href="#" class="k-button k-scheduler-cancel">' + messages.cancel + '</a>' + messages.editor.timezoneTitle + '<a href="#" class="k-button k-scheduler-update">' + messages.save + '</a></div></div>';
                    this.timezoneView = timezoneView = pane.append(html);
                    timezoneView.contentElement().append(container.show());
                    timezoneView.element.on(CLICK + NS, '.k-scheduler-cancel, .k-scheduler-update', function (e) {
                        e.preventDefault();
                        e.stopPropagation();
                        if ($(this).hasClass('k-scheduler-cancel')) {
                            that._revertTimezones(model);
                        }
                        model.unbind('change', startTimezoneChange);
                        var editView = pane.element.find('#edit').data('kendoMobileView');
                        var text = timezoneButtonText(model, messages.editor.noTimezone);
                        editView.contentElement().find('.k-timezone-button').text(text);
                        pane.navigate(editView, that.options.animations.right);
                    });
                    checkbox.click(function () {
                        endTimezoneRow.toggle(checkbox.prop('checked'));
                        model.set('endTimezone', '');
                    });
                    model.bind('change', startTimezoneChange);
                }
                checkbox.prop('checked', model.endTimezone).prop('disabled', !model.startTimezone);
                if (model.endTimezone) {
                    endTimezoneRow.show();
                } else {
                    endTimezoneRow.hide();
                }
                pane.navigate(timezoneView, that.options.animations.left);
            },
            _createActionSheetButton: function (options) {
                options.template = this._actionSheetButtonTemplate;
                return this.createButton(options);
            },
            showDialog: function (options) {
                var type = '';
                var html = '<ul><li class="km-actionsheet-title">' + options.title + '</li>';
                var target = this.element.find('.k-event[' + kendo.attr('uid') + '=\'' + options.model.uid + '\']');
                if (this.container) {
                    target = this.container.find('.k-scheduler-delete');
                    if (target[0]) {
                        type = 'phone';
                    }
                }
                for (var buttonIndex = 0; buttonIndex < options.buttons.length; buttonIndex++) {
                    html += this._createActionSheetButton(options.buttons[buttonIndex]);
                }
                html += '</ul>';
                var actionSheet = $(html).appendTo(this.pane.view().element).kendoMobileActionSheet({
                    type: type,
                    cancel: this.options.messages.cancel,
                    cancelTemplate: '<li class="km-actionsheet-cancel"><a class="k-button" href="\\#">#:cancel#</a></li>',
                    close: function () {
                        this.destroy();
                    },
                    command: function (e) {
                        var buttonIndex = actionSheet.element.find('li:not(.km-actionsheet-cancel) > .k-button').index($(e.currentTarget));
                        if (buttonIndex > -1) {
                            actionSheet.close();
                            options.buttons[buttonIndex].click();
                        }
                    },
                    popup: this._actionSheetPopupOptions
                }).data('kendoMobileActionSheet');
                actionSheet.open(target);
            },
            editEvent: function (model) {
                var pane = this.pane;
                var html = '';
                var messages = this.options.messages;
                var updateText = messages.save;
                var removeText = messages.destroy;
                var cancelText = messages.cancel;
                var titleText = messages.editor.editorTitle;
                html += '<div data-role="view" class="k-popup-edit-form k-scheduler-edit-form k-mobile-list" id="edit" ' + kendo.attr('uid') + '="' + model.uid + '">' + '<div data-role="header" class="k-header"><a href="#" class="k-button k-scheduler-cancel">' + cancelText + '</a>' + titleText + '<a href="#" class="k-button k-scheduler-update">' + updateText + '</a></div>';
                var fields = this.fields(editors.mobile, model);
                var that = this;
                var editableFields = [];
                html += this._buildEditTemplate(model, fields, editableFields);
                if (!model.isNew() && this.options.editable && this.options.editable.destroy !== false) {
                    html += '<div class="k-edit-buttons"><a href="#" class="k-scheduler-delete k-button">' + removeText + '</a></div>';
                }
                html += '</div>';
                var view = pane.append(html);
                var container = this.container = view.element;
                this.editable = container.kendoEditable({
                    fields: editableFields,
                    model: model,
                    clearContainer: false,
                    target: that.options.target,
                    validateOnBlur: true
                }).data('kendoEditable');
                container.find('input[type=checkbox],input[type=radio]').parent('.k-edit-field').addClass('k-check').prev('.k-edit-label').addClass('k-check').click(function () {
                    $(this).next().children('input').click();
                });
                if (!this.trigger('edit', {
                        container: container,
                        model: model
                    })) {
                    container.on(CLICK + NS, 'a.k-scheduler-edit, a.k-scheduler-cancel, a.k-scheduler-update, a.k-scheduler-delete', function (e) {
                        e.preventDefault();
                        e.stopPropagation();
                        var button = $(this);
                        if (!button.hasClass('k-scheduler-edit')) {
                            var name = 'cancel';
                            if (button.hasClass('k-scheduler-update')) {
                                name = 'save';
                            } else if (button.hasClass('k-scheduler-delete')) {
                                name = 'remove';
                            }
                            that.trigger(name, {
                                container: container,
                                model: model
                            });
                        } else {
                            pane.navigate('#edit', that.options.animations.right);
                        }
                    });
                    pane.navigate(view, that.options.animations.left);
                    model.bind('change', that.toggleDateValidationHandler);
                } else {
                    this.trigger('cancel', {
                        container: container,
                        model: model
                    });
                }
                return this.editable;
            },
            _views: function () {
                return this.pane.element.find(kendo.roleSelector('view')).not(this.view.element);
            },
            close: function () {
                if (this.container) {
                    this.pane.navigate('', this.options.animations.right);
                    var views = this._views();
                    var view;
                    for (var idx = 0, length = views.length; idx < length; idx++) {
                        view = views.eq(idx).data('kendoMobileView');
                        if (view) {
                            view.purge();
                        }
                    }
                    views.remove();
                    this.container = null;
                    if (this.editable) {
                        this.editable.options.model.unbind('change', this.toggleDateValidationHandler);
                        this.editable.destroy();
                        this.editable = null;
                    }
                    this.timezoneView = null;
                }
            }
        });
        var PopupEditor = Editor.extend({
            destroy: function () {
                this.close();
                this.unbind();
            },
            editEvent: function (model) {
                var that = this;
                var editable = that.options.editable;
                var html = '<div ' + kendo.attr('uid') + '="' + model.uid + '" class="k-popup-edit-form k-scheduler-edit-form"><div class="k-edit-form-container">';
                var messages = that.options.messages;
                var updateText = messages.save;
                var cancelText = messages.cancel;
                var deleteText = messages.destroy;
                var fields = this.fields(editors.desktop, model);
                var editableFields = [];
                html += this._buildEditTemplate(model, fields, editableFields);
                var attr;
                var options = isPlainObject(editable) ? editable.window : {};
                html += '<div class="k-edit-buttons k-state-default">';
                html += this.createButton({
                    name: 'update',
                    text: updateText,
                    attr: attr
                }) + this.createButton({
                    name: 'canceledit',
                    text: cancelText,
                    attr: attr
                });
                if (!model.isNew() && editable.destroy !== false) {
                    html += this.createButton({
                        name: 'delete',
                        text: deleteText,
                        attr: attr
                    });
                }
                html += '</div></div></div>';
                var container = this.container = $(html).appendTo(that.element).eq(0).kendoWindow(extend({
                    modal: true,
                    resizable: false,
                    draggable: true,
                    title: messages.editor.editorTitle,
                    visible: false,
                    close: function (e) {
                        if (e.userTriggered) {
                            if (that.trigger(CANCEL, {
                                    container: container,
                                    model: model
                                })) {
                                e.preventDefault();
                            }
                        }
                    }
                }, options));
                that.editable = container.kendoEditable({
                    fields: editableFields,
                    model: model,
                    clearContainer: false,
                    validateOnBlur: true,
                    target: that.options.target
                }).data('kendoEditable');
                if (!that.trigger(EDIT, {
                        container: container,
                        model: model
                    })) {
                    container.data('kendoWindow').center().open();
                    container.on(CLICK + NS, 'a.k-scheduler-cancel', function (e) {
                        e.preventDefault();
                        e.stopPropagation();
                        that.trigger(CANCEL, {
                            container: container,
                            model: model
                        });
                    });
                    container.on(CLICK + NS, 'a.k-scheduler-update', function (e) {
                        e.preventDefault();
                        e.stopPropagation();
                        that.trigger('save', {
                            container: container,
                            model: model
                        });
                    });
                    container.on(CLICK + NS, 'a.k-scheduler-delete', function (e) {
                        e.preventDefault();
                        e.stopPropagation();
                        that.trigger(REMOVE, {
                            container: container,
                            model: model
                        });
                    });
                    kendo.cycleForm(container);
                    model.bind('change', that.toggleDateValidationHandler);
                } else {
                    that.trigger(CANCEL, {
                        container: container,
                        model: model
                    });
                }
                return that.editable;
            },
            close: function () {
                var that = this;
                var destroy = function () {
                    if (that.editable) {
                        that.editable.options.model.unbind('change', that.toggleDateValidationHandler);
                        that.editable.destroy();
                        that.editable = null;
                        that.container = null;
                    }
                    if (that.popup) {
                        that.popup.destroy();
                        that.popup = null;
                    }
                };
                if (that.editable) {
                    if (that._timezonePopup && that._timezonePopup.data('kendoWindow')) {
                        that._timezonePopup.data('kendoWindow').destroy();
                        that._timezonePopup = null;
                    }
                    if (that.container.is(':visible')) {
                        that.container.data('kendoWindow').bind('deactivate', destroy).close();
                    } else {
                        destroy();
                    }
                } else {
                    destroy();
                }
            },
            _createEndTimezoneButton: function () {
                var messages = this.options.messages;
                var html = '';
                html += '<div class="k-edit-buttons k-state-default">';
                html += this.createButton({
                    name: 'savetimezone',
                    text: messages.save
                }) + this.createButton({
                    name: 'canceltimezone',
                    text: messages.cancel
                });
                html += '</div></div></div>';
                return html;
            },
            showDialog: function (options) {
                var html = kendo.format('<div class=\'k-popup-edit-form\'><div class=\'k-edit-form-container\'><p class=\'k-popup-message\'>{0}</p>', options.text);
                html += '<div class="k-edit-buttons k-state-default">';
                for (var buttonIndex = 0; buttonIndex < options.buttons.length; buttonIndex++) {
                    html += this.createButton(options.buttons[buttonIndex]);
                }
                html += '</div></div></div>';
                var wrapper = this.element;
                if (this.popup) {
                    this.popup.destroy();
                }
                var popup = this.popup = $(html).appendTo(wrapper).eq(0).on('click', '.k-button', function (e) {
                    e.preventDefault();
                    popup.close();
                    var buttonIndex = $(e.currentTarget).index();
                    options.buttons[buttonIndex].click();
                }).kendoWindow({
                    modal: true,
                    resizable: false,
                    draggable: false,
                    title: options.title,
                    visible: false,
                    close: function () {
                        this.destroy();
                        wrapper.focus();
                    }
                }).getKendoWindow();
                popup.center().open();
            },
            _initTimezoneEditor: function (model, activator) {
                var that = this;
                var container = that.container.find('.k-scheduler-timezones');
                var checkbox = container.find('.k-timezone-toggle');
                var endTimezoneRow = container.find('.k-edit-label:last').add(container.find('.k-edit-field:last'));
                var saveButton = container.find('.k-scheduler-savetimezone');
                var cancelButton = container.find('.k-scheduler-canceltimezone');
                var timezonePopup = that._timezonePopup;
                var startTimezoneChange = function (e) {
                    if (e.field === 'startTimezone') {
                        var value = model.startTimezone;
                        checkbox.prop('disabled', !value);
                        if (!value) {
                            endTimezoneRow.hide();
                            model.set('endTimezone', '');
                            checkbox.prop('checked', false);
                        }
                    }
                };
                var wnd;
                that._startTimezone = model.startTimezone;
                that._endTimezone = model.endTimezone;
                if (!timezonePopup) {
                    that._timezonePopup = timezonePopup = container.kendoWindow({
                        modal: true,
                        resizable: false,
                        draggable: true,
                        title: that.options.messages.editor.timezoneEditorTitle,
                        visible: false,
                        close: function (e) {
                            model.unbind('change', startTimezoneChange);
                            if (e.userTriggered) {
                                that._revertTimezones(model);
                            }
                            if (activator) {
                                activator.focus();
                            }
                        }
                    });
                    checkbox.click(function () {
                        endTimezoneRow.toggle(checkbox.prop('checked'));
                        model.set('endTimezone', '');
                    });
                    saveButton.click(function (e) {
                        e.preventDefault();
                        wnd.close();
                    });
                    cancelButton.click(function (e) {
                        e.preventDefault();
                        that._revertTimezones(model);
                        wnd.close();
                    });
                    model.bind('change', startTimezoneChange);
                }
                checkbox.prop('checked', model.endTimezone).prop('disabled', !model.startTimezone);
                if (model.endTimezone) {
                    endTimezoneRow.show();
                } else {
                    endTimezoneRow.hide();
                }
                wnd = timezonePopup.data('kendoWindow');
                wnd.center().open();
            }
        });
        var Scheduler = DataBoundWidget.extend({
            init: function (element, options) {
                var that = this;
                Widget.fn.init.call(that, element, options);
                if (!that.options.views || !that.options.views.length) {
                    that.options.views = [
                        'day',
                        'week'
                    ];
                }
                that.resources = [];
                that._initModel();
                that._wrapper();
                that._views();
                that._toolbar();
                that._dataSource();
                that._resources();
                that._resizeHandler = function () {
                    that.resize();
                };
                that.wrapper.on('mousedown' + NS + ' selectstart' + NS, function (e) {
                    if (!$(e.target).is(':kendoFocusable')) {
                        e.preventDefault();
                    }
                });
                if (that.options.editable && that.options.editable.resize !== false) {
                    that._resizable();
                }
                that._movable();
                that._bindResize();
                if (that.options.messages && that.options.messages.recurrence) {
                    recurrence.options = that.options.messages.recurrence;
                }
                that._selectable();
                that._ariaId = kendo.guid();
                that._createEditor();
            },
            _bindResize: function () {
                $(window).on('resize' + NS, this._resizeHandler);
            },
            _unbindResize: function () {
                $(window).off('resize' + NS, this._resizeHandler);
            },
            dataItems: function () {
                var that = this;
                var items = that.items();
                var events = that._data;
                var eventsUids = $.map(items, function (item) {
                    return $(item).attr('data-uid');
                });
                var i;
                var key;
                var dict = {};
                var eventsUidsLength = eventsUids.length;
                for (i = 0; i < eventsUidsLength; i++) {
                    dict[eventsUids[i]] = null;
                }
                var eventsCount = events.length;
                for (i = 0; i < eventsCount; i++) {
                    var event = events[i];
                    if (dict[event.uid] !== undefined) {
                        dict[event.uid] = event;
                    }
                }
                var sortedData = [];
                for (key in dict) {
                    sortedData.push(dict[key]);
                }
                return sortedData;
            },
            _isMobile: function () {
                var options = this.options;
                return options.mobile === true && kendo.support.mobileOS || options.mobile === 'phone' || options.mobile === 'tablet';
            },
            _isMobilePhoneView: function () {
                var options = this.options;
                return options.mobile === true && kendo.support.mobileOS && !kendo.support.mobileOS.tablet || options.mobile === 'phone';
            },
            _groupsByResource: function (resources, groupIndex, groupsArray, parentFieldValue, parentField) {
                if (!groupsArray) {
                    groupsArray = [];
                }
                var resource = resources[0];
                if (resource) {
                    var group;
                    var data = resource.dataSource.view();
                    var prevIndex = 0;
                    for (var dataIndex = 0; dataIndex < data.length; dataIndex++) {
                        var fieldValue = kendo.getter(resource.dataValueField)(data[dataIndex]);
                        var currentGroupIndex = groupIndex + prevIndex + dataIndex;
                        group = this._groupsByResource(resources.slice(1), currentGroupIndex, groupsArray, fieldValue, resource.field);
                        group[resource.field] = fieldValue;
                        prevIndex = group.groupIndex;
                        if (parentField && parentFieldValue) {
                            group[parentField] = parentFieldValue;
                        }
                        if (resources.length === 1) {
                            group.groupIndex = groupIndex + dataIndex;
                            groupsArray.push(group);
                        }
                    }
                    return group;
                } else {
                    return {};
                }
            },
            data: function () {
                return this._data;
            },
            select: function (options) {
                var that = this;
                var view = that.view();
                var selection = that._selection;
                var groups = view.groups;
                var selectedGroups;
                if (options === undefined) {
                    var selectedEvents;
                    var slots = view._selectedSlots;
                    if (!selection) {
                        return [];
                    }
                    if (selection && selection.events) {
                        selectedEvents = that._selectedEvents();
                    }
                    return {
                        start: selection.start,
                        end: selection.end,
                        events: selectedEvents,
                        slots: slots,
                        resources: view._resourceBySlot(selection)
                    };
                }
                if (!options) {
                    that._selection = null;
                    that._old = null;
                    view.clearSelection();
                    return;
                }
                if ($.isArray(options)) {
                    options = { events: options.splice(0) };
                }
                if (options.resources) {
                    var fieldName;
                    var filters = [];
                    var groupsByResource = [];
                    if (view.groupedResources) {
                        that._groupsByResource(view.groupedResources, 0, groupsByResource);
                    }
                    for (fieldName in options.resources) {
                        filters.push({
                            field: fieldName,
                            operator: 'eq',
                            value: options.resources[fieldName]
                        });
                    }
                    selectedGroups = new kendo.data.Query(groupsByResource).filter(filters).toArray();
                }
                if (options.events && options.events.length) {
                    that._selectEvents(options.events, selectedGroups);
                    that._select();
                    return;
                }
                if (groups && (options.start && options.end)) {
                    var rangeStart = getDate(view._startDate);
                    var rangeEnd = kendo.date.addDays(getDate(view._endDate), 1);
                    var group;
                    var ranges;
                    if (options.start < rangeEnd && rangeStart <= options.end) {
                        if (selectedGroups && selectedGroups.length) {
                            group = groups[selectedGroups[0].groupIndex];
                        } else {
                            group = groups[0];
                        }
                        ranges = group.ranges(options.start, options.end, options.isAllDay, false);
                        if (ranges.length) {
                            that._selection = {
                                start: kendo.timezone.toLocalDate(ranges[0].start.start),
                                end: kendo.timezone.toLocalDate(ranges[ranges.length - 1].end.end),
                                groupIndex: ranges[0].start.groupIndex,
                                index: ranges[0].start.index,
                                isAllDay: ranges[0].start.isDaySlot,
                                events: []
                            };
                            that._select();
                        }
                    }
                }
            },
            _selectEvents: function (eventsUids, selectedGroups) {
                var that = this;
                var idx;
                var view = that.view();
                var groups = view.groups;
                var eventsLength = eventsUids.length;
                var isGrouped = selectedGroups && selectedGroups.length;
                for (idx = 0; idx < eventsLength; idx++) {
                    if (groups && isGrouped) {
                        var currentGroup = groups[selectedGroups[0].groupIndex];
                        var events = [];
                        var timeSlotCollectionCount = currentGroup.timeSlotCollectionCount();
                        var daySlotCollectionCount = currentGroup.daySlotCollectionCount();
                        for (var collIdx = 0; collIdx < timeSlotCollectionCount; collIdx++) {
                            events = events.concat(currentGroup.getTimeSlotCollection(collIdx).events());
                        }
                        for (var dayCollIdx = 0; dayCollIdx < daySlotCollectionCount; dayCollIdx++) {
                            events = events.concat(currentGroup.getDaySlotCollection(dayCollIdx).events());
                        }
                        events = new kendo.data.Query(events).filter({
                            field: 'element[0].getAttribute(\'data-uid\')',
                            operator: 'eq',
                            value: eventsUids[idx]
                        }).toArray();
                        if (events[0]) {
                            that._createSelection(events[0].element);
                        }
                    } else {
                        var element = view.element.find(kendo.format('.k-event[data-uid={0}], .k-task[data-uid={0}]', eventsUids[idx]));
                        if (element.length) {
                            that._createSelection(element[0]);
                        }
                    }
                }
            },
            _selectable: function () {
                var that = this, wrapper = that.wrapper, selectEvent = kendo.support.mobileOS ? 'touchend' : 'mousedown';
                if (!that.options.selectable) {
                    return;
                }
                that._tabindex();
                wrapper.on(selectEvent + NS, '.k-scheduler-header-all-day td, .k-scheduler-content td, .k-event', function (e) {
                    var which = e.which;
                    var button = e.button;
                    var browser = kendo.support.browser;
                    var isRight = which && which === 3 || button && button == 2;
                    if (kendo.support.mobileOS && e.isDefaultPrevented()) {
                        return;
                    }
                    if (!isRight) {
                        that._createSelection(e.currentTarget);
                    }
                    wrapper.focus();
                    if (browser.msie && browser.version < 9) {
                        setTimeout(function () {
                            wrapper.focus();
                        });
                    }
                });
                var mouseMoveHandler = $.proxy(that._mouseMove, that);
                wrapper.on('mousedown' + NS, '.k-scheduler-header-all-day td, .k-scheduler-content td', function (e) {
                    var which = e.which;
                    var button = e.button;
                    var isRight = which && which === 3 || button && button == 2;
                    if (!isRight) {
                        wrapper.on('mousemove' + NS, '.k-scheduler-header-all-day td, .k-scheduler-content td', mouseMoveHandler);
                    }
                });
                wrapper.on('mouseup' + NS + ' mouseleave' + NS, function () {
                    wrapper.off('mousemove' + NS, '.k-scheduler-header-all-day td, .k-scheduler-content td', mouseMoveHandler);
                });
                wrapper.on('focus' + NS, function () {
                    if (!that._selection) {
                        that._selectFirstSlot();
                    }
                    that._select();
                });
                wrapper.on('focusout' + NS, function () {
                    that._ctrlKey = that._shiftKey = false;
                });
                wrapper.on('keydown' + NS, proxy(that._keydown, that));
                wrapper.on('keyup' + NS, function (e) {
                    that._ctrlKey = e.ctrlKey;
                    that._shiftKey = e.shiftKey;
                });
            },
            _selectFirstSlot: function () {
                this._createSelection(this.wrapper.find('.k-scheduler-content').find('td:first'));
            },
            _select: function () {
                var that = this;
                var view = that.view();
                var wrapper = that.wrapper;
                var current = view.current();
                var selection = that._selection;
                if (!selection) {
                    return;
                }
                if (current) {
                    current.removeAttribute('id');
                    current.removeAttribute('aria-label');
                    wrapper.removeAttr('aria-activedescendant');
                }
                view.select(selection);
                current = view.current();
                if (current && that._old !== current) {
                    var currentUid = $(current).data('uid');
                    if (that._old && currentUid && currentUid === $(that._old).data('uid')) {
                        return;
                    }
                    var labelFormat;
                    var data = selection;
                    var events = that._selectedEvents();
                    var slots = view._selectedSlots;
                    if (events[0]) {
                        data = events[0] || selection;
                        labelFormat = kendo.format(that.options.messages.ariaEventLabel, data.title, data.start, data.start);
                    } else {
                        labelFormat = kendo.format(that.options.messages.ariaSlotLabel, data.start, data.end);
                    }
                    current.setAttribute('id', that._ariaId);
                    current.setAttribute('aria-label', labelFormat);
                    wrapper.attr('aria-activedescendant', that._ariaId);
                    that._old = current;
                    that.trigger('change', {
                        start: selection.start,
                        end: selection.end,
                        events: events,
                        slots: slots,
                        resources: view._resourceBySlot(selection)
                    });
                }
            },
            _selectedEvents: function () {
                var uids = this._selection.events;
                var length = uids.length;
                var idx = 0;
                var event;
                var events = [];
                for (; idx < length; idx++) {
                    event = this.occurrenceByUid(uids[idx]);
                    if (event) {
                        events.push(event);
                    }
                }
                return events;
            },
            _mouseMove: function (e) {
                var that = this;
                clearTimeout(that._moveTimer);
                that._moveTimer = setTimeout(function () {
                    var view = that.view();
                    var selection = that._selection;
                    if (selection) {
                        var slot = view.selectionByElement($(e.currentTarget));
                        if (slot && selection.groupIndex === slot.groupIndex) {
                            var startDate = slot.startDate();
                            var endDate = slot.endDate();
                            if (startDate >= selection.end) {
                                selection.backward = false;
                            } else if (endDate <= selection.start) {
                                selection.backward = true;
                            }
                            if (selection.backward) {
                                selection.start = startDate;
                            } else {
                                selection.end = endDate;
                            }
                            that._select();
                        }
                    }
                }, 5);
            },
            _viewByIndex: function (index) {
                var view, views = this.views;
                for (view in views) {
                    if (!index) {
                        return view;
                    }
                    index--;
                }
            },
            _keydown: function (e) {
                var that = this, key = e.keyCode, view = that.view(), editable = view.options.editable, selection = that._selection, shiftKey = e.shiftKey;
                that._ctrlKey = e.ctrlKey;
                that._shiftKey = e.shiftKey;
                if (!selection) {
                    that._selectFirstSlot();
                    that._select();
                    return;
                }
                if (key === keys.TAB) {
                    if (view.moveToEvent(selection, shiftKey)) {
                        that._select();
                        e.preventDefault();
                    }
                } else if (editable && key === keys.ENTER) {
                    if (selection.events.length) {
                        if (editable.update !== false) {
                            that.editEvent(selection.events[0]);
                        }
                    } else if (editable.create !== false) {
                        if (selection.isAllDay) {
                            selection = $.extend({}, selection, { end: kendo.date.addDays(selection.end, -1) });
                        }
                        that.addEvent(extend({}, selection, view._resourceBySlot(selection)));
                    }
                } else if (key === keys.DELETE && editable !== false && editable.destroy !== false) {
                    that.removeEvent(selection.events[0]);
                } else if (key >= 49 && key <= 57) {
                    that.view(that._viewByIndex(key - 49));
                } else if (view.move(selection, key, shiftKey)) {
                    if (view.inRange(selection)) {
                        that._select();
                    } else {
                        that.date(selection.start);
                    }
                    e.preventDefault();
                }
                that._adjustSelectedDate();
            },
            _createSelection: function (item) {
                var uid, slot, selection;
                if (!this._selection || !this._ctrlKey && !this._shiftKey) {
                    this._selection = {
                        events: [],
                        groupIndex: 0
                    };
                }
                item = $(item);
                selection = this._selection;
                if (item.is('.k-event')) {
                    uid = item.attr(kendo.attr('uid'));
                }
                slot = this.view().selectionByElement(item);
                if (slot) {
                    selection.groupIndex = slot.groupIndex || 0;
                }
                if (uid) {
                    slot = getOccurrenceByUid(this._data, uid);
                }
                if (slot && slot.uid) {
                    uid = [slot.uid];
                }
                this._updateSelection(slot, uid);
                this._adjustSelectedDate();
            },
            _updateSelection: function (dataItem, events, groupIndex) {
                var selection = this._selection;
                if (dataItem && selection) {
                    var view = this.view();
                    if (dataItem.uid) {
                        dataItem = view._updateEventForSelection(dataItem);
                    }
                    if (this._shiftKey && selection.start && selection.end) {
                        var backward = dataItem.end < selection.end;
                        selection.end = dataItem.endDate ? dataItem.endDate() : dataItem.end;
                        if (backward && view._timeSlotInterval) {
                            kendo.date.setTime(selection.end, -view._timeSlotInterval());
                        }
                    } else {
                        selection.start = dataItem.startDate ? dataItem.startDate() : dataItem.start;
                        selection.end = dataItem.endDate ? dataItem.endDate() : dataItem.end;
                    }
                    if ('isDaySlot' in dataItem) {
                        selection.isAllDay = dataItem.isDaySlot;
                    } else {
                        selection.isAllDay = dataItem.isAllDay;
                    }
                    if (groupIndex !== null && groupIndex !== undefined) {
                        selection.groupIndex = groupIndex;
                    }
                    selection.index = dataItem.index;
                    if (this._ctrlKey) {
                        selection.events = selection.events.concat(events || []);
                    } else {
                        selection.events = events || [];
                    }
                }
            },
            options: {
                name: 'Scheduler',
                date: TODAY,
                editable: true,
                autoBind: true,
                snap: true,
                mobile: false,
                timezone: '',
                allDaySlot: true,
                min: new Date(1900, 0, 1),
                max: new Date(2099, 11, 31),
                toolbar: null,
                footer: {},
                messages: {
                    today: 'Today',
                    pdf: 'Export to PDF',
                    save: 'Save',
                    cancel: 'Cancel',
                    destroy: 'Delete',
                    deleteWindowTitle: 'Delete event',
                    ariaSlotLabel: 'Selected from {0:t} to {1:t}',
                    ariaEventLabel: '{0} on {1:D} at {2:t}',
                    views: {
                        day: 'Day',
                        week: 'Week',
                        workWeek: 'Work Week',
                        agenda: 'Agenda',
                        month: 'Month',
                        timeline: 'Timeline',
                        timelineWeek: 'Timeline Week',
                        timelineWorkWeek: 'Timeline Work Week',
                        timelineMonth: 'Timeline Month'
                    },
                    recurrenceMessages: {
                        deleteWindowTitle: 'Delete Recurring Item',
                        deleteWindowOccurrence: 'Delete current occurrence',
                        deleteWindowSeries: 'Delete the series',
                        editWindowTitle: 'Edit Recurring Item',
                        editWindowOccurrence: 'Edit current occurrence',
                        editWindowSeries: 'Edit the series'
                    },
                    editable: { confirmation: DELETECONFIRM },
                    editor: {
                        title: 'Title',
                        start: 'Start',
                        end: 'End',
                        allDayEvent: 'All day event',
                        description: 'Description',
                        repeat: 'Repeat',
                        timezone: ' ',
                        startTimezone: 'Start timezone',
                        endTimezone: 'End timezone',
                        separateTimezones: 'Use separate start and end time zones',
                        timezoneEditorTitle: 'Timezones',
                        timezoneEditorButton: 'Time zone',
                        timezoneTitle: 'Time zones',
                        noTimezone: 'No timezone',
                        editorTitle: 'Event'
                    }
                },
                height: null,
                width: null,
                resources: [],
                group: {
                    resources: [],
                    orientation: 'horizontal'
                },
                views: [],
                selectable: false
            },
            events: [
                REMOVE,
                EDIT,
                CANCEL,
                SAVE,
                'add',
                'dataBinding',
                'dataBound',
                'moveStart',
                'move',
                'moveEnd',
                'resizeStart',
                'resize',
                'resizeEnd',
                'navigate',
                'change'
            ],
            destroy: function () {
                var that = this, element;
                Widget.fn.destroy.call(that);
                if (that.dataSource) {
                    that.dataSource.unbind(CHANGE, that._refreshHandler);
                    that.dataSource.unbind('progress', that._progressHandler);
                    that.dataSource.unbind('error', that._errorHandler);
                }
                if (that.calendar) {
                    that.calendar.destroy();
                    that.popup.destroy();
                }
                if (that.view()) {
                    that.view().destroy();
                }
                if (that._editor) {
                    that._editor.destroy();
                }
                if (this._moveDraggable) {
                    this._moveDraggable.destroy();
                }
                if (this._resizeDraggable) {
                    this._resizeDraggable.destroy();
                }
                element = that.element.add(that.wrapper).add(that.toolbar).add(that.popup);
                element.off(NS);
                clearTimeout(that._moveTimer);
                that._model = null;
                that.toolbar = null;
                that.element = null;
                $(window).off('resize' + NS, that._resizeHandler);
                kendo.destroy(that.wrapper);
            },
            setDataSource: function (dataSource) {
                this.options.dataSource = dataSource;
                this._dataSource();
                if (this.options.autoBind) {
                    dataSource.fetch();
                }
            },
            items: function () {
                var content = this.wrapper.find('.k-scheduler-content');
                var view = this.view();
                if (view && view.options.name === 'agenda') {
                    return content.find('.k-task');
                } else {
                    return content.find('.k-event').add(this.wrapper.find('.k-scheduler-header-wrap').find('.k-scheduler-header-all-day').siblings());
                }
            },
            _movable: function () {
                var startSlot;
                var endSlot;
                var startTime;
                var endTime;
                var event;
                var clonedEvent;
                var that = this;
                var originSlot;
                var distance = 0;
                var isMobile = that._isMobile();
                var movable = that.options.editable && that.options.editable.move !== false;
                var resizable = that.options.editable && that.options.editable.resize !== false;
                if (movable || resizable && isMobile) {
                    if (isMobile && kendo.support.mobileOS.android) {
                        distance = 5;
                    }
                    that._moveDraggable = new kendo.ui.Draggable(that.element, {
                        distance: distance,
                        filter: '.k-event',
                        ignore: '.k-resize-handle',
                        holdToDrag: isMobile,
                        autoScroll: true
                    });
                    if (movable) {
                        that._moveDraggable.bind('dragstart', function (e) {
                            var view = that.view();
                            var eventElement = e.currentTarget;
                            if (!view.options.editable || view.options.editable.move === false) {
                                e.preventDefault();
                                return;
                            }
                            if (isMobile && !eventElement.hasClass('k-event-active')) {
                                that.element.find('.k-event-active').removeClass('k-event-active');
                                e.preventDefault();
                                return;
                            }
                            event = that.occurrenceByUid(eventElement.attr(kendo.attr('uid')));
                            clonedEvent = event.clone();
                            clonedEvent.update(view._eventOptionsForMove(clonedEvent));
                            startSlot = view._slotByPosition(e.x.startLocation, e.y.startLocation);
                            startTime = startSlot.startOffset(e.x.startLocation, e.y.startLocation, that.options.snap);
                            endSlot = startSlot;
                            originSlot = startSlot;
                            if (!startSlot || that.trigger('moveStart', { event: event })) {
                                e.preventDefault();
                            }
                        }).bind('drag', function (e) {
                            var view = that.view();
                            var slot = view._slotByPosition(e.x.location, e.y.location);
                            var distance;
                            var range;
                            if (!slot) {
                                return;
                            }
                            endTime = slot.startOffset(e.x.location, e.y.location, that.options.snap);
                            if (slot.isDaySlot !== startSlot.isDaySlot) {
                                startSlot = view._slotByPosition(e.x.location, e.y.location);
                                startTime = startSlot.startOffset(e.x.location, e.y.location, that.options.snap);
                                distance = endTime - startTime;
                                clonedEvent.isAllDay = slot.isDaySlot;
                                clonedEvent.start = kendo.timezone.toLocalDate(startTime);
                                clonedEvent.end = kendo.timezone.toLocalDate(endTime);
                                view._updateMoveHint(clonedEvent, slot.groupIndex, distance);
                                range = {
                                    start: clonedEvent.start,
                                    end: clonedEvent.end
                                };
                            } else {
                                distance = endTime - startTime;
                                view._updateMoveHint(clonedEvent, slot.groupIndex, distance);
                                range = moveEventRange(clonedEvent, distance);
                            }
                            if (!that.trigger('move', {
                                    event: event,
                                    slot: {
                                        element: slot.element,
                                        start: slot.startDate(),
                                        end: slot.endDate(),
                                        isDaySlot: slot.isDaySlot
                                    },
                                    resources: view._resourceBySlot(slot),
                                    start: range.start,
                                    end: range.end
                                })) {
                                endSlot = slot;
                            } else {
                                view._updateMoveHint(clonedEvent, slot.groupIndex, distance);
                            }
                        }).bind('dragend', function (e) {
                            that.view()._removeMoveHint();
                            var distance = endTime - startTime;
                            var range = moveEventRange(clonedEvent, distance);
                            var start = range.start;
                            var end = range.end;
                            var endResources = that.view()._resourceBySlot(endSlot);
                            var startResources = that.view()._resourceBySlot(startSlot);
                            var prevented = that.trigger('moveEnd', {
                                event: event,
                                slot: {
                                    element: endSlot.element,
                                    start: endSlot.startDate(),
                                    end: endSlot.endDate()
                                },
                                start: start,
                                end: end,
                                resources: endResources
                            });
                            if (!prevented && (event.start.getTime() !== start.getTime() || event.end.getTime() !== end.getTime() || originSlot.isDaySlot !== endSlot.isDaySlot || kendo.stringify(endResources) !== kendo.stringify(startResources))) {
                                var updatedEventOptions = that.view()._eventOptionsForMove(event);
                                var eventOptions;
                                if (originSlot.isDaySlot !== endSlot.isDaySlot) {
                                    if (endSlot.isDaySlot) {
                                        eventOptions = $.extend({
                                            start: endSlot.startDate(),
                                            end: endSlot.startDate(),
                                            isAllDay: endSlot.isDaySlot
                                        }, updatedEventOptions, endResources);
                                    } else {
                                        eventOptions = $.extend({
                                            isAllDay: endSlot.isDaySlot,
                                            start: start,
                                            end: end
                                        }, updatedEventOptions, endResources);
                                    }
                                } else {
                                    eventOptions = $.extend({
                                        isAllDay: event.isAllDay,
                                        start: start,
                                        end: end
                                    }, updatedEventOptions, endResources);
                                }
                                that._updateEvent(null, event, eventOptions, endSlot.groupIndex);
                            }
                            e.currentTarget.removeClass('k-event-active');
                            this.cancelHold();
                        }).bind('dragcancel', function () {
                            that.view()._removeMoveHint();
                            this.cancelHold();
                        });
                    }
                    if (isMobile) {
                        that._moveDraggable.bind('hold', function (e) {
                            if (that.element.find('.k-scheduler-monthview').length) {
                                e.preventDefault();
                            }
                            that.element.find('.k-event-active').removeClass('k-event-active');
                            e.currentTarget.addClass('k-event-active');
                        });
                        if (!kendo.support.mobileOS.android) {
                            that._moveDraggable.userEvents.bind('press', function (e) {
                                e.preventDefault();
                            });
                        }
                    }
                }
            },
            _resizable: function () {
                var startTime;
                var endTime;
                var event;
                var clonedEvent;
                var slot;
                var that = this;
                var distance = 0;
                function direction(handle) {
                    var directions = {
                        'k-resize-e': 'east',
                        'k-resize-w': 'west',
                        'k-resize-n': 'north',
                        'k-resize-s': 'south'
                    };
                    for (var key in directions) {
                        if (handle.hasClass(key)) {
                            return directions[key];
                        }
                    }
                }
                if (that._isMobile() && kendo.support.mobileOS.android) {
                    distance = 5;
                }
                that._resizeDraggable = new kendo.ui.Draggable(that.element, {
                    distance: distance,
                    filter: '.k-resize-handle',
                    autoScroll: true,
                    dragstart: function (e) {
                        var dragHandle = $(e.currentTarget);
                        var eventElement = dragHandle.closest('.k-event');
                        var uid = eventElement.attr(kendo.attr('uid'));
                        var view = that.view();
                        event = that.occurrenceByUid(uid);
                        clonedEvent = event.clone();
                        view._updateEventForResize(clonedEvent);
                        slot = view._slotByPosition(e.x.startLocation, e.y.startLocation);
                        if (that.trigger('resizeStart', { event: event })) {
                            e.preventDefault();
                        }
                        startTime = kendo.date.toUtcTime(clonedEvent.start);
                        endTime = kendo.date.toUtcTime(clonedEvent.end);
                    },
                    drag: function (e) {
                        if (!slot) {
                            return;
                        }
                        var dragHandle = $(e.currentTarget);
                        var dir = direction(dragHandle);
                        var view = that.view();
                        var currentSlot = view._slotByPosition(e.x.location, e.y.location);
                        if (!currentSlot || slot.groupIndex != currentSlot.groupIndex) {
                            return;
                        }
                        slot = currentSlot;
                        var originalStart = startTime;
                        var originalEnd = endTime;
                        if (dir == 'south') {
                            if (!slot.isDaySlot && slot.end - kendo.date.toUtcTime(clonedEvent.start) >= view._timeSlotInterval()) {
                                if (clonedEvent.isAllDay) {
                                    endTime = slot.startOffset(e.x.location, e.y.location, that.options.snap);
                                } else {
                                    endTime = slot.endOffset(e.x.location, e.y.location, that.options.snap);
                                }
                            }
                        } else if (dir == 'north') {
                            if (!slot.isDaySlot && kendo.date.toUtcTime(clonedEvent.end) - slot.start >= view._timeSlotInterval()) {
                                startTime = slot.startOffset(e.x.location, e.y.location, that.options.snap);
                            }
                        } else if (dir == 'east') {
                            if (slot.isDaySlot && kendo.date.toUtcTime(kendo.date.getDate(slot.endDate())) >= kendo.date.toUtcTime(kendo.date.getDate(clonedEvent.start))) {
                                if (clonedEvent.isAllDay) {
                                    endTime = slot.startOffset(e.x.location, e.y.location, that.options.snap);
                                } else {
                                    endTime = slot.endOffset(e.x.location, e.y.location, that.options.snap);
                                }
                            } else if (!slot.isDaySlot && slot.end - kendo.date.toUtcTime(clonedEvent.start) >= view._timeSlotInterval()) {
                                endTime = slot.endOffset(e.x.location, e.y.location, that.options.snap);
                            }
                        } else if (dir == 'west') {
                            if (slot.isDaySlot && kendo.date.toUtcTime(kendo.date.getDate(clonedEvent.end)) >= kendo.date.toUtcTime(kendo.date.getDate(slot.startDate()))) {
                                startTime = slot.startOffset(e.x.location, e.y.location, that.options.snap);
                            } else if (!slot.isDaySlot && kendo.date.toUtcTime(clonedEvent.end) - slot.start >= view._timeSlotInterval()) {
                                startTime = slot.startOffset(e.x.location, e.y.location, that.options.snap);
                            }
                        }
                        if (!that.trigger('resize', {
                                event: event,
                                slot: {
                                    element: slot.element,
                                    start: slot.startDate(),
                                    end: slot.endDate()
                                },
                                start: kendo.timezone.toLocalDate(startTime),
                                end: kendo.timezone.toLocalDate(endTime),
                                resources: view._resourceBySlot(slot)
                            })) {
                            view._updateResizeHint(clonedEvent, slot.groupIndex, startTime, endTime);
                        } else {
                            startTime = originalStart;
                            endTime = originalEnd;
                        }
                    },
                    dragend: function (e) {
                        var dragHandle = $(e.currentTarget);
                        var start = new Date(clonedEvent.start.getTime());
                        var end = new Date(clonedEvent.end.getTime());
                        var dir = direction(dragHandle);
                        that.view()._removeResizeHint();
                        if (dir == 'south') {
                            end = kendo.timezone.toLocalDate(endTime);
                        } else if (dir == 'north') {
                            start = kendo.timezone.toLocalDate(startTime);
                        } else if (dir == 'east') {
                            if (slot.isDaySlot) {
                                end = kendo.date.getDate(kendo.timezone.toLocalDate(endTime));
                            } else {
                                end = kendo.timezone.toLocalDate(endTime);
                            }
                        } else if (dir == 'west') {
                            if (slot.isDaySlot) {
                                start = new Date(kendo.timezone.toLocalDate(startTime));
                                start.setHours(0);
                                start.setMinutes(0);
                            } else {
                                start = kendo.timezone.toLocalDate(startTime);
                            }
                        }
                        var prevented = that.trigger('resizeEnd', {
                            event: event,
                            slot: {
                                element: slot.element,
                                start: slot.startDate(),
                                end: slot.endDate()
                            },
                            start: start,
                            end: end,
                            resources: that.view()._resourceBySlot(slot)
                        });
                        if (!prevented && end.getTime() >= start.getTime()) {
                            if (clonedEvent.start.getTime() != start.getTime() || clonedEvent.end.getTime() != end.getTime()) {
                                that.view()._updateEventForResize(event);
                                that._updateEvent(dir, event, {
                                    start: start,
                                    end: end
                                });
                            }
                        }
                        slot = null;
                        event = null;
                    },
                    dragcancel: function () {
                        that.view()._removeResizeHint();
                        slot = null;
                        event = null;
                    }
                });
            },
            _updateEvent: function (dir, event, eventInfo, groupIndex) {
                var that = this;
                var updateEvent = function (event, callback) {
                    try {
                        that._preventRefresh = true;
                        event.update(eventInfo);
                        that._convertDates(event);
                    } finally {
                        that._preventRefresh = false;
                    }
                    if (!that.trigger(SAVE, { event: event })) {
                        if (callback) {
                            callback();
                        }
                        that._updateSelection(event, [event.uid], groupIndex);
                        that.dataSource.sync();
                    }
                };
                var recurrenceHead = function (event) {
                    if (event.recurrenceRule) {
                        return that.dataSource.getByUid(event.uid);
                    } else {
                        return that.dataSource.get(event.recurrenceId);
                    }
                };
                var updateSeries = function () {
                    var head = recurrenceHead(event);
                    if (dir == 'south' || dir == 'north') {
                        if (eventInfo.start) {
                            var start = kendo.date.getDate(head.start);
                            kendo.date.setTime(start, getMilliseconds(eventInfo.start));
                            eventInfo.start = start;
                        }
                        if (eventInfo.end) {
                            var end = kendo.date.getDate(head.end);
                            kendo.date.setTime(end, getMilliseconds(eventInfo.end));
                            eventInfo.end = end;
                        }
                    }
                    that.dataSource._removeExceptions(head);
                    updateEvent(head);
                };
                var updateOccurrence = function () {
                    var head = recurrenceHead(event);
                    var callback = function () {
                        that._convertDates(head);
                    };
                    var exception = head.toOccurrence({
                        start: event.start,
                        end: event.end
                    });
                    updateEvent(that.dataSource.add(exception), callback);
                };
                if (event.recurrenceRule || event.isOccurrence()) {
                    var recurrenceMessages = that.options.messages.recurrenceMessages;
                    that._showRecurringDialog(event, updateOccurrence, updateSeries, {
                        title: recurrenceMessages.editWindowTitle,
                        text: recurrenceMessages.editRecurring ? recurrenceMessages.editRecurring : EDITRECURRING,
                        occurrenceText: recurrenceMessages.editWindowOccurrence,
                        seriesText: recurrenceMessages.editWindowSeries
                    });
                } else {
                    updateEvent(that.dataSource.getByUid(event.uid));
                }
            },
            _modelForContainer: function (container) {
                container = $(container).closest('[' + kendo.attr('uid') + ']');
                return this.dataSource.getByUid(container.attr(kendo.attr('uid')));
            },
            showDialog: function (options) {
                this._editor.showDialog(options);
            },
            focus: function () {
                this.wrapper.focus();
            },
            _confirmation: function (callback, model) {
                var editable = this.options.editable;
                if (editable === true || editable.confirmation !== false) {
                    var messages = this.options.messages;
                    var title = messages.deleteWindowTitle;
                    var text = typeof editable.confirmation === STRING ? editable.confirmation : messages.editable.confirmation;
                    if (this._isEditorOpened() && model.isRecurring()) {
                        var recurrenceMessages = this.options.messages.recurrenceMessages;
                        title = recurrenceMessages.deleteWindowTitle;
                        if (model.isException()) {
                            text = recurrenceMessages.deleteRecurringConfirmation ? recurrenceMessages.deleteRecurringConfirmation : DELETERECURRINGCONFIRM;
                        } else {
                            text = recurrenceMessages.deleteSeriesConfirmation ? recurrenceMessages.deleteSeriesConfirmation : DELETESERIESCONFIRM;
                        }
                    }
                    var buttons = [{
                            name: 'destroy',
                            text: messages.destroy,
                            click: function () {
                                callback();
                            }
                        }];
                    if (!(this._isMobile() && kendo.mobile.ui.Pane)) {
                        buttons.push({
                            name: 'canceledit',
                            text: messages.cancel,
                            click: function () {
                                callback(true);
                            }
                        });
                    }
                    this._unbindResize();
                    this.showDialog({
                        model: model,
                        text: text,
                        title: title,
                        buttons: buttons
                    });
                    this._bindResize();
                } else {
                    callback();
                }
            },
            addEvent: function (eventInfo) {
                var editable = this._editor.editable;
                var dataSource = this.dataSource;
                var event;
                eventInfo = eventInfo || {};
                var prevented = this.trigger('add', { event: eventInfo });
                if (!prevented && (editable && editable.end() || !editable)) {
                    this.cancelEvent();
                    if (eventInfo && eventInfo.toJSON) {
                        eventInfo = eventInfo.toJSON();
                    }
                    event = dataSource.add(eventInfo);
                    if (event) {
                        this.cancelEvent();
                        this._editEvent(event);
                    }
                }
            },
            saveEvent: function () {
                var editor = this._editor;
                if (!editor) {
                    return;
                }
                var editable = editor.editable;
                var container = editor.container;
                var model = this._modelForContainer(container);
                if (container && editable && editable.end() && !this.trigger(SAVE, {
                        container: container,
                        event: model
                    })) {
                    if (model.isRecurrenceHead()) {
                        this.dataSource._removeExceptions(model);
                    }
                    if (!model.dirty && !model.isOccurrence()) {
                        this._convertDates(model, 'remove');
                    }
                    this.dataSource.sync();
                }
            },
            cancelEvent: function () {
                var editor = this._editor;
                var container = editor.container;
                var model;
                if (container) {
                    model = this._modelForContainer(container);
                    if (model && model.isOccurrence()) {
                        this._convertDates(model, 'remove');
                        this._convertDates(this.dataSource.get(model.recurrenceId), 'remove');
                    }
                    this.dataSource.cancelChanges(model);
                    editor.close();
                }
            },
            editEvent: function (uid) {
                var model = typeof uid == 'string' ? this.occurrenceByUid(uid) : uid;
                if (!model) {
                    return;
                }
                this.cancelEvent();
                if (model.isRecurring()) {
                    this._editRecurringDialog(model);
                } else {
                    this._editEvent(model);
                }
            },
            _editEvent: function (model) {
                this._unbindResize();
                this._createPopupEditor(model);
                this._bindResize();
            },
            _editRecurringDialog: function (model) {
                var that = this;
                var editOccurrence = function () {
                    if (model.isException()) {
                        that._editEvent(model);
                    } else {
                        that.addEvent(model);
                    }
                };
                var editSeries = function () {
                    if (model.recurrenceId) {
                        model = that.dataSource.get(model.recurrenceId);
                    }
                    that._editEvent(model);
                };
                var recurrenceMessages = that.options.messages.recurrenceMessages;
                that._showRecurringDialog(model, editOccurrence, editSeries, {
                    title: recurrenceMessages.editWindowTitle,
                    text: recurrenceMessages.editRecurring ? recurrenceMessages.editRecurring : EDITRECURRING,
                    occurrenceText: recurrenceMessages.editWindowOccurrence,
                    seriesText: recurrenceMessages.editWindowSeries
                });
            },
            _showRecurringDialog: function (model, editOccurrence, editSeries, messages) {
                var that = this;
                var editable = that.options.editable;
                var editRecurringMode = isPlainObject(editable) ? editable.editRecurringMode : 'dialog';
                if (editRecurringMode === 'series') {
                    editSeries();
                } else if (editRecurringMode === 'occurrence') {
                    editOccurrence();
                } else {
                    this._unbindResize();
                    that.showDialog({
                        model: model,
                        title: messages.title,
                        text: messages.text,
                        buttons: [
                            {
                                text: messages.occurrenceText,
                                click: editOccurrence
                            },
                            {
                                text: messages.seriesText,
                                click: editSeries
                            }
                        ]
                    });
                    this._bindResize();
                }
            },
            _createButton: function (command) {
                var template = command.template || COMMANDBUTTONTMPL, commandName = typeof command === STRING ? command : command.name || command.text, options = {
                        className: 'k-scheduler-' + (commandName || '').replace(/\s/g, ''),
                        text: commandName,
                        attr: ''
                    };
                if (!commandName && !(isPlainObject(command) && command.template)) {
                    throw new Error('Custom commands should have name specified');
                }
                if (isPlainObject(command)) {
                    if (command.className) {
                        command.className += ' ' + options.className;
                    }
                    if (commandName === 'edit' && isPlainObject(command.text)) {
                        command = extend(true, {}, command);
                        command.text = command.text.edit;
                    }
                    options = extend(true, options, defaultCommands[commandName], command);
                } else {
                    options = extend(true, options, defaultCommands[commandName]);
                }
                return kendo.template(template)(options);
            },
            _convertDates: function (model, method) {
                var timezone = this.dataSource.reader.timezone;
                var startTimezone = model.startTimezone;
                var endTimezone = model.endTimezone;
                var start = model.start;
                var end = model.start;
                method = method || 'apply';
                startTimezone = startTimezone || endTimezone;
                endTimezone = endTimezone || startTimezone;
                if (startTimezone) {
                    if (timezone) {
                        if (method === 'apply') {
                            start = kendo.timezone.convert(model.start, timezone, startTimezone);
                            end = kendo.timezone.convert(model.end, timezone, endTimezone);
                        } else {
                            start = kendo.timezone.convert(model.start, startTimezone, timezone);
                            end = kendo.timezone.convert(model.end, endTimezone, timezone);
                        }
                    } else {
                        start = kendo.timezone[method](model.start, startTimezone);
                        end = kendo.timezone[method](model.end, endTimezone);
                    }
                    model._set('start', start);
                    model._set('end', end);
                }
            },
            _createEditor: function () {
                var that = this;
                var editor;
                if (this._isMobile() && kendo.mobile.ui.Pane) {
                    editor = that._editor = new MobileEditor(this.wrapper, extend({}, this.options, {
                        target: this,
                        timezone: that.dataSource.reader.timezone,
                        resources: that.resources,
                        createButton: proxy(this._createButton, this)
                    }));
                } else {
                    editor = that._editor = new PopupEditor(this.wrapper, extend({}, this.options, {
                        target: this,
                        createButton: proxy(this._createButton, this),
                        timezone: that.dataSource.reader.timezone,
                        resources: that.resources
                    }));
                }
                editor.bind('cancel', function (e) {
                    if (that.trigger('cancel', {
                            container: e.container,
                            event: e.model
                        })) {
                        e.preventDefault();
                        return;
                    }
                    that.cancelEvent();
                    that.focus();
                });
                editor.bind('edit', function (e) {
                    if (that.trigger(EDIT, {
                            container: e.container,
                            event: e.model
                        })) {
                        e.preventDefault();
                    }
                });
                editor.bind('save', function () {
                    that.saveEvent();
                });
                editor.bind('remove', function (e) {
                    that.removeEvent(e.model);
                });
            },
            _createPopupEditor: function (model) {
                var editor = this._editor;
                if (!model.isNew() || model.isOccurrence()) {
                    if (model.isOccurrence()) {
                        this._convertDates(model.recurrenceId ? this.dataSource.get(model.recurrenceId) : model);
                    }
                    this._convertDates(model);
                }
                this.editable = editor.editEvent(model);
            },
            removeEvent: function (uid) {
                var that = this, model = typeof uid == 'string' ? that.occurrenceByUid(uid) : uid;
                if (!model) {
                    return;
                }
                if (model.isRecurring()) {
                    that._deleteRecurringDialog(model);
                } else {
                    that._confirmation(function (cancel) {
                        if (!cancel) {
                            that._removeEvent(model);
                        }
                    }, model);
                }
            },
            occurrenceByUid: function (uid) {
                var occurrence = this.dataSource.getByUid(uid);
                if (!occurrence) {
                    occurrence = getOccurrenceByUid(this._data, uid);
                }
                return occurrence;
            },
            occurrencesInRange: function (start, end) {
                return new kendo.data.Query(this._data).filter({
                    logic: 'or',
                    filters: [
                        {
                            logic: 'and',
                            filters: [
                                {
                                    field: 'start',
                                    operator: 'gte',
                                    value: start
                                },
                                {
                                    field: 'end',
                                    operator: 'gte',
                                    value: start
                                },
                                {
                                    field: 'start',
                                    operator: 'lt',
                                    value: end
                                }
                            ]
                        },
                        {
                            logic: 'and',
                            filters: [
                                {
                                    field: 'start',
                                    operator: 'lte',
                                    value: start
                                },
                                {
                                    field: 'end',
                                    operator: 'gt',
                                    value: start
                                }
                            ]
                        }
                    ]
                }).toArray();
            },
            _removeEvent: function (model) {
                if (!this.trigger(REMOVE, { event: model })) {
                    if (this.dataSource.remove(model)) {
                        this.dataSource.sync();
                    }
                }
            },
            _deleteRecurringDialog: function (model) {
                var that = this;
                var currentModel = model;
                var editable = that.options.editable;
                var deleteOccurrence;
                var deleteSeries;
                var deleteOccurrenceConfirmation;
                var deleteSeriesConfirmation;
                var editRecurringMode = isPlainObject(editable) ? editable.editRecurringMode : 'dialog';
                deleteOccurrence = function () {
                    var occurrence = currentModel.recurrenceId ? currentModel : currentModel.toOccurrence();
                    var head = that.dataSource.get(occurrence.recurrenceId);
                    that._convertDates(head);
                    that._removeEvent(occurrence);
                };
                deleteSeries = function () {
                    if (currentModel.recurrenceId) {
                        currentModel = that.dataSource.get(currentModel.recurrenceId);
                    }
                    that._removeEvent(currentModel);
                };
                if (editRecurringMode != 'dialog' || that._isEditorOpened()) {
                    deleteOccurrenceConfirmation = function () {
                        that._confirmation(function (cancel) {
                            if (!cancel) {
                                deleteOccurrence();
                            }
                        }, currentModel);
                    };
                    deleteSeriesConfirmation = function () {
                        that._confirmation(function (cancel) {
                            if (!cancel) {
                                deleteSeries();
                            }
                        }, currentModel);
                    };
                }
                var seriesCallback = deleteSeriesConfirmation || deleteSeries;
                var occurrenceCallback = deleteOccurrenceConfirmation || deleteOccurrence;
                if (that._isEditorOpened()) {
                    if (model.isException()) {
                        occurrenceCallback();
                    } else {
                        seriesCallback();
                    }
                } else {
                    var recurrenceMessages = that.options.messages.recurrenceMessages;
                    that._showRecurringDialog(model, occurrenceCallback, seriesCallback, {
                        title: recurrenceMessages.deleteWindowTitle,
                        text: recurrenceMessages.deleteRecurring ? recurrenceMessages.deleteRecurring : DELETERECURRING,
                        occurrenceText: recurrenceMessages.deleteWindowOccurrence,
                        seriesText: recurrenceMessages.deleteWindowSeries
                    });
                }
            },
            _isEditorOpened: function () {
                return !!this._editor.container;
            },
            _unbindView: function (view) {
                var that = this;
                that.angular('cleanup', function () {
                    return { elements: that.items() };
                });
                view.destroy();
            },
            _bindView: function (view) {
                var that = this;
                if (that.options.editable) {
                    if (that._viewRemoveHandler) {
                        view.unbind(REMOVE, that._viewRemoveHandler);
                    }
                    that._viewRemoveHandler = function (e) {
                        that.removeEvent(e.uid);
                    };
                    view.bind(REMOVE, that._viewRemoveHandler);
                    if (that._viewAddHandler) {
                        view.unbind(ADD, that._viewAddHandler);
                    }
                    that._viewAddHandler = function (e) {
                        that.addEvent(e.eventInfo);
                    };
                    view.bind(ADD, this._viewAddHandler);
                    if (that._viewEditHandler) {
                        view.unbind(EDIT, that._viewEditHandler);
                    }
                    that._viewEditHandler = function (e) {
                        that.editEvent(e.uid);
                    };
                    view.bind(EDIT, this._viewEditHandler);
                }
                if (that._viewNavigateHandler) {
                    view.unbind('navigate', that._viewNavigateHandler);
                }
                that._viewNavigateHandler = function (e) {
                    if (e.view) {
                        var switchWorkDay = 'isWorkDay' in e;
                        var action = switchWorkDay ? 'changeWorkDay' : 'changeView';
                        if (!that.trigger('navigate', {
                                view: e.view,
                                isWorkDay: e.isWorkDay,
                                action: action,
                                date: e.date
                            })) {
                            if (switchWorkDay) {
                                that._workDayMode = e.isWorkDay;
                            }
                            that._selectView(e.view);
                            that.date(e.date);
                        }
                    }
                };
                view.bind('navigate', that._viewNavigateHandler);
                if (that._viewActivateHandler) {
                    view.unbind('activate', that._viewActivateHandler);
                }
                that._viewActivateHandler = function () {
                    var view = this;
                    if (that._selection) {
                        view.constrainSelection(that._selection);
                        that._select();
                        that._adjustSelectedDate();
                    }
                };
                view.bind('activate', that._viewActivateHandler);
            },
            _selectView: function (name) {
                var that = this;
                if (name && that.views[name]) {
                    if (that._selectedView) {
                        that._unbindView(that._selectedView);
                    }
                    that._selectedView = that._renderView(name);
                    that._selectedViewName = name;
                    if (that._viewsCount > 1) {
                        var viewButton = VIEWBUTTONTEMPLATE({
                            views: that.views,
                            view: name,
                            ns: kendo.ns
                        });
                        var firstButton = that.toolbar.find('.k-scheduler-views li:first-child');
                        if (firstButton.is('.k-current-view')) {
                            firstButton.replaceWith(viewButton);
                        } else {
                            that.toolbar.find('.k-scheduler-views').prepend(viewButton);
                        }
                        var viewButtons = that.toolbar.find('.k-scheduler-views li').removeClass('k-state-selected');
                        viewButtons.end().find('.k-view-' + name.replace(/\./g, '\\.').toLowerCase()).addClass('k-state-selected');
                    }
                }
            },
            view: function (name) {
                var that = this;
                if (name) {
                    that._selectView(name);
                    that.rebind();
                    return;
                }
                return that._selectedView;
            },
            viewName: function () {
                return this.view().name;
            },
            _renderView: function (name) {
                var view = this._initializeView(name);
                this._bindView(view);
                this._model.set('formattedDate', view.dateForTitle());
                this._model.set('formattedShortDate', view.shortDateForTitle());
                return view;
            },
            resize: function (force) {
                var size = this.getSize();
                var currentSize = this._size;
                var view = this.view();
                if (!view || !view.groups) {
                    return;
                }
                if (force || !currentSize || size.width !== currentSize.width || size.height !== currentSize.height) {
                    this.refresh({ action: 'resize' });
                    this._size = size;
                }
            },
            _adjustSelectedDate: function () {
                var date = this._model.selectedDate, selection = this._selection, start = selection.start;
                if (start && !kendo.date.isInDateRange(date, getDate(start), getDate(selection.end))) {
                    date.setFullYear(start.getFullYear(), start.getMonth(), start.getDate());
                }
            },
            _initializeView: function (name) {
                var view = this.views[name];
                if (view) {
                    var isSettings = isPlainObject(view), type = view.type;
                    if (typeof type === STRING) {
                        type = kendo.getter(view.type)(window);
                    }
                    if (type) {
                        view = new type(this.wrapper, trimOptions(extend(true, {}, this.options, isSettings ? view : {}, {
                            resources: this.resources,
                            date: this.date(),
                            showWorkHours: this._workDayMode
                        })));
                    } else {
                        throw new Error('There is no such view');
                    }
                }
                return view;
            },
            _views: function () {
                var views = this.options.views;
                var view;
                var defaultView;
                var selected;
                var isSettings;
                var name;
                var type;
                var idx;
                var length;
                this.views = {};
                this._viewsCount = 0;
                for (idx = 0, length = views.length; idx < length; idx++) {
                    var hasType = false;
                    view = views[idx];
                    isSettings = isPlainObject(view);
                    if (isSettings) {
                        type = name = view.type ? view.type : view;
                        if (typeof type !== STRING) {
                            name = view.name || view.title;
                            hasType = true;
                        }
                    } else {
                        type = name = view;
                    }
                    defaultView = defaultViews[name];
                    if (defaultView && !hasType) {
                        view.type = defaultView.type;
                        defaultView.title = this.options.messages.views[name];
                        if (defaultView.type === 'day') {
                            defaultView.messages = { allDay: this.options.messages.allDay };
                        } else if (defaultView.type === 'agenda') {
                            defaultView.messages = {
                                event: this.options.messages.event,
                                date: this.options.messages.date,
                                time: this.options.messages.time
                            };
                        }
                    }
                    view = extend({ title: name }, defaultView, isSettings ? view : {});
                    if (name) {
                        this.views[name] = view;
                        this._viewsCount++;
                        if (!selected || view.selected) {
                            selected = name;
                        }
                    }
                }
                if (selected) {
                    this._selectedViewName = selected;
                }
            },
            rebind: function () {
                this.dataSource.fetch();
            },
            _dataSource: function () {
                var that = this, options = that.options, dataSource = options.dataSource;
                dataSource = isArray(dataSource) ? { data: dataSource } : dataSource;
                if (options.timezone && !(dataSource instanceof SchedulerDataSource)) {
                    dataSource = extend(true, dataSource, { schema: { timezone: options.timezone } });
                } else if (dataSource instanceof SchedulerDataSource) {
                    options.timezone = dataSource.options.schema ? dataSource.options.schema.timezone : '';
                }
                if (that.dataSource && that._refreshHandler) {
                    that.dataSource.unbind(CHANGE, that._refreshHandler).unbind('progress', that._progressHandler).unbind('error', that._errorHandler);
                } else {
                    that._refreshHandler = proxy(that.refresh, that);
                    that._progressHandler = proxy(that._requestStart, that);
                    that._errorHandler = proxy(that._error, that);
                }
                that.dataSource = kendo.data.SchedulerDataSource.create(dataSource).bind(CHANGE, that._refreshHandler).bind('progress', that._progressHandler).bind('error', that._errorHandler);
                that.options.dataSource = that.dataSource;
            },
            _error: function () {
                this._progress(false);
            },
            _requestStart: function () {
                this._progress(true);
            },
            _progress: function (toggle) {
                var element = this.element.find('.k-scheduler-content');
                kendo.ui.progress(element, toggle);
            },
            _resources: function () {
                var that = this;
                var resources = that.options.resources;
                for (var idx = 0; idx < resources.length; idx++) {
                    var resource = resources[idx];
                    var field = resource.field;
                    var dataSource = resource.dataSource;
                    if (!field || !dataSource) {
                        throw new Error('The "field" and "dataSource" options of the scheduler resource are mandatory.');
                    }
                    that.resources.push({
                        field: field,
                        name: resource.name || field,
                        title: resource.title || field,
                        dataTextField: resource.dataTextField || 'text',
                        dataValueField: resource.dataValueField || 'value',
                        dataColorField: resource.dataColorField || 'color',
                        valuePrimitive: resource.valuePrimitive != null ? resource.valuePrimitive : true,
                        multiple: resource.multiple || false,
                        dataSource: kendo.data.DataSource.create(dataSource)
                    });
                }
                var promises = $.map(that.resources, function (resource) {
                    return resource.dataSource.fetch();
                });
                $.when.apply(null, promises).then(function () {
                    if (that.options.autoBind) {
                        that.view(that._selectedViewName);
                    } else {
                        that._selectView(that._selectedViewName);
                    }
                });
            },
            _initModel: function () {
                var that = this;
                that._model = kendo.observable({
                    selectedDate: new Date(this.options.date),
                    formattedDate: '',
                    formattedShortDate: ''
                });
                that._model.bind('change', function (e) {
                    if (e.field === 'selectedDate') {
                        that.view(that._selectedViewName);
                    }
                });
            },
            _wrapper: function () {
                var that = this;
                var options = that.options;
                var height = options.height;
                var width = options.width;
                that.wrapper = that.element.addClass('k-widget k-scheduler k-floatwrap').attr('role', 'grid').attr('aria-multiselectable', true);
                if (that._isMobile()) {
                    that.wrapper.addClass('k-scheduler-mobile');
                }
                if (that._isMobilePhoneView()) {
                    that.wrapper.addClass('k-scheduler-phone');
                }
                if (height) {
                    that.wrapper.height(height);
                }
                if (width) {
                    that.wrapper.width(width);
                }
            },
            date: function (value) {
                if (value != null && getDate(value) >= getDate(this.options.min) && getDate(value) <= getDate(this.options.max)) {
                    this._model.set('selectedDate', value);
                }
                return getDate(this._model.get('selectedDate'));
            },
            _toolbar: function () {
                var that = this;
                var options = that.options;
                var commands = [];
                if (options.toolbar) {
                    commands = $.isArray(options.toolbar) ? options.toolbar : [options.toolbar];
                }
                var template = this._isMobilePhoneView() ? MOBILETOOLBARTEMPLATE : TOOLBARTEMPLATE;
                var toolbar = $(template({
                    messages: options.messages,
                    pdf: $.grep(commands, function (item) {
                        return item == 'pdf' || item.name == 'pdf';
                    }).length > 0,
                    ns: kendo.ns,
                    views: that.views,
                    viewsCount: that._viewsCount
                }));
                that.wrapper.append(toolbar);
                that.toolbar = toolbar;
                kendo.bind(that.toolbar, that._model);
                toolbar.on(CLICK + NS, '.k-pdf', function (e) {
                    e.preventDefault();
                    that.saveAsPDF();
                });
                toolbar.on(CLICK + NS, '.k-scheduler-navigation li', function (e) {
                    var li = $(this);
                    var date = new Date(that.date());
                    var action = '';
                    e.preventDefault();
                    if (li.hasClass('k-nav-today')) {
                        action = 'today';
                        date = new Date();
                    } else if (li.hasClass('k-nav-next')) {
                        action = 'next';
                        date = that.view().nextDate();
                    } else if (li.hasClass('k-nav-prev')) {
                        action = 'previous';
                        date = that.view().previousDate();
                    } else if (li.hasClass('k-nav-current') && !that._isMobilePhoneView()) {
                        that._showCalendar();
                        return;
                    }
                    if (!that.trigger('navigate', {
                            view: that._selectedViewName,
                            action: action,
                            date: date
                        })) {
                        that.date(date);
                    }
                });
                toolbar.on(CLICK + NS, '.k-scheduler-views li, .k-scheduler-refresh', function (e) {
                    e.preventDefault();
                    var name = $(this).attr(kendo.attr('name'));
                    if (!that.trigger('navigate', {
                            view: name,
                            action: 'changeView',
                            date: that.date()
                        })) {
                        that.view(name);
                        that.element.find('.k-state-expanded').removeClass('k-state-expanded');
                    }
                });
                toolbar.on(CLICK + NS, '.k-scheduler-views li.k-current-view', function () {
                    that.element.find('.k-scheduler-views').toggleClass('k-state-expanded');
                });
                toolbar.find('li').hover(function () {
                    $(this).addClass('k-state-hover');
                }, function () {
                    $(this).removeClass('k-state-hover');
                });
            },
            _showCalendar: function () {
                var that = this, target = that.toolbar.find('.k-nav-current'), html = $('<div class="k-calendar-container"><div class="k-scheduler-calendar"/></div>');
                if (!that.popup) {
                    that.popup = new Popup(html, {
                        anchor: target,
                        open: function () {
                            if (!that.calendar) {
                                that.calendar = new Calendar(this.element.find('.k-scheduler-calendar'), {
                                    change: function () {
                                        var date = this.value();
                                        if (!that.trigger('navigate', {
                                                view: that._selectedViewName,
                                                action: 'changeDate',
                                                date: date
                                            })) {
                                            that.date(date);
                                            that.popup.close();
                                        }
                                    },
                                    min: that.options.min,
                                    max: that.options.max
                                });
                            }
                            that.calendar.value(that.date());
                        },
                        copyAnchorStyles: false
                    });
                }
                that.popup.open();
            },
            refresh: function (e) {
                var that = this;
                var view = this.view();
                this._progress(false);
                this.angular('cleanup', function () {
                    return { elements: that.items() };
                });
                e = e || {};
                if (!view) {
                    return;
                }
                if (e && e.action === 'itemchange' && (this._editor.editable || this._preventRefresh)) {
                    return;
                }
                if (this.trigger('dataBinding', {
                        action: e.action || 'rebind',
                        index: e.index,
                        items: e.items
                    })) {
                    return;
                }
                if (!(e && e.action === 'resize') && this._editor) {
                    this._editor.close();
                }
                this._data = this.dataSource.expand(view.startDate(), view.endDate());
                view.refreshLayout();
                view.render(this._data);
                this.trigger('dataBound');
            },
            slotByPosition: function (x, y) {
                var view = this.view();
                if (!view._slotByPosition) {
                    return null;
                }
                var slot = view._slotByPosition(x, y);
                if (!slot) {
                    return null;
                }
                return {
                    startDate: slot.startDate(),
                    endDate: slot.endDate(),
                    groupIndex: slot.groupIndex,
                    element: slot.element,
                    isDaySlot: slot.isDaySlot
                };
            },
            slotByElement: function (element) {
                var offset = $(element).offset();
                return this.slotByPosition(offset.left, offset.top);
            },
            resourcesBySlot: function (slot) {
                return this.view()._resourceBySlot(slot);
            }
        });
        var defaultViews = {
            day: { type: 'kendo.ui.DayView' },
            week: { type: 'kendo.ui.WeekView' },
            workWeek: { type: 'kendo.ui.WorkWeekView' },
            agenda: { type: 'kendo.ui.AgendaView' },
            month: { type: 'kendo.ui.MonthView' },
            timeline: { type: 'kendo.ui.TimelineView' },
            timelineWeek: { type: 'kendo.ui.TimelineWeekView' },
            timelineWorkWeek: { type: 'kendo.ui.TimelineWorkWeekView' },
            timelineMonth: { type: 'kendo.ui.TimelineMonthView' }
        };
        ui.plugin(Scheduler);
        if (kendo.PDFMixin) {
            kendo.PDFMixin.extend(Scheduler.prototype);
            var SCHEDULER_EXPORT = 'k-scheduler-pdf-export';
            Scheduler.fn._drawPDF = function (progress) {
                var wrapper = this.wrapper;
                var styles = wrapper[0].style.cssText;
                wrapper.css({
                    width: wrapper.width(),
                    height: wrapper.height()
                });
                wrapper.addClass(SCHEDULER_EXPORT);
                var scheduler = this;
                var promise = new $.Deferred();
                var table = wrapper.find('.k-scheduler-content').find('table').css('table-layout', 'auto');
                setTimeout(function () {
                    table.css('table-layout', 'fixed');
                    scheduler.resize(true);
                    scheduler._drawPDFShadow({}, { avoidLinks: scheduler.options.pdf.avoidLinks }).done(function (group) {
                        var args = {
                            page: group,
                            pageNumber: 1,
                            progress: 1,
                            totalPages: 1
                        };
                        progress.notify(args);
                        promise.resolve(args.page);
                    }).fail(function (err) {
                        promise.reject(err);
                    }).always(function () {
                        wrapper[0].style.cssText = styles;
                        wrapper.removeClass(SCHEDULER_EXPORT);
                        scheduler.resize(true);
                        scheduler.resize(true);
                    });
                });
                return promise;
            };
        }
        var TimezoneEditor = Widget.extend({
            init: function (element, options) {
                var that = this, zones = kendo.timezone.windows_zones;
                if (!zones || !kendo.timezone.zones_titles) {
                    throw new Error('kendo.timezones.min.js is not included.');
                }
                Widget.fn.init.call(that, element, options);
                that.wrapper = that.element;
                that._zonesQuery = new kendo.data.Query(zones);
                that._zoneTitleId = kendo.guid();
                that._zoneTitlePicker();
                that._zonePicker();
                that._zoneTitle.bind('cascade', function () {
                    if (!this.value()) {
                        that._zone.wrapper.hide();
                    }
                });
                that._zone.bind('cascade', function () {
                    that._value = this.value();
                    that.trigger('change');
                });
                that.value(that.options.value);
            },
            options: {
                name: 'TimezoneEditor',
                value: '',
                optionLabel: 'No timezone'
            },
            events: ['change'],
            _zoneTitlePicker: function () {
                var that = this, zoneTitle = $('<input id="' + that._zoneTitleId + '"/>').appendTo(that.wrapper);
                that._zoneTitle = new kendo.ui.DropDownList(zoneTitle, {
                    dataSource: kendo.timezone.zones_titles,
                    dataValueField: 'other_zone',
                    dataTextField: 'name',
                    optionLabel: that.options.optionLabel
                });
            },
            _zonePicker: function () {
                var that = this, zone = $('<input />').appendTo(this.wrapper);
                that._zone = new kendo.ui.DropDownList(zone, {
                    dataValueField: 'zone',
                    dataTextField: 'territory',
                    dataSource: that._zonesQuery.data,
                    cascadeFrom: that._zoneTitleId,
                    dataBound: function () {
                        that._value = this.value();
                        this.wrapper.toggle(this.dataSource.view().length > 1);
                    }
                });
                that._zone.wrapper.hide();
            },
            destroy: function () {
                Widget.fn.destroy.call(this);
                kendo.destroy(this.wrapper);
            },
            value: function (value) {
                var that = this, zone;
                if (value === undefined) {
                    return that._value;
                }
                zone = that._zonesQuery.filter({
                    field: 'zone',
                    operator: 'eq',
                    value: value
                }).data[0];
                if (zone) {
                    that._zoneTitle.value(zone.other_zone);
                    that._zone.value(zone.zone);
                } else {
                    that._zoneTitle.select(0);
                }
            }
        });
        ui.plugin(TimezoneEditor);
        var ZONETITLEOPTIONTEMPLATE = kendo.template('<option value="#=other_zone#">#=name#</option>');
        var ZONEOPTIONTEMPLATE = kendo.template('<option value="#=zone#">#=territory#</option>');
        var MobileTimezoneEditor = Widget.extend({
            init: function (element, options) {
                var that = this, zones = kendo.timezone.windows_zones;
                if (!zones || !kendo.timezone.zones_titles) {
                    throw new Error('kendo.timezones.min.js is not included.');
                }
                Widget.fn.init.call(that, element, options);
                that.wrapper = that.element;
                that._zonesQuery = new kendo.data.Query(zones);
                that._zoneTitlePicker();
                that._zonePicker();
                that.value(that.options.value);
            },
            options: {
                name: 'MobileTimezoneEditor',
                optionLabel: 'No timezone',
                value: ''
            },
            events: ['change'],
            _bindZones: function (value) {
                var data = value ? this._filter(value) : [];
                this._zone.html(this._options(data, ZONEOPTIONTEMPLATE));
            },
            _filter: function (value) {
                return this._zonesQuery.filter({
                    field: 'other_zone',
                    operator: 'eq',
                    value: value
                }).data;
            },
            _options: function (data, template, optionLabel) {
                var idx = 0;
                var html = '';
                var length = data.length;
                if (optionLabel) {
                    html += template({
                        other_zone: '',
                        name: optionLabel
                    });
                }
                for (; idx < length; idx++) {
                    html += template(data[idx]);
                }
                return html;
            },
            _zoneTitlePicker: function () {
                var that = this;
                var options = that._options(kendo.timezone.zones_titles, ZONETITLEOPTIONTEMPLATE, that.options.optionLabel);
                that._zoneTitle = $('<select>' + options + '</select>').appendTo(that.wrapper).change(function () {
                    var value = this.value;
                    var zone = that._zone;
                    that._bindZones(value);
                    if (value && zone[0].children.length > 1) {
                        zone.show();
                    } else {
                        zone.hide();
                    }
                    that._value = zone[0].value;
                    that.trigger('change');
                });
            },
            _zonePicker: function () {
                var that = this;
                that._zone = $('<select style="display:none"></select>').appendTo(this.wrapper).change(function () {
                    that._value = this.value;
                    that.trigger('change');
                });
                that._bindZones(that._zoneTitle.val());
                that._value = that._zone[0].value;
            },
            destroy: function () {
                Widget.fn.destroy.call(this);
                kendo.destroy(this.wrapper);
            },
            value: function (value) {
                var that = this;
                var zonePicker = that._zone;
                var other_zone = '';
                var zone_value = '';
                var zone;
                if (value === undefined) {
                    return that._value;
                }
                zone = that._zonesQuery.filter({
                    field: 'zone',
                    operator: 'eq',
                    value: value
                }).data[0];
                if (zone) {
                    zone_value = zone.zone;
                    other_zone = zone.other_zone;
                }
                that._zoneTitle.val(other_zone);
                that._bindZones(other_zone);
                zonePicker.val(zone_value);
                zone_value = zonePicker[0].value;
                if (zone_value && zonePicker[0].children.length > 1) {
                    zonePicker.show();
                } else {
                    zonePicker.hide();
                }
                that._value = zone_value;
            }
        });
        ui.plugin(MobileTimezoneEditor);
    }(window.kendo.jQuery));
    return window.kendo;
}, typeof define == 'function' && define.amd ? define : function (a1, a2, a3) {
    (a3 || a2)();
}));
/** 
 * Kendo UI v2016.2.714 (http://www.telerik.com/kendo-ui)                                                                                                                                               
 * Copyright 2016 Telerik AD. All rights reserved.                                                                                                                                                      
 *                                                                                                                                                                                                      
 * Kendo UI commercial licenses may be obtained at                                                                                                                                                      
 * http://www.telerik.com/purchase/license-agreement/kendo-ui-complete                                                                                                                                  
 * If you do not own a commercial license, this file shall be governed by the trial license terms.                                                                                                      
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       
                                                                                                                                                                                                       

*/
(function (f, define) {
    define('kendo.scheduler.monthview', ['kendo.scheduler.view'], f);
}(function () {
    var __meta__ = {
        id: 'scheduler.monthview',
        name: 'Scheduler Month View',
        category: 'web',
        description: 'The Scheduler Month View',
        depends: ['scheduler.view'],
        hidden: true
    };
    (function ($) {
        var kendo = window.kendo, ui = kendo.ui, SchedulerView = ui.SchedulerView, NS = '.kendoMonthView', extend = $.extend, getDate = kendo.date.getDate, MS_PER_DAY = kendo.date.MS_PER_DAY, NUMBER_OF_ROWS = 6, NUMBER_OF_COLUMNS = 7, DAY_TEMPLATE = kendo.template('<span class="k-link k-nav-day">#:kendo.toString(date, "dd")#</span>'), EVENT_WRAPPER_STRING = '<div role="gridcell" aria-selected="false" data-#=ns#uid="#=uid#"' + '#if (resources[0]) { #' + 'style="background-color:#=resources[0].color #; border-color: #=resources[0].color#"' + 'class="k-event#=inverseColor ? " k-event-inverse" : ""#"' + '#} else {#' + 'class="k-event"' + '#}#' + '>' + '<span class="k-event-actions">' + '# if(data.tail || data.middle) {#' + '<span class="k-icon k-i-arrow-w"></span>' + '#}#' + '# if(data.isException()) {#' + '<span class="k-icon k-i-exception"></span>' + '# } else if(data.isRecurring()) {#' + '<span class="k-icon k-i-refresh"></span>' + '#}#' + '</span>' + '{0}' + '<span class="k-event-actions">' + '#if (showDelete) {#' + '<a href="\\#" class="k-link k-event-delete"><span class="k-icon k-si-close"></span></a>' + '#}#' + '# if(data.head || data.middle) {#' + '<span class="k-icon k-i-arrow-e"></span>' + '#}#' + '</span>' + '# if(resizable && !data.tail && !data.middle) {#' + '<span class="k-resize-handle k-resize-w"></span>' + '#}#' + '# if(resizable && !data.head && !data.middle) {#' + '<span class="k-resize-handle k-resize-e"></span>' + '#}#' + '</div>', EVENT_TEMPLATE = kendo.template('<div title="#=title.replace(/"/g,"&\\#34;")#">' + '<div class="k-event-template">#:title#</div>' + '</div>');
        var MORE_BUTTON_TEMPLATE = kendo.template('<div style="width:#=width#px;left:#=left#px;top:#=top#px" class="k-more-events k-button"><span>...</span></div>');
        ui.MonthView = SchedulerView.extend({
            init: function (element, options) {
                var that = this;
                SchedulerView.fn.init.call(that, element, options);
                that.title = that.options.title;
                that._templates();
                that._editable();
                that._renderLayout(that.options.date);
                that._groups();
            },
            name: 'month',
            _updateDirection: function (selection, ranges, multiple, reverse, vertical) {
                if (multiple) {
                    var startSlot = ranges[0].start;
                    var endSlot = ranges[ranges.length - 1].end;
                    var isSameSlot = startSlot.index === endSlot.index;
                    var isSameCollection = startSlot.collectionIndex === endSlot.collectionIndex;
                    var updateDirection;
                    if (vertical) {
                        updateDirection = isSameSlot && isSameCollection || isSameCollection;
                    } else {
                        updateDirection = isSameSlot && isSameCollection;
                    }
                    if (updateDirection) {
                        selection.backward = reverse;
                    }
                }
            },
            _changeViewPeriod: function (selection, reverse, vertical) {
                var pad = vertical ? 7 : 1;
                if (reverse) {
                    pad *= -1;
                }
                selection.start = kendo.date.addDays(selection.start, pad);
                selection.end = kendo.date.addDays(selection.end, pad);
                if (!vertical || vertical && this._isVerticallyGrouped()) {
                    selection.groupIndex = reverse ? this.groups.length - 1 : 0;
                }
                selection.events = [];
                return true;
            },
            _continuousSlot: function (selection, ranges, reverse) {
                var index = selection.backward ? 0 : ranges.length - 1;
                var group = this.groups[selection.groupIndex];
                return group.continuousSlot(ranges[index].start, reverse);
            },
            _changeGroupContinuously: function (selection, continuousSlot, multiple, reverse) {
                if (!multiple) {
                    var groupIndex = selection.groupIndex;
                    var lastGroupIndex = this.groups.length - 1;
                    var vertical = this._isVerticallyGrouped();
                    var group = this.groups[groupIndex];
                    if (!continuousSlot && vertical) {
                        continuousSlot = group[reverse ? 'lastSlot' : 'firstSlot']();
                        groupIndex += reverse ? -1 : 1;
                    } else if (continuousSlot && !vertical) {
                        groupIndex = reverse ? lastGroupIndex : 0;
                    }
                    if (groupIndex < 0 || groupIndex > lastGroupIndex) {
                        groupIndex = reverse ? lastGroupIndex : 0;
                        continuousSlot = null;
                    }
                    selection.groupIndex = groupIndex;
                }
                return continuousSlot;
            },
            _normalizeHorizontalSelection: function (selection, ranges, reverse) {
                var slot;
                if (reverse) {
                    slot = ranges[0].start;
                } else {
                    slot = ranges[ranges.length - 1].end;
                }
                return slot;
            },
            _normalizeVerticalSelection: function (selection, ranges) {
                var slot;
                if (selection.backward) {
                    slot = ranges[0].start;
                } else {
                    slot = ranges[ranges.length - 1].end;
                }
                return slot;
            },
            _templates: function () {
                var options = this.options, settings = extend({}, kendo.Template, options.templateSettings);
                this.eventTemplate = this._eventTmpl(options.eventTemplate, EVENT_WRAPPER_STRING);
                this.dayTemplate = kendo.template(options.dayTemplate, settings);
                this.groupHeaderTemplate = kendo.template(options.groupHeaderTemplate, settings);
            },
            dateForTitle: function () {
                return kendo.format(this.options.selectedDateFormat, this._firstDayOfMonth, this._lastDayOfMonth);
            },
            shortDateForTitle: function () {
                return kendo.format(this.options.selectedShortDateFormat, this._firstDayOfMonth, this._lastDayOfMonth);
            },
            nextDate: function () {
                return kendo.date.nextDay(this._lastDayOfMonth);
            },
            previousDate: function () {
                return kendo.date.previousDay(this._firstDayOfMonth);
            },
            startDate: function () {
                return this._startDate;
            },
            endDate: function () {
                return this._endDate;
            },
            _renderLayout: function (date) {
                var that = this;
                this._firstDayOfMonth = kendo.date.firstDayOfMonth(date);
                this._lastDayOfMonth = kendo.date.lastDayOfMonth(date);
                this._startDate = firstVisibleMonthDay(date, this.calendarInfo());
                this.createLayout(this._layout());
                this._content();
                this.refreshLayout();
                this.content.on('click' + NS, '.k-nav-day,.k-more-events', function (e) {
                    var offset = $(e.currentTarget).offset();
                    var slot = that._slotByPosition(offset.left, offset.top);
                    e.preventDefault();
                    that.trigger('navigate', {
                        view: 'day',
                        date: slot.startDate()
                    });
                });
            },
            _editable: function () {
                if (this.options.editable && !this._isMobilePhoneView()) {
                    if (this._isMobile()) {
                        this._touchEditable();
                    } else {
                        this._mouseEditable();
                    }
                }
            },
            _mouseEditable: function () {
                var that = this;
                that.element.on('click' + NS, '.k-scheduler-monthview .k-event a:has(.k-si-close)', function (e) {
                    that.trigger('remove', { uid: $(this).closest('.k-event').attr(kendo.attr('uid')) });
                    e.preventDefault();
                });
                if (that.options.editable.create !== false) {
                    that.element.on('dblclick' + NS, '.k-scheduler-monthview .k-scheduler-content td', function (e) {
                        var offset = $(e.currentTarget).offset();
                        var slot = that._slotByPosition(offset.left, offset.top);
                        if (slot) {
                            var resourceInfo = that._resourceBySlot(slot);
                            that.trigger('add', {
                                eventInfo: extend({
                                    isAllDay: true,
                                    start: slot.startDate(),
                                    end: slot.startDate()
                                }, resourceInfo)
                            });
                        }
                        e.preventDefault();
                    });
                }
                if (that.options.editable.update !== false) {
                    that.element.on('dblclick' + NS, '.k-scheduler-monthview .k-event', function (e) {
                        that.trigger('edit', { uid: $(this).closest('.k-event').attr(kendo.attr('uid')) });
                        e.preventDefault();
                    });
                }
            },
            _touchEditable: function () {
                var that = this;
                var threshold = 0;
                if (kendo.support.mobileOS.android) {
                    threshold = 5;
                }
                if (that.options.editable.create !== false) {
                    that._addUserEvents = new kendo.UserEvents(that.element, {
                        threshold: threshold,
                        filter: '.k-scheduler-monthview .k-scheduler-content td',
                        tap: function (e) {
                            var offset = $(e.target).offset();
                            var slot = that._slotByPosition(offset.left, offset.top);
                            if (slot) {
                                var resourceInfo = that._resourceBySlot(slot);
                                that.trigger('add', {
                                    eventInfo: extend({
                                        isAllDay: true,
                                        start: slot.startDate(),
                                        end: slot.startDate()
                                    }, resourceInfo)
                                });
                            }
                            e.preventDefault();
                        }
                    });
                }
                if (that.options.editable.update !== false) {
                    that._editUserEvents = new kendo.UserEvents(that.element, {
                        threshold: threshold,
                        filter: '.k-scheduler-monthview .k-event',
                        tap: function (e) {
                            if ($(e.event.target).closest('a:has(.k-si-close)').length === 0) {
                                that.trigger('edit', { uid: $(e.target).closest('.k-event').attr(kendo.attr('uid')) });
                                e.preventDefault();
                            }
                        }
                    });
                }
            },
            selectionByElement: function (cell) {
                var offset = $(cell).offset();
                return this._slotByPosition(offset.left, offset.top);
            },
            _columnCountForLevel: function (level) {
                var columnLevel = this.columnLevels[level];
                return columnLevel ? columnLevel.length : 0;
            },
            _rowCountForLevel: function (level) {
                var rowLevel = this.rowLevels[level];
                return rowLevel ? rowLevel.length : 0;
            },
            _content: function () {
                var html = '<tbody>';
                var verticalGroupCount = 1;
                var resources = this.groupedResources;
                if (resources.length) {
                    if (this._isVerticallyGrouped()) {
                        verticalGroupCount = this._rowCountForLevel(resources.length - 1);
                    }
                }
                for (var verticalGroupIdx = 0; verticalGroupIdx < verticalGroupCount; verticalGroupIdx++) {
                    html += this._createCalendar(verticalGroupIdx);
                }
                html += '</tbody>';
                this.content.find('table').html(html);
            },
            _createCalendar: function (verticalGroupIndex) {
                var start = this.startDate();
                var cellCount = NUMBER_OF_COLUMNS * NUMBER_OF_ROWS;
                var cellsPerRow = NUMBER_OF_COLUMNS;
                var weekStartDates = [start];
                var html = '';
                var horizontalGroupCount = 1;
                var isVerticallyGrouped = this._isVerticallyGrouped();
                var resources = this.groupedResources;
                if (resources.length) {
                    if (!isVerticallyGrouped) {
                        horizontalGroupCount = this._columnCountForLevel(resources.length - 1);
                    }
                }
                this._slotIndices = {};
                for (var rowIdx = 0, length = cellCount / cellsPerRow; rowIdx < length; rowIdx++) {
                    html += '<tr>';
                    weekStartDates.push(start);
                    var startIdx = rowIdx * cellsPerRow;
                    for (var groupIdx = 0; groupIdx < horizontalGroupCount; groupIdx++) {
                        html += this._createRow(start, startIdx, cellsPerRow, isVerticallyGrouped ? verticalGroupIndex : groupIdx);
                    }
                    start = kendo.date.addDays(start, cellsPerRow);
                    html += '</tr>';
                }
                this._weekStartDates = weekStartDates;
                this._endDate = kendo.date.previousDay(start);
                return html;
            },
            _createRow: function (startDate, startIdx, cellsPerRow, groupIndex) {
                var that = this;
                var min = that._firstDayOfMonth;
                var max = that._lastDayOfMonth;
                var content = that.dayTemplate;
                var classes = '';
                var html = '';
                var resources = function () {
                    return that._resourceBySlot({ groupIndex: groupIndex });
                };
                for (var cellIdx = 0; cellIdx < cellsPerRow; cellIdx++) {
                    classes = '';
                    if (kendo.date.isToday(startDate)) {
                        classes += 'k-today';
                    }
                    if (!kendo.date.isInDateRange(startDate, min, max)) {
                        classes += ' k-other-month';
                    }
                    html += '<td ';
                    if (classes !== '') {
                        html += 'class="' + classes + '"';
                    }
                    html += '>';
                    html += content({
                        date: startDate,
                        resources: resources
                    });
                    html += '</td>';
                    that._slotIndices[getDate(startDate).getTime()] = startIdx + cellIdx;
                    startDate = kendo.date.nextDay(startDate);
                }
                return html;
            },
            _layout: function () {
                var calendarInfo = this.calendarInfo();
                var weekDayNames = this._isMobile() ? calendarInfo.days.namesShort : calendarInfo.days.names;
                var names = shiftArray(weekDayNames, calendarInfo.firstDay);
                var columns = $.map(names, function (value) {
                    return { text: value };
                });
                var resources = this.groupedResources;
                var rows;
                if (resources.length) {
                    if (this._isVerticallyGrouped()) {
                        var inner = [];
                        for (var idx = 0; idx < 6; idx++) {
                            inner.push({
                                text: '<div>&nbsp;</div>',
                                className: 'k-hidden k-slot-cell'
                            });
                        }
                        rows = this._createRowsLayout(resources, inner, this.groupHeaderTemplate);
                    } else {
                        columns = this._createColumnsLayout(resources, columns, this.groupHeaderTemplate);
                    }
                }
                return {
                    columns: columns,
                    rows: rows
                };
            },
            _createEventElement: function (event) {
                var options = this.options;
                var editable = options.editable;
                var isMobile = this._isMobile();
                event.showDelete = editable && editable.destroy !== false && !isMobile;
                event.resizable = editable && editable.resize !== false && !isMobile;
                event.ns = kendo.ns;
                event.resources = this.eventResources(event);
                event.inverseColor = event.resources && event.resources[0] ? this._shouldInverseResourceColor(event.resources[0]) : false;
                var element = $(this.eventTemplate(event));
                this.angular('compile', function () {
                    return {
                        elements: element,
                        data: [{ dataItem: event }]
                    };
                });
                return element;
            },
            _isInDateSlot: function (event) {
                var groups = this.groups[0];
                var slotStart = groups.firstSlot().start;
                var slotEnd = groups.lastSlot().end - 1;
                var startTime = kendo.date.toUtcTime(event.start);
                var endTime = kendo.date.toUtcTime(event.end);
                return (isInDateRange(startTime, slotStart, slotEnd) || isInDateRange(endTime, slotStart, slotEnd) || isInDateRange(slotStart, startTime, endTime) || isInDateRange(slotEnd, startTime, endTime)) && (!isInDateRange(endTime, slotStart, slotStart) || isInDateRange(endTime, startTime, startTime) || event.isAllDay);
            },
            _slotIndex: function (date) {
                return this._slotIndices[getDate(date).getTime()];
            },
            _positionMobileEvent: function (slotRange, element, group) {
                var startSlot = slotRange.start;
                if (slotRange.start.offsetLeft > slotRange.end.offsetLeft) {
                    startSlot = slotRange.end;
                }
                var startIndex = slotRange.start.index;
                var endIndex = startIndex;
                var eventCount = 3;
                var events = SchedulerView.collidingEvents(slotRange.events(), startIndex, endIndex);
                events.push({
                    element: element,
                    start: startIndex,
                    end: endIndex
                });
                var rows = SchedulerView.createRows(events);
                var slot = slotRange.collection.at(startIndex);
                var container = slot.container;
                if (!container) {
                    container = $(kendo.format('<div class="k-events-container" style="top:{0};left:{1};width:{2}"/>', startSlot.offsetTop + startSlot.firstChildTop + startSlot.firstChildHeight - 3 + 'px', startSlot.offsetLeft + 'px', startSlot.offsetWidth + 'px'));
                    slot.container = container;
                    this.content[0].appendChild(container[0]);
                }
                if (rows.length <= eventCount) {
                    slotRange.addEvent({
                        element: element,
                        start: startIndex,
                        end: endIndex,
                        groupIndex: startSlot.groupIndex
                    });
                    group._continuousEvents.push({
                        element: element,
                        uid: element.attr(kendo.attr('uid')),
                        start: slotRange.start,
                        end: slotRange.end
                    });
                    container[0].appendChild(element[0]);
                }
            },
            _positionEvent: function (slotRange, element, group) {
                var eventHeight = this.options.eventHeight;
                var startSlot = slotRange.start;
                if (slotRange.start.offsetLeft > slotRange.end.offsetLeft) {
                    startSlot = slotRange.end;
                }
                var startIndex = slotRange.start.index;
                var endIndex = slotRange.end.index;
                var eventCount = startSlot.eventCount;
                var events = SchedulerView.collidingEvents(slotRange.events(), startIndex, endIndex);
                var rightOffset = startIndex !== endIndex ? 5 : 4;
                events.push({
                    element: element,
                    start: startIndex,
                    end: endIndex
                });
                var rows = SchedulerView.createRows(events);
                for (var idx = 0, length = Math.min(rows.length, eventCount); idx < length; idx++) {
                    var rowEvents = rows[idx].events;
                    var eventTop = startSlot.offsetTop + startSlot.firstChildHeight + idx * eventHeight + 3 * idx + 'px';
                    for (var j = 0, eventLength = rowEvents.length; j < eventLength; j++) {
                        rowEvents[j].element[0].style.top = eventTop;
                    }
                }
                if (rows.length > eventCount) {
                    for (var slotIndex = startIndex; slotIndex <= endIndex; slotIndex++) {
                        var collection = slotRange.collection;
                        var slot = collection.at(slotIndex);
                        if (slot.more) {
                            return;
                        }
                        slot.more = $(MORE_BUTTON_TEMPLATE({
                            ns: kendo.ns,
                            start: slotIndex,
                            end: slotIndex,
                            width: slot.clientWidth - 2,
                            left: slot.offsetLeft + 2,
                            top: slot.offsetTop + slot.firstChildHeight + eventCount * eventHeight + 3 * eventCount
                        }));
                        this.content[0].appendChild(slot.more[0]);
                    }
                } else {
                    slotRange.addEvent({
                        element: element,
                        start: startIndex,
                        end: endIndex,
                        groupIndex: startSlot.groupIndex
                    });
                    element[0].style.width = slotRange.innerWidth() - rightOffset + 'px';
                    element[0].style.left = startSlot.offsetLeft + 2 + 'px';
                    element[0].style.height = eventHeight + 'px';
                    group._continuousEvents.push({
                        element: element,
                        uid: element.attr(kendo.attr('uid')),
                        start: slotRange.start,
                        end: slotRange.end
                    });
                    element.appendTo(this.content);
                }
            },
            _slotByPosition: function (x, y) {
                var offset = this.content.offset();
                x -= offset.left;
                y -= offset.top;
                y += this.content[0].scrollTop;
                x += this.content[0].scrollLeft;
                x = Math.ceil(x);
                y = Math.ceil(y);
                for (var groupIndex = 0; groupIndex < this.groups.length; groupIndex++) {
                    var slot = this.groups[groupIndex].daySlotByPosition(x, y);
                    if (slot) {
                        return slot;
                    }
                }
                return null;
            },
            _createResizeHint: function (range) {
                var left = range.startSlot().offsetLeft;
                var top = range.start.offsetTop;
                var width = range.innerWidth();
                var height = range.start.clientHeight - 2;
                var hint = SchedulerView.fn._createResizeHint.call(this, left, top, width, height);
                hint.appendTo(this.content);
                this._resizeHint = this._resizeHint.add(hint);
            },
            _updateResizeHint: function (event, groupIndex, startTime, endTime) {
                this._removeResizeHint();
                var group = this.groups[groupIndex];
                var ranges = group.ranges(startTime, endTime, true, event.isAllDay);
                for (var rangeIndex = 0; rangeIndex < ranges.length; rangeIndex++) {
                    this._createResizeHint(ranges[rangeIndex]);
                }
                this._resizeHint.find('.k-label-top,.k-label-bottom').text('');
                this._resizeHint.first().addClass('k-first').find('.k-label-top').text(kendo.toString(kendo.timezone.toLocalDate(startTime), 'M/dd'));
                this._resizeHint.last().addClass('k-last').find('.k-label-bottom').text(kendo.toString(kendo.timezone.toLocalDate(endTime), 'M/dd'));
            },
            _updateMoveHint: function (event, groupIndex, distance) {
                var start = kendo.date.toUtcTime(event.start) + distance;
                var end = start + event.duration();
                var group = this.groups[groupIndex];
                var ranges = group.ranges(start, end, true, event.isAllDay);
                this._removeMoveHint();
                for (var rangeIndex = 0; rangeIndex < ranges.length; rangeIndex++) {
                    var range = ranges[rangeIndex];
                    var startSlot = range.startSlot();
                    var endSlot = range.endSlot();
                    var hint = this._createEventElement(event.clone({
                        head: range.head,
                        tail: range.tail
                    }));
                    hint.css({
                        left: startSlot.offsetLeft + 2,
                        top: startSlot.offsetTop + startSlot.firstChildHeight,
                        height: this.options.eventHeight,
                        width: range.innerWidth() - (startSlot.index !== endSlot.index ? 5 : 4)
                    });
                    hint.addClass('k-event-drag-hint');
                    hint.appendTo(this.content);
                    this._moveHint = this._moveHint.add(hint);
                }
            },
            _groups: function () {
                var groupCount = this._groupCount();
                var columnCount = NUMBER_OF_COLUMNS;
                var rowCount = NUMBER_OF_ROWS;
                this.groups = [];
                for (var idx = 0; idx < groupCount; idx++) {
                    this._addResourceView(idx);
                }
                var tableRows = this.content[0].getElementsByTagName('tr');
                var startDate = this.startDate();
                for (var groupIndex = 0; groupIndex < groupCount; groupIndex++) {
                    var cellCount = 0;
                    var rowMultiplier = 0;
                    if (this._isVerticallyGrouped()) {
                        rowMultiplier = groupIndex;
                    }
                    for (var rowIndex = rowMultiplier * rowCount; rowIndex < (rowMultiplier + 1) * rowCount; rowIndex++) {
                        var group = this.groups[groupIndex];
                        var collection = group.addDaySlotCollection(kendo.date.addDays(startDate, cellCount), kendo.date.addDays(this.startDate(), cellCount + columnCount));
                        var tableRow = tableRows[rowIndex];
                        var cells = tableRow.children;
                        var cellMultiplier = 0;
                        tableRow.setAttribute('role', 'row');
                        if (!this._isVerticallyGrouped()) {
                            cellMultiplier = groupIndex;
                        }
                        for (var cellIndex = cellMultiplier * columnCount; cellIndex < (cellMultiplier + 1) * columnCount; cellIndex++) {
                            var cell = cells[cellIndex];
                            var clientHeight = cell.clientHeight;
                            var firstChildHeight = cell.children.length ? cell.children[0].offsetHeight + 3 : 0;
                            var start = kendo.date.addDays(startDate, cellCount);
                            var end = kendo.date.MS_PER_DAY;
                            if (startDate.getHours() !== start.getHours()) {
                                end += (startDate.getHours() - start.getHours()) * kendo.date.MS_PER_HOUR;
                            }
                            start = kendo.date.toUtcTime(start);
                            end += start;
                            cellCount++;
                            var eventCount = Math.floor((clientHeight - firstChildHeight - this.options.moreButtonHeight) / (this.options.eventHeight + 3));
                            cell.setAttribute('role', 'gridcell');
                            cell.setAttribute('aria-selected', false);
                            collection.addDaySlot(cell, start, end, eventCount);
                        }
                    }
                }
            },
            render: function (events) {
                this.content.children('.k-event,.k-more-events,.k-events-container').remove();
                this._groups();
                events = new kendo.data.Query(events).sort([
                    {
                        field: 'start',
                        dir: 'asc'
                    },
                    {
                        field: 'end',
                        dir: 'desc'
                    }
                ]).toArray();
                var resources = this.groupedResources;
                if (resources.length) {
                    this._renderGroups(events, resources, 0, 1);
                } else {
                    this._renderEvents(events, 0);
                }
                this.refreshLayout();
                this.trigger('activate');
            },
            _renderEvents: function (events, groupIndex) {
                var event;
                var idx;
                var length;
                var isMobilePhoneView = this._isMobilePhoneView();
                for (idx = 0, length = events.length; idx < length; idx++) {
                    event = events[idx];
                    if (this._isInDateSlot(event)) {
                        var group = this.groups[groupIndex];
                        if (!group._continuousEvents) {
                            group._continuousEvents = [];
                        }
                        var ranges = group.slotRanges(event, true);
                        var rangeCount = ranges.length;
                        for (var rangeIndex = 0; rangeIndex < rangeCount; rangeIndex++) {
                            var range = ranges[rangeIndex];
                            var start = event.start;
                            var end = event.end;
                            if (rangeCount > 1) {
                                if (rangeIndex === 0) {
                                    end = range.end.endDate();
                                } else if (rangeIndex == rangeCount - 1) {
                                    start = range.start.startDate();
                                } else {
                                    start = range.start.startDate();
                                    end = range.end.endDate();
                                }
                            }
                            var occurrence = event.clone({
                                start: start,
                                end: end,
                                head: range.head,
                                tail: range.tail
                            });
                            if (isMobilePhoneView) {
                                this._positionMobileEvent(range, this._createEventElement(occurrence), group);
                            } else {
                                this._positionEvent(range, this._createEventElement(occurrence), group);
                            }
                        }
                    }
                }
            },
            _renderGroups: function (events, resources, offset, columnLevel) {
                var resource = resources[0];
                if (resource) {
                    var view = resource.dataSource.view();
                    for (var itemIdx = 0; itemIdx < view.length; itemIdx++) {
                        var value = this._resourceValue(resource, view[itemIdx]);
                        var tmp = new kendo.data.Query(events).filter({
                            field: resource.field,
                            operator: SchedulerView.groupEqFilter(value)
                        }).toArray();
                        if (resources.length > 1) {
                            offset = this._renderGroups(tmp, resources.slice(1), offset++, columnLevel + 1);
                        } else {
                            this._renderEvents(tmp, offset++);
                        }
                    }
                }
                return offset;
            },
            _groupCount: function () {
                var resources = this.groupedResources;
                if (resources.length) {
                    if (this._isVerticallyGrouped()) {
                        return this._rowCountForLevel(resources.length - 1);
                    } else {
                        return this._columnCountForLevel(resources.length) / this._columnOffsetForResource(resources.length);
                    }
                }
                return 1;
            },
            _columnOffsetForResource: function (index) {
                return this._columnCountForLevel(index) / this._columnCountForLevel(index - 1);
            },
            destroy: function () {
                if (this.table) {
                    this.table.removeClass('k-scheduler-monthview');
                }
                if (this.content) {
                    this.content.off(NS);
                }
                if (this.element) {
                    this.element.off(NS);
                }
                SchedulerView.fn.destroy.call(this);
                if (this._isMobile() && !this._isMobilePhoneView() && this.options.editable) {
                    if (this.options.editable.create !== false) {
                        this._addUserEvents.destroy();
                    }
                    if (this.options.editable.update !== false) {
                        this._editUserEvents.destroy();
                    }
                }
            },
            events: [
                'remove',
                'add',
                'edit',
                'navigate'
            ],
            options: {
                title: 'Month',
                name: 'month',
                eventHeight: 25,
                moreButtonHeight: 13,
                editable: true,
                selectedDateFormat: '{0:y}',
                selectedShortDateFormat: '{0:y}',
                groupHeaderTemplate: '#=text#',
                dayTemplate: DAY_TEMPLATE,
                eventTemplate: EVENT_TEMPLATE
            }
        });
        function shiftArray(array, idx) {
            return array.slice(idx).concat(array.slice(0, idx));
        }
        function firstVisibleMonthDay(date, calendarInfo) {
            var firstDay = calendarInfo.firstDay, firstVisibleDay = new Date(date.getFullYear(), date.getMonth(), 0, date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());
            while (firstVisibleDay.getDay() != firstDay) {
                kendo.date.setTime(firstVisibleDay, -1 * MS_PER_DAY);
            }
            return firstVisibleDay;
        }
        function isInDateRange(value, min, max) {
            var msMin = min, msMax = max, msValue;
            msValue = value;
            return msValue >= msMin && msValue <= msMax;
        }
    }(window.kendo.jQuery));
    return window.kendo;
}, typeof define == 'function' && define.amd ? define : function (a1, a2, a3) {
    (a3 || a2)();
}));